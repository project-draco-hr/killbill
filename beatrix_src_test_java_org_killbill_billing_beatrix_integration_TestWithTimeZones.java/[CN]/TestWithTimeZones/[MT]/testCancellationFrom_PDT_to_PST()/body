{
  clock.setTime(new DateTime("2015-11-01T07:01:01.000Z"));
  final DateTimeZone tz=DateTimeZone.forID("America/Los_Angeles");
  final AccountData accountData=new MockAccountBuilder().name(UUID.randomUUID().toString().substring(1,8)).firstNameLength(6).email(UUID.randomUUID().toString().substring(1,8)).phone(UUID.randomUUID().toString().substring(1,8)).migrated(false).isNotifiedForInvoices(false).externalKey(UUID.randomUUID().toString().substring(1,8)).billingCycleDayLocal(1).currency(Currency.USD).paymentMethodId(UUID.randomUUID()).timeZone(tz).build();
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Blowdart",ProductCategory.BASE,BillingPeriod.MONTHLY,"notrial",null);
  final LocalDate effectiveDate=new LocalDate(clock.getUTCNow());
  Entitlement entitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,"Something",ImmutableList.<PlanPhasePriceOverride>of(),effectiveDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  final LocalDate cancellationDate=new LocalDate("2015-12-01",tz);
  entitlement=entitlement.cancelEntitlementWithDate(cancellationDate,true,ImmutableList.<PluginProperty>of(),callContext);
  Assert.assertEquals(entitlement.getEffectiveEndDate(),cancellationDate);
  busHandler.pushExpectedEvent(NextEvent.NULL_INVOICE);
  clock.setTime(new DateTime("2015-12-01T07:01:02"));
  assertListenerStatus();
  busHandler.pushExpectedEvents(NextEvent.CANCEL,NextEvent.BLOCK,NextEvent.NULL_INVOICE);
  clock.setTime(new DateTime("2015-12-01T08:01:02"));
  assertListenerStatus();
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  Assert.assertEquals(invoices.size(),1);
}
