{
  clock.setTime(new DateTime("2015-09-01T08:01:01.000Z"));
  final DateTimeZone tz=DateTimeZone.forID("America/Juneau");
  final AccountData accountData=new MockAccountBuilder().name(UUID.randomUUID().toString().substring(1,8)).firstNameLength(6).email(UUID.randomUUID().toString().substring(1,8)).phone(UUID.randomUUID().toString().substring(1,8)).migrated(false).isNotifiedForInvoices(false).externalKey(UUID.randomUUID().toString().substring(1,8)).billingCycleDayLocal(1).currency(Currency.USD).paymentMethodId(UUID.randomUUID()).timeZone(tz).build();
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  final List<ExpectedInvoiceItemCheck> expectedInvoices=new ArrayList<ExpectedInvoiceItemCheck>();
  TestDryRunArguments dryRun=new TestDryRunArguments(DryRunType.SUBSCRIPTION_ACTION,"Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,null,null,SubscriptionEventType.START_BILLING,null,null,clock.getUTCNow(),null);
  Invoice dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),clock.getUTCToday(),dryRun,callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,9,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  final DefaultEntitlement bpSubscription=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  subscriptionChecker.checkSubscriptionCreated(bpSubscription.getId(),internalCallContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,expectedInvoices);
  expectedInvoices.clear();
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(30);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2015,10,1),new LocalDate(2015,11,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  LocalDate startDate=new LocalDate(2015,11,1);
  for (int i=0; i < 18; i++) {
    LocalDate endDate=startDate.plusMonths(1);
    busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
    clock.addMonths(1);
    assertListenerStatus();
    invoiceChecker.checkInvoice(account.getId(),i + 3,callContext,new ExpectedInvoiceItemCheck(startDate,endDate,InvoiceItemType.RECURRING,new BigDecimal("249.95")));
    startDate=endDate;
  }
}
