{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<List<PaymentTransactionModelDao>>(){
    @Override public List<PaymentTransactionModelDao> inTransaction(    final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
      final TransactionSqlDao transactional=entitySqlDaoWrapperFactory.become(TransactionSqlDao.class);
      final Collection<String> allTransactionStatus=ImmutableList.copyOf(Iterables.transform(transactionStatuses,new Function<TransactionStatus,String>(){
        @Override public String apply(        final TransactionStatus input){
          return input.toString();
        }
      }
));
      return transactional.getByTransactionStatusPriorDateAcrossTenants(allTransactionStatus,createdBeforeDate.toDate(),createdAfterDate.toDate(),limit);
    }
  }
);
}
