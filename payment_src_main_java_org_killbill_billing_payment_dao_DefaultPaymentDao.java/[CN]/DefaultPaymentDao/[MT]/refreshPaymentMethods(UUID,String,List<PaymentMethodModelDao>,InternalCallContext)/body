{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<List<PaymentMethodModelDao>>(){
    @Override public List<PaymentMethodModelDao> inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final PaymentMethodSqlDao transactional=entitySqlDaoWrapperFactory.become(PaymentMethodSqlDao.class);
      final List<PaymentMethodModelDao> allPaymentMethodsForAccount=transactional.getByAccountIdIncludedDelete(accountId.toString(),context);
      final Collection<PaymentMethodModelDao> existingPaymentMethods=Collections2.filter(allPaymentMethodsForAccount,new Predicate<PaymentMethodModelDao>(){
        @Override public boolean apply(        final PaymentMethodModelDao paymentMethod){
          return pluginName.equals(paymentMethod.getPluginName());
        }
      }
);
      for (      final PaymentMethodModelDao finalPaymentMethod : newPaymentMethods) {
        PaymentMethodModelDao foundExistingPaymentMethod=null;
        for (        final PaymentMethodModelDao existingPaymentMethod : existingPaymentMethods) {
          if (existingPaymentMethod.equals(finalPaymentMethod)) {
            foundExistingPaymentMethod=existingPaymentMethod;
            break;
          }
 else           if (existingPaymentMethod.equalsButActive(finalPaymentMethod)) {
            undeletedPaymentMethodInTransaction(entitySqlDaoWrapperFactory,existingPaymentMethod.getId(),context);
            foundExistingPaymentMethod=existingPaymentMethod;
            break;
          }
        }
        if (foundExistingPaymentMethod == null) {
          insertPaymentMethodInTransaction(entitySqlDaoWrapperFactory,finalPaymentMethod,context);
        }
 else {
          existingPaymentMethods.remove(foundExistingPaymentMethod);
        }
      }
      for (      final PaymentMethodModelDao existingPaymentMethod : existingPaymentMethods) {
        if (existingPaymentMethod.isActive()) {
          deletedPaymentMethodInTransaction(entitySqlDaoWrapperFactory,existingPaymentMethod.getId(),context);
        }
      }
      return transactional.getByAccountId(accountId.toString(),context);
    }
  }
);
}
