{
  try {
    accountUserApi.getAccountById(accountId,internalCallContextFactory.createInternalTenantContext(context));
  }
 catch (  AccountApiException e) {
    log.warn("Unable to find account for id {}",accountId);
    return null;
  }
  final InvoiceModelDao migrationInvoice=new InvoiceModelDao(accountId,clock.getUTCToday(),targetDate,currency,true);
  final InvoiceItemModelDao migrationInvoiceItem=new InvoiceItemModelDao(context.getCreatedDate(),InvoiceItemType.FIXED,migrationInvoice.getId(),accountId,null,null,MigrationPlan.MIGRATION_PLAN_NAME,MigrationPlan.MIGRATION_PLAN_PHASE_NAME,targetDate,null,balance,null,currency,null);
  dao.createInvoice(migrationInvoice,ImmutableList.<InvoiceItemModelDao>of(migrationInvoiceItem),ImmutableList.<InvoicePaymentModelDao>of(),true,internalCallContextFactory.createInternalCallContext(accountId,context));
  return migrationInvoice.getId();
}
