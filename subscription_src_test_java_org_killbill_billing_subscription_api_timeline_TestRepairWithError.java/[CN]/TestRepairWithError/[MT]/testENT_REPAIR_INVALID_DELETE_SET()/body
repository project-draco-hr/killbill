{
  test.withException(new TestWithExceptionCallback(){
    @Override public void doTest() throws SubscriptionBaseRepairException, SubscriptionBaseApiException {
      Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(3));
      clock.addDeltaFromReality(it.toDurationMillis());
      testListener.pushExpectedEvent(NextEvent.CHANGE);
      final DateTime changeTime=clock.getUTCNow();
      baseSubscription.changePlanWithDate("Assault-Rifle",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null,changeTime,callContext);
      assertListenerStatus();
      testListener.pushExpectedEvent(NextEvent.PHASE);
      it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(40));
      clock.addDeltaFromReality(it.toDurationMillis());
      assertListenerStatus();
      final BundleBaseTimeline bundleRepair=repairApi.getBundleTimeline(bundle.getId(),callContext);
      testUtil.sortEventsOnBundle(bundleRepair);
      final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.EVERGREEN);
      final NewEvent ne=testUtil.createNewEvent(SubscriptionBaseTransitionType.CHANGE,baseSubscription.getStartDate().plusDays(10),spec);
      final DeletedEvent de=testUtil.createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(1).getEventId());
      final SubscriptionBaseTimeline sRepair=testUtil.createSubscriptionRepair(baseSubscription.getId(),Collections.singletonList(de),Collections.singletonList(ne));
      final BundleBaseTimeline bRepair=testUtil.createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(sRepair));
      repairApi.repairBundle(bRepair,true,callContext);
    }
  }
,ErrorCode.SUB_REPAIR_INVALID_DELETE_SET);
}
