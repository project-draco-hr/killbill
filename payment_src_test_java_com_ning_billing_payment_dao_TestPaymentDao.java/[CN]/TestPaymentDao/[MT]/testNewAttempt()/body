{
  final UUID accountId=UUID.randomUUID();
  final UUID invoiceId=UUID.randomUUID();
  final UUID paymentMethodId=UUID.randomUUID();
  final BigDecimal amount=new BigDecimal(13);
  final Currency currency=Currency.USD;
  final DateTime effectiveDate=clock.getUTCNow();
  final PaymentModelDao payment=new PaymentModelDao(accountId,invoiceId,paymentMethodId,amount,currency,effectiveDate);
  final PaymentAttemptModelDao firstAttempt=new PaymentAttemptModelDao(accountId,invoiceId,payment.getId(),clock.getUTCNow(),amount);
  PaymentModelDao savedPayment=paymentDao.insertPaymentWithAttempt(payment,firstAttempt,context);
  final BigDecimal newAmount=new BigDecimal(15.23).setScale(2,RoundingMode.HALF_EVEN);
  final PaymentAttemptModelDao secondAttempt=new PaymentAttemptModelDao(accountId,invoiceId,payment.getId(),clock.getUTCNow(),newAmount);
  paymentDao.insertNewAttemptForPayment(payment.getId(),secondAttempt,context);
  final List<PaymentModelDao> payments=paymentDao.getPaymentsForInvoice(invoiceId);
  assertEquals(payments.size(),1);
  savedPayment=payments.get(0);
  assertEquals(savedPayment.getId(),payment.getId());
  assertEquals(savedPayment.getAccountId(),accountId);
  assertEquals(savedPayment.getInvoiceId(),invoiceId);
  assertEquals(savedPayment.getPaymentMethodId(),paymentMethodId);
  assertEquals(savedPayment.getAmount().compareTo(newAmount),0);
  assertEquals(savedPayment.getCurrency(),currency);
  assertEquals(savedPayment.getEffectiveDate().compareTo(effectiveDate),0);
  assertEquals(savedPayment.getPaymentStatus(),PaymentStatus.UNKNOWN);
  final List<PaymentAttemptModelDao> attempts=paymentDao.getAttemptsForPayment(payment.getId());
  assertEquals(attempts.size(),2);
  final PaymentAttemptModelDao savedAttempt1=attempts.get(0);
  assertEquals(savedAttempt1.getPaymentId(),payment.getId());
  assertEquals(savedAttempt1.getAccountId(),accountId);
  assertEquals(savedAttempt1.getInvoiceId(),invoiceId);
  assertEquals(savedAttempt1.getPaymentStatus(),PaymentStatus.UNKNOWN);
  assertEquals(savedAttempt1.getGatewayErrorCode(),null);
  assertEquals(savedAttempt1.getGatewayErrorMsg(),null);
  assertEquals(savedAttempt1.getRequestedAmount().compareTo(amount),0);
  final PaymentAttemptModelDao savedAttempt2=attempts.get(1);
  assertEquals(savedAttempt2.getPaymentId(),payment.getId());
  assertEquals(savedAttempt2.getAccountId(),accountId);
  assertEquals(savedAttempt2.getInvoiceId(),invoiceId);
  assertEquals(savedAttempt2.getPaymentStatus(),PaymentStatus.UNKNOWN);
  assertEquals(savedAttempt2.getGatewayErrorCode(),null);
  assertEquals(savedAttempt2.getGatewayErrorMsg(),null);
  assertEquals(savedAttempt2.getRequestedAmount().compareTo(newAmount),0);
}
