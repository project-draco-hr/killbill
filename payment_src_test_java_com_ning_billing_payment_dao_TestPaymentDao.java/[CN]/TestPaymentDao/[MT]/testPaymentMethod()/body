{
  final UUID paymentMethodId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final String pluginName="nobody";
  final Boolean isActive=Boolean.TRUE;
  final String externalPaymentId=UUID.randomUUID().toString();
  final PaymentMethodModelDao method=new PaymentMethodModelDao(paymentMethodId,null,null,accountId,pluginName,isActive,externalPaymentId);
  PaymentMethodModelDao savedMethod=paymentDao.insertPaymentMethod(method,internalCallContext);
  assertEquals(savedMethod.getId(),paymentMethodId);
  assertEquals(savedMethod.getAccountId(),accountId);
  assertEquals(savedMethod.getPluginName(),pluginName);
  assertEquals(savedMethod.isActive(),isActive);
  final List<PaymentMethodModelDao> result=paymentDao.getPaymentMethods(accountId,internalCallContext);
  assertEquals(result.size(),1);
  savedMethod=result.get(0);
  assertEquals(savedMethod.getId(),paymentMethodId);
  assertEquals(savedMethod.getAccountId(),accountId);
  assertEquals(savedMethod.getPluginName(),pluginName);
  assertEquals(savedMethod.isActive(),isActive);
  assertEquals(savedMethod.getExternalId(),externalPaymentId);
  paymentDao.deletedPaymentMethod(paymentMethodId,internalCallContext);
  final PaymentMethodModelDao deletedPaymentMethod=paymentDao.getPaymentMethod(paymentMethodId,internalCallContext);
  assertNull(deletedPaymentMethod);
}
