{
  final UUID accountId=UUID.randomUUID();
  final UUID invoiceId=UUID.randomUUID();
  final BigDecimal amount=new BigDecimal(13);
  final Currency currency=Currency.USD;
  final DateTime effectiveDate=clock.getUTCNow();
  final PaymentModelDao payment=new PaymentModelDao(accountId,invoiceId,amount,currency,effectiveDate);
  final PaymentAttemptModelDao attempt=new PaymentAttemptModelDao(accountId,invoiceId,payment.getId(),clock.getUTCNow(),amount);
  PaymentModelDao savedPayment=paymentDao.insertPaymentWithAttempt(payment,attempt,context);
  final PaymentStatus paymentStatus=PaymentStatus.SUCCESS;
  final String paymentError="No error";
  paymentDao.updateStatusForPaymentWithAttempt(payment.getId(),paymentStatus,paymentError,null,attempt.getId(),context);
  final List<PaymentModelDao> payments=paymentDao.getPaymentsForInvoice(invoiceId);
  assertEquals(payments.size(),1);
  savedPayment=payments.get(0);
  assertEquals(savedPayment.getId(),payment.getId());
  assertEquals(savedPayment.getAccountId(),accountId);
  assertEquals(savedPayment.getInvoiceId(),invoiceId);
  assertEquals(savedPayment.getPaymentMethodId(),null);
  assertEquals(savedPayment.getAmount().compareTo(amount),0);
  assertEquals(savedPayment.getCurrency(),currency);
  assertEquals(savedPayment.getEffectiveDate().compareTo(effectiveDate),0);
  assertEquals(savedPayment.getPaymentStatus(),PaymentStatus.SUCCESS);
  final List<PaymentAttemptModelDao> attempts=paymentDao.getAttemptsForPayment(payment.getId());
  assertEquals(attempts.size(),1);
  final PaymentAttemptModelDao savedAttempt=attempts.get(0);
  assertEquals(savedAttempt.getId(),attempt.getId());
  assertEquals(savedAttempt.getPaymentId(),payment.getId());
  assertEquals(savedAttempt.getAccountId(),accountId);
  assertEquals(savedAttempt.getInvoiceId(),invoiceId);
  assertEquals(savedAttempt.getPaymentStatus(),PaymentStatus.SUCCESS);
  assertEquals(savedAttempt.getPaymentError(),paymentError);
  assertEquals(savedAttempt.getRequestedAmount().compareTo(amount),0);
}
