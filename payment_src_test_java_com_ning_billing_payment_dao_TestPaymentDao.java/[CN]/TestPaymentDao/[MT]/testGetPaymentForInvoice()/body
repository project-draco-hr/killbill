{
  final UUID invoiceId=UUID.randomUUID();
  final UUID paymentAttemptId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final String paymentId=UUID.randomUUID().toString();
  final BigDecimal invoiceAmount=BigDecimal.TEN;
  ClockMock clock=new ClockMock();
  CallContext thisContext=new DefaultCallContext("Payment Tests",CallOrigin.TEST,UserType.TEST,clock);
  PaymentAttempt originalPaymentAttempt=new PaymentAttempt(paymentAttemptId,invoiceId,accountId,invoiceAmount,Currency.USD,clock.getUTCNow(),clock.getUTCNow(),paymentId,0);
  PaymentAttempt attempt=paymentDao.createPaymentAttempt(originalPaymentAttempt,thisContext);
  List<PaymentAttempt> attemptsFromGet=paymentDao.getPaymentAttemptsForInvoiceId(invoiceId.toString());
  Assert.assertEquals(attempt,attemptsFromGet.get(0));
  PaymentAttempt attempt3=paymentDao.getPaymentAttemptsForInvoiceIds(Arrays.asList(invoiceId.toString())).get(0);
  Assert.assertEquals(attempt,attempt3);
  PaymentAttempt attempt4=paymentDao.getPaymentAttemptById(attempt3.getPaymentAttemptId());
  Assert.assertEquals(attempt3,attempt4);
  PaymentInfo originalPaymentInfo=new DefaultPaymentInfo.Builder().setPaymentId(paymentId).setAmount(invoiceAmount).setStatus("Processed").setBankIdentificationNumber("1234").setPaymentNumber("12345").setPaymentMethodId("12345").setReferenceId("12345").setType("Electronic").setCreatedDate(clock.getUTCNow()).setUpdatedDate(clock.getUTCNow()).setEffectiveDate(clock.getUTCNow()).build();
  paymentDao.savePaymentInfo(originalPaymentInfo,thisContext);
  PaymentInfo paymentInfo=paymentDao.getPaymentInfo(Arrays.asList(invoiceId.toString())).get(0);
  Assert.assertEquals(paymentInfo,originalPaymentInfo);
  clock.setDeltaFromReality(60 * 60 * 1000);
  paymentDao.updatePaymentInfo(originalPaymentInfo.getPaymentMethod(),originalPaymentInfo.getPaymentId(),originalPaymentInfo.getCardType(),originalPaymentInfo.getCardCountry(),thisContext);
  paymentInfo=paymentDao.getPaymentInfo(Arrays.asList(invoiceId.toString())).get(0);
  Assert.assertEquals(paymentInfo.getCreatedDate().compareTo(attempt.getCreatedDate()),0);
  Assert.assertTrue(paymentInfo.getUpdatedDate().isAfter(originalPaymentInfo.getUpdatedDate()));
}
