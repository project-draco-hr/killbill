{
  final UUID invoiceId=UUID.randomUUID();
  final UUID paymentAttemptId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final String paymentId=UUID.randomUUID().toString();
  final BigDecimal invoiceAmount=BigDecimal.TEN;
  final DateTime now=new DateTime(DateTimeZone.UTC);
  PaymentAttempt originalPaymenAttempt=new PaymentAttempt(paymentAttemptId,invoiceId,accountId,invoiceAmount,Currency.USD,now,now,paymentId,null,null);
  PaymentAttempt attempt=paymentDao.createPaymentAttempt(originalPaymenAttempt);
  PaymentAttempt attempt2=paymentDao.getPaymentAttemptForInvoiceId(invoiceId.toString());
  Assert.assertEquals(attempt,attempt2);
  PaymentAttempt attempt3=paymentDao.getPaymentAttemptsForInvoiceIds(Arrays.asList(invoiceId.toString())).get(0);
  Assert.assertEquals(attempt,attempt3);
  PaymentAttempt attempt4=paymentDao.getPaymentAttemptById(attempt3.getPaymentAttemptId());
  Assert.assertEquals(attempt3,attempt4);
  PaymentInfo originalPaymentInfo=new PaymentInfo.Builder().setPaymentId(paymentId).setAmount(invoiceAmount).setStatus("Processed").setBankIdentificationNumber("1234").setPaymentNumber("12345").setPaymentMethodId("12345").setReferenceId("12345").setType("Electronic").setCreatedDate(now).setUpdatedDate(now).setEffectiveDate(now).build();
  paymentDao.savePaymentInfo(originalPaymentInfo);
  PaymentInfo paymentInfo=paymentDao.getPaymentInfo(Arrays.asList(invoiceId.toString())).get(0);
  Assert.assertEquals(originalPaymentInfo,paymentInfo);
}
