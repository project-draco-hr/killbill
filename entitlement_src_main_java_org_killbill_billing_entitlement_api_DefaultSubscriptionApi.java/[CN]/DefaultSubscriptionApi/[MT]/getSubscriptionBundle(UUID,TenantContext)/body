{
  final Long accountRecordId=nonEntityDao.retrieveAccountRecordIdFromObject(bundleId,ObjectType.BUNDLE,cacheControllerDispatcher.getCacheController(CacheType.ACCOUNT_RECORD_ID));
  final UUID accountId=nonEntityDao.retrieveIdFromObject(accountRecordId,ObjectType.ACCOUNT,cacheControllerDispatcher.getCacheController(CacheType.OBJECT_ID));
  final Optional<SubscriptionBundle> bundleOptional=Iterables.<SubscriptionBundle>tryFind(getSubscriptionBundlesForAccount(accountId,context),new Predicate<SubscriptionBundle>(){
    @Override public boolean apply(    final SubscriptionBundle bundle){
      return bundle.getId().equals(bundleId);
    }
  }
);
  if (!bundleOptional.isPresent()) {
    throw new SubscriptionApiException(ErrorCode.SUB_GET_INVALID_BUNDLE_ID,bundleId);
  }
 else {
    return bundleOptional.get();
  }
}
