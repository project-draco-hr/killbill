{
  final Long accountRecordId=nonEntityDao.retrieveAccountRecordIdFromObject(entitlementId,ObjectType.SUBSCRIPTION,cacheControllerDispatcher.getCacheController(CacheType.ACCOUNT_RECORD_ID));
  final UUID accountId=nonEntityDao.retrieveIdFromObject(accountRecordId,ObjectType.ACCOUNT,cacheControllerDispatcher.getCacheController(CacheType.OBJECT_ID));
  final AccountEntitlements accountEntitlements;
  try {
    accountEntitlements=entitlementInternalApi.getAllEntitlementsForAccountId(accountId,context);
  }
 catch (  EntitlementApiException e) {
    throw new SubscriptionApiException(e);
  }
  final Iterable<Subscription> accountSubscriptions=Iterables.<Subscription>concat(buildSubscriptionsFromEntitlements(accountEntitlements).values());
  return Iterables.<Subscription>find(accountSubscriptions,new Predicate<Subscription>(){
    @Override public boolean apply(    final Subscription subscription){
      return subscription.getId().equals(entitlementId);
    }
  }
);
}
