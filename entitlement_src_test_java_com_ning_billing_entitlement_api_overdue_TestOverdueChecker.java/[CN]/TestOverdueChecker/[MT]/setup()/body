{
  overdueAccessApi=BrainDeadProxyFactory.createBrainDeadProxyFor(OverdueAccessApi.class);
  subscription=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class);
  bundle=BrainDeadProxyFactory.createBrainDeadProxyFor(SubscriptionBundle.class);
  ((ZombieControl)bundle).addResult("getAccountId",new UUID(0L,0L));
  ((ZombieControl)bundle).addResult("getId",new UUID(0L,0L));
  ((ZombieControl)bundle).addResult("getKey","key");
  ((ZombieControl)subscription).addResult("getBundleId",new UUID(0L,0L));
  @SuppressWarnings("unchecked") final OverdueStatesBundle bundleODS=new MockOverdueStatesBundle(new DefaultOverdueState[]{CLEAR_BUNDLE_STATE,BLOCKED_BUNDLE_STATE,DISABLED_BUNDLE_STATE,DISABLED_AND_BLOCKED_BUNDLE_STATE});
  Injector i=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(OverdueChecker.class).to(DefaultOverdueChecker.class).asEagerSingleton();
      CatalogService catalogService=BrainDeadProxyFactory.createBrainDeadProxyFor(CatalogService.class);
      ((ZombieControl)catalogService).addResult("getCurrentCatalog",new MockCatalog(){
        @Override public void setOverdueRules(){
          OverdueRules overdueRules=new MockOverdueRules().setOverdueStatesBundle(bundleODS);
          setOverdueRules(overdueRules);
        }
      }
);
      bind(CatalogService.class).toInstance(catalogService);
      bind(OverdueAccessDao.class).toInstance(BrainDeadProxyFactory.createBrainDeadProxyFor(OverdueAccessDao.class));
      bind(OverdueAccessApi.class).toInstance(overdueAccessApi);
      EntitlementDao entitlementDao=BrainDeadProxyFactory.createBrainDeadProxyFor(EntitlementDao.class);
      bind(EntitlementDao.class).toInstance(entitlementDao);
      ((ZombieControl)entitlementDao).addResult("getSubscriptionBundleFromId",bundle);
    }
  }
);
  checker=i.getInstance(OverdueChecker.class);
}
