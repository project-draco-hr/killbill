{
  final BigDecimal amount=BigDecimal.TEN;
  final BigDecimal creditAdj=BigDecimal.ONE;
  final BigDecimal refundAdj=BigDecimal.ONE;
  final String invoiceId=UUID.randomUUID().toString();
  final LocalDate invoiceDate=clock.getUTCToday();
  final LocalDate targetDate=clock.getUTCToday();
  final String invoiceNumber=UUID.randomUUID().toString();
  final BigDecimal balance=BigDecimal.ZERO;
  final String accountId=UUID.randomUUID().toString();
  final InvoiceItemJsonSimple invoiceItemJsonSimple=createInvoiceItemJson();
  final List<AuditLogJson> auditLogs=createAuditLogsJson(clock.getUTCNow());
  final InvoiceJsonWithItems invoiceJsonWithItems=new InvoiceJsonWithItems(amount,creditAdj,refundAdj,invoiceId,invoiceDate,targetDate,invoiceNumber,balance,accountId,ImmutableList.<InvoiceItemJsonSimple>of(invoiceItemJsonSimple),auditLogs);
  Assert.assertEquals(invoiceJsonWithItems.getAmount(),amount);
  Assert.assertEquals(invoiceJsonWithItems.getCreditAdj(),creditAdj);
  Assert.assertEquals(invoiceJsonWithItems.getRefundAdj(),refundAdj);
  Assert.assertEquals(invoiceJsonWithItems.getInvoiceId(),invoiceId);
  Assert.assertEquals(invoiceJsonWithItems.getInvoiceDate(),invoiceDate);
  Assert.assertEquals(invoiceJsonWithItems.getTargetDate(),targetDate);
  Assert.assertEquals(invoiceJsonWithItems.getInvoiceNumber(),invoiceNumber);
  Assert.assertEquals(invoiceJsonWithItems.getBalance(),balance);
  Assert.assertEquals(invoiceJsonWithItems.getAccountId(),accountId);
  Assert.assertEquals(invoiceJsonWithItems.getItems().size(),1);
  Assert.assertEquals(invoiceJsonWithItems.getItems().get(0),invoiceItemJsonSimple);
  Assert.assertEquals(invoiceJsonWithItems.getAuditLogs(),auditLogs);
  final String asJson=mapper.writeValueAsString(invoiceJsonWithItems);
  final InvoiceJsonWithItems fromJson=mapper.readValue(asJson,InvoiceJsonWithItems.class);
  Assert.assertEquals(fromJson,invoiceJsonWithItems);
}
