{
  final UUID accountId=UUID.randomUUID();
  final ImmutableAccountData account=Mockito.mock(ImmutableAccountData.class);
  Mockito.when(account.getId()).thenReturn(accountId);
  Mockito.when(account.getTimeZone()).thenReturn(DateTimeZone.UTC);
  Mockito.when(accountInternalApi.getImmutableAccountDataById(Mockito.eq(account.getId()),Mockito.<InternalTenantContext>any())).thenReturn(account);
  final Invoice invoice=Mockito.mock(Invoice.class);
  Mockito.when(invoice.getInvoiceDate()).thenReturn(dateOfLastUnPaidInvoice);
  Mockito.when(invoice.getBalance()).thenReturn(BigDecimal.TEN);
  Mockito.when(invoice.getId()).thenReturn(UUID.randomUUID());
  final InvoiceItem item=Mockito.mock(InvoiceItem.class);
  final List<InvoiceItem> items=new ArrayList<InvoiceItem>();
  items.add(item);
  Mockito.when(invoice.getInvoiceItems()).thenReturn(items);
  final List<Invoice> invoices=new ArrayList<Invoice>();
  invoices.add(invoice);
  Mockito.when(invoiceInternalApi.getUnpaidInvoicesByAccountId(Mockito.<UUID>any(),Mockito.<LocalDate>any(),Mockito.<InternalTenantContext>any())).thenReturn(invoices);
  return account;
}
