{
  Assert.assertTrue(basePath.mkdir());
  System.setProperty("killbill.usage.timelines.spoolDir",basePath.getAbsolutePath());
  final MeterConfig config=new ConfigurationObjectFactory(System.getProperties()).build(MeterConfig.class);
  final int eventTypeId=dao.getOrAddEventCategory(EVENT_TYPE,internalCallContext);
  final int int2shortId=dao.getOrAddMetric(eventTypeId,"int2short",internalCallContext);
  final int long2intId=dao.getOrAddMetric(eventTypeId,"long2int",internalCallContext);
  final int long2shortId=dao.getOrAddMetric(eventTypeId,"long2short",internalCallContext);
  final int int2intId=dao.getOrAddMetric(eventTypeId,"int2int",internalCallContext);
  final int long2longId=dao.getOrAddMetric(eventTypeId,"long2long",internalCallContext);
  final int hostId=1;
  final TimelineEventHandler handler=new TimelineEventHandler(config,dao,timelineCoder,sampleCoder,new BackgroundDBChunkWriter(dao,config,internalCallContextFactory),new MockFileBackedBuffer());
  final Map<String,Object> event=ImmutableMap.<String,Object>of("int2short",new Integer(1),"long2int",new Long(Integer.MAX_VALUE),"long2short",new Long(2),"int2int",Integer.MAX_VALUE,"long2long",Long.MAX_VALUE);
  final Map<Integer,ScalarSample> output=convertEventToSamples(handler,event,EVENT_TYPE);
  Assert.assertEquals(output.get(int2shortId).getSampleValue(),(short)1);
  Assert.assertEquals(output.get(int2shortId).getSampleValue().getClass(),Short.class);
  Assert.assertEquals(output.get(long2intId).getSampleValue(),Integer.MAX_VALUE);
  Assert.assertEquals(output.get(long2intId).getSampleValue().getClass(),Integer.class);
  Assert.assertEquals(output.get(long2shortId).getSampleValue(),(short)2);
  Assert.assertEquals(output.get(long2shortId).getSampleValue().getClass(),Short.class);
  Assert.assertEquals(output.get(int2intId).getSampleValue(),Integer.MAX_VALUE);
  Assert.assertEquals(output.get(int2intId).getSampleValue().getClass(),Integer.class);
  Assert.assertEquals(output.get(long2longId).getSampleValue(),Long.MAX_VALUE);
  Assert.assertEquals(output.get(long2longId).getSampleValue().getClass(),Long.class);
}
