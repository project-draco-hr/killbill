{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final Iterable<PluginProperty> pendingPluginProperties=ImmutableList.<PluginProperty>of(new PluginProperty(MockPaymentProviderPlugin.PLUGIN_PROPERTY_PAYMENT_PLUGIN_STATUS_OVERRIDE,PaymentPluginStatus.PENDING,false));
  Payment payment=paymentApi.createAuthorizationWithPaymentControl(account,account.getPaymentMethodId(),null,requestedAmount,Currency.USD,UUID.randomUUID().toString(),UUID.randomUUID().toString(),pendingPluginProperties,PAYMENT_OPTIONS,callContext);
  Assert.assertEquals(payment.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getTransactions().size(),1);
  Assert.assertNotNull(((DefaultPaymentTransaction)payment.getTransactions().get(0)).getAttemptId());
  payment=paymentApi.createAuthorizationWithPaymentControl(account,payment.getPaymentMethodId(),payment.getId(),requestedAmount,payment.getCurrency(),payment.getExternalKey(),payment.getTransactions().get(0).getExternalKey(),ImmutableList.<PluginProperty>of(),PAYMENT_OPTIONS,callContext);
  Assert.assertEquals(payment.getAuthAmount().compareTo(requestedAmount),0);
  Assert.assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getTransactions().size(),1);
  Assert.assertNotNull(((DefaultPaymentTransaction)payment.getTransactions().get(0)).getAttemptId());
}
