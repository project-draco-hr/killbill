{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  Payment payment=paymentApi.createAuthorization(account,account.getPaymentMethodId(),null,requestedAmount,Currency.USD,UUID.randomUUID().toString(),UUID.randomUUID().toString(),ImmutableList.<PluginProperty>of(),callContext);
  Assert.assertEquals(payment.getAuthAmount().compareTo(requestedAmount),0);
  Assert.assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getTransactions().size(),1);
  Assert.assertNull(((DefaultPaymentTransaction)payment.getTransactions().get(0)).getAttemptId());
  final String paymentTransactionExternalKey=UUID.randomUUID().toString();
  final Iterable<PluginProperty> pendingPluginProperties=ImmutableList.<PluginProperty>of(new PluginProperty(MockPaymentProviderPlugin.PLUGIN_PROPERTY_PAYMENT_PLUGIN_STATUS_OVERRIDE,PaymentPluginStatus.PENDING,false));
  payment=paymentApi.createCaptureWithPaymentControl(account,payment.getId(),requestedAmount,payment.getCurrency(),paymentTransactionExternalKey,pendingPluginProperties,PAYMENT_OPTIONS,callContext);
  Assert.assertEquals(payment.getAuthAmount().compareTo(requestedAmount),0);
  Assert.assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getTransactions().size(),2);
  Assert.assertNull(((DefaultPaymentTransaction)payment.getTransactions().get(0)).getAttemptId());
  Assert.assertNotNull(((DefaultPaymentTransaction)payment.getTransactions().get(1)).getAttemptId());
  Assert.assertEquals(payment.getTransactions().get(1).getTransactionStatus(),TransactionStatus.PENDING);
  Assert.assertEquals(payment.getTransactions().get(1).getExternalKey(),paymentTransactionExternalKey);
  payment=paymentApi.createCapture(account,payment.getId(),requestedAmount,payment.getCurrency(),paymentTransactionExternalKey,ImmutableList.<PluginProperty>of(),callContext);
  Assert.assertEquals(payment.getAuthAmount().compareTo(requestedAmount),0);
  Assert.assertEquals(payment.getCapturedAmount().compareTo(requestedAmount),0);
  Assert.assertEquals(payment.getTransactions().size(),2);
  Assert.assertNull(((DefaultPaymentTransaction)payment.getTransactions().get(0)).getAttemptId());
  Assert.assertNotNull(((DefaultPaymentTransaction)payment.getTransactions().get(1)).getAttemptId());
  Assert.assertEquals(payment.getTransactions().get(1).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(payment.getTransactions().get(1).getExternalKey(),paymentTransactionExternalKey);
}
