{
  final Iterator<? extends Attribute> attributesIterator=Iterators.forEnumeration(searchResult.getAttributes().getAll());
  final Iterator<? extends Attribute> groupNameAttributesIterator=Iterators.filter(attributesIterator,new Predicate<Attribute>(){
    @Override public boolean apply(    final Attribute attribute){
      return groupNameId.equalsIgnoreCase(attribute.getID());
    }
  }
);
  final Iterator<String> groupNamesIterator=Iterators.transform(groupNameAttributesIterator,new Function<Attribute,String>(){
    @Override public String apply(    final Attribute groupNameAttribute){
      try {
        final NamingEnumeration<?> enumeration=groupNameAttribute.getAll();
        if (enumeration.hasMore()) {
          return enumeration.next().toString();
        }
 else {
          return null;
        }
      }
 catch (      NamingException namingException) {
        log.warn("Unable to read group name",namingException);
        return null;
      }
    }
  }
);
  final Iterator<String> finalGroupNamesIterator=Iterators.<String>filter(groupNamesIterator,Predicates.notNull());
  if (finalGroupNamesIterator.hasNext()) {
    return finalGroupNamesIterator.next();
  }
 else {
    log.warn("Unable to find an attribute matching {}",groupNameId);
    return null;
  }
}
