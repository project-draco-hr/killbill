{
  final Dictionary props=new Hashtable();
  props.put("name","hello");
  this.paymentInfoPluginRegistration=context.registerService(PaymentPluginApi.class.getName(),new PaymentPluginApi(){
    @Override public String getName(){
      return null;
    }
    @Override public PaymentInfoPlugin processPayment(    final UUID kbPaymentId,    final UUID kbPaymentMethodId,    final BigDecimal amount,    final CallContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public PaymentInfoPlugin getPaymentInfo(    final UUID kbPaymentId,    final TenantContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public RefundInfoPlugin processRefund(    final UUID kbPaymentId,    final BigDecimal refundAmount,    final CallContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public void addPaymentMethod(    final UUID kbPaymentMethodId,    final PaymentMethodPlugin paymentMethodProps,    final boolean setDefault,    final CallContext context) throws PaymentPluginApiException {
    }
    @Override public void deletePaymentMethod(    final UUID kbPaymentMethodId,    final CallContext context) throws PaymentPluginApiException {
    }
    @Override public void setDefaultPaymentMethod(    final UUID kbPaymentMethodId,    final CallContext context) throws PaymentPluginApiException {
    }
    @Override public List<PaymentMethodInfoPlugin> getPaymentMethods(    final UUID kbAccountId,    final boolean refreshFromGateway,    final CallContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public void resetPaymentMethods(    final List<PaymentMethodInfoPlugin> paymentMethods) throws PaymentPluginApiException {
    }
  }
,props);
}
