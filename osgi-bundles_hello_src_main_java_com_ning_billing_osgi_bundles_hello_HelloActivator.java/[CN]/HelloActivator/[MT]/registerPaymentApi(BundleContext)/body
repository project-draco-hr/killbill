{
  final Dictionary props=new Hashtable();
  props.put("name","hello");
  this.paymentInfoPluginRegistration=context.registerService(PaymentPluginApi.class.getName(),new PaymentPluginApi(){
    @Override public String getName(){
      return "helloName";
    }
    @Override public PaymentInfoPlugin processPayment(    final String externalAccountKey,    final UUID paymentId,    final BigDecimal amount,    final CallContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public PaymentInfoPlugin getPaymentInfo(    final UUID paymentId,    final TenantContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public void processRefund(    final Account account,    final UUID paymentId,    final BigDecimal refundAmount,    final CallContext context) throws PaymentPluginApiException {
    }
    @Override public int getNbRefundForPaymentAmount(    final Account account,    final UUID paymentId,    final BigDecimal refundAmount,    final TenantContext context) throws PaymentPluginApiException {
      return 0;
    }
    @Override public String createPaymentProviderAccount(    final Account account,    final CallContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public List<PaymentMethodPlugin> getPaymentMethodDetails(    final String accountKey,    final TenantContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public PaymentMethodPlugin getPaymentMethodDetail(    final String accountKey,    final String externalPaymentMethodId,    final TenantContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public String addPaymentMethod(    final String accountKey,    final PaymentMethodPlugin paymentMethodProps,    final boolean setDefault,    final CallContext context) throws PaymentPluginApiException {
      return null;
    }
    @Override public void updatePaymentMethod(    final String accountKey,    final PaymentMethodPlugin paymentMethodProps,    final CallContext context) throws PaymentPluginApiException {
    }
    @Override public void deletePaymentMethod(    final String accountKey,    final String externalPaymentMethodId,    final CallContext context) throws PaymentPluginApiException {
    }
    @Override public void setDefaultPaymentMethod(    final String accountKey,    final String externalPaymentId,    final CallContext context) throws PaymentPluginApiException {
    }
  }
,props);
}
