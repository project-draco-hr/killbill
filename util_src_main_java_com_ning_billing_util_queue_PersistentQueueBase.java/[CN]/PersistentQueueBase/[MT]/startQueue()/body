{
  isProcessingEvents=true;
  curActiveThreads=0;
  final PersistentQueueBase thePersistentQ=this;
  final CountDownLatch doneInitialization=new CountDownLatch(nbThreads);
  log.info(String.format("%s: Starting with %d threads",svcQName,nbThreads));
  for (int i=0; i < nbThreads; i++) {
    executor.execute(new Runnable(){
      @Override public void run(){
        log.info(String.format("%s: Thread %s [%d] starting",svcQName,Thread.currentThread().getName(),Thread.currentThread().getId()));
synchronized (thePersistentQ) {
          curActiveThreads++;
        }
        doneInitialization.countDown();
        try {
          while (true) {
synchronized (thePersistentQ) {
              if (!isProcessingEvents) {
                thePersistentQ.notify();
                break;
              }
            }
            try {
              doProcessEvents();
            }
 catch (            Exception e) {
              log.warn(String.format("%s: Thread  %s  [%d] got an exception, catching and moving on...",svcQName,Thread.currentThread().getName(),Thread.currentThread().getId()),e);
            }
            sleepALittle();
          }
        }
 catch (        InterruptedException e) {
          log.info(String.format("%s: Thread %s got interrupted, exting... ",svcQName,Thread.currentThread().getName()));
        }
catch (        Throwable e) {
          log.error(String.format("%s: Thread %s got an exception, exting... ",svcQName,Thread.currentThread().getName()),e);
        }
 finally {
          log.info(String.format("%s: Thread %s has exited",svcQName,Thread.currentThread().getName()));
synchronized (thePersistentQ) {
            curActiveThreads--;
          }
        }
      }
      private void sleepALittle() throws InterruptedException {
        Thread.sleep(sleepTimeMs);
      }
    }
);
  }
  try {
    final boolean success=doneInitialization.await(waitTimeoutMs,TimeUnit.MILLISECONDS);
    if (!success) {
      log.warn(String.format("%s: Failed to wait for all threads to be started, got %d/%d",svcQName,(nbThreads - doneInitialization.getCount()),nbThreads));
    }
 else {
      log.info(String.format("%s: Done waiting for all threads to be started, got %d/%d",svcQName,(nbThreads - doneInitialization.getCount()),nbThreads));
    }
  }
 catch (  InterruptedException e) {
    log.warn(String.format("%s: Start sequence, got interrupted",svcQName));
  }
}
