{
  final Account accountJson=createAccountNoPMBundleAndSubscriptionAndWaitForFirstInvoice();
  final List<Invoice> invoices=killBillClient.getInvoicesForAccount(accountJson.getAccountId(),true);
  assertEquals(invoices.size(),2);
  final Invoice invoice=invoices.get(1);
  assertEquals(invoice.getAmount().compareTo(BigDecimal.ZERO),1);
  final InvoiceItem invoiceItem=invoice.getItems().get(0);
  assertEquals(invoiceItem.getAmount().compareTo(BigDecimal.ZERO),1);
  final BigDecimal adjustedAmount=invoiceItem.getAmount().divide(BigDecimal.TEN);
  final InvoiceItem adjustmentInvoiceItem=new InvoiceItem();
  adjustmentInvoiceItem.setAccountId(accountJson.getAccountId());
  adjustmentInvoiceItem.setInvoiceId(invoice.getInvoiceId());
  adjustmentInvoiceItem.setInvoiceItemId(invoiceItem.getInvoiceItemId());
  adjustmentInvoiceItem.setAmount(adjustedAmount);
  adjustmentInvoiceItem.setCurrency(invoice.getCurrency());
  killBillClient.adjustInvoiceItem(adjustmentInvoiceItem,createdBy,reason,comment);
  final Invoice adjustedInvoice=killBillClient.getInvoice(invoice.getInvoiceId());
  final BigDecimal adjustedInvoiceBalance=invoice.getBalance().add(adjustedAmount.negate()).setScale(2,BigDecimal.ROUND_HALF_UP);
  assertEquals(adjustedInvoice.getBalance().compareTo(adjustedInvoiceBalance),0,String.format("Adjusted invoice balance is %s, should be %s",adjustedInvoice.getBalance(),adjustedInvoiceBalance));
}
