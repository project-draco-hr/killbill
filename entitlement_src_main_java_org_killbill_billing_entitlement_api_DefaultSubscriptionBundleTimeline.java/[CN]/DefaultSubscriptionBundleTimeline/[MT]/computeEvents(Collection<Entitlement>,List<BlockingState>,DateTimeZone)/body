{
  final Set<UUID> allEntitlementUUIDs=new TreeSet<UUID>(Collections2.transform(entitlements,new Function<Entitlement,UUID>(){
    @Override public UUID apply(    final Entitlement input){
      return input.getId();
    }
  }
));
  final LinkedList<SubscriptionEvent> result=computeSubscriptionBaseEvents(entitlements,accountTimeZone);
  for (  final BlockingState bs : allBlockingStates) {
    final List<SubscriptionEvent> newEvents=new ArrayList<SubscriptionEvent>();
    final int index=insertFromBlockingEvent(accountTimeZone,allEntitlementUUIDs,result,bs,bs.getEffectiveDate(),newEvents);
    insertAfterIndex(result,newEvents,index);
  }
  reOrderSubscriptionEventsOnSameDateByType(result);
  removeOverlappingSubscriptionEvents(result);
  return result;
}
