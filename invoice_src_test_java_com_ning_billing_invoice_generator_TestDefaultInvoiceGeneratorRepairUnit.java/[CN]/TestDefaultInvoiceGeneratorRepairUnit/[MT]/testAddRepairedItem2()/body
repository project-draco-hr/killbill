{
  final LocalDate startDate=new LocalDate(2013,12,1);
  final LocalDate endDate=new LocalDate(2014,12,1);
  final LocalDate endDateProposed1=new LocalDate(2014,1,1);
  final BigDecimal rate=new BigDecimal("120.00");
  final BigDecimal amount=rate;
  final InvoiceItem repairedItem=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,amount,rate,currency);
  final RepairAdjInvoiceItem candidateRepairItem=new RepairAdjInvoiceItem(repairedItem.getInvoiceId(),repairedItem.getAccountId(),repairedItem.getStartDate(),repairedItem.getEndDate(),repairedItem.getAmount().negate(),repairedItem.getCurrency(),repairedItem.getId());
  final List<InvoiceItem> proposed=new LinkedList<InvoiceItem>();
  final InvoiceItem proposed1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDateProposed1,BigDecimal.TEN,rate,currency);
  proposed.add(proposed1);
  defaultInvoiceGenerator.addRepairsForItem(repairedItem,candidateRepairItem,proposed);
  assertEquals(proposed.size(),1);
  assertEquals(proposed.get(0).getStartDate(),endDateProposed1);
  assertEquals(proposed.get(0).getEndDate(),endDate);
  assertEquals(proposed.get(0).getLinkedItemId(),repairedItem.getId());
  assertEquals(proposed.get(0).getAmount(),new BigDecimal("-110.00"));
  assertEquals(proposed.get(0).getInvoiceItemType(),InvoiceItemType.REPAIR_ADJ);
}
