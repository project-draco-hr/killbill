{
  final LocalDate startDate=new LocalDate(2012,6,30);
  final LocalDate blockDate=new LocalDate(2012,7,10);
  final LocalDate unblockDate=new LocalDate(2012,7,23);
  final LocalDate endDate=new LocalDate(2012,7,31);
  final BigDecimal someAmount=new BigDecimal("100.00");
  final List<InvoiceItem> existing=new LinkedList<InvoiceItem>();
  final InvoiceItem repairedItem=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,someAmount,someAmount,currency);
  existing.add(repairedItem);
  final List<InvoiceItem> proposed=new LinkedList<InvoiceItem>();
  final InvoiceItem reparee1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,blockDate,someAmount,someAmount,currency);
  proposed.add(reparee1);
  final InvoiceItem reparee2=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,unblockDate,endDate,someAmount,someAmount,currency);
  proposed.add(reparee2);
  final InvoiceItem repairItem=new RepairAdjInvoiceItem(invoiceId,accountId,blockDate,endDate,someAmount,currency,repairedItem.getId());
  defaultInvoiceGenerator.removeProposedRepareesForPartialrepair(repairedItem,repairItem,proposed);
  assertEquals(proposed.size(),1);
  assertTrue(proposed.get(0).equals(reparee2));
}
