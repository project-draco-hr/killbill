{
  log.info("Starting set up");
  accountId=UUID.randomUUID();
  subscriptionId=UUID.randomUUID();
  date_migrated=clock.getUTCNow().minusYears(1);
  date_regular=clock.getUTCNow();
  final String invoiceDdl=IOUtils.toString(TestInvoiceDispatcher.class.getResourceAsStream("/com/ning/billing/invoice/ddl.sql"));
  final String utilDdl=IOUtils.toString(TestInvoiceDispatcher.class.getResourceAsStream("/com/ning/billing/util/ddl.sql"));
  helper.startMysql();
  helper.initDb(invoiceDdl);
  helper.initDb(utilDdl);
  dbi=helper.getDBI();
  cleanup();
  busService.getBus().start();
  account=Mockito.mock(Account.class);
  Mockito.when(accountUserApi.getAccountById(accountId)).thenReturn(account);
  Mockito.when(account.getCurrency()).thenReturn(Currency.USD);
  Mockito.when(account.getId()).thenReturn(accountId);
  Mockito.when(account.isNotifiedForInvoices()).thenReturn(true);
  migrationInvoiceId=createAndCheckMigrationInvoice();
  regularInvoiceId=generateRegularInvoice();
}
