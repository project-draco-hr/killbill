{
  final SubscriptionBase subscription=dao.getSubscriptionFromId(subscriptionId,context);
  if (subscription == null) {
    throw new SubscriptionBaseApiException(ErrorCode.SUB_INVALID_SUBSCRIPTION_ID,subscriptionId);
  }
  if (subscription.getCategory() != ProductCategory.BASE) {
    throw new SubscriptionBaseApiException(ErrorCode.SUB_CHANGE_DRY_RUN_NOT_BP);
  }
  final List<SubscriptionStatusDryRun> result=new LinkedList<SubscriptionStatusDryRun>();
  final List<SubscriptionBase> bundleSubscriptions=dao.getSubscriptions(subscription.getBundleId(),context);
  for (  final SubscriptionBase cur : bundleSubscriptions) {
    if (cur.getId().equals(subscriptionId)) {
      continue;
    }
    if (cur.getState() == SubscriptionState.CANCELLED) {
      continue;
    }
    final DryRunChangeReason reason;
    if (baseProductName != null && addonUtils.isAddonIncludedFromProdName(baseProductName,requestedDate,cur.getCurrentPlan())) {
      reason=DryRunChangeReason.AO_INCLUDED_IN_NEW_PLAN;
    }
 else     if (baseProductName != null && addonUtils.isAddonAvailableFromProdName(baseProductName,requestedDate,cur.getCurrentPlan())) {
      reason=DryRunChangeReason.AO_AVAILABLE_IN_NEW_PLAN;
    }
 else {
      reason=DryRunChangeReason.AO_NOT_AVAILABLE_IN_NEW_PLAN;
    }
    final SubscriptionStatusDryRun status=new DefaultSubscriptionStatusDryRun(cur.getId(),cur.getCurrentPlan().getProduct().getName(),cur.getCurrentPhase().getPhaseType(),cur.getCurrentPlan().getBillingPeriod(),cur.getCurrentPriceList().getName(),reason);
    result.add(status);
  }
  return result;
}
