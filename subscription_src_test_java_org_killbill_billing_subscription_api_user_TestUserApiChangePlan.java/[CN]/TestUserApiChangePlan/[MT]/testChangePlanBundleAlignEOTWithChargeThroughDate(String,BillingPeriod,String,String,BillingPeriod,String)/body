{
  DefaultSubscriptionBase subscription=testUtil.createSubscription(bundle,fromProd,fromTerm,fromPlanSet);
  final PlanPhase trialPhase=subscription.getCurrentPhase();
  final DateTime expectedPhaseTrialChange=TestSubscriptionHelper.addDuration(subscription.getStartDate(),trialPhase.getDuration());
  assertEquals(trialPhase.getPhaseType(),PhaseType.TRIAL);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(31));
  clock.addDeltaFromReality(it.toDurationMillis());
  assertListenerStatus();
  PlanPhase currentPhase=subscription.getCurrentPhase();
  assertEquals(currentPhase.getPhaseType(),PhaseType.DISCOUNT);
  final Duration ctd=testUtil.getDurationMonth(1);
  final DateTime newChargedThroughDate=TestSubscriptionHelper.addDuration(expectedPhaseTrialChange,ctd);
  subscriptionInternalApi.setChargedThroughDate(subscription.getId(),newChargedThroughDate,internalCallContext);
  subscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(subscription.getId(),internalCallContext);
  subscription.changePlan(toProd,toTerm,toPlanSet,callContext);
  assertListenerStatus();
  currentPhase=subscription.getCurrentPhase();
  checkChangePlan(subscription,fromProd,ProductCategory.BASE,fromTerm,PhaseType.DISCOUNT);
  final DateTime nextExpectedPhaseChange=TestSubscriptionHelper.addDuration(expectedPhaseTrialChange,currentPhase.getDuration());
  testUtil.checkNextPhaseChange(subscription,2,nextExpectedPhaseChange);
  final List<SubscriptionBaseEvent> events=dao.getPendingEventsForSubscription(subscription.getId(),internalCallContext);
  assertTrue(events.get(0) instanceof ApiEvent);
  testListener.pushExpectedEvent(NextEvent.CHANGE);
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(1));
  clock.addDeltaFromReality(it.toDurationMillis());
  assertListenerStatus();
  subscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(subscription.getId(),internalCallContext);
  currentPhase=subscription.getCurrentPhase();
  checkChangePlan(subscription,toProd,ProductCategory.BASE,toTerm,PhaseType.DISCOUNT);
  assertListenerStatus();
}
