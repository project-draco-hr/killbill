{
  final SubscriptionBundle bundle=getSubscriptionBundle(bundleId,context);
  final Account account=getAccount(bundle.getAccountId(),context);
  final String accountKey=account.getExternalKey();
  final String externalKey=bundle.getExternalKey();
  sqlDao.inTransaction(new Transaction<Void,BusinessAnalyticsSqlDao>(){
    @Override public Void inTransaction(    final BusinessAnalyticsSqlDao transactional,    final TransactionStatus status) throws Exception {
      transactional.deleteByAccountRecordId(bundleId.toString(),context);
      final List<BlockingState> blockingHistory=blockingApi.getBlockingHistory(bundleId,context);
      if (blockingHistory != null && blockingHistory.size() > 0) {
        final List<BlockingState> overdueStates=ImmutableList.<BlockingState>copyOf(blockingHistory);
        final List<BlockingState> overdueStatesReversed=Lists.reverse(overdueStates);
        DateTime previousStartDate=null;
        for (        final BlockingState state : overdueStatesReversed) {
          final BusinessOverdueStatusModelDao overdueStatus=new BusinessOverdueStatusModelDao(accountKey,bundleId,previousStartDate,externalKey,state.getTimestamp(),state.getStateName());
          transactional.createOverdueStatus(overdueStatus,context);
          previousStartDate=state.getTimestamp();
        }
      }
      return null;
    }
  }
);
}
