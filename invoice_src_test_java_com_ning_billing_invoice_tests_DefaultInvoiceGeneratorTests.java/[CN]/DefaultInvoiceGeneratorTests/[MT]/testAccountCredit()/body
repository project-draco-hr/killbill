{
  BillingEventSet billingEventSet=new MockBillingEventSet();
  DateTime startDate=new DateTime(2012,3,1,0,0,0,0);
  UUID accountId=UUID.randomUUID();
  UUID subscriptionId=UUID.randomUUID();
  Plan plan=new MockPlan("original plan");
  MockInternationalPrice price10=new MockInternationalPrice(new DefaultPrice(TEN,Currency.USD));
  PlanPhase planPhase=new MockPlanPhase(price10,null,BillingPeriod.MONTHLY,PhaseType.EVERGREEN);
  BillingEvent creation=createBillingEvent(subscriptionId,startDate,plan,planPhase,1);
  billingEventSet.add(creation);
  List<Invoice> invoices=new ArrayList<Invoice>();
  Invoice initialInvoice=generator.generateInvoice(accountId,billingEventSet,null,startDate,Currency.USD);
  assertNotNull(initialInvoice);
  assertEquals(initialInvoice.getNumberOfItems(),1);
  assertEquals(initialInvoice.getBalance().compareTo(TEN),0);
  invoices.add(initialInvoice);
  DateTime creditDate=startDate.plusDays(5);
  Invoice invoiceWithCredit=new DefaultInvoice(accountId,creditDate,creditDate,Currency.USD);
  InvoiceItem accountCredit=new CreditInvoiceItem(invoiceWithCredit.getId(),accountId,creditDate,FIVE,Currency.USD);
  invoiceWithCredit.addInvoiceItem(accountCredit);
  invoices.add(invoiceWithCredit);
  Invoice finalInvoice=generator.generateInvoice(accountId,billingEventSet,invoices,startDate.plusMonths(1),Currency.USD);
  assertEquals(finalInvoice.getBalance().compareTo(FIVE),0);
  assertEquals(finalInvoice.getNumberOfItems(),2);
}
