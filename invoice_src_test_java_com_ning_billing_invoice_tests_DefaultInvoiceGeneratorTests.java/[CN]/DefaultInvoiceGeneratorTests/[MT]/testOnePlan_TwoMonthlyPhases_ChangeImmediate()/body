{
  BillingEventSet events=new BillingEventSet();
  UUID subscriptionId=UUID.randomUUID();
  IBillingEvent event1=new BillingEvent(subscriptionId,buildDateTime(2011,9,1),"World Domination","Build Space Laser",new InternationalPriceMock(FIVE),BillingPeriod.MONTHLY,1,BillingMode.IN_ADVANCE);
  events.add(event1);
  IBillingEvent event2=new BillingEvent(subscriptionId,buildDateTime(2011,10,15),"World Domination","Incinerate James Bond",new InternationalPriceMock(TEN),BillingPeriod.MONTHLY,15,BillingMode.IN_ADVANCE);
  events.add(event2);
  InvoiceItemList existingInvoiceItems=new InvoiceItemList();
  DateTime targetDate=buildDateTime(2011,12,3);
  UUID accountId=UUID.randomUUID();
  Invoice invoice=generator.generateInvoice(accountId,events,existingInvoiceItems,targetDate,Currency.USD);
  assertNotNull(invoice);
  assertEquals(invoice.getNumberOfItems(),2);
  BigDecimal numberOfCyclesEvent1;
  numberOfCyclesEvent1=ONE.add(FOURTEEN.divide(THIRTY_ONE,NUMBER_OF_DECIMALS,ROUNDING_METHOD));
  BigDecimal numberOfCyclesEvent2=TWO;
  BigDecimal expectedValue;
  expectedValue=numberOfCyclesEvent1.multiply(FIVE);
  expectedValue=expectedValue.add(numberOfCyclesEvent2.multiply(TEN));
  expectedValue=expectedValue.setScale(NUMBER_OF_DECIMALS);
  assertEquals(invoice.getTotalAmount(),expectedValue);
}
