{
  BillingEventSet events=new MockBillingEventSet();
  Plan plan1=new MockPlan();
  BigDecimal rate1=FIVE;
  PlanPhase phase1=createMockMonthlyPlanPhase(rate1);
  Subscription sub=createZombieSubscription();
  BillingEvent event1=createBillingEvent(sub.getId(),buildDateTime(2011,9,1),plan1,phase1,1);
  events.add(event1);
  BigDecimal rate2=TEN;
  PlanPhase phase2=createMockMonthlyPlanPhase(rate2);
  BillingEvent event2=createBillingEvent(sub.getId(),buildDateTime(2011,10,15),plan1,phase2,15);
  events.add(event2);
  DateTime targetDate=buildDateTime(2011,12,3);
  UUID accountId=UUID.randomUUID();
  Invoice invoice=generator.generateInvoice(accountId,events,null,targetDate,Currency.USD);
  assertNotNull(invoice);
  assertEquals(invoice.getNumberOfItems(),4);
  BigDecimal numberOfCyclesEvent1;
  numberOfCyclesEvent1=ONE.add(FOURTEEN.divide(THIRTY_ONE,2 * NUMBER_OF_DECIMALS,ROUNDING_METHOD));
  BigDecimal numberOfCyclesEvent2=TWO;
  BigDecimal expectedValue;
  expectedValue=numberOfCyclesEvent1.multiply(rate1);
  expectedValue=expectedValue.add(numberOfCyclesEvent2.multiply(rate2));
  expectedValue=expectedValue.setScale(NUMBER_OF_DECIMALS,ROUNDING_METHOD);
  assertEquals(invoice.getTotalAmount(),expectedValue);
}
