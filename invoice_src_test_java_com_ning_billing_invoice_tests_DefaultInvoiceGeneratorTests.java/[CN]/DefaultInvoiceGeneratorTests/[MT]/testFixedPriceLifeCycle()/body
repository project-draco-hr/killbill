{
  UUID accountId=UUID.randomUUID();
  Subscription subscription=new MockSubscription();
  Plan plan=new MockPlan("plan 1");
  MockInternationalPrice zeroPrice=new MockInternationalPrice(new DefaultPrice(ZERO,Currency.USD));
  MockInternationalPrice cheapPrice=new MockInternationalPrice(new DefaultPrice(ONE,Currency.USD));
  PlanPhase phase1=new MockPlanPhase(null,zeroPrice,BillingPeriod.NO_BILLING_PERIOD,PhaseType.TRIAL);
  PlanPhase phase2=new MockPlanPhase(cheapPrice,null,BillingPeriod.MONTHLY,PhaseType.DISCOUNT);
  DateTime changeDate=new DateTime("2012-04-1T00:00:00.000-08:00");
  BillingEventSet events=new BillingEventSet();
  BillingEvent event1=new DefaultBillingEvent(subscription,new DateTime("2012-01-1T00:00:00.000-08:00"),plan,phase1,zeroPrice,null,BillingPeriod.NO_BILLING_PERIOD,1,BillingModeType.IN_ADVANCE,"Test Event 1",SubscriptionTransitionType.CREATE);
  BillingEvent event2=new DefaultBillingEvent(subscription,changeDate,plan,phase2,zeroPrice,null,BillingPeriod.NO_BILLING_PERIOD,1,BillingModeType.IN_ADVANCE,"Test Event 2",SubscriptionTransitionType.PHASE);
  events.add(event2);
  events.add(event1);
  Invoice invoice1=generator.generateInvoice(accountId,events,null,new DateTime("2012-02-01T00:01:00.000-08:00"),Currency.USD);
  assertNotNull(invoice1);
  assertEquals(invoice1.getNumberOfItems(),1);
  List<Invoice> invoiceList=new ArrayList<Invoice>();
  invoiceList.add(invoice1);
  Invoice invoice2=generator.generateInvoice(accountId,events,invoiceList,new DateTime("2012-04-05T00:01:00.000-08:00"),Currency.USD);
  assertNotNull(invoice2);
  assertEquals(invoice2.getNumberOfItems(),1);
  FixedPriceInvoiceItem item=(FixedPriceInvoiceItem)invoice2.getInvoiceItems().get(0);
  assertEquals(item.getStartDate().compareTo(changeDate),0);
}
