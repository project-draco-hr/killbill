{
  UUID accountId=UUID.randomUUID();
  UUID subscriptionId1=UUID.randomUUID();
  UUID subscriptionId2=UUID.randomUUID();
  UUID subscriptionId3=UUID.randomUUID();
  UUID subscriptionId4=UUID.randomUUID();
  UUID subscriptionId5=UUID.randomUUID();
  Plan plan1=new MockPlan("Change from trial to discount with immediate cancellation");
  PlanPhase plan1Phase1=createMockMonthlyPlanPhase(EIGHT,PhaseType.TRIAL);
  PlanPhase plan1Phase2=createMockMonthlyPlanPhase(TWELVE,PhaseType.DISCOUNT);
  PlanPhase plan1Phase3=createMockMonthlyPlanPhase();
  DateTime plan1StartDate=buildDateTime(2011,1,5);
  DateTime plan1PhaseChangeDate=buildDateTime(2011,4,5);
  DateTime plan1CancelDate=buildDateTime(2011,4,29);
  Plan plan2=new MockPlan("Change phase from trial to discount to evergreen");
  PlanPhase plan2Phase1=createMockMonthlyPlanPhase(TWENTY,PhaseType.TRIAL);
  PlanPhase plan2Phase2=createMockMonthlyPlanPhase(THIRTY,PhaseType.DISCOUNT);
  PlanPhase plan2Phase3=createMockMonthlyPlanPhase(FORTY,PhaseType.EVERGREEN);
  DateTime plan2StartDate=buildDateTime(2011,3,10);
  DateTime plan2PhaseChangeToDiscountDate=buildDateTime(2011,6,10);
  DateTime plan2PhaseChangeToEvergreenDate=buildDateTime(2011,9,10);
  Plan plan3=new MockPlan("Upgrade with immediate change, BCD = 31");
  PlanPhase plan3Phase1=createMockMonthlyPlanPhase(TEN,PhaseType.EVERGREEN);
  PlanPhase plan3Phase2=createMockAnnualPlanPhase(ONE_HUNDRED,PhaseType.EVERGREEN);
  DateTime plan3StartDate=buildDateTime(2011,5,20);
  DateTime plan3UpgradeToAnnualDate=buildDateTime(2011,7,31);
  Plan plan4a=new MockPlan("Plan change effective EOT; plan 1");
  Plan plan4b=new MockPlan("Plan change effective EOT; plan 2");
  PlanPhase plan4aPhase1=createMockMonthlyPlanPhase(FIFTEEN);
  PlanPhase plan4bPhase1=createMockMonthlyPlanPhase(TWENTY_FOUR);
  DateTime plan4StartDate=buildDateTime(2011,6,7);
  DateTime plan4ChangeOfPlanDate=buildDateTime(2011,8,7);
  Plan plan5=new MockPlan("Add-on");
  PlanPhase plan5Phase1=createMockMonthlyPlanPhase(TWENTY);
  PlanPhase plan5Phase2=createMockMonthlyPlanPhase();
  DateTime plan5StartDate=buildDateTime(2011,6,21);
  DateTime plan5CancelDate=buildDateTime(2011,10,7);
  BigDecimal expectedAmount;
  List<Invoice> invoices=new ArrayList<Invoice>();
  BillingEventSet events=new MockBillingEventSet();
  events.add(createBillingEvent(subscriptionId1,plan1StartDate,plan1,plan1Phase1,5));
  expectedAmount=EIGHT;
  testInvoiceGeneration(accountId,events,invoices,plan1StartDate,1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,2,5),1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,3,5),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2StartDate,plan2,plan2Phase1,10));
  expectedAmount=TWENTY;
  testInvoiceGeneration(accountId,events,invoices,plan2StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,plan1PhaseChangeDate,plan1,plan1Phase2,5));
  expectedAmount=TWELVE;
  testInvoiceGeneration(accountId,events,invoices,plan1PhaseChangeDate,1,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,4,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,plan1CancelDate,plan1,plan1Phase3,5));
  expectedAmount=TWELVE.multiply(SIX.divide(THIRTY,NUMBER_OF_DECIMALS,ROUNDING_METHOD)).negate().setScale(NUMBER_OF_DECIMALS);
  testInvoiceGeneration(accountId,events,invoices,plan1CancelDate,2,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,5,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId3,plan3StartDate,plan3,plan3Phase1,20));
  expectedAmount=TEN;
  testInvoiceGeneration(accountId,events,invoices,plan3StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId4,plan4StartDate,plan4a,plan4aPhase1,7));
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(accountId,events,invoices,plan4StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2PhaseChangeToDiscountDate,plan2,plan2Phase2,10));
  expectedAmount=THIRTY;
  testInvoiceGeneration(accountId,events,invoices,plan2PhaseChangeToDiscountDate,1,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,6,20),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,plan5StartDate,plan5,plan5Phase1,10));
  expectedAmount=TWENTY.multiply(NINETEEN).divide(THIRTY,NUMBER_OF_DECIMALS,ROUNDING_METHOD);
  testInvoiceGeneration(accountId,events,invoices,plan5StartDate,1,expectedAmount);
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,7,7),1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,7,10),2,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,7,20),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId3,plan3UpgradeToAnnualDate,plan3,plan3Phase2,31));
  expectedAmount=ONE_HUNDRED.subtract(TEN);
  expectedAmount=expectedAmount.add(TEN.multiply(ELEVEN.divide(THIRTY_ONE,2 * NUMBER_OF_DECIMALS,ROUNDING_METHOD)));
  expectedAmount=expectedAmount.setScale(NUMBER_OF_DECIMALS,ROUNDING_METHOD);
  testInvoiceGeneration(accountId,events,invoices,plan3UpgradeToAnnualDate,3,expectedAmount);
  events.add(createBillingEvent(subscriptionId4,plan4ChangeOfPlanDate,plan4b,plan4bPhase1,7));
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(accountId,events,invoices,plan4ChangeOfPlanDate,1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,8,10),2,expectedAmount);
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,9,7),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2PhaseChangeToEvergreenDate,plan2,plan2Phase3,10));
  expectedAmount=FORTY.add(TWENTY);
  testInvoiceGeneration(accountId,events,invoices,plan2PhaseChangeToEvergreenDate,2,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,plan5CancelDate,plan5,plan5Phase2,10));
  expectedAmount=TWENTY_FOUR.add(TWENTY.multiply(THREE.divide(THIRTY)).negate().setScale(NUMBER_OF_DECIMALS));
  testInvoiceGeneration(accountId,events,invoices,plan5CancelDate,3,expectedAmount);
  expectedAmount=FORTY;
  testInvoiceGeneration(accountId,events,invoices,buildDateTime(2011,10,10),1,expectedAmount);
}
