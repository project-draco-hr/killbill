{
  UUID subscriptionId1=UUID.randomUUID();
  Plan plan1=catalog.getCurrentPlans()[0];
  PlanPhase plan1Phase1=plan1.getAllPhases()[0];
  PlanPhase plan1Phase2=plan1.getAllPhases()[0];
  PlanPhase plan1Phase3=plan1.getAllPhases()[0];
  DateTime plan1StartDate=buildDateTime(2011,1,5);
  DateTime plan1PhaseChangeDate=buildDateTime(2011,4,5);
  DateTime plan1CancelDate=buildDateTime(2011,4,29);
  UUID subscriptionId2=UUID.randomUUID();
  Plan plan2=catalog.getCurrentPlans()[1];
  PlanPhase plan2Phase1=plan2.getAllPhases()[0];
  PlanPhase plan2Phase2=plan2.getAllPhases()[0];
  PlanPhase plan2Phase3=plan2.getAllPhases()[0];
  DateTime plan2StartDate=buildDateTime(2011,3,10);
  DateTime plan2PhaseChangeToDiscountDate=buildDateTime(2011,6,10);
  DateTime plan2PhaseChangeToEvergreenDate=buildDateTime(2011,9,10);
  UUID subscriptionId3=UUID.randomUUID();
  Plan plan3=catalog.getCurrentPlans()[2];
  PlanPhase plan3Phase1=plan3.getAllPhases()[0];
  PlanPhase plan3Phase2=plan3.getAllPhases()[0];
  DateTime plan3StartDate=buildDateTime(2011,5,20);
  DateTime plan3UpgradeToAnnualDate=buildDateTime(2011,7,31);
  UUID subscriptionId4=UUID.randomUUID();
  Plan plan4a=catalog.getCurrentPlans()[0];
  Plan plan4b=catalog.getCurrentPlans()[1];
  PlanPhase plan4aPhase1=plan4a.getAllPhases()[0];
  PlanPhase plan4bPhase1=plan4b.getAllPhases()[0];
  DateTime plan4StartDate=buildDateTime(2011,6,7);
  DateTime plan4ChangeOfPlanDate=buildDateTime(2011,8,7);
  UUID subscriptionId5=UUID.randomUUID();
  Plan plan5=catalog.getCurrentPlans()[2];
  PlanPhase plan5Phase1=plan5.getAllPhases()[0];
  PlanPhase plan5Phase2=plan5.getAllPhases()[0];
  DateTime plan5StartDate=buildDateTime(2011,6,21);
  DateTime plan5CancelDate=buildDateTime(2011,10,7);
  BigDecimal expectedAmount;
  InvoiceItemList invoiceItems=new InvoiceItemList();
  BillingEventSet events=new BillingEventSet();
  events.add(createBillingEvent(subscriptionId1,plan1StartDate,plan1,plan1Phase1,EIGHT,5));
  expectedAmount=EIGHT;
  testInvoiceGeneration(events,invoiceItems,plan1StartDate,1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,2,5),1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,3,5),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2StartDate,plan2,plan2Phase1,TWENTY,10));
  expectedAmount=TWENTY;
  testInvoiceGeneration(events,invoiceItems,plan2StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,plan1PhaseChangeDate,plan1,plan1Phase2,TWELVE,5));
  expectedAmount=TWELVE;
  testInvoiceGeneration(events,invoiceItems,plan1PhaseChangeDate,1,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,4,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,plan1CancelDate,plan1,plan1Phase3,ZERO,5));
  expectedAmount=TWELVE.multiply(SIX.divide(THIRTY,NUMBER_OF_DECIMALS,ROUNDING_METHOD)).negate().setScale(NUMBER_OF_DECIMALS);
  testInvoiceGeneration(events,invoiceItems,plan1CancelDate,2,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,5,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId3,plan3StartDate,plan3,plan3Phase1,TEN,20));
  expectedAmount=TEN;
  testInvoiceGeneration(events,invoiceItems,plan3StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId4,plan4StartDate,plan4a,plan4aPhase1,FIFTEEN,7));
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(events,invoiceItems,plan4StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2PhaseChangeToDiscountDate,plan2,plan2Phase2,THIRTY,10));
  expectedAmount=THIRTY;
  testInvoiceGeneration(events,invoiceItems,plan2PhaseChangeToDiscountDate,1,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,6,20),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,plan5StartDate,plan5,plan5Phase1,TWENTY,10));
  expectedAmount=TWENTY.multiply(NINETEEN.divide(THIRTY,NUMBER_OF_DECIMALS,ROUNDING_METHOD)).setScale(NUMBER_OF_DECIMALS);
  testInvoiceGeneration(events,invoiceItems,plan5StartDate,1,expectedAmount);
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,7,7),1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,7,10),2,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,7,20),1,expectedAmount);
  events.add(createAnnualBillingEvent(subscriptionId3,plan3UpgradeToAnnualDate,plan3,plan3Phase2,ONE_HUNDRED,31));
  expectedAmount=ONE_HUNDRED.subtract(TEN);
  expectedAmount=expectedAmount.add(TEN.multiply(ELEVEN.divide(THIRTY_ONE,NUMBER_OF_DECIMALS,ROUNDING_METHOD)));
  expectedAmount=expectedAmount.setScale(NUMBER_OF_DECIMALS);
  testInvoiceGeneration(events,invoiceItems,plan3UpgradeToAnnualDate,3,expectedAmount);
  events.add(createBillingEvent(subscriptionId4,plan4ChangeOfPlanDate,plan4b,plan4bPhase1,TWENTY_FOUR,7));
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(events,invoiceItems,plan4ChangeOfPlanDate,1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,8,10),2,expectedAmount);
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,9,7),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2PhaseChangeToEvergreenDate,plan2,plan2Phase3,FORTY,10));
  expectedAmount=FORTY.add(TWENTY);
  testInvoiceGeneration(events,invoiceItems,plan2PhaseChangeToEvergreenDate,2,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,plan5CancelDate,plan5,plan5Phase2,ZERO,10));
  expectedAmount=TWENTY_FOUR.add(TWENTY.multiply(THREE.divide(THIRTY)).negate().setScale(NUMBER_OF_DECIMALS));
  testInvoiceGeneration(events,invoiceItems,plan5CancelDate,3,expectedAmount);
  expectedAmount=FORTY;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,10,10),1,expectedAmount);
}
