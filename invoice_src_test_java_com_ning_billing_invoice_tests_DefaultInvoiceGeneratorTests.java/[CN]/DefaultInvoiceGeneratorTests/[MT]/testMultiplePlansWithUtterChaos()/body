{
  UUID subscriptionId1=UUID.randomUUID();
  String planName1="Change from trial to discount with immediate cancellation";
  String plan1PhaseName1="Trial";
  String plan1PhaseName2="Discount";
  String plan1phase3="Cancel";
  DateTime plan1StartDate=buildDateTime(2011,1,5);
  DateTime plan1PhaseChangeDate=buildDateTime(2011,4,5);
  DateTime plan1CancelDate=buildDateTime(2011,4,29);
  UUID subscriptionId2=UUID.randomUUID();
  String planName2="Change phase from trial to discount to evergreen";
  String plan2PhaseName1="Trial";
  String plan2PhaseName2="Discount";
  String plan2PhaseName3="Evergreen";
  DateTime plan2StartDate=buildDateTime(2011,3,10);
  DateTime plan2PhaseChangeToDiscountDate=buildDateTime(2011,6,10);
  DateTime plan2PhaseChangeToEvergreenDate=buildDateTime(2011,9,10);
  UUID subscriptionId3=UUID.randomUUID();
  String planName3="Upgrade with immediate change, BCD = 31";
  String plan3PhaseName1="Evergreen monthly";
  String plan3PhaseName2="Evergreen annual";
  DateTime plan3StartDate=buildDateTime(2011,5,20);
  DateTime plan3UpgradeToAnnualDate=buildDateTime(2011,7,31);
  UUID subscriptionId4=UUID.randomUUID();
  String planName4a="Plan change effective EOT; plan 1";
  String planName4b="Plan change effective EOT; plan 2";
  String plan4PhaseName="Evergreen";
  DateTime plan4StartDate=buildDateTime(2011,6,7);
  DateTime plan4ChangeOfPlanDate=buildDateTime(2011,8,7);
  UUID subscriptionId5=UUID.randomUUID();
  String planName5="Add-on";
  String plan5PhaseName1="Evergreen";
  String plan5PhaseName2="Cancel";
  DateTime plan5StartDate=buildDateTime(2011,6,21);
  DateTime plan5CancelDate=buildDateTime(2011,10,7);
  BigDecimal expectedAmount;
  InvoiceItemList invoiceItems=new InvoiceItemList();
  BillingEventSet events=new BillingEventSet();
  events.add(createBillingEvent(subscriptionId1,plan1StartDate,planName1,plan1PhaseName1,EIGHT,5));
  expectedAmount=EIGHT;
  testInvoiceGeneration(events,invoiceItems,plan1StartDate,1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,2,5),1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,3,5),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2StartDate,planName2,plan2PhaseName1,TWENTY,10));
  expectedAmount=TWENTY;
  testInvoiceGeneration(events,invoiceItems,plan2StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,plan1PhaseChangeDate,planName1,plan1PhaseName2,TWELVE,5));
  expectedAmount=TWELVE;
  testInvoiceGeneration(events,invoiceItems,plan1PhaseChangeDate,1,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,4,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,plan1CancelDate,planName1,plan1phase3,ZERO,5));
  expectedAmount=TWELVE.multiply(SIX.divide(THIRTY,NUMBER_OF_DECIMALS,ROUNDING_METHOD)).negate().setScale(NUMBER_OF_DECIMALS);
  testInvoiceGeneration(events,invoiceItems,plan1CancelDate,2,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,5,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId3,plan3StartDate,planName3,plan3PhaseName1,TEN,20));
  expectedAmount=TEN;
  testInvoiceGeneration(events,invoiceItems,plan3StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId4,plan4StartDate,planName4a,plan4PhaseName,FIFTEEN,7));
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(events,invoiceItems,plan4StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2PhaseChangeToDiscountDate,planName2,plan2PhaseName2,THIRTY,10));
  expectedAmount=THIRTY;
  testInvoiceGeneration(events,invoiceItems,plan2PhaseChangeToDiscountDate,1,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,6,20),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,plan5StartDate,planName5,plan5PhaseName1,TWENTY,10));
  expectedAmount=TWENTY.multiply(NINETEEN.divide(THIRTY,NUMBER_OF_DECIMALS,ROUNDING_METHOD)).setScale(NUMBER_OF_DECIMALS);
  testInvoiceGeneration(events,invoiceItems,plan5StartDate,1,expectedAmount);
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,7,7),1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,7,10),2,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,7,20),1,expectedAmount);
  events.add(createAnnualBillingEvent(subscriptionId3,plan3UpgradeToAnnualDate,planName3,plan3PhaseName2,ONE_HUNDRED,31));
  expectedAmount=ONE_HUNDRED.subtract(TEN);
  expectedAmount=expectedAmount.add(TEN.multiply(ELEVEN.divide(THIRTY_ONE,NUMBER_OF_DECIMALS,ROUNDING_METHOD)));
  expectedAmount=expectedAmount.setScale(NUMBER_OF_DECIMALS);
  testInvoiceGeneration(events,invoiceItems,plan3UpgradeToAnnualDate,3,expectedAmount);
  events.add(createBillingEvent(subscriptionId4,plan4ChangeOfPlanDate,planName4b,plan4PhaseName,TWENTY_FOUR,7));
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(events,invoiceItems,plan4ChangeOfPlanDate,1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,8,10),2,expectedAmount);
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,9,7),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,plan2PhaseChangeToEvergreenDate,planName2,plan2PhaseName3,FORTY,10));
  expectedAmount=FORTY.add(TWENTY);
  testInvoiceGeneration(events,invoiceItems,plan2PhaseChangeToEvergreenDate,2,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,plan5CancelDate,planName5,plan5PhaseName2,ZERO,10));
  expectedAmount=TWENTY_FOUR.add(TWENTY.multiply(THREE.divide(THIRTY)).negate().setScale(NUMBER_OF_DECIMALS));
  testInvoiceGeneration(events,invoiceItems,plan5CancelDate,3,expectedAmount);
  expectedAmount=FORTY;
  testInvoiceGeneration(events,invoiceItems,buildDateTime(2011,10,10),1,expectedAmount);
}
