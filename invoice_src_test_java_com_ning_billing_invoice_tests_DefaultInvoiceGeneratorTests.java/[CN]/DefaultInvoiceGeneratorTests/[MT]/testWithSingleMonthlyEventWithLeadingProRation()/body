{
  BillingEventSet events=new BillingEventSet();
  Subscription sub=new SubscriptionData(new SubscriptionBuilder().setId(UUID.randomUUID()));
  DateTime startDate=buildDateTime(2011,9,1);
  MockCatalog catalog=new MockCatalog();
  Plan plan=catalog.getCurrentPlans()[0];
  PlanPhase phase=plan.getAllPhases()[0];
  BigDecimal rate=TEN;
  BillingEvent event=new DefaultBillingEvent(sub,startDate,plan,phase,new InternationalPriceMock(ZERO),new InternationalPriceMock(rate),BillingPeriod.MONTHLY,15,BillingModeType.IN_ADVANCE,"Test");
  events.add(event);
  InvoiceItemList existingInvoiceItems=new InvoiceItemList();
  DateTime targetDate=buildDateTime(2011,10,3);
  UUID accountId=UUID.randomUUID();
  Invoice invoice=generator.generateInvoice(accountId,events,existingInvoiceItems,targetDate,Currency.USD);
  assertNotNull(invoice);
  assertEquals(invoice.getNumberOfItems(),1);
  BigDecimal expectedNumberOfBillingCycles;
  expectedNumberOfBillingCycles=ONE.add(FOURTEEN.divide(THIRTY_ONE,NUMBER_OF_DECIMALS,ROUNDING_METHOD));
  BigDecimal expectedAmount=expectedNumberOfBillingCycles.multiply(rate).setScale(NUMBER_OF_DECIMALS);
  assertEquals(invoice.getTotalAmount(),expectedAmount);
}
