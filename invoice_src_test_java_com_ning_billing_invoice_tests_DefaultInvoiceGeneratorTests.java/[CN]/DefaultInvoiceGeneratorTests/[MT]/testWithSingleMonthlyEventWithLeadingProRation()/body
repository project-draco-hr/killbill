{
  BillingEventSet events=new BillingEventSet();
  Subscription sub=new SubscriptionData(new SubscriptionBuilder().setId(UUID.randomUUID()));
  DateTime startDate=buildDateTime(2011,9,1);
  Plan plan=new MockPlan();
  BigDecimal rate=TEN;
  PlanPhase phase=createMockMonthlyPlanPhase(rate);
  BillingEvent event=createBillingEvent(sub.getId(),startDate,plan,phase,15);
  events.add(event);
  InvoiceItemList existingInvoiceItems=new InvoiceItemList();
  DateTime targetDate=buildDateTime(2011,10,3);
  UUID accountId=UUID.randomUUID();
  Invoice invoice=generator.generateInvoice(accountId,events,existingInvoiceItems,targetDate,Currency.USD);
  assertNotNull(invoice);
  assertEquals(invoice.getNumberOfItems(),2);
  BigDecimal expectedNumberOfBillingCycles;
  expectedNumberOfBillingCycles=ONE.add(FOURTEEN.divide(THIRTY_ONE,NUMBER_OF_DECIMALS,ROUNDING_METHOD));
  BigDecimal expectedAmount=expectedNumberOfBillingCycles.multiply(rate).setScale(NUMBER_OF_DECIMALS);
  assertEquals(invoice.getTotalAmount(),expectedAmount);
}
