{
  Currency currency=Currency.USD;
  List<Invoice> invoices=new ArrayList<Invoice>();
  MockBillingEventSet eventSet=new MockBillingEventSet();
  UUID accountId=UUID.randomUUID();
  DateTime startDate=new DateTime(2012,1,1,0,12,34,0);
  UUID subscriptionId1=UUID.randomUUID();
  Plan plan1=new MockPlan();
  PlanPhase plan1phase1=createMockMonthlyPlanPhase(FIFTEEN,null,PhaseType.DISCOUNT);
  BillingEvent subscription1creation=createBillingEvent(subscriptionId1,startDate,plan1,plan1phase1,1);
  eventSet.add(subscription1creation);
  UUID subscriptionId2=UUID.randomUUID();
  Plan plan2=new MockPlan();
  PlanPhase plan2phase1=createMockMonthlyPlanPhase(TWELVE,null,PhaseType.EVERGREEN);
  eventSet.add(createBillingEvent(subscriptionId2,startDate,plan2,plan2phase1,1));
  Invoice invoice1=generator.generateInvoice(accountId,eventSet,invoices,startDate,currency);
  assertNotNull(invoice1);
  assertTrue(invoice1.getBalance().compareTo(FIFTEEN.add(TWELVE)) == 0);
  invoices.add(invoice1);
  eventSet.remove(subscription1creation);
  eventSet.addSubscriptionWithAutoInvoiceOff(subscriptionId1);
  DateTime targetDate2=startDate.plusMonths(1);
  Invoice invoice2=generator.generateInvoice(accountId,eventSet,invoices,targetDate2,currency);
  assertNotNull(invoice2);
  assertTrue(invoice2.getBalance().compareTo(TWELVE) == 0);
  invoices.add(invoice2);
  DateTime targetDate3=targetDate2.plusMonths(1);
  eventSet.clearSubscriptionsWithAutoInvoiceOff();
  eventSet.add(subscription1creation);
  Invoice invoice3=generator.generateInvoice(accountId,eventSet,invoices,targetDate3,currency);
  assertNotNull(invoice3);
  assertTrue(invoice3.getBalance().compareTo(FIFTEEN.multiply(TWO).add(TWELVE)) == 0);
}
