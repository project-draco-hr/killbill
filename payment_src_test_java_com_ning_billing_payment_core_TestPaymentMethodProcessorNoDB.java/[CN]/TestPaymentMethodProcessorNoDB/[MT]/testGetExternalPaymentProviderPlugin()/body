{
  final UUID accountId=UUID.randomUUID();
  final Account account=Mockito.mock(Account.class);
  Mockito.when(account.getId()).thenReturn(accountId);
  Mockito.when(account.getExternalKey()).thenReturn(accountId.toString());
  Assert.assertEquals(paymentMethodProcessor.getPaymentMethods(account,internalCallContext).size(),0);
  final ExternalPaymentProviderPlugin providerPlugin=paymentMethodProcessor.getExternalPaymentProviderPlugin(account,internalCallContext);
  Assert.assertEquals(providerPlugin.getName(),ExternalPaymentProviderPlugin.PLUGIN_NAME);
  final List<PaymentMethod> paymentMethods=paymentMethodProcessor.getPaymentMethods(account,internalCallContext);
  Assert.assertEquals(paymentMethods.size(),1);
  Assert.assertEquals(paymentMethods.get(0).getPluginName(),ExternalPaymentProviderPlugin.PLUGIN_NAME);
  Assert.assertEquals(paymentMethods.get(0).getAccountId(),account.getId());
  final UUID externalPaymentMethodId=paymentMethods.get(0).getId();
  for (int i=0; i < 50; i++) {
    final ExternalPaymentProviderPlugin foundProviderPlugin=paymentMethodProcessor.getExternalPaymentProviderPlugin(account,internalCallContext);
    Assert.assertEquals(foundProviderPlugin.getName(),ExternalPaymentProviderPlugin.PLUGIN_NAME);
    final List<PaymentMethod> foundPaymentMethods=paymentMethodProcessor.getPaymentMethods(account,internalCallContext);
    Assert.assertEquals(foundPaymentMethods.size(),1);
    Assert.assertEquals(foundPaymentMethods.get(0).getPluginName(),ExternalPaymentProviderPlugin.PLUGIN_NAME);
    Assert.assertEquals(foundPaymentMethods.get(0).getAccountId(),account.getId());
    Assert.assertEquals(foundPaymentMethods.get(0).getId(),externalPaymentMethodId);
  }
}
