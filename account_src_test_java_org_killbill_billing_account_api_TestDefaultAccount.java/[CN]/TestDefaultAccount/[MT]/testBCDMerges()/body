{
  final UUID accountId=UUID.randomUUID();
  final Currency currency=Currency.BRL;
  final String externalKey=UUID.randomUUID().toString();
  final AccountData accountDataWithNullBCD=getAccountData(null,currency,externalKey);
  final Account accountWithNullBCD=new DefaultAccount(accountId,accountDataWithNullBCD);
  Assert.assertEquals(accountWithNullBCD.getBillCycleDayLocal(),(Integer)0);
  final AccountData accountDataWithZeroBCD=getAccountData(0,currency,externalKey);
  final Account accountWithZeroBCD=new DefaultAccount(accountId,accountDataWithZeroBCD);
  Assert.assertEquals(accountWithNullBCD.mergeWithDelegate(accountWithZeroBCD).getBillCycleDayLocal(),(Integer)0);
  final AccountData accountDataWithRealBCD=getAccountData(12,currency,externalKey);
  final Account accountWithRealBCD=new DefaultAccount(accountId,accountDataWithRealBCD);
  Assert.assertEquals(accountWithNullBCD.mergeWithDelegate(accountWithRealBCD).getBillCycleDayLocal(),(Integer)12);
  final AccountData accountDataWithAnotherRealBCD=getAccountData(20,currency,externalKey);
  final Account accountWithAnotherBCD=new DefaultAccount(accountId,accountDataWithAnotherRealBCD);
  Assert.assertEquals(accountWithAnotherBCD.mergeWithDelegate(accountWithAnotherBCD).getBillCycleDayLocal(),(Integer)20);
  try {
    Assert.assertEquals(accountWithAnotherBCD.mergeWithDelegate(accountWithRealBCD).getBillCycleDayLocal(),(Integer)20);
    Assert.fail();
  }
 catch (  final IllegalArgumentException e) {
    Assert.assertTrue(true);
  }
}
