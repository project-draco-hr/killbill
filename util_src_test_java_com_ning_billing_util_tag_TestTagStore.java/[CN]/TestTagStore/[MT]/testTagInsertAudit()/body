{
  final UUID accountId=UUID.randomUUID();
  final TagStore tagStore=new DefaultTagStore(accountId,ObjectType.ACCOUNT);
  final Tag tag=new DescriptiveTag(testTag.getId());
  tagStore.add(tag);
  tagDao.saveEntities(accountId,ObjectType.ACCOUNT,tagStore.getEntityList(),internalCallContext);
  final Map<String,Tag> savedTags=tagDao.loadEntities(accountId,ObjectType.ACCOUNT,internalCallContext);
  assertEquals(savedTags.size(),1);
  final Tag savedTag=savedTags.get(tag.getId().toString());
  assertEquals(savedTag.getTagDefinitionId(),tag.getTagDefinitionId());
  assertEquals(savedTag.getId(),tag.getId());
  final Handle handle=dbi.open();
  final String query=String.format("select * from audit_log a inner join tag_history th on a.record_id = th.history_record_id where a.table_name = 'tag_history' and th.id='%s' and a.change_type='INSERT'",tag.getId().toString());
  final List<Map<String,Object>> result=handle.select(query);
  handle.close();
  assertNotNull(result);
  assertEquals(result.size(),1);
  assertEquals(result.get(0).get("change_type"),"INSERT");
  assertNotNull(result.get(0).get("change_date"));
  final DateTime changeDate=new DateTime(result.get(0).get("change_date"));
  assertTrue(Seconds.secondsBetween(changeDate,internalCallContext.getCreatedDate()).getSeconds() < 2);
  assertEquals(result.get(0).get("changed_by"),internalCallContext.getUserName());
}
