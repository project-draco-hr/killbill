{
  try {
    final String prod="Shotgun";
    final BillingPeriod term=BillingPeriod.MONTHLY;
    final String planSet=PriceListSet.DEFAULT_PRICELIST_NAME;
    SubscriptionData subscription=createSubscription(prod,term,planSet);
    final PlanPhase trialPhase=subscription.getCurrentPhase();
    assertEquals(trialPhase.getPhaseType(),PhaseType.TRIAL);
    final DateTime expectedPhaseTrialChange=DefaultClock.addDuration(subscription.getStartDate(),trialPhase.getDuration());
    checkNextPhaseChange(subscription,1,expectedPhaseTrialChange);
    testListener.pushExpectedEvent(NextEvent.PHASE);
    Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(31));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    PlanPhase currentPhase=subscription.getCurrentPhase();
    assertEquals(currentPhase.getPhaseType(),PhaseType.EVERGREEN);
    final Duration ctd=getDurationMonth(1);
    final DateTime newChargedThroughDate=DefaultClock.addDuration(expectedPhaseTrialChange,ctd);
    billingApi.setChargedThroughDate(subscription.getId(),newChargedThroughDate.toLocalDate(),callContext);
    subscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(subscription.getId(),callContext);
    subscription.cancel(clock.getUTCNow(),callContext);
    subscription.uncancel(callContext);
    testListener.pushExpectedEvent(NextEvent.UNCANCEL);
    it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(1));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    final Plan currentPlan=subscription.getCurrentPlan();
    assertEquals(currentPlan.getProduct().getName(),prod);
    currentPhase=subscription.getCurrentPhase();
    assertEquals(currentPhase.getPhaseType(),PhaseType.EVERGREEN);
    assertListenerStatus();
  }
 catch (  EntitlementUserApiException e) {
    Assert.fail(e.getMessage());
  }
}
