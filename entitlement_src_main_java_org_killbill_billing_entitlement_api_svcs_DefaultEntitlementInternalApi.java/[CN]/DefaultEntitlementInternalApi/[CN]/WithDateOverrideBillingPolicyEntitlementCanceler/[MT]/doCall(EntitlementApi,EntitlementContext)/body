{
  DateTime effectiveDate=dateHelper.fromLocalDateAndReferenceTime(updatedPluginContext.getEffectiveDate(),entitlement.getSubscriptionBase().getStartDate(),internalCallContext);
  if (effectiveDate.compareTo(entitlement.getSubscriptionBase().getEndDate()) > 0) {
    effectiveDate=entitlement.getSubscriptionBase().getEndDate();
  }
  final BlockingState newBlockingState=new DefaultBlockingState(entitlement.getId(),BlockingStateType.SUBSCRIPTION,DefaultEntitlementApi.ENT_STATE_CANCELLED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,false,effectiveDate);
  final Collection<NotificationEvent> notificationEvents=new ArrayList<NotificationEvent>();
  final Collection<BlockingState> addOnsBlockingStates=entitlement.computeAddOnBlockingStates(effectiveDate,notificationEvents,callContext,internalCallContext);
  final Optional<UUID> bundleIdOptional=Optional.<UUID>fromNullable(entitlement.getBundleId());
  blockingStates.put(newBlockingState,bundleIdOptional);
  for (  final BlockingState blockingState : addOnsBlockingStates) {
    blockingStates.put(blockingState,bundleIdOptional);
  }
  if (notificationEventsWithEffectiveDate.get(effectiveDate) == null) {
    notificationEventsWithEffectiveDate.put(effectiveDate,notificationEvents);
  }
 else {
    notificationEventsWithEffectiveDate.get(effectiveDate).addAll(notificationEvents);
  }
  return null;
}
