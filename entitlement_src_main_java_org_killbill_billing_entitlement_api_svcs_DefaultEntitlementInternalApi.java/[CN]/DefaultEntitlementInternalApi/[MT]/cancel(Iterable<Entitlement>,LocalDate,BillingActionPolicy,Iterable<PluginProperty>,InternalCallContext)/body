{
  final CallContext callContext=internalCallContextFactory.createCallContext(internalCallContext);
  final ImmutableMap.Builder<BlockingState,Optional<UUID>> states=new ImmutableMap.Builder<BlockingState,Optional<UUID>>();
  final Map<DateTime,Collection<NotificationEvent>> notificationEvents=new HashMap<DateTime,Collection<NotificationEvent>>();
  for (  final Entitlement entitlement : entitlements) {
    final DefaultEntitlement defaultEntitlement=getDefaultEntitlement(entitlement,internalCallContext);
    final Collection<BlockingState> blockingStates=new ArrayList<BlockingState>();
    try {
      cancelEntitlementWithDateOverrideBillingPolicy(defaultEntitlement,effectiveDate,billingPolicy,blockingStates,notificationEvents,properties,callContext,internalCallContext);
    }
 catch (    final EntitlementApiException e) {
      if (e.getCode() != ErrorCode.SUB_CANCEL_BAD_STATE.getCode()) {
        throw e;
      }
    }
    for (    final BlockingState blockingState : blockingStates) {
      states.put(blockingState,Optional.<UUID>fromNullable(entitlement.getBundleId()));
    }
  }
  blockingStateDao.setBlockingStatesAndPostBlockingTransitionEvent(states.build(),internalCallContext);
  for (  final DateTime effectiveDateForNotification : notificationEvents.keySet()) {
    for (    final NotificationEvent notificationEvent : notificationEvents.get(effectiveDateForNotification)) {
      recordFutureNotification(effectiveDateForNotification,notificationEvent,internalCallContext);
    }
  }
}
