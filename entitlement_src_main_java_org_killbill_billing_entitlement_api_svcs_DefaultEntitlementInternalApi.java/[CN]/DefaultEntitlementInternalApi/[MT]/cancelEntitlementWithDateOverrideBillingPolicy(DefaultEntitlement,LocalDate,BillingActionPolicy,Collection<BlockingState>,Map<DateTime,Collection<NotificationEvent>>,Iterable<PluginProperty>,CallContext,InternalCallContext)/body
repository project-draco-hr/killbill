{
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.CANCEL_SUBSCRIPTION,entitlement.getAccountId(),null,entitlement.getBundleId(),entitlement.getExternalKey(),null,localCancelDate,properties,callContext);
  final WithEntitlementPlugin<Entitlement> cancelEntitlementWithPlugin=new WithEntitlementPlugin<Entitlement>(){
    @Override public Entitlement doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      if (entitlement.getState() == EntitlementState.CANCELLED) {
        throw new EntitlementApiException(ErrorCode.SUB_CANCEL_BAD_STATE,entitlement.getId(),EntitlementState.CANCELLED);
      }
      final LocalDate effectiveLocalDate=new LocalDate(updatedPluginContext.getEffectiveDate(),entitlement.getAccountTimeZone());
      final DateTime effectiveDate=dateHelper.fromLocalDateAndReferenceTime(effectiveLocalDate,entitlement.getSubscriptionBase().getStartDate(),internalCallContext);
      try {
        entitlement.getSubscriptionBase().cancelWithPolicy(billingPolicy,callContext);
      }
 catch (      final SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
      final BlockingState newBlockingState=new DefaultBlockingState(entitlement.getId(),BlockingStateType.SUBSCRIPTION,DefaultEntitlementApi.ENT_STATE_CANCELLED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,false,effectiveDate);
      final Collection<NotificationEvent> notificationEvents=new ArrayList<NotificationEvent>();
      final Collection<BlockingState> addOnsBlockingStates=entitlement.computeAddOnBlockingStates(effectiveDate,notificationEvents,callContext,internalCallContext);
      blockingStates.add(newBlockingState);
      blockingStates.addAll(addOnsBlockingStates);
      if (notificationEventsWithEffectiveDate.get(effectiveDate) == null) {
        notificationEventsWithEffectiveDate.put(effectiveDate,notificationEvents);
      }
 else {
        notificationEventsWithEffectiveDate.get(effectiveDate).addAll(notificationEvents);
      }
      return null;
    }
  }
;
  pluginExecution.executeWithPlugin(cancelEntitlementWithPlugin,pluginContext);
}
