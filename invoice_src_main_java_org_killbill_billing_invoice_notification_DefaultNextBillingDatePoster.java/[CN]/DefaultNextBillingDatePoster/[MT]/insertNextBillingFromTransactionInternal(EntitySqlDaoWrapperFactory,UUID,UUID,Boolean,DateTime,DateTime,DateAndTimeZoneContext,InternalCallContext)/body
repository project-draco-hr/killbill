{
  final NotificationQueue nextBillingQueue;
  try {
    nextBillingQueue=notificationQueueService.getNotificationQueue(DefaultInvoiceService.INVOICE_SERVICE_NAME,DefaultNextBillingDateNotifier.NEXT_BILLING_DATE_NOTIFIER_QUEUE);
    final List<NotificationEventWithMetadata<NextBillingDateNotificationKey>> futureNotifications=nextBillingQueue.getFutureNotificationFromTransactionForSearchKeys(internalCallContext.getAccountRecordId(),internalCallContext.getTenantRecordId(),entitySqlDaoWrapperFactory.getHandle().getConnection());
    final NotificationEventWithMetadata<NextBillingDateNotificationKey> existingFutureNotificationWithSameDate=Iterables.tryFind(futureNotifications,new Predicate<NotificationEventWithMetadata<NextBillingDateNotificationKey>>(){
      @Override public boolean apply(      final NotificationEventWithMetadata<NextBillingDateNotificationKey> input){
        final boolean isEventDryRunForNotifications=input.getEvent().isDryRunForInvoiceNotification() != null ? input.getEvent().isDryRunForInvoiceNotification() : false;
        final LocalDate notificationEffectiveLocaleDate=new LocalDate(futureNotificationTime,accountDateAndTimeZoneContext.getAccountTimeZone());
        final LocalDate eventEffectiveLocaleDate=new LocalDate(input.getEffectiveDate(),accountDateAndTimeZoneContext.getAccountTimeZone());
        return notificationEffectiveLocaleDate.compareTo(eventEffectiveLocaleDate) == 0 && ((isDryRunForInvoiceNotification && isEventDryRunForNotifications) || (!isDryRunForInvoiceNotification && !isEventDryRunForNotifications));
      }
    }
).orNull();
    if (existingFutureNotificationWithSameDate == null) {
      log.info("Queuing next billing date notification at {} for subscriptionId {}",futureNotificationTime.toString(),subscriptionId.toString());
      nextBillingQueue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory.getHandle().getConnection(),futureNotificationTime,new NextBillingDateNotificationKey(subscriptionId,targetDate,isDryRunForInvoiceNotification),internalCallContext.getUserToken(),internalCallContext.getAccountRecordId(),internalCallContext.getTenantRecordId());
    }
 else     if (log.isDebugEnabled()) {
      log.debug("*********************   SKIPPING Queuing next billing date notification at {} for subscriptionId {} *******************",futureNotificationTime.toString(),subscriptionId.toString());
    }
  }
 catch (  final NoSuchNotificationQueue e) {
    log.error("Attempting to put items on a non-existent queue (NextBillingDateNotifier).",e);
  }
catch (  final IOException e) {
    log.error("Failed to serialize notificationKey for subscriptionId {}",subscriptionId);
  }
}
