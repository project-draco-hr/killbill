{
  final AccountData accountData=getAccountData(1);
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  add_AUTO_PAY_OFF_Tag(account.getId(),ObjectType.ACCOUNT);
  clock.setDay(new LocalDate(2012,4,1));
  busHandler.pushExpectedEvents(NextEvent.INVOICE_ADJUSTMENT);
  final InvoiceItem externalCharge=new ExternalChargeInvoiceItem(null,account.getId(),null,"Initial external charge",clock.getUTCToday(),BigDecimal.TEN,Currency.USD);
  final InvoiceItem item1=invoiceUserApi.insertExternalCharges(account.getId(),clock.getUTCToday(),ImmutableList.<InvoiceItem>of(externalCharge),callContext).get(0);
  assertListenerStatus();
  final Invoice invoice=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  Payment payment1=createPaymentAndCheckForCompletion(account,invoice,new BigDecimal("4.00"),account.getCurrency(),NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  Invoice invoice1=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  assertTrue(invoice1.getBalance().compareTo(new BigDecimal("6.00")) == 0);
  assertTrue(invoice1.getPaidAmount().compareTo(new BigDecimal("4.00")) == 0);
  assertTrue(invoice1.getChargedAmount().compareTo(BigDecimal.TEN) == 0);
  BigDecimal accountBalance=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance.compareTo(new BigDecimal("6.00")) == 0);
  Payment payment2=createPaymentAndCheckForCompletion(account,invoice,new BigDecimal("6.00"),account.getCurrency(),NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  invoice1=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  assertTrue(invoice1.getBalance().compareTo(BigDecimal.ZERO) == 0);
  assertTrue(invoice1.getPaidAmount().compareTo(BigDecimal.TEN) == 0);
  assertTrue(invoice1.getChargedAmount().compareTo(BigDecimal.TEN) == 0);
  accountBalance=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance.compareTo(BigDecimal.ZERO) == 0);
  final Map<UUID,BigDecimal> iias=new HashMap<UUID,BigDecimal>();
  iias.put(item1.getId(),new BigDecimal("4.00"));
  payment1=refundPaymentWithInvoiceItemAdjAndCheckForCompletion(account,payment1,new BigDecimal("4.00"),Currency.USD,iias,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT,NextEvent.INVOICE_ADJUSTMENT);
  invoice1=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  assertTrue(invoice1.getBalance().compareTo(BigDecimal.ZERO) == 0);
  accountBalance=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance.compareTo(BigDecimal.ZERO) == 0);
  iias.put(item1.getId(),new BigDecimal("6.00"));
  payment2=refundPaymentWithInvoiceItemAdjAndCheckForCompletion(account,payment2,new BigDecimal("6.00"),Currency.USD,iias,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT,NextEvent.INVOICE_ADJUSTMENT);
  invoice1=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  assertTrue(invoice1.getBalance().compareTo(BigDecimal.ZERO) == 0);
  accountBalance=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance.compareTo(BigDecimal.ZERO) == 0);
  Assert.assertEquals(invoice1.getPayments().size(),4);
  Assert.assertEquals(invoice1.getPayments().get(0).getAmount().compareTo(new BigDecimal("4.00")),0);
  Assert.assertNull(invoice1.getPayments().get(0).getLinkedInvoicePaymentId());
  Assert.assertNull(invoice1.getPayments().get(0).getPaymentCookieId());
  Assert.assertEquals(invoice1.getPayments().get(0).getPaymentId(),payment1.getId());
  Assert.assertEquals(invoice1.getPayments().get(0).getType(),InvoicePaymentType.ATTEMPT);
  Assert.assertTrue(invoice1.getPayments().get(0).isSuccess());
  Assert.assertEquals(invoice1.getPayments().get(1).getAmount().compareTo(new BigDecimal("6.00")),0);
  Assert.assertNull(invoice1.getPayments().get(1).getLinkedInvoicePaymentId());
  Assert.assertNull(invoice1.getPayments().get(1).getPaymentCookieId());
  Assert.assertEquals(invoice1.getPayments().get(1).getPaymentId(),payment2.getId());
  Assert.assertEquals(invoice1.getPayments().get(1).getType(),InvoicePaymentType.ATTEMPT);
  Assert.assertTrue(invoice1.getPayments().get(1).isSuccess());
  Assert.assertEquals(invoice1.getPayments().get(2).getAmount().compareTo(new BigDecimal("-4.00")),0);
  Assert.assertEquals(invoice1.getPayments().get(2).getLinkedInvoicePaymentId(),invoice1.getPayments().get(0).getId());
  Assert.assertEquals(invoice1.getPayments().get(2).getPaymentCookieId(),payment1.getTransactions().get(1).getExternalKey());
  Assert.assertEquals(invoice1.getPayments().get(2).getPaymentId(),payment1.getId());
  Assert.assertEquals(invoice1.getPayments().get(2).getType(),InvoicePaymentType.REFUND);
  Assert.assertTrue(invoice1.getPayments().get(2).isSuccess());
  Assert.assertEquals(invoice1.getPayments().get(3).getAmount().compareTo(new BigDecimal("-6.00")),0);
  Assert.assertEquals(invoice1.getPayments().get(3).getLinkedInvoicePaymentId(),invoice1.getPayments().get(1).getId());
  Assert.assertEquals(invoice1.getPayments().get(3).getPaymentCookieId(),payment2.getTransactions().get(1).getExternalKey());
  Assert.assertEquals(invoice1.getPayments().get(3).getPaymentId(),payment2.getId());
  Assert.assertEquals(invoice1.getPayments().get(3).getType(),InvoicePaymentType.REFUND);
  Assert.assertTrue(invoice1.getPayments().get(3).isSuccess());
}
