{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  final AccountData accountData=getAccountData(0);
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  Invoice invoice2=invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,6,30),callContext);
  Payment payment1=paymentChecker.checkPayment(account.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,5,31),new BigDecimal("249.95"),TransactionStatus.SUCCESS,invoice2.getId(),Currency.USD));
  Assert.assertEquals(payment1.getPurchasedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment1.getTransactions().get(0).getProcessedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(invoice2.getBalance().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(invoiceUserApi.getAccountBalance(account.getId(),callContext).compareTo(invoice2.getBalance()),0);
  payment1=refundPaymentAndCheckForCompletion(account,payment1,BigDecimal.TEN,Currency.USD,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  Assert.assertEquals(payment1.getPurchasedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getRefundedAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(payment1.getTransactions().size(),2);
  Assert.assertEquals(payment1.getTransactions().get(0).getAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getTransactions().get(0).getProcessedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getTransactions().get(1).getAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(payment1.getTransactions().get(1).getProcessedAmount().compareTo(BigDecimal.TEN),0);
  invoice2=invoiceUserApi.getInvoice(invoice2.getId(),callContext);
  Assert.assertEquals(invoice2.getBalance().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(invoiceUserApi.getAccountBalance(account.getId(),callContext).compareTo(invoice2.getBalance()),0);
  final Map<UUID,BigDecimal> iias=new HashMap<UUID,BigDecimal>();
  iias.put(invoice2.getInvoiceItems().get(0).getId(),BigDecimal.ONE);
  payment1=refundPaymentWithInvoiceItemAdjAndCheckForCompletion(account,payment1,BigDecimal.ONE,Currency.USD,iias,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT,NextEvent.INVOICE_ADJUSTMENT);
  Assert.assertEquals(payment1.getPurchasedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getRefundedAmount().compareTo(new BigDecimal("11")),0);
  Assert.assertEquals(payment1.getTransactions().size(),3);
  Assert.assertEquals(payment1.getTransactions().get(0).getAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getTransactions().get(0).getProcessedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getTransactions().get(1).getAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(payment1.getTransactions().get(1).getProcessedAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(payment1.getTransactions().get(2).getAmount().compareTo(BigDecimal.ONE),0);
  Assert.assertEquals(payment1.getTransactions().get(2).getProcessedAmount().compareTo(BigDecimal.ONE),0);
  invoice2=invoiceUserApi.getInvoice(invoice2.getId(),callContext);
  Assert.assertEquals(invoice2.getBalance().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(invoiceUserApi.getAccountBalance(account.getId(),callContext).compareTo(invoice2.getBalance()),0);
  iias.put(invoice2.getInvoiceItems().get(0).getId(),BigDecimal.TEN);
  payment1=refundPaymentWithInvoiceItemAdjAndCheckForCompletion(account,payment1,BigDecimal.TEN,Currency.USD,iias,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT,NextEvent.INVOICE_ADJUSTMENT);
  Assert.assertEquals(payment1.getPurchasedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getRefundedAmount().compareTo(new BigDecimal("21")),0);
  Assert.assertEquals(payment1.getTransactions().size(),4);
  Assert.assertEquals(payment1.getTransactions().get(0).getAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getTransactions().get(0).getProcessedAmount().compareTo(new BigDecimal("249.95")),0);
  Assert.assertEquals(payment1.getTransactions().get(1).getAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(payment1.getTransactions().get(1).getProcessedAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(payment1.getTransactions().get(2).getAmount().compareTo(BigDecimal.ONE),0);
  Assert.assertEquals(payment1.getTransactions().get(2).getProcessedAmount().compareTo(BigDecimal.ONE),0);
  Assert.assertEquals(payment1.getTransactions().get(3).getAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(payment1.getTransactions().get(3).getProcessedAmount().compareTo(BigDecimal.TEN),0);
  invoice2=invoiceUserApi.getInvoice(invoice2.getId(),callContext);
  Assert.assertEquals(invoice2.getBalance().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(invoiceUserApi.getAccountBalance(account.getId(),callContext).compareTo(invoice2.getBalance()),0);
}
