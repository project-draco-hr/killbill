{
  clock.setDay(new LocalDate(2012,4,1));
  final AccountData accountData=getAccountData(1);
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  paymentPlugin.makeNextPaymentFailWithError();
  createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR);
  clock.addDays(30);
  assertListenerStatus();
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  final Invoice invoice1=invoices.get(0).getInvoiceItems().get(0).getInvoiceItemType() == InvoiceItemType.RECURRING ? invoices.get(0) : invoices.get(1);
  assertTrue(invoice1.getBalance().compareTo(new BigDecimal("249.95")) == 0);
  assertTrue(invoice1.getPaidAmount().compareTo(BigDecimal.ZERO) == 0);
  assertTrue(invoice1.getChargedAmount().compareTo(new BigDecimal("249.95")) == 0);
  assertEquals(invoice1.getPayments().size(),1);
  assertEquals(invoice1.getPayments().get(0).getAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(invoice1.getPayments().get(0).getCurrency(),Currency.USD);
  assertFalse(invoice1.getPayments().get(0).isSuccess());
  final BigDecimal accountBalance1=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance1.compareTo(new BigDecimal("249.95")) == 0);
  final List<Payment> payments=paymentApi.getAccountPayments(account.getId(),false,ImmutableList.<PluginProperty>of(),callContext);
  assertEquals(payments.size(),1);
  assertEquals(payments.get(0).getTransactions().size(),1);
  assertEquals(payments.get(0).getTransactions().get(0).getAmount().compareTo(new BigDecimal("249.95")),0);
  assertEquals(payments.get(0).getTransactions().get(0).getCurrency(),Currency.USD);
  assertEquals(payments.get(0).getTransactions().get(0).getProcessedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payments.get(0).getTransactions().get(0).getProcessedCurrency(),Currency.USD);
  busHandler.pushExpectedEvents(NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(8);
  assertListenerStatus();
  final Invoice invoice2=invoiceUserApi.getInvoice(invoice1.getId(),callContext);
  assertTrue(invoice2.getBalance().compareTo(BigDecimal.ZERO) == 0);
  assertTrue(invoice2.getPaidAmount().compareTo(new BigDecimal("249.95")) == 0);
  assertTrue(invoice2.getChargedAmount().compareTo(new BigDecimal("249.95")) == 0);
  assertEquals(invoice2.getPayments().size(),1);
  assertTrue(invoice2.getPayments().get(0).isSuccess());
  final BigDecimal accountBalance2=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance2.compareTo(BigDecimal.ZERO) == 0);
  final List<Payment> payments2=paymentApi.getAccountPayments(account.getId(),false,ImmutableList.<PluginProperty>of(),callContext);
  assertEquals(payments2.size(),1);
  assertEquals(payments2.get(0).getTransactions().size(),2);
  assertEquals(payments2.get(0).getTransactions().get(1).getAmount().compareTo(new BigDecimal("249.95")),0);
  assertEquals(payments2.get(0).getTransactions().get(1).getCurrency(),Currency.USD);
  assertEquals(payments2.get(0).getTransactions().get(1).getProcessedAmount().compareTo(new BigDecimal("249.95")),0);
  assertEquals(payments2.get(0).getTransactions().get(1).getProcessedCurrency(),Currency.USD);
}
