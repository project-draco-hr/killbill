{
  final DefaultMutableAccountData accountData=new DefaultMutableAccountData(this);
  if (externalKey != null && currentAccount.getExternalKey() != null && !currentAccount.getExternalKey().equals(externalKey)) {
    throw new IllegalArgumentException(String.format("Killbill doesn't support updating the account external key yet: new=%s, current=%s",externalKey,currentAccount.getExternalKey()));
  }
 else {
    accountData.setExternalKey(currentAccount.getExternalKey());
  }
  if (currency != null && currentAccount.getCurrency() != null && !currentAccount.getCurrency().equals(currency)) {
    throw new IllegalArgumentException(String.format("Killbill doesn't support updating the account currency yet: new=%s, current=%s",currency,currentAccount.getCurrency()));
  }
 else {
    accountData.setCurrency(currentAccount.getCurrency());
  }
  if (billCycleDay != null && currentAccount.getBillCycleDay() != null && currentAccount.getBillCycleDay().getDayOfMonthLocal() != 0 && currentAccount.getBillCycleDay().getDayOfMonthUTC() != 0) {
    if ((billCycleDay.getDayOfMonthUTC() != currentAccount.getBillCycleDay().getDayOfMonthUTC() || billCycleDay.getDayOfMonthLocal() != currentAccount.getBillCycleDay().getDayOfMonthLocal())) {
      throw new IllegalArgumentException(String.format("Killbill doesn't support updating the account BCD yet: new=%s, current=%s",billCycleDay,currentAccount.getBillCycleDay()));
    }
  }
 else   if (billCycleDay != null) {
    accountData.setBillCycleDay(billCycleDay);
  }
 else {
    accountData.setBillCycleDay(currentAccount.getBillCycleDay());
  }
  accountData.setEmail(Objects.firstNonNull(email,currentAccount.getEmail()));
  accountData.setName(Objects.firstNonNull(name,currentAccount.getName()));
  accountData.setFirstNameLength(Objects.firstNonNull(firstNameLength,currentAccount.getFirstNameLength()));
  accountData.setPaymentMethodId(Optional.<UUID>fromNullable(paymentMethodId).or(Optional.<UUID>fromNullable(currentAccount.getPaymentMethodId())).orNull());
  accountData.setTimeZone(Objects.firstNonNull(timeZone,currentAccount.getTimeZone()));
  accountData.setLocale(Objects.firstNonNull(locale,currentAccount.getLocale()));
  accountData.setAddress1(Objects.firstNonNull(address1,currentAccount.getAddress1()));
  accountData.setAddress2(Objects.firstNonNull(address2,currentAccount.getAddress2()));
  accountData.setCompanyName(Objects.firstNonNull(companyName,currentAccount.getCompanyName()));
  accountData.setCity(Objects.firstNonNull(city,currentAccount.getCity()));
  accountData.setStateOrProvince(Objects.firstNonNull(stateOrProvince,currentAccount.getStateOrProvince()));
  accountData.setCountry(Objects.firstNonNull(country,currentAccount.getCountry()));
  accountData.setPostalCode(Objects.firstNonNull(postalCode,currentAccount.getPostalCode()));
  accountData.setPhone(Objects.firstNonNull(phone,currentAccount.getPhone()));
  accountData.setIsMigrated(Objects.firstNonNull(isMigrated,currentAccount.isMigrated()));
  accountData.setIsNotifiedForInvoices(Objects.firstNonNull(isNotifiedForInvoices,currentAccount.isNotifiedForInvoices()));
  return new DefaultAccount(currentAccount.getId(),accountData);
}
