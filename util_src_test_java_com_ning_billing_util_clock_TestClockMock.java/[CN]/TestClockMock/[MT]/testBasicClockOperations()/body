{
  final ClockMock clock=new ClockMock();
  final DateTime startingTime=new DateTime(DateTimeZone.UTC);
  Awaitility.await().atMost(999,MILLISECONDS).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return clock.getUTCNow().isAfter(startingTime);
    }
  }
);
  clock.setTime(new DateTime(2012,5,1,1,2,3,DateTimeZone.UTC));
  Assert.assertEquals(clock.getUTCToday(),new LocalDate(2012,5,1));
  final DateTime utcNowAfterSetTime=clock.getUTCNow();
  Assert.assertEquals(utcNowAfterSetTime.getHourOfDay(),1);
  Assert.assertEquals(utcNowAfterSetTime.getMinuteOfHour(),2);
  Assert.assertEquals(utcNowAfterSetTime.getSecondOfMinute(),3);
  clock.addDays(1);
  Assert.assertEquals(clock.getUTCToday(),new LocalDate(2012,5,2));
  clock.addMonths(1);
  Assert.assertEquals(clock.getUTCToday(),new LocalDate(2012,6,2));
  clock.addYears(1);
  Assert.assertEquals(clock.getUTCToday(),new LocalDate(2013,6,2));
  clock.setDay(new LocalDate(2045,12,12));
  Assert.assertEquals(clock.getUTCToday(),new LocalDate(2045,12,12));
  clock.resetDeltaFromReality();
  Assert.assertTrue(clock.getUTCNow().isAfter(startingTime));
  Assert.assertTrue(clock.getUTCNow().isBefore(startingTime.plusMinutes(1)));
}
