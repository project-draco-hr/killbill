{
  final BigDecimal creditAmount=BigDecimal.TEN;
  final UUID invoiceId=UUID.randomUUID();
  final String invoiceNumber=UUID.randomUUID().toString();
  final DateTime requestedDate=clock.getUTCNow();
  final DateTime effectiveDate=clock.getUTCNow();
  final String reason=UUID.randomUUID().toString();
  final UUID accountId=UUID.randomUUID();
  final CreditJson creditJson=new CreditJson(creditAmount,invoiceId,invoiceNumber,requestedDate,effectiveDate,reason,accountId);
  Assert.assertEquals(creditJson.getRequestedDate(),requestedDate);
  Assert.assertEquals(creditJson.getEffectiveDate(),effectiveDate);
  Assert.assertEquals(creditJson.getCreditAmount(),creditAmount);
  Assert.assertEquals(creditJson.getInvoiceId(),invoiceId);
  Assert.assertEquals(creditJson.getInvoiceNumber(),invoiceNumber);
  Assert.assertEquals(creditJson.getReason(),reason);
  Assert.assertEquals(creditJson.getAccountId(),accountId);
  final String asJson=mapper.writeValueAsString(creditJson);
  Assert.assertEquals(asJson,"{\"creditAmount\":" + creditJson.getCreditAmount() + ","+ "\"invoiceId\":\""+ creditJson.getInvoiceId().toString()+ "\","+ "\"invoiceNumber\":\""+ creditJson.getInvoiceNumber()+ "\","+ "\"requestedDate\":\""+ creditJson.getRequestedDate().toDateTimeISO().toString()+ "\","+ "\"effectiveDate\":\""+ creditJson.getEffectiveDate().toDateTimeISO().toString()+ "\","+ "\"reason\":\""+ creditJson.getReason()+ "\","+ "\"accountId\":\""+ creditJson.getAccountId().toString()+ "\"}");
  final CreditJson fromJson=mapper.readValue(asJson,CreditJson.class);
  Assert.assertEquals(fromJson,creditJson);
}
