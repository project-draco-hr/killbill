{
  final ByteSource salt=rng.nextBytes();
  final String hashedPasswordBase64=new SimpleHash(KillbillCredentialsMatcher.HASH_ALGORITHM_NAME,password,salt.toBase64(),KillbillCredentialsMatcher.HASH_ITERATIONS).toBase64();
  final DateTime createdDate=clock.getUTCNow();
  dbi.inTransaction(new TransactionCallback<Void>(){
    @Override public Void inTransaction(    final Handle handle,    final TransactionStatus status) throws Exception {
      final UserRolesSqlDao userRolesSqlDao=handle.attach(UserRolesSqlDao.class);
      for (      String role : roles) {
        final RolesPermissionsSqlDao rolesPermissionsSqlDao=handle.attach(RolesPermissionsSqlDao.class);
        final List<RolesPermissionsModelDao> currentRolePermissions=rolesPermissionsSqlDao.getByRoleName(role);
        if (currentRolePermissions.isEmpty()) {
          throw new SecurityApiException(ErrorCode.SECURITY_INVALID_ROLE,role);
        }
        userRolesSqlDao.create(new UserRolesModelDao(username,role,createdDate,createdBy));
      }
      final UsersSqlDao usersSqlDao=handle.attach(UsersSqlDao.class);
      final UserModelDao userModelDao=usersSqlDao.getByUsername(username);
      if (userModelDao != null) {
        throw new SecurityApiException(ErrorCode.SECURITY_USER_ALREADY_EXISTS,username);
      }
      usersSqlDao.create(new UserModelDao(username,hashedPasswordBase64,salt.toBase64(),createdDate,createdBy));
      return null;
    }
  }
);
}
