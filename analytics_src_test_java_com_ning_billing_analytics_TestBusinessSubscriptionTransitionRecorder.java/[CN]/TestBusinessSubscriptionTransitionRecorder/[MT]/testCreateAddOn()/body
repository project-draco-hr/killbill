{
  final UUID externalKey=UUID.randomUUID();
  final CatalogService catalogService=Mockito.mock(CatalogService.class);
  Mockito.when(catalogService.getFullCatalog()).thenReturn(Mockito.mock(Catalog.class));
  final BusinessSubscriptionTransitionSqlDao sqlDao=new MockBusinessSubscriptionTransitionSqlDao();
  final BusinessSubscription nextPrevSubscription=new BusinessSubscription(UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),Currency.USD,new DateTime(DateTimeZone.UTC),Subscription.SubscriptionState.ACTIVE,UUID.randomUUID(),UUID.randomUUID(),catalogService.getFullCatalog());
  sqlDao.createTransition(new BusinessSubscriptionTransition(10L,externalKey.toString(),UUID.randomUUID().toString(),new DateTime(DateTimeZone.UTC),BusinessSubscriptionEvent.valueOf("ADD_MISC"),null,nextPrevSubscription));
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getKey()).thenReturn(externalKey.toString());
  final EntitlementUserApi entitlementApi=Mockito.mock(EntitlementUserApi.class);
  Mockito.when(entitlementApi.getBundleFromId(Mockito.<UUID>any())).thenReturn(bundle);
  final Account account=Mockito.mock(Account.class);
  Mockito.when(account.getExternalKey()).thenReturn(externalKey.toString());
  final AccountUserApi accountApi=Mockito.mock(AccountUserApi.class);
  Mockito.when(accountApi.getAccountById(bundle.getAccountId())).thenReturn(account);
  final BusinessSubscriptionTransitionRecorder recorder=new BusinessSubscriptionTransitionRecorder(sqlDao,catalogService,entitlementApi,accountApi);
  final EffectiveSubscriptionEvent eventEffective=Mockito.mock(EffectiveSubscriptionEvent.class);
  Mockito.when(eventEffective.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(eventEffective.getSubscriptionId()).thenReturn(UUID.randomUUID());
  Mockito.when(eventEffective.getRequestedTransitionTime()).thenReturn(new DateTime(DateTimeZone.UTC));
  Mockito.when(eventEffective.getNextPlan()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(eventEffective.getEffectiveTransitionTime()).thenReturn(new DateTime(DateTimeZone.UTC));
  Mockito.when(eventEffective.getSubscriptionStartDate()).thenReturn(new DateTime(DateTimeZone.UTC));
  recorder.subscriptionCreated(eventEffective);
  Assert.assertEquals(sqlDao.getTransitions(externalKey.toString()).size(),2);
  final BusinessSubscriptionTransition transition=sqlDao.getTransitions(externalKey.toString()).get(1);
  Assert.assertEquals(transition.getTotalOrdering(),(long)eventEffective.getTotalOrdering());
  Assert.assertEquals(transition.getAccountKey(),externalKey.toString());
  Assert.assertNull(transition.getPreviousSubscription());
}
