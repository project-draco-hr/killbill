{
  checkNotNullParameter(account,"account");
  checkNotNullParameter(paymentId,"paymentId");
  checkNotNullParameter(paymentTransactionExternalKey,"paymentTransactionExternalKey");
  final String transactionType=TransactionType.CHARGEBACK.name();
  Payment payment=null;
  PaymentTransaction paymentTransaction=null;
  try {
    logEnterAPICall(transactionType,account,null,paymentId,null,null,null,null,paymentTransactionExternalKey,null,null);
    final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(account.getId(),callContext);
    payment=paymentProcessor.createChargebackReversal(IS_API_PAYMENT,NULL_ATTEMPT_ID,account,paymentId,paymentTransactionExternalKey,null,null,true,callContext,internalCallContext);
    paymentTransaction=Iterables.<PaymentTransaction>find(Lists.<PaymentTransaction>reverse(payment.getTransactions()),new Predicate<PaymentTransaction>(){
      @Override public boolean apply(      final PaymentTransaction input){
        return paymentTransactionExternalKey.equals(input.getExternalKey());
      }
    }
);
    return payment;
  }
  finally {
    logExitAPICall(transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,null);
  }
}
