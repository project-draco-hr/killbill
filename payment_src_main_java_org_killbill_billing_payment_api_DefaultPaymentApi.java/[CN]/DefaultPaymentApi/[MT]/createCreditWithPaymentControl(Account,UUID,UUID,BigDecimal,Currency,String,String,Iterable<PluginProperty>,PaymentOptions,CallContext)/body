{
  final List<String> paymentControlPluginNames=toPaymentControlPluginNames(paymentOptions);
  if (paymentControlPluginNames.isEmpty()) {
    return createCredit(account,paymentMethodId,paymentId,amount,currency,paymentExternalKey,paymentTransactionExternalKey,properties,callContext);
  }
  checkNotNullParameter(account,"account");
  checkNotNullParameter(paymentMethodId,"paymentMethodId");
  if (paymentId == null) {
    checkNotNullParameter(amount,"amount");
    checkPositiveAmount(amount);
    checkNotNullParameter(currency,"currency");
  }
  checkNotNullParameter(properties,"plugin properties");
  logAPICall(TransactionType.CREDIT.name(),account,paymentMethodId,paymentId,null,amount,currency,paymentExternalKey,paymentTransactionExternalKey);
  final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(account.getId(),callContext);
  return pluginControlPaymentProcessor.createCredit(IS_API_PAYMENT,account,paymentMethodId,paymentId,amount,currency,paymentExternalKey,paymentTransactionExternalKey,properties,paymentControlPluginNames,callContext,internalCallContext);
}
