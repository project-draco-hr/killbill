{
  final List<String> paymentControlPluginNames=toPaymentControlPluginNames(paymentOptions);
  if (paymentControlPluginNames.isEmpty()) {
    return createVoid(account,paymentId,paymentTransactionExternalKey,properties,callContext);
  }
  checkNotNullParameter(account,"account");
  checkNotNullParameter(paymentId,"paymentId");
  checkNotNullParameter(properties,"plugin properties");
  final String transactionType=TransactionType.VOID.name();
  Payment payment=null;
  PaymentTransaction paymentTransaction=null;
  try {
    logEnterAPICall(transactionType,account,null,paymentId,null,null,null,null,paymentTransactionExternalKey,null,paymentControlPluginNames);
    final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(account.getId(),callContext);
    payment=pluginControlPaymentProcessor.createVoid(IS_API_PAYMENT,account,paymentId,paymentTransactionExternalKey,properties,paymentControlPluginNames,callContext,internalCallContext);
    paymentTransaction=findPaymentTransaction(payment,paymentTransactionExternalKey);
    return payment;
  }
  finally {
    logExitAPICall(transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,paymentControlPluginNames);
  }
}
