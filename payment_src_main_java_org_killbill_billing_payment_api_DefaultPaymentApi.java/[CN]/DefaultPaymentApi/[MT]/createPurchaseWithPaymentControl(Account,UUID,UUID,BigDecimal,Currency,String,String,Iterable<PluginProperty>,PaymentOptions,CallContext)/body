{
  final List<String> paymentControlPluginNames=toPaymentControlPluginNames(paymentOptions);
  if (paymentControlPluginNames.isEmpty()) {
    return createPurchase(account,paymentMethodId,paymentId,amount,currency,paymentExternalKey,paymentTransactionExternalKey,properties,callContext);
  }
  checkNotNullParameter(account,"account");
  if (paymentId == null) {
    checkNotNullParameter(amount,"amount");
    checkNotNullParameter(currency,"currency");
  }
  checkNotNullParameter(paymentTransactionExternalKey,"paymentTransactionExternalKey");
  checkNotNullParameter(properties,"plugin properties");
  if (paymentMethodId == null && !paymentOptions.isExternalPayment()) {
    throw new PaymentApiException(ErrorCode.PAYMENT_INVALID_PARAMETER,"paymentMethodId","should not be null");
  }
  final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(account.getId(),callContext);
  final UUID nonNulPaymentMethodId=(paymentMethodId != null) ? paymentMethodId : paymentMethodProcessor.createOrGetExternalPaymentMethod(UUIDs.randomUUID().toString(),account,properties,callContext,internalCallContext);
  final String transactionType=TransactionType.PURCHASE.name();
  Payment payment=null;
  PaymentTransaction paymentTransaction=null;
  try {
    logEnterAPICall(transactionType,account,paymentMethodId,paymentId,null,amount,currency,paymentExternalKey,paymentTransactionExternalKey,null,paymentControlPluginNames);
    payment=pluginControlPaymentProcessor.createPurchase(IS_API_PAYMENT,account,nonNulPaymentMethodId,paymentId,amount,currency,paymentExternalKey,paymentTransactionExternalKey,properties,paymentControlPluginNames,callContext,internalCallContext);
    paymentTransaction=payment.getTransactions().get(payment.getTransactions().size() - 1);
    return payment;
  }
  finally {
    logExitAPICall(transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,paymentControlPluginNames);
  }
}
