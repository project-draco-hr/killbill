{
  final List<String> paymentControlPluginNames=toPaymentControlPluginNames(paymentOptions);
  if (paymentControlPluginNames.isEmpty()) {
    return createPurchase(account,paymentMethodId,paymentId,amount,currency,paymentExternalKey,paymentTransactionExternalKey,properties,callContext);
  }
  checkNotNullParameter(account,"account");
  checkNotNullParameter(amount,"amount");
  checkNotNullParameter(currency,"currency");
  checkNotNullParameter(paymentExternalKey,"paymentExternalKey");
  checkNotNullParameter(paymentTransactionExternalKey,"paymentTransactionExternalKey");
  checkNotNullParameter(properties,"plugin properties");
  checkPositiveAmount(amount);
  logAPICall(TransactionType.PURCHASE.name(),account,paymentMethodId,paymentId,null,amount,currency,paymentExternalKey,paymentTransactionExternalKey);
  if (paymentMethodId == null && !paymentOptions.isExternalPayment()) {
    throw new PaymentApiException(ErrorCode.PAYMENT_INVALID_PARAMETER,"paymentMethodId","should not be null");
  }
  final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(account.getId(),callContext);
  final UUID nonNulPaymentMethodId=(paymentMethodId != null) ? paymentMethodId : paymentMethodProcessor.createOrGetExternalPaymentMethod(UUIDs.randomUUID().toString(),account,properties,callContext,internalCallContext);
  return pluginControlPaymentProcessor.createPurchase(IS_API_PAYMENT,account,nonNulPaymentMethodId,paymentId,amount,currency,paymentExternalKey,paymentTransactionExternalKey,properties,paymentControlPluginNames,callContext,internalCallContext);
}
