{
  checkNotNullParameter(account,"account");
  checkNotNullParameter(paymentTransactionId,"paymentTransactionId");
  final String transactionType="NOTIFY_STATE_CHANGE";
  Payment payment=null;
  PaymentTransaction paymentTransaction=null;
  try {
    logEnterAPICall(transactionType,account,null,null,paymentTransactionId,null,null,null,null,null,null);
    final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(account.getId(),callContext);
    payment=paymentProcessor.notifyPendingPaymentOfStateChanged(account,paymentTransactionId,isSuccess,callContext,internalCallContext);
    paymentTransaction=Iterables.<PaymentTransaction>tryFind(payment.getTransactions(),new Predicate<PaymentTransaction>(){
      @Override public boolean apply(      final PaymentTransaction transaction){
        return transaction.getId().equals(paymentTransactionId);
      }
    }
).orNull();
    return payment;
  }
  finally {
    logExitAPICall(transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,null);
  }
}
