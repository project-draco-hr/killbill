{
  mockRetryProviderPlugin.setAborted(false).setNextRetryDate(null);
  mockRetryAuthorizeOperationCallback.setResult(null).setException(new PaymentApiException(ErrorCode.__UNKNOWN_ERROR_CODE,"bla bla"));
  runner.setOperationCallback(mockRetryAuthorizeOperationCallback).setContext(paymentStateContext);
  try {
    runner.run(true,TransactionType.AUTHORIZE,account,paymentMethodId,null,paymentExternalKey,paymentTransactionExternalKey,amount,currency,emptyProperties,null,callContext,internalCallContext);
    fail("Expected PaymentApiException...");
  }
 catch (  final PaymentApiException e) {
    final PaymentAttemptModelDao pa=paymentDao.getPaymentAttemptByTransactionExternalKey(paymentTransactionExternalKey,internalCallContext).get(0);
    assertEquals(pa.getTransactionExternalKey(),paymentTransactionExternalKey);
    assertEquals(pa.getStateName(),"ABORTED");
    assertEquals(pa.getTransactionType(),TransactionType.AUTHORIZE);
  }
}
