{
  mockRetryProviderPlugin.setAborted(false).setNextRetryDate(null);
  mockRetryAuthorizeOperationCallback.setResult(OperationResult.SUCCESS).setException(null);
  runner.setOperationCallback(mockRetryAuthorizeOperationCallback).setContext(paymentStateContext);
  final State state=retrySMHelper.getRetriedState();
  final UUID transactionId=UUID.randomUUID();
  paymentDao.insertPaymentAttemptWithProperties(new PaymentAttemptModelDao(account.getId(),paymentMethodId,utcNow,utcNow,paymentExternalKey,transactionId,paymentTransactionExternalKey,TransactionType.AUTHORIZE,state.getName(),amount,currency,null,EMPTY_PROPERTIES),internalCallContext);
  runner.run(state,false,TransactionType.AUTHORIZE,account,paymentMethodId,null,paymentExternalKey,paymentTransactionExternalKey,amount,currency,emptyProperties,null,callContext,internalCallContext);
  final List<PaymentAttemptModelDao> pas=paymentDao.getPaymentAttemptByTransactionExternalKey(paymentTransactionExternalKey,internalCallContext);
  assertEquals(pas.size(),2);
  final PaymentAttemptModelDao successfulAttempt=Iterables.tryFind(pas,new Predicate<PaymentAttemptModelDao>(){
    @Override public boolean apply(    final PaymentAttemptModelDao input){
      return input.getTransactionType() == TransactionType.AUTHORIZE && input.getStateName().equals("SUCCESS");
    }
  }
).orNull();
  assertNotNull(successfulAttempt);
}
