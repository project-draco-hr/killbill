{
  mockRetryProviderPlugin.setAborted(false).setNextRetryDate(null);
  mockRetryAuthorizeOperationCallback.setResult(null).setException(new PaymentApiException(ErrorCode.__UNKNOWN_ERROR_CODE,"bla"));
  runner.setOperationCallback(mockRetryAuthorizeOperationCallback).setContext(paymentStateContext);
  final State state=retrySMHelper.getRetriedState();
  final UUID transactionId=UUID.randomUUID();
  paymentDao.insertPaymentAttemptWithProperties(new PaymentAttemptModelDao(account.getId(),paymentMethodId,utcNow,utcNow,paymentExternalKey,transactionId,paymentTransactionExternalKey,TransactionType.AUTHORIZE,state.getName(),amount,currency,null,EMPTY_PROPERTIES),internalCallContext);
  try {
    runner.run(state,false,TransactionType.AUTHORIZE,account,paymentMethodId,null,paymentExternalKey,paymentTransactionExternalKey,amount,currency,emptyProperties,null,callContext,internalCallContext);
    Assert.fail("Expecting paymentApiException...");
  }
 catch (  final PaymentApiException e) {
    final List<PaymentAttemptModelDao> pas=paymentDao.getPaymentAttemptByTransactionExternalKey(paymentTransactionExternalKey,internalCallContext);
    assertEquals(pas.size(),2);
    final PaymentAttemptModelDao failedAttempts=Iterables.tryFind(pas,new Predicate<PaymentAttemptModelDao>(){
      @Override public boolean apply(      final PaymentAttemptModelDao input){
        return input.getTransactionType() == TransactionType.AUTHORIZE && input.getStateName().equals("ABORTED");
      }
    }
).orNull();
    assertNotNull(failedAttempts);
  }
}
