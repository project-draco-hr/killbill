{
  bundles=new ArrayList<SubscriptionBundle>();
  final SubscriptionBundle bundle=new SubscriptionBundleData(eventId,"TestKey",subId,clock.getUTCNow().minusDays(4),null);
  bundles.add(bundle);
  subscriptionTransitions=new LinkedList<SubscriptionEvent>();
  subscriptions=new LinkedList<Subscription>();
  SubscriptionBuilder builder=new SubscriptionBuilder();
  subscriptionStartDate=clock.getUTCNow().minusDays(3);
  builder.setStartDate(subscriptionStartDate).setId(subId).setBundleId(bunId);
  subscription=new SubscriptionData(builder){
    @Override public List<SubscriptionEvent> getBillingTransitions(){
      return subscriptionTransitions;
    }
    @Override public Plan getCurrentPlan(){
      return subscriptionPlan;
    }
  }
;
  subscriptions.add(subscription);
  entitlementApi=BrainDeadProxyFactory.createBrainDeadProxyFor(EntitlementUserApi.class);
  ((ZombieControl)entitlementApi).addResult("getBundlesForAccount",bundles);
  ((ZombieControl)entitlementApi).addResult("getSubscriptionsForBundle",subscriptions);
  ((ZombieControl)entitlementApi).addResult("getSubscriptionFromId",subscription);
  ((ZombieControl)entitlementApi).addResult("getBundleFromId",bundle);
  ((ZombieControl)entitlementApi).addResult("getBaseSubscription",subscription);
  assertTrue(true);
}
