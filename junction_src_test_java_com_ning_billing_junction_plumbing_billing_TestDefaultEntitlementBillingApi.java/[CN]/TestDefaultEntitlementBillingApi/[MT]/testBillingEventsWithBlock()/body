{
  DateTime now=clock.getUTCNow();
  DateTime then=now.minusDays(1);
  Plan nextPlan=catalogService.getFullCatalog().findPlan("PickupTrialEvergreen10USD",now);
  PlanPhase nextPhase=nextPlan.getAllPhases()[1];
  PriceList nextPriceList=catalogService.getFullCatalog().findPriceList(PriceListSet.DEFAULT_PRICELIST_NAME,now);
  SubscriptionEvent t=new DefaultSubscriptionEvent(new SubscriptionTransitionData(eventId,subId,bunId,EventType.API_USER,ApiEventType.CREATE,then,now,null,null,null,null,SubscriptionState.ACTIVE,nextPlan,nextPhase,nextPriceList,1L,null,true),then);
  subscriptionTransitions.add(t);
  AccountUserApi accountApi=BrainDeadProxyFactory.createBrainDeadProxyFor(AccountUserApi.class);
  Account account=BrainDeadProxyFactory.createBrainDeadProxyFor(Account.class);
  ((ZombieControl)account).addResult("getBillCycleDay",32);
  ((ZombieControl)account).addResult("getCurrency",Currency.USD);
  ((ZombieControl)accountApi).addResult("getAccountById",account);
  ((ZombieControl)account).addResult("getId",UUID.randomUUID());
  ((MockCatalog)catalogService.getFullCatalog()).setBillingAlignment(BillingAlignment.ACCOUNT);
  final SortedSet<BlockingState> blockingStates=new TreeSet<BlockingState>();
  blockingStates.add(new DefaultBlockingState(bunId,DISABLED_BUNDLE,Blockable.Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingStates.add(new DefaultBlockingState(bunId,CLEAR_BUNDLE,Blockable.Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now.plusDays(2)));
  BlockingCalculator blockingCal=new BlockingCalculator(new BlockingApi(){
    @Override public <T extends Blockable>void setBlockingState(    BlockingState state){
    }
    @Override public BlockingState getBlockingStateFor(    UUID overdueableId,    Type type){
      return null;
    }
    @Override public BlockingState getBlockingStateFor(    Blockable overdueable){
      return null;
    }
    @Override public SortedSet<BlockingState> getBlockingHistory(    UUID overdueableId,    Type type){
      if (type == Type.SUBSCRIPTION_BUNDLE) {
        return blockingStates;
      }
      return new TreeSet<BlockingState>();
    }
    @Override public SortedSet<BlockingState> getBlockingHistory(    Blockable overdueable){
      return new TreeSet<BlockingState>();
    }
  }
);
  BillCycleDayCalculator bcdCalculator=new BillCycleDayCalculator(catalogService,entitlementApi);
  CallContextFactory factory=new DefaultCallContextFactory(clock);
  BillingApi api=new DefaultBillingApi(null,factory,accountApi,bcdCalculator,entitlementApi,blockingCal,catalogService);
  SortedSet<BillingEvent> events=api.getBillingEventsForAccountAndUpdateAccountBCD(new UUID(0L,0L));
  Assert.assertEquals(events.size(),3);
  Iterator<BillingEvent> it=events.iterator();
  checkEvent(it.next(),nextPlan,32,subId,now,nextPhase,ApiEventType.CREATE.toString(),nextPhase.getFixedPrice(),nextPhase.getRecurringPrice());
  checkEvent(it.next(),nextPlan,32,subId,now.plusDays(1),nextPhase,ApiEventType.CANCEL.toString(),new MockPrice("0"),new MockPrice("0"));
  checkEvent(it.next(),nextPlan,32,subId,now.plusDays(2),nextPhase,ApiEventType.RE_CREATE.toString(),nextPhase.getFixedPrice(),nextPhase.getRecurringPrice());
}
