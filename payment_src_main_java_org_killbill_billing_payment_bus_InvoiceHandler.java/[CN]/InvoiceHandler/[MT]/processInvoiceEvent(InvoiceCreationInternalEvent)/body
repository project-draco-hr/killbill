{
  log.info("Received invoice creation notification for account {} and invoice {}",event.getAccountId(),event.getInvoiceId());
  final Account account;
  try {
    final InternalCallContext internalContext=internalCallContextFactory.createInternalCallContext(event.getSearchKey2(),event.getSearchKey1(),"PaymentRequestProcessor",CallOrigin.INTERNAL,UserType.SYSTEM,event.getUserToken());
    account=accountApi.getAccountById(event.getAccountId(),internalContext);
    final List<PluginProperty> properties=new ArrayList<PluginProperty>();
    final PluginProperty prop1=new PluginProperty(InvoicePaymentControlPluginApi.PROP_IPCD_INVOICE_ID,event.getInvoiceId().toString(),false);
    properties.add(prop1);
    final CallContext callContext=internalContext.toCallContext(nonEntityDao.retrieveIdFromObject(internalContext.getTenantRecordId(),ObjectType.TENANT));
    pluginControlledPaymentProcessor.createPurchase(false,account,account.getPaymentMethodId(),null,null,account.getCurrency(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),properties,InvoicePaymentControlPluginApi.PLUGIN_NAME,callContext,internalContext);
  }
 catch (  final AccountApiException e) {
    log.error("Failed to process invoice payment",e);
  }
catch (  final PaymentApiException e) {
    if (e.getCode() != ErrorCode.PAYMENT_NULL_INVOICE.getCode() && e.getCode() != ErrorCode.PAYMENT_CREATE_PAYMENT.getCode()) {
      log.error("Failed to process invoice payment {}",e.toString());
    }
  }
}
