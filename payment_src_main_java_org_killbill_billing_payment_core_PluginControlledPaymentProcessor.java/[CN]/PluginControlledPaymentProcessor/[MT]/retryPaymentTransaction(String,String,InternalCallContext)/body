{
  try {
    final PaymentAttemptModelDao attempt=paymentDao.getPaymentAttemptByExternalKey(transactionExternalKey,internalCallContext);
    final DirectPaymentTransactionModelDao transaction=paymentDao.getDirectPaymentTransactionByExternalKey(transactionExternalKey,internalCallContext);
    final DirectPaymentModelDao payment=paymentDao.getDirectPayment(transaction.getDirectPaymentId(),internalCallContext);
    final List<PluginPropertyModelDao> properties=paymentDao.getProperties(transactionExternalKey,internalCallContext);
    final List<PluginProperty> pluginProperties=properties == null ? ImmutableList.<PluginProperty>of() : ImmutableList.<PluginProperty>copyOf(Iterables.transform(properties,new Function<PluginPropertyModelDao,PluginProperty>(){
      @Nullable @Override public PluginProperty apply(      final PluginPropertyModelDao input){
        return new PluginProperty(input.getPropKey(),input.getPropValue(),false);
      }
    }
));
    final Account account=accountInternalApi.getAccountById(payment.getAccountId(),internalCallContext);
    final UUID tenantId=nonEntityDao.retrieveIdFromObject(internalCallContext.getTenantRecordId(),ObjectType.TENANT);
    final CallContext callContext=internalCallContext.toCallContext(tenantId);
    final String newTransactionExternalKey=UUID.randomUUID().toString();
    final State state=pluginControlledDirectPaymentAutomatonRunner.fetchState(attempt.getStateName());
    pluginControlledDirectPaymentAutomatonRunner.run(state,false,transaction.getTransactionType(),account,payment.getPaymentMethodId(),payment.getId(),payment.getExternalKey(),newTransactionExternalKey,transaction.getAmount(),transaction.getCurrency(),pluginProperties,pluginName,callContext,internalCallContext);
  }
 catch (  AccountApiException e) {
    e.printStackTrace();
  }
catch (  PaymentApiException e) {
    e.printStackTrace();
  }
}
