{
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  final SubscriptionBase baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
  final DateTime ctd=baseSubscription.getStartDate().plusDays(30);
  subscriptionInternalApi.setChargedThroughDate(baseSubscription.getId(),ctd,internalCallContext);
  final DateTime evergreenPhaseDate=((DefaultSubscriptionBase)baseSubscription).getPendingTransition().getEffectiveTransitionTime();
  clock.addDays(20);
  testListener.pushExpectedEvent(NextEvent.TRANSFER);
  final DateTime transferRequestedDate=clock.getUTCNow();
  transferApi.transferBundle(bundle.getAccountId(),newAccountId,bundle.getExternalKey(),transferRequestedDate,false,false,callContext);
  assertListenerStatus();
  final SubscriptionBase oldBaseSubscription=subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  assertNotNull(oldBaseSubscription.getFutureEndDate());
  assertTrue(oldBaseSubscription.getFutureEndDate().compareTo(ctd) == 0);
  final List<SubscriptionBaseBundle> bundlesForAccountAndKey=subscriptionInternalApi.getBundlesForAccountAndKey(newAccountId,bundle.getExternalKey(),internalCallContext);
  assertEquals(bundlesForAccountAndKey.size(),1);
  final SubscriptionBaseBundle newBundle=bundlesForAccountAndKey.get(0);
  final List<SubscriptionBase> subscriptions=subscriptionInternalApi.getSubscriptionsForBundle(newBundle.getId(),null,internalCallContext);
  assertEquals(subscriptions.size(),1);
  final SubscriptionBase newBaseSubscription=subscriptions.get(0);
  assertTrue(((DefaultSubscriptionBase)newBaseSubscription).getAlignStartDate().compareTo(((DefaultSubscriptionBase)oldBaseSubscription).getAlignStartDate()) == 0);
  assertEquals(subscriptionInternalApi.getAllTransitions(newBaseSubscription,internalCallContext).size(),2);
  assertTrue(subscriptionInternalApi.getAllTransitions(newBaseSubscription,internalCallContext).get(1).getEffectiveTransitionTime().compareTo(evergreenPhaseDate) == 0);
  final Plan newPlan=newBaseSubscription.getCurrentPlan();
  assertEquals(newPlan.getProduct().getName(),baseProduct);
  assertEquals(newBaseSubscription.getCurrentPhase().getPhaseType(),PhaseType.TRIAL);
}
