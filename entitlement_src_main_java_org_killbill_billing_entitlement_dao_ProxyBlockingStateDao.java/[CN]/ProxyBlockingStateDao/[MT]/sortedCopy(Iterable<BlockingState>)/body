{
  final List<BlockingState> blockingStatesSomewhatSorted=BLOCKING_STATE_ORDERING_WITH_TIES_UNHANDLED.immutableSortedCopy(blockingStates);
  final List<BlockingState> result=new LinkedList<BlockingState>();
  final Iterator<BlockingState> iterator=blockingStatesSomewhatSorted.iterator();
  BlockingState prev=null;
  while (iterator.hasNext()) {
    final BlockingState current=iterator.next();
    if (iterator.hasNext()) {
      final BlockingState next=iterator.next();
      if (prev != null && current.getEffectiveDate().equals(next.getEffectiveDate()) && current.getBlockedId().equals(next.getBlockedId())) {
        BlockingState prevCandidate=insertTiedBlockingStatesInTheRightOrder(result,current,next,prev.isBlockBilling(),current.isBlockBilling(),next.isBlockBilling());
        if (prevCandidate == null) {
          prevCandidate=insertTiedBlockingStatesInTheRightOrder(result,current,next,prev.isBlockEntitlement(),current.isBlockEntitlement(),next.isBlockEntitlement());
          if (prevCandidate == null) {
            prevCandidate=insertTiedBlockingStatesInTheRightOrder(result,current,next,prev.isBlockChange(),current.isBlockChange(),next.isBlockChange());
            if (prevCandidate == null) {
              result.add(current);
              result.add(next);
              prev=next;
            }
 else {
              prev=prevCandidate;
            }
          }
 else {
            prev=prevCandidate;
          }
        }
 else {
          prev=prevCandidate;
        }
      }
 else {
        result.add(current);
        result.add(next);
        prev=next;
      }
    }
 else {
      result.add(current);
    }
  }
  return result;
}
