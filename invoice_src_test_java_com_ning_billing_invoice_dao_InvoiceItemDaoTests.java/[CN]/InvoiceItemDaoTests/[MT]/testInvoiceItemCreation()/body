{
  UUID accountId=UUID.randomUUID();
  UUID invoiceId=UUID.randomUUID();
  UUID bundleId=UUID.randomUUID();
  UUID subscriptionId=UUID.randomUUID();
  DateTime startDate=new DateTime(2011,10,1,0,0,0,0);
  DateTime endDate=new DateTime(2011,11,1,0,0,0,0);
  BigDecimal rate=new BigDecimal("20.00");
  RecurringInvoiceItem item=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,"test plan","test phase",startDate,endDate,rate,rate,Currency.USD);
  recurringInvoiceItemDao.create(item,context);
  RecurringInvoiceItem thisItem=(RecurringInvoiceItem)recurringInvoiceItemDao.getById(item.getId().toString());
  assertNotNull(thisItem);
  assertEquals(thisItem.getId(),item.getId());
  assertEquals(thisItem.getInvoiceId(),item.getInvoiceId());
  assertEquals(thisItem.getSubscriptionId(),item.getSubscriptionId());
  assertTrue(thisItem.getStartDate().compareTo(item.getStartDate()) == 0);
  assertTrue(thisItem.getEndDate().compareTo(item.getEndDate()) == 0);
  assertEquals(thisItem.getAmount().compareTo(item.getRate()),0);
  assertEquals(thisItem.getRate().compareTo(item.getRate()),0);
  assertEquals(thisItem.getCurrency(),item.getCurrency());
}
