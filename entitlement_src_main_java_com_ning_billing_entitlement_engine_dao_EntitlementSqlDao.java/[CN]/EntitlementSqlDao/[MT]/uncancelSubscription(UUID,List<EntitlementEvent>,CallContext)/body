{
  eventsDao.inTransaction(new Transaction<Void,EventSqlDao>(){
    @Override public Void inTransaction(    EventSqlDao transactional,    TransactionStatus status) throws Exception {
      UUID existingCancelId=null;
      Date now=clock.getUTCNow().toDate();
      List<EntitlementEvent> events=transactional.getFutureActiveEventForSubscription(subscriptionId.toString(),now);
      for (      EntitlementEvent cur : events) {
        if (cur.getType() == EventType.API_USER && ((ApiEvent)cur).getEventType() == ApiEventType.CANCEL) {
          if (existingCancelId != null) {
            throw new EntitlementError(String.format("Found multiple cancel active events for subscriptions %s",subscriptionId.toString()));
          }
          existingCancelId=cur.getId();
        }
      }
      if (existingCancelId != null) {
        transactional.unactiveEvent(existingCancelId.toString(),context);
        String deactivatedEventId=existingCancelId.toString();
        List<String> eventIds=new ArrayList<String>();
        for (        final EntitlementEvent cur : uncancelEvents) {
          transactional.insertEvent(cur,context);
          eventIds.add(cur.getId().toString());
          recordFutureNotificationFromTransaction(transactional,cur.getEffectiveDate(),new EntitlementNotificationKey(cur.getId()));
        }
        AuditSqlDao auditSqlDao=transactional.become(AuditSqlDao.class);
        auditSqlDao.insertAuditFromTransaction(ENTITLEMENT_EVENTS_TABLE_NAME,deactivatedEventId,ChangeType.UPDATE,context);
        auditSqlDao.insertAuditFromTransaction(ENTITLEMENT_EVENTS_TABLE_NAME,eventIds,ChangeType.INSERT,context);
      }
      return null;
    }
  }
);
}
