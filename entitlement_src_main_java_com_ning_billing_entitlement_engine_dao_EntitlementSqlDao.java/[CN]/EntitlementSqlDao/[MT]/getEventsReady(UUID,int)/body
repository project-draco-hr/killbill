{
  final Date now=clock.getUTCNow().toDate();
  final Date nextAvailable=clock.getUTCNow().plus(config.getDaoClaimTimeMs()).toDate();
  log.debug(String.format("EntitlementDao getEventsReady START effectiveNow =  %s",now));
  List<EntitlementEvent> events=eventsDao.inTransaction(new Transaction<List<EntitlementEvent>,EventSqlDao>(){
    @Override public List<EntitlementEvent> inTransaction(    EventSqlDao dao,    TransactionStatus status) throws Exception {
      List<EntitlementEvent> claimedEvents=new ArrayList<EntitlementEvent>();
      List<EntitlementEvent> input=dao.getReadyEvents(now,config.getDaoMaxReadyEvents());
      for (      EntitlementEvent cur : input) {
        final boolean claimed=(dao.claimEvent(ownerId.toString(),nextAvailable,cur.getId().toString(),now) == 1);
        if (claimed) {
          claimedEvents.add(cur);
          dao.insertClaimedHistory(sequenceId,ownerId.toString(),hostname,now,cur.getId().toString());
        }
      }
      return claimedEvents;
    }
  }
);
  for (  EntitlementEvent cur : events) {
    log.debug(String.format("EntitlementDao %s [host %s] claimed events %s",ownerId,hostname,cur.getId()));
    if (cur.getOwner() != null && !cur.getOwner().equals(ownerId)) {
      log.warn(String.format("EventProcessor %s stealing event %s from %s",ownerId,cur,cur.getOwner()));
    }
  }
  return events;
}
