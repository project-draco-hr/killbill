{
  eventsDao.inTransaction(new Transaction<Void,EventSqlDao>(){
    @Override public Void inTransaction(    EventSqlDao dao,    TransactionStatus status) throws Exception {
      UUID existingCancelId=null;
      Date now=clock.getUTCNow().toDate();
      List<EntitlementEvent> events=dao.getFutureActiveEventForSubscription(subscriptionId.toString(),now);
      for (      EntitlementEvent cur : events) {
        if (cur.getType() == EventType.API_USER && ((ApiEvent)cur).getEventType() == ApiEventType.CANCEL) {
          if (existingCancelId != null) {
            throw new EntitlementError(String.format("Found multiple cancel active events for subscriptions %s",subscriptionId.toString()));
          }
          existingCancelId=cur.getId();
        }
      }
      if (existingCancelId != null) {
        dao.unactiveEvent(existingCancelId.toString(),now);
        for (        EntitlementEvent cur : uncancelEvents) {
          dao.insertEvent(cur);
        }
      }
      return null;
    }
  }
);
}
