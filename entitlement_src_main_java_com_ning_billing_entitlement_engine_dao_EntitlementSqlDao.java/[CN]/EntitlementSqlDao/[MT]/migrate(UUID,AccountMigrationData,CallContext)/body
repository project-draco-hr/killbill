{
  eventsDao.inTransaction(new Transaction<Void,EventSqlDao>(){
    @Override public Void inTransaction(    EventSqlDao transEventDao,    TransactionStatus status) throws Exception {
      SubscriptionSqlDao transSubDao=transEventDao.become(SubscriptionSqlDao.class);
      BundleSqlDao transBundleDao=transEventDao.become(BundleSqlDao.class);
      List<String> bundleIds=new ArrayList<String>();
      List<String> subscriptionIds=new ArrayList<String>();
      List<String> eventIds=new ArrayList<String>();
      for (      BundleMigrationData curBundle : accountData.getData()) {
        SubscriptionBundleData bundleData=curBundle.getData();
        for (        SubscriptionMigrationData curSubscription : curBundle.getSubscriptions()) {
          SubscriptionData subData=curSubscription.getData();
          for (          final EntitlementEvent curEvent : curSubscription.getInitialEvents()) {
            transEventDao.insertEvent(curEvent);
            eventIds.add(curEvent.getId().toString());
            recordFutureNotificationFromTransaction(transEventDao,curEvent.getEffectiveDate(),new EntitlementNotificationKey(curEvent.getId()));
          }
          transSubDao.insertSubscription(subData,context);
          subscriptionIds.add(subData.getId().toString());
        }
        transBundleDao.insertBundle(bundleData);
        bundleIds.add(bundleData.getId().toString());
      }
      AuditSqlDao auditSqlDao=transBundleDao.become(AuditSqlDao.class);
      auditSqlDao.insertAuditFromTransaction(SUBSCRIPTIONS_TABLE_NAME,subscriptionIds,ChangeType.INSERT,context);
      auditSqlDao.insertAuditFromTransaction(BUNDLES_TABLE_NAME,bundleIds,ChangeType.INSERT,context);
      auditSqlDao.insertAuditFromTransaction(ENTITLEMENT_EVENTS_TABLE_NAME,eventIds,ChangeType.INSERT,context);
      return null;
    }
  }
);
}
