{
  final Subscription baseSubscription=createSubscription(baseProduct,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,startDate);
  if (clockShift > 0) {
    if (!inTrial) {
      testListener.pushExpectedEvent(NextEvent.PHASE);
    }
    final Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(clockShift));
    clock.addDeltaFromReality(it.toDurationMillis());
    if (!inTrial) {
      assertTrue(testListener.isCompleted(5000));
    }
  }
  final BundleTimeline bundleRepair=repairApi.getBundleRepair(bundle.getId());
  sortEventsOnBundle(bundleRepair);
  final DateTime newCreateTime=baseSubscription.getStartDate().plusDays(clockShift - 1);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier(newBaseProduct,ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.TRIAL);
  final NewEvent ne=createNewEvent(SubscriptionTransitionType.CREATE,newCreateTime,spec);
  final List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
  des.add(createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(0).getEventId()));
  des.add(createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(1).getEventId()));
  final SubscriptionTimeline sRepair=createSubscriptionRepair(baseSubscription.getId(),des,Collections.singletonList(ne));
  final BundleTimeline bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(sRepair));
  boolean dryRun=true;
  final BundleTimeline dryRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  List<SubscriptionTimeline> subscriptionRepair=dryRunBundleRepair.getSubscriptions();
  assertEquals(subscriptionRepair.size(),1);
  SubscriptionTimeline cur=subscriptionRepair.get(0);
  assertEquals(cur.getId(),baseSubscription.getId());
  List<ExistingEvent> events=cur.getExistingEvents();
  assertEquals(expectedEvents.size(),events.size());
  int index=0;
  for (  final ExistingEvent e : expectedEvents) {
    validateExistingEventForAssertion(e,events.get(index++));
  }
  final SubscriptionData dryRunBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId());
  assertEquals(dryRunBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  assertEquals(dryRunBaseSubscription.getBundleId(),bundle.getId());
  assertEquals(dryRunBaseSubscription.getStartDate(),baseSubscription.getStartDate());
  Plan currentPlan=dryRunBaseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),baseProduct);
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  PlanPhase currentPhase=dryRunBaseSubscription.getCurrentPhase();
  assertNotNull(currentPhase);
  if (inTrial) {
    assertEquals(currentPhase.getPhaseType(),PhaseType.TRIAL);
  }
 else {
    assertEquals(currentPhase.getPhaseType(),PhaseType.EVERGREEN);
  }
  dryRun=false;
  testListener.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
  final BundleTimeline realRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  assertTrue(testListener.isCompleted(5000));
  subscriptionRepair=realRunBundleRepair.getSubscriptions();
  assertEquals(subscriptionRepair.size(),1);
  cur=subscriptionRepair.get(0);
  assertEquals(cur.getId(),baseSubscription.getId());
  events=cur.getExistingEvents();
  for (  final ExistingEvent e : events) {
    log.info(String.format("%s, %s, %s, %s",e.getSubscriptionTransitionType(),e.getEffectiveDate(),e.getPlanPhaseSpecifier().getProductName(),e.getPlanPhaseSpecifier().getPhaseType()));
  }
  assertEquals(events.size(),expectedEvents.size());
  index=0;
  for (  final ExistingEvent e : expectedEvents) {
    validateExistingEventForAssertion(e,events.get(index++));
  }
  final SubscriptionData realRunBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId());
  assertEquals(realRunBaseSubscription.getAllTransitions().size(),2);
  assertEquals(realRunBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  assertEquals(realRunBaseSubscription.getBundleId(),bundle.getId());
  assertEquals(realRunBaseSubscription.getStartDate(),newCreateTime);
  currentPlan=realRunBaseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),newBaseProduct);
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  currentPhase=realRunBaseSubscription.getCurrentPhase();
  assertNotNull(currentPhase);
  assertEquals(currentPhase.getPhaseType(),PhaseType.TRIAL);
  return baseSubscription.getId();
}
