{
  final String baseProduct="Shotgun";
  final String newBaseProduct="Assault-Rifle";
  final DateTime startDate=clock.getUTCNow();
  final int clockShift=10;
  final DateTime changeDate=startDate.plusDays(clockShift).minusDays(1);
  final LinkedList<ExistingEvent> expected=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.CREATE,baseProduct,PhaseType.TRIAL,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.NO_BILLING_PERIOD,startDate));
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.CHANGE,newBaseProduct,PhaseType.TRIAL,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.NO_BILLING_PERIOD,changeDate));
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.PHASE,newBaseProduct,PhaseType.EVERGREEN,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,startDate.plusDays(30)));
  final UUID baseSubscriptionId=testBPRepairAddChange(true,startDate,clockShift,baseProduct,newBaseProduct,expected,3);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  final Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(32));
  clock.addDeltaFromReality(it.toDurationMillis());
  assertTrue(testListener.isCompleted(5000));
  final SubscriptionData subscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscriptionId,callContext);
  assertEquals(subscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  assertEquals(subscription.getBundleId(),bundle.getId());
  assertEquals(subscription.getStartDate(),startDate);
  assertEquals(subscription.getBundleStartDate(),startDate);
  final Plan currentPlan=subscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),newBaseProduct);
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  final PlanPhase currentPhase=subscription.getCurrentPhase();
  assertNotNull(currentPhase);
  assertEquals(currentPhase.getPhaseType(),PhaseType.EVERGREEN);
  assertListenerStatus();
}
