{
  log.info("Starting testFetchBundleRepair");
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  final Subscription baseSubscription=createSubscription(baseProduct,baseTerm,basePriceList);
  final String aoProduct="Telescopic-Scope";
  final BillingPeriod aoTerm=BillingPeriod.MONTHLY;
  final String aoPriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  final SubscriptionData aoSubscription=createSubscription(aoProduct,aoTerm,aoPriceList);
  final BundleTimeline bundleRepair=repairApi.getBundleRepair(bundle.getId());
  final List<SubscriptionTimeline> subscriptionRepair=bundleRepair.getSubscriptions();
  assertEquals(subscriptionRepair.size(),2);
  for (  final SubscriptionTimeline cur : subscriptionRepair) {
    assertNull(cur.getDeletedEvents());
    assertNull(cur.getNewEvents());
    final List<ExistingEvent> events=cur.getExistingEvents();
    assertEquals(events.size(),2);
    sortExistingEvent(events);
    assertEquals(events.get(0).getSubscriptionTransitionType(),SubscriptionTransitionType.CREATE);
    assertEquals(events.get(1).getSubscriptionTransitionType(),SubscriptionTransitionType.PHASE);
    final boolean isBP=cur.getId().equals(baseSubscription.getId());
    if (isBP) {
      assertEquals(cur.getId(),baseSubscription.getId());
      assertEquals(events.get(0).getPlanPhaseSpecifier().getProductName(),baseProduct);
      assertEquals(events.get(0).getPlanPhaseSpecifier().getPhaseType(),PhaseType.TRIAL);
      assertEquals(events.get(0).getPlanPhaseSpecifier().getProductCategory(),ProductCategory.BASE);
      assertEquals(events.get(0).getPlanPhaseSpecifier().getPriceListName(),basePriceList);
      assertEquals(events.get(0).getPlanPhaseSpecifier().getBillingPeriod(),BillingPeriod.NO_BILLING_PERIOD);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getProductName(),baseProduct);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getPhaseType(),PhaseType.EVERGREEN);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getProductCategory(),ProductCategory.BASE);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getPriceListName(),basePriceList);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getBillingPeriod(),baseTerm);
    }
 else {
      assertEquals(cur.getId(),aoSubscription.getId());
      assertEquals(events.get(0).getPlanPhaseSpecifier().getProductName(),aoProduct);
      assertEquals(events.get(0).getPlanPhaseSpecifier().getPhaseType(),PhaseType.DISCOUNT);
      assertEquals(events.get(0).getPlanPhaseSpecifier().getProductCategory(),ProductCategory.ADD_ON);
      assertEquals(events.get(0).getPlanPhaseSpecifier().getPriceListName(),aoPriceList);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getBillingPeriod(),aoTerm);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getProductName(),aoProduct);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getPhaseType(),PhaseType.EVERGREEN);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getProductCategory(),ProductCategory.ADD_ON);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getPriceListName(),aoPriceList);
      assertEquals(events.get(1).getPlanPhaseSpecifier().getBillingPeriod(),aoTerm);
    }
  }
  assertListenerStatus();
}
