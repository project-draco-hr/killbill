{
  final LocalDate firstEventStartDate=new LocalDate(2014,03,15);
  final List<InvoiceItem> invoiceItems=new ArrayList<InvoiceItem>();
  for (int i=0; i < 5; i++) {
    invoiceItems.add(createUsageItem(firstEventStartDate.plusMonths(i)));
  }
  final LocalDate targetDate=invoiceItems.get(invoiceItems.size() - 1).getEndDate();
  final Map<String,Usage> knownUsage=new HashMap<String,Usage>();
  final DefaultTieredBlock block=createDefaultTieredBlock("unit",100,1000,BigDecimal.ONE);
  final DefaultTier tier=createDefaultTier(block);
  final DefaultUsage usage=createDefaultUsage(usageName,BillingPeriod.MONTHLY,tier);
  knownUsage.put(usageName,usage);
  final DefaultTieredBlock block2=createDefaultTieredBlock("unit2",10,10000,BigDecimal.TEN);
  final DefaultTier tier2=createDefaultTier(block2);
  final DefaultUsage usage2=createDefaultUsage("usageName2",BillingPeriod.ANNUAL,tier2);
  knownUsage.put("usageName2",usage2);
  final LocalDate result=rawUsageOptimizer.getOptimizedRawUsageStartDate(firstEventStartDate,targetDate,invoiceItems,knownUsage);
  Assert.assertEquals(result.compareTo(new LocalDate(2014,06,15)),0,"142 got " + result);
}
