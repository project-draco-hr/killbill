{
  final DateTime utcNow=pluginControlPaymentAutomatonRunner.getClock().getUTCNow();
  if (stateContext.getPaymentId() != null && stateContext.getPaymentExternalKey() == null) {
    final PaymentModelDao payment=paymentDao.getPayment(stateContext.getPaymentId(),stateContext.getInternalCallContext());
    Preconditions.checkNotNull(payment,"payment cannot be null for id " + stateContext.getPaymentId());
    stateContext.setPaymentExternalKey(payment.getExternalKey());
  }
 else   if (stateContext.getPaymentExternalKey() == null) {
    stateContext.setPaymentExternalKey(UUIDs.randomUUID().toString());
  }
  if (stateContext.getTransactionId() != null && stateContext.getPaymentTransactionExternalKey() == null) {
    final PaymentTransactionModelDao paymentTransactionModelDao=paymentDao.getPaymentTransaction(stateContext.getTransactionId(),stateContext.getInternalCallContext());
    Preconditions.checkNotNull(paymentTransactionModelDao,"paymentTransaction cannot be null for id " + stateContext.getTransactionId());
    stateContext.setPaymentTransactionExternalKey(paymentTransactionModelDao.getTransactionExternalKey());
  }
 else   if (stateContext.getPaymentTransactionExternalKey() == null) {
    stateContext.setPaymentTransactionExternalKey(UUIDs.randomUUID().toString());
  }
  if (state.getName().equals(initialState.getName()) || state.getName().equals(retriedState.getName())) {
    try {
      final byte[] serializedProperties=PluginPropertySerializer.serialize(stateContext.getProperties());
      final PaymentAttemptModelDao attempt=new PaymentAttemptModelDao(stateContext.getAccount().getId(),stateContext.getPaymentMethodId(),utcNow,utcNow,stateContext.getPaymentExternalKey(),stateContext.getTransactionId(),stateContext.getPaymentTransactionExternalKey(),transactionType,initialState.getName(),stateContext.getAmount(),stateContext.getCurrency(),stateContext.getPaymentControlPluginNames(),serializedProperties);
      pluginControlPaymentAutomatonRunner.getPaymentDao().insertPaymentAttemptWithProperties(attempt,stateContext.getInternalCallContext());
      stateContext.setAttemptId(attempt.getId());
    }
 catch (    final PluginPropertySerializerException e) {
      throw new OperationException(e);
    }
  }
}
