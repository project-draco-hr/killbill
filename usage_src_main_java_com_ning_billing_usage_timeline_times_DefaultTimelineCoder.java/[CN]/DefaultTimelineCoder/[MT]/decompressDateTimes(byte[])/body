{
  final List<DateTime> dateTimeList=new ArrayList<DateTime>(compressedTimes.length * 4);
  final ByteArrayInputStream byteStream=new ByteArrayInputStream(compressedTimes);
  final DataInputStream byteDataStream=new DataInputStream(byteStream);
  int opcode;
  int lastTime=0;
  try {
    while (true) {
      opcode=byteDataStream.read();
      if (opcode == -1) {
        break;
      }
      if (opcode == TimelineOpcode.FULL_TIME.getOpcodeIndex()) {
        lastTime=byteDataStream.readInt();
        dateTimeList.add(DateTimeUtils.dateTimeFromUnixSeconds(lastTime));
      }
 else       if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex()) {
        final int repeatCount=byteDataStream.readUnsignedByte();
        final int delta=byteDataStream.readUnsignedByte();
        for (int i=0; i < repeatCount; i++) {
          lastTime=lastTime + delta;
          dateTimeList.add(DateTimeUtils.dateTimeFromUnixSeconds(lastTime));
        }
      }
 else       if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_SHORT.getOpcodeIndex()) {
        final int repeatCount=byteDataStream.readUnsignedShort();
        final int delta=byteDataStream.readUnsignedByte();
        for (int i=0; i < repeatCount; i++) {
          lastTime=lastTime + delta;
          dateTimeList.add(DateTimeUtils.dateTimeFromUnixSeconds(lastTime));
        }
      }
 else {
        lastTime=lastTime + opcode;
        dateTimeList.add(DateTimeUtils.dateTimeFromUnixSeconds(lastTime));
      }
    }
  }
 catch (  IOException e) {
    log.error("In decompressTimes(), exception decompressing",e);
  }
  return dateTimeList;
}
