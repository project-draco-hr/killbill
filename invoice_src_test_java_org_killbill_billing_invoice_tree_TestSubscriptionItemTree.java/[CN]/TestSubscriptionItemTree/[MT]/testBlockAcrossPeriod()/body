{
  final LocalDate startDate1=new LocalDate(2014,1,1);
  final LocalDate blockDate=new LocalDate(2014,1,25);
  final LocalDate startDate2=new LocalDate(2014,2,1);
  final LocalDate unblockDate=new LocalDate(2014,2,7);
  final LocalDate endDate=new LocalDate(2014,3,1);
  final BigDecimal rate1=new BigDecimal("12.00");
  final BigDecimal amount1=rate1;
  final InvoiceItem first=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate1,startDate2,amount1,rate1,currency);
  final InvoiceItem second=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate2,endDate,amount1,rate1,currency);
  final InvoiceItem block1=new RepairAdjInvoiceItem(invoiceId,accountId,blockDate,startDate2,amount1.negate(),currency,first.getId());
  final InvoiceItem block2=new RepairAdjInvoiceItem(invoiceId,accountId,startDate2,unblockDate,amount1.negate(),currency,first.getId());
  final List<InvoiceItem> expectedResult=Lists.newLinkedList();
  final InvoiceItem expected1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate1,blockDate,new BigDecimal("9.29"),rate1,currency);
  final InvoiceItem expected2=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,unblockDate,endDate,new BigDecimal("9.43"),rate1,currency);
  expectedResult.add(expected1);
  expectedResult.add(expected2);
  final SubscriptionItemTree tree=new SubscriptionItemTree(subscriptionId,invoiceId);
  tree.addItem(first);
  tree.addItem(second);
  tree.addItem(block1);
  tree.addItem(block2);
  tree.build();
  verifyResult(tree.getView(),expectedResult);
}
