{
  try {
    requestedDate=(requestedDate != null) ? DefaultClock.truncateMs(requestedDate) : null;
    String currentPriceList=subscription.getCurrentPriceList();
    SubscriptionState currentState=subscription.getState();
    if (currentState != SubscriptionState.ACTIVE) {
      throw new EntitlementUserApiException(ErrorCode.ENT_CHANGE_NON_ACTIVE,subscription.getId(),currentState);
    }
    if (subscription.isSubscriptionFutureCancelled()) {
      throw new EntitlementUserApiException(ErrorCode.ENT_CHANGE_FUTURE_CANCELLED,subscription.getId());
    }
    DateTime now=clock.getUTCNow();
    PlanChangeResult planChangeResult=null;
    try {
      Product destProduct=catalogService.getCatalog().findProduct(productName);
      Plan currentPlan=subscription.getCurrentPlan();
      PlanPhaseSpecifier fromPlanPhase=new PlanPhaseSpecifier(currentPlan.getProduct().getName(),currentPlan.getProduct().getCategory(),currentPlan.getBillingPeriod(),currentPriceList,subscription.getCurrentPhase().getPhaseType());
      PlanSpecifier toPlanPhase=new PlanSpecifier(productName,destProduct.getCategory(),term,priceList);
      planChangeResult=catalogService.getCatalog().planChange(fromPlanPhase,toPlanPhase);
    }
 catch (    CatalogApiException e) {
      throw new EntitlementUserApiException(e);
    }
    ActionPolicy policy=planChangeResult.getPolicy();
    PriceList newPriceList=planChangeResult.getNewPriceList();
    Plan newPlan=catalogService.getCatalog().findPlan(productName,term,newPriceList.getName());
    DateTime effectiveDate=subscription.getPlanChangeEffectiveDate(policy,now);
    TimedPhase currentTimedPhase=planAligner.getCurrentTimedPhaseOnChange(subscription,newPlan,newPriceList.getName(),effectiveDate);
    EntitlementEvent changeEvent=new ApiEventChange(new ApiEventBuilder().setSubscriptionId(subscription.getId()).setEventPlan(newPlan.getName()).setEventPlanPhase(currentTimedPhase.getPhase().getName()).setEventPriceList(newPriceList.getName()).setActiveVersion(subscription.getActiveVersion()).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(now));
    TimedPhase nextTimedPhase=planAligner.getNextTimedPhaseOnChange(subscription,newPlan,newPriceList.getName(),effectiveDate);
    PhaseEvent nextPhaseEvent=(nextTimedPhase != null) ? PhaseEventData.getNextPhaseEvent(nextTimedPhase.getPhase().getName(),subscription,now,nextTimedPhase.getStartPhase()) : null;
    List<EntitlementEvent> changeEvents=new ArrayList<EntitlementEvent>();
    if (nextPhaseEvent != null && !nextPhaseEvent.getEffectiveDate().equals(changeEvent.getEffectiveDate())) {
      changeEvents.add(nextPhaseEvent);
    }
    changeEvents.add(changeEvent);
    dao.changePlan(subscription.getId(),changeEvents);
    subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId()),catalogService.getCatalog());
  }
 catch (  CatalogApiException e) {
    throw new EntitlementUserApiException(e);
  }
}
