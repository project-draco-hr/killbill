{
  try {
    SubscriptionState currentState=subscription.getState();
    if (currentState != SubscriptionState.ACTIVE) {
      throw new EntitlementUserApiException(ErrorCode.ENT_CANCEL_BAD_STATE,subscription.getId(),currentState);
    }
    DateTime now=clock.getUTCNow();
    requestedDate=(requestedDate != null) ? DefaultClock.truncateMs(requestedDate) : now;
    validateRequestedDate(subscription,now,requestedDate);
    Plan currentPlan=subscription.getCurrentPlan();
    PlanPhaseSpecifier planPhase=new PlanPhaseSpecifier(currentPlan.getProduct().getName(),currentPlan.getProduct().getCategory(),subscription.getCurrentPlan().getBillingPeriod(),subscription.getCurrentPriceList().getName(),subscription.getCurrentPhase().getPhaseType());
    ActionPolicy policy=catalogService.getFullCatalog().planCancelPolicy(planPhase,requestedDate);
    DateTime effectiveDate=subscription.getPlanChangeEffectiveDate(policy,requestedDate);
    EntitlementEvent cancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(subscription.getId()).setActiveVersion(subscription.getActiveVersion()).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(requestedDate).setUserToken(context.getUserToken()).setFromDisk(true));
    dao.cancelSubscription(subscription.getId(),cancelEvent,context,0);
    subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId()),catalogService.getFullCatalog());
    return (policy == ActionPolicy.IMMEDIATE);
  }
 catch (  CatalogApiException e) {
    throw new EntitlementUserApiException(e);
  }
}
