{
  try {
    SubscriptionData subscription=new SubscriptionData(builder,this,clock);
    TimedPhase[] curAndNextPhases=planAligner.getCurrentAndNextTimedPhaseOnCreate(subscription,plan,initialPhase,realPriceList,effectiveDate);
    ApiEventCreate creationEvent=new ApiEventCreate(new ApiEventBuilder().setSubscriptionId(subscription.getId()).setEventPlan(plan.getName()).setEventPlanPhase(curAndNextPhases[0].getPhase().getName()).setEventPriceList(realPriceList).setActiveVersion(subscription.getActiveVersion()).setProcessedDate(processedDate).setEffectiveDate(effectiveDate).setRequestedDate(requestedDate));
    TimedPhase nextTimedPhase=curAndNextPhases[1];
    PhaseEvent nextPhaseEvent=(nextTimedPhase != null) ? PhaseEventData.getNextPhaseEvent(nextTimedPhase.getPhase().getName(),subscription,processedDate,nextTimedPhase.getStartPhase()) : null;
    List<EntitlementEvent> events=new ArrayList<EntitlementEvent>();
    events.add(creationEvent);
    if (nextPhaseEvent != null) {
      events.add(nextPhaseEvent);
    }
    dao.createSubscription(subscription,events);
    subscription.rebuildTransitions(events,catalogService.getCatalog());
    return subscription;
  }
 catch (  CatalogApiException e) {
    throw new EntitlementUserApiException(e);
  }
}
