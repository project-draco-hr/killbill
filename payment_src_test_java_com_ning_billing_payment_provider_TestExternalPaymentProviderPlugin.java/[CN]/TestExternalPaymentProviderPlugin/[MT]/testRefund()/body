{
  final String externalKey=UUID.randomUUID().toString();
  final UUID paymentId=UUID.randomUUID();
  final BigDecimal amount=BigDecimal.TEN;
  plugin.processPayment(externalKey,paymentId,amount);
  plugin.processRefund(Mockito.mock(Account.class),paymentId,BigDecimal.ONE);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),UUID.randomUUID(),BigDecimal.ONE),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.TEN),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.ONE),1);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,new BigDecimal("5")),0);
  plugin.processRefund(Mockito.mock(Account.class),paymentId,BigDecimal.ONE);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),UUID.randomUUID(),BigDecimal.ONE),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.TEN),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.ONE),2);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,new BigDecimal("5")),0);
  plugin.processRefund(Mockito.mock(Account.class),paymentId,BigDecimal.ONE);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),UUID.randomUUID(),BigDecimal.ONE),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.TEN),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.ONE),3);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,new BigDecimal("5")),0);
  plugin.processRefund(Mockito.mock(Account.class),paymentId,new BigDecimal("5"));
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),UUID.randomUUID(),BigDecimal.ONE),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.TEN),0);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,BigDecimal.ONE),3);
  Assert.assertEquals(plugin.getNbRefundForPaymentAmount(Mockito.mock(Account.class),paymentId,new BigDecimal("5")),1);
}
