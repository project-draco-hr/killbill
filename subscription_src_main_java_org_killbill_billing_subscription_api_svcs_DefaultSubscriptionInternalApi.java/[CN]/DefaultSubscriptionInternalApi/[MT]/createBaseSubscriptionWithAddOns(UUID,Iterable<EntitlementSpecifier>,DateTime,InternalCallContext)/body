{
  final DateTime now=clock.getUTCNow();
  final DateTime effectiveDate=(requestedDateWithMs != null) ? DefaultClock.truncateMs(requestedDateWithMs) : now;
  try {
    final List<SubscriptionSpecifier> subscriptions=new ArrayList<SubscriptionSpecifier>();
    final Catalog catalog=catalogService.getFullCatalog(context);
    final CallContext callContext=internalCallContextFactory.createCallContext(context);
    for (    EntitlementSpecifier entitlement : entitlements) {
      final PlanPhaseSpecifier spec=entitlement.getPlanPhaseSpecifier();
      final String realPriceList=(spec.getPriceListName() == null) ? PriceListSet.DEFAULT_PRICELIST_NAME : spec.getPriceListName();
      final PlanPhasePriceOverridesWithCallContext overridesWithContext=new DefaultPlanPhasePriceOverridesWithCallContext(entitlement.getOverrides(),callContext);
      final Plan plan=catalog.createOrFindPlan(spec.getProductName(),spec.getBillingPeriod(),realPriceList,overridesWithContext,effectiveDate);
      final PlanPhase phase=plan.getAllPhases()[0];
      if (phase == null) {
        throw new SubscriptionBaseError(String.format("No initial PlanPhase for Product %s, term %s and set %s does not exist in the catalog",spec.getProductName(),spec.getBillingPeriod().toString(),realPriceList));
      }
      final SubscriptionBaseBundle bundle=dao.getSubscriptionBundleFromId(bundleId,context);
      if (bundle == null) {
        throw new SubscriptionBaseApiException(ErrorCode.SUB_CREATE_NO_BUNDLE,bundleId);
      }
      SubscriptionSpecifier subscription=new SubscriptionSpecifier();
      subscription.setRealPriceList(realPriceList);
      subscription.setEffectiveDate(effectiveDate);
      subscription.setProcessedDate(now);
      subscription.setPlan(plan);
      subscription.setInitialPhase(spec.getPhaseType());
      subscription.setBuilder(new SubscriptionBuilder().setId(UUIDs.randomUUID()).setBundleId(bundleId).setCategory(plan.getProduct().getCategory()).setBundleStartDate(effectiveDate).setAlignStartDate(effectiveDate));
      subscriptions.add(subscription);
    }
    return apiService.createPlans(subscriptions,callContext);
  }
 catch (  final CatalogApiException e) {
    throw new SubscriptionBaseApiException(e);
  }
}
