{
  try {
    final String realPriceList=(spec.getPriceListName() == null) ? PriceListSet.DEFAULT_PRICELIST_NAME : spec.getPriceListName();
    final DateTime now=clock.getUTCNow();
    final DateTime effectiveDate=(requestedDateWithMs != null) ? DefaultClock.truncateMs(requestedDateWithMs) : now;
    final CallContext callContext=internalCallContextFactory.createCallContext(context);
    final Catalog catalog=catalogService.getFullCatalog(context);
    final PlanPhasePriceOverridesWithCallContext overridesWithContext=new DefaultPlanPhasePriceOverridesWithCallContext(overrides,callContext);
    final Plan plan=catalog.createOrFindPlan(spec.getProductName(),spec.getBillingPeriod(),realPriceList,overridesWithContext,effectiveDate);
    final PlanPhase phase=plan.getAllPhases()[0];
    if (phase == null) {
      throw new SubscriptionBaseError(String.format("No initial PlanPhase for Product %s, term %s and set %s does not exist in the catalog",spec.getProductName(),spec.getBillingPeriod().toString(),realPriceList));
    }
    final SubscriptionBaseBundle bundle=dao.getSubscriptionBundleFromId(bundleId,context);
    if (bundle == null) {
      throw new SubscriptionBaseApiException(ErrorCode.SUB_CREATE_NO_BUNDLE,bundleId);
    }
    final DefaultSubscriptionBase baseSubscription=(DefaultSubscriptionBase)dao.getBaseSubscription(bundleId,context);
    final DateTime bundleStartDate=getBundleStartDateWithSanity(bundleId,baseSubscription,plan,effectiveDate,context);
    return apiService.createPlan(new SubscriptionBuilder().setId(UUIDs.randomUUID()).setBundleId(bundleId).setCategory(plan.getProduct().getCategory()).setBundleStartDate(bundleStartDate).setAlignStartDate(effectiveDate),plan,spec.getPhaseType(),realPriceList,effectiveDate,now,callContext);
  }
 catch (  final CatalogApiException e) {
    throw new SubscriptionBaseApiException(e);
  }
}
