{
  final UUID accountId=account.getId();
  final BillingEventSet events=new MockBillingEventSet();
  final Plan plan=MockPlan.createBicycleNoTrialEvergreen1USD();
  final PlanPhase planPhase=MockPlanPhase.create1USDMonthlyEvergreen();
  final DateTime effectiveDate=new DateTime().minusDays(1);
  final Currency currency=Currency.USD;
  final BigDecimal fixedPrice=null;
  events.add(invoiceUtil.createMockBillingEvent(account,subscription,effectiveDate,plan,planPhase,fixedPrice,BigDecimal.ONE,currency,BillingPeriod.MONTHLY,1,BillingMode.IN_ADVANCE,"",1L,SubscriptionBaseTransitionType.CREATE));
  Mockito.when(billingApi.getBillingEventsForAccountAndUpdateAccountBCD(Mockito.<UUID>any(),Mockito.<DryRunArguments>any(),Mockito.<InternalCallContext>any())).thenReturn(events);
  final DateTime target=new DateTime();
  final InvoiceNotifier invoiceNotifier=new NullInvoiceNotifier();
  final InvoiceDispatcher dispatcher=new InvoiceDispatcher(generator,accountApi,billingApi,subscriptionApi,invoiceDao,internalCallContextFactory,invoiceNotifier,invoicePluginDispatcher,locker,busService.getBus(),null,invoiceConfig,clock);
  Invoice invoice=dispatcher.processAccount(accountId,target,new DryRunFutureDateArguments(),context);
  Assert.assertNotNull(invoice);
  List<InvoiceModelDao> invoices=invoiceDao.getInvoicesByAccount(context);
  Assert.assertEquals(invoices.size(),0);
  invoice=dispatcher.processAccount(accountId,target,new DryRunFutureDateArguments(),context);
  Assert.assertNotNull(invoice);
  invoices=invoiceDao.getInvoicesByAccount(context);
  Assert.assertEquals(invoices.size(),0);
  invoice=dispatcher.processAccount(accountId,target,null,context);
  Assert.assertNotNull(invoice);
  invoices=invoiceDao.getInvoicesByAccount(context);
  Assert.assertEquals(invoices.size(),1);
}
