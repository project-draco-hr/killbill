{
  final LocalDate startDate=new LocalDate("2012-10-26");
  final LocalDate endDate=new LocalDate("2012-11-26");
  ((ClockMock)clock).setTime(new DateTime(2012,10,13,1,12,23,DateTimeZone.UTC));
  final DateAndTimeZoneContext dateAndTimeZoneContext=new DateAndTimeZoneContext(clock.getUTCNow(),DateTimeZone.forID("Pacific/Pitcairn"),clock);
  final InvoiceItemModelDao item=new InvoiceItemModelDao(UUID.randomUUID(),clock.getUTCNow(),InvoiceItemType.RECURRING,UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID(),null,"planName","phaseName",null,startDate,endDate,new BigDecimal("23.9"),new BigDecimal("23.9"),Currency.EUR,null);
  final InvoiceNotifier invoiceNotifier=new NullInvoiceNotifier();
  final InvoiceDispatcher dispatcher=new InvoiceDispatcher(pluginRegistry,generator,accountApi,billingApi,subscriptionApi,invoiceDao,internalCallContextFactory,invoiceNotifier,locker,busService.getBus(),clock);
  final Map<UUID,List<DateTime>> result=dispatcher.createNextFutureNotificationDate(Collections.singletonList(item),null,dateAndTimeZoneContext);
  Assert.assertEquals(result.size(),1);
  final List<DateTime> receivedDates=result.get(item.getSubscriptionId());
  Assert.assertEquals(receivedDates.size(),1);
  final LocalDate receivedTargetDate=new LocalDate(receivedDates.get(0),DateTimeZone.forID("Pacific/Pitcairn"));
  Assert.assertEquals(receivedTargetDate,endDate);
  Assert.assertTrue(receivedDates.get(0).compareTo(new DateTime(2012,11,27,1,12,23,DateTimeZone.UTC)) <= 0);
}
