{
  final LocalDate startDate=new LocalDate("2012-10-26");
  final LocalDate endDate=new LocalDate("2012-11-26");
  ((ClockMock)clock).setTime(new DateTime(2012,10,13,1,12,23,DateTimeZone.UTC));
  final DateAndTimeZoneContext dateAndTimeZoneContext=new DateAndTimeZoneContext(clock.getUTCNow(),DateTimeZone.forID("Pacific/Pitcairn"),clock);
  final InvoiceItemModelDao item=new InvoiceItemModelDao(UUID.randomUUID(),clock.getUTCNow(),InvoiceItemType.RECURRING,UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID(),null,"planName","phaseName",null,startDate,endDate,new BigDecimal("23.9"),new BigDecimal("23.9"),Currency.EUR,null);
  final InvoiceNotifier invoiceNotifier=new NullInvoiceNotifier();
  final InvoiceDispatcher dispatcher=new InvoiceDispatcher(generator,accountApi,billingApi,subscriptionApi,invoiceDao,internalCallContextFactory,invoiceNotifier,invoicePluginDispatcher,locker,busService.getBus(),null,invoiceConfig,clock);
  final FutureAccountNotifications futureAccountNotifications=dispatcher.createNextFutureNotificationDate(Collections.singletonList(item),null,dateAndTimeZoneContext,context);
  Assert.assertEquals(futureAccountNotifications.getNotifications().size(),1);
  final List<SubscriptionNotification> receivedDates=futureAccountNotifications.getNotifications().get(item.getSubscriptionId());
  Assert.assertEquals(receivedDates.size(),1);
  final LocalDate receivedTargetDate=new LocalDate(receivedDates.get(0).getEffectiveDate(),DateTimeZone.forID("Pacific/Pitcairn"));
  Assert.assertEquals(receivedTargetDate,endDate);
  Assert.assertTrue(receivedDates.get(0).getEffectiveDate().compareTo(new DateTime(2012,11,27,1,12,23,DateTimeZone.UTC)) <= 0);
}
