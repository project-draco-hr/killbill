{
  try {
    final DateTime init=clock.getUTCNow();
    final DateTime requestedDate=init.minusYears(1);
    final String productName="Shotgun";
    final BillingPeriod term=BillingPeriod.MONTHLY;
    final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
    testListener.pushExpectedEvent(NextEvent.PHASE);
    testListener.pushExpectedEvent(NextEvent.CREATE);
    final SubscriptionData subscription=(SubscriptionData)entitlementApi.createSubscription(bundle.getId(),testUtil.getProductSpecifier(productName,planSetName,term,null),requestedDate,callContext);
    assertNotNull(subscription);
    final List<EntitlementEvent> events=subscription.getEvents();
    Assert.assertEquals(events.size(),2);
    final EntitlementEvent trialEvent=events.get(0);
    final EntitlementEvent phaseEvent=events.get(1);
    assertEquals(subscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
    assertEquals(subscription.getBundleId(),bundle.getId());
    assertEquals(subscription.getStartDate(),requestedDate);
    assertTrue(testListener.isCompleted(5000));
    assertListenerStatus();
    final SubscriptionTransition transition=subscription.getPreviousTransition();
    assertEquals(transition.getPreviousEventId(),trialEvent.getId());
    assertEquals(transition.getNextEventId(),phaseEvent.getId());
    assertEquals(transition.getPreviousEventCreatedDate().compareTo(trialEvent.getCreatedDate()),0);
    assertEquals(transition.getNextEventCreatedDate().compareTo(phaseEvent.getCreatedDate()),0);
  }
 catch (  EntitlementUserApiException e) {
    log.error("Unexpected exception",e);
    Assert.fail(e.getMessage());
  }
}
