{
  log.info("Starting testSimpleCreateSubscription");
  try {
    DateTime init=clock.getUTCNow();
    String productName="Shotgun";
    BillingPeriod term=BillingPeriod.MONTHLY;
    String planSetName=IPriceListSet.DEFAULT_PRICELIST_NAME;
    testListener.pushExpectedEvent(NextEvent.CREATE);
    Subscription subscription=(Subscription)entitlementApi.createSubscription(bundle.getId(),productName,term,planSetName);
    assertNotNull(subscription);
    assertEquals(subscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
    assertEquals(subscription.getBundleId(),bundle.getId());
    assertDateWithin(subscription.getStartDate(),init,clock.getUTCNow());
    assertDateWithin(subscription.getBundleStartDate(),init,clock.getUTCNow());
    printSubscriptionTransitions(subscription.getActiveTransitions());
    IPlan currentPlan=subscription.getCurrentPlan();
    assertNotNull(currentPlan);
    assertEquals(currentPlan.getProduct().getName(),productName);
    assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
    assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
    IPlanPhase currentPhase=subscription.getCurrentPhase();
    assertNotNull(currentPhase);
    assertEquals(currentPhase.getPhaseType(),PhaseType.TRIAL);
    List<ISubscriptionTransition> transitions=subscription.getActiveTransitions();
    assertNotNull(transitions);
    assertEquals(transitions.size(),1);
    assertTrue(testListener.isCompleted(5000));
    List<IEvent> events=dao.getPendingEventsForSubscription(subscription.getId());
    assertNotNull(events);
    printEvents(events);
    assertTrue(events.size() == 1);
    assertTrue(events.get(0) instanceof IPhaseEvent);
    DateTime nextPhaseChange=((IPhaseEvent)events.get(0)).getEffectiveDate();
    DateTime nextExpectedPhaseChange=Clock.addDuration(subscription.getStartDate(),currentPhase.getDuration());
    assertEquals(nextPhaseChange,nextExpectedPhaseChange);
    testListener.pushExpectedEvent(NextEvent.PHASE);
    clock.setDeltaFromReality(currentPhase.getDuration(),DAY_IN_MS);
    DateTime futureNow=clock.getUTCNow();
    assertTrue(futureNow.isAfter(nextPhaseChange));
    assertTrue(testListener.isCompleted(5000));
  }
 catch (  EntitlementUserApiException e) {
    Assert.fail(e.getMessage());
  }
}
