{
  final TenantContext tenantContext=context.createContext(request);
  final Pagination<Refund> refunds;
  if (Strings.isNullOrEmpty(pluginName)) {
    refunds=paymentApi.searchRefunds(searchKey,offset,limit,pluginProperties,tenantContext);
  }
 else {
    refunds=paymentApi.searchRefunds(searchKey,offset,limit,pluginName,pluginProperties,tenantContext);
  }
  final URI nextPageUri=uriBuilder.nextPage(RefundResource.class,"searchRefunds",refunds.getNextOffset(),limit,ImmutableMap.<String,String>of("searchKey",searchKey,QUERY_PAYMENT_METHOD_PLUGIN_NAME,Strings.nullToEmpty(pluginName),QUERY_AUDIT,auditMode.getLevel().toString()));
  final AtomicReference<Map<UUID,AccountAuditLogs>> accountsAuditLogs=new AtomicReference<Map<UUID,AccountAuditLogs>>(new HashMap<UUID,AccountAuditLogs>());
  final Map<UUID,UUID> paymentIdAccountIdMappings=new HashMap<UUID,UUID>();
  return buildStreamingPaginationResponse(refunds,new Function<Refund,RefundJson>(){
    @Override public RefundJson apply(    final Refund refund){
      UUID kbAccountId=null;
      if (!AuditLevel.NONE.equals(auditMode.getLevel()) && paymentIdAccountIdMappings.get(refund.getPaymentId()) == null) {
        try {
          kbAccountId=paymentApi.getPayment(refund.getPaymentId(),false,pluginProperties,tenantContext).getAccountId();
          paymentIdAccountIdMappings.put(refund.getPaymentId(),kbAccountId);
        }
 catch (        final PaymentApiException e) {
          log.warn("Unable to retrieve payment for id " + refund.getPaymentId());
        }
      }
      if (accountsAuditLogs.get().get(kbAccountId) == null) {
        accountsAuditLogs.get().put(kbAccountId,auditUserApi.getAccountAuditLogs(kbAccountId,auditMode.getLevel(),tenantContext));
      }
      final List<AuditLog> auditLogs=accountsAuditLogs.get().get(kbAccountId) == null ? null : accountsAuditLogs.get().get(kbAccountId).getAuditLogsForRefund(refund.getId());
      return new RefundJson(refund,null,auditLogs);
    }
  }
,nextPageUri);
}
