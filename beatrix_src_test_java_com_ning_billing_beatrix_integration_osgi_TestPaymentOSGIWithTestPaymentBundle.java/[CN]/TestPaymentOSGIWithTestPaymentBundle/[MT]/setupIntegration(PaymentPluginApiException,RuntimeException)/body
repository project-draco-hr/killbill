{
  final PaymentPluginApiWithTestControl paymentPluginApi=getTestPluginPaymentApi();
  final AccountData accountData=getAccountData(1);
  final Account account=createAccountWithOsgiPaymentMethod(accountData);
  clock.setDay(new LocalDate(2012,4,1));
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  final List<NextEvent> expectedEvents=new LinkedList<NextEvent>();
  expectedEvents.add(NextEvent.CREATE);
  expectedEvents.add(NextEvent.INVOICE);
  if (expectedException == null && expectedRuntimeException == null) {
    expectedEvents.add(NextEvent.PAYMENT);
  }
 else   if (expectedException != null) {
    expectedEvents.add(NextEvent.PAYMENT_PLUGIN_ERROR);
    paymentPluginApi.setPaymentPluginApiExceptionOnNextCalls(expectedException);
  }
 else   if (expectedRuntimeException != null) {
    expectedEvents.add(NextEvent.PAYMENT_PLUGIN_ERROR);
    paymentPluginApi.setPaymentRuntimeExceptionOnNextCalls(expectedRuntimeException);
  }
  final DefaultEntitlement aoEntitlement=addAOEntitlementAndCheckForCompletion(baseEntitlement.getBundleId(),"Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,expectedEvents.toArray(new NextEvent[expectedEvents.size()]));
  Invoice invoice=invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),new LocalDate(2012,5,1),InvoiceItemType.RECURRING,new BigDecimal("399.95")));
  if (expectedException == null && expectedRuntimeException == null) {
    paymentChecker.checkPayment(account.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,4,1),new BigDecimal("399.95"),PaymentStatus.SUCCESS,invoice.getId(),Currency.USD));
  }
 else   if (expectedException != null) {
    paymentChecker.checkPayment(account.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,4,1),new BigDecimal("399.95"),PaymentStatus.PLUGIN_FAILURE,invoice.getId(),Currency.USD));
  }
 else   if (expectedRuntimeException != null) {
    paymentChecker.checkPayment(account.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,4,1),new BigDecimal("399.95"),PaymentStatus.PLUGIN_FAILURE,invoice.getId(),Currency.USD));
  }
}
