{
  final TenantContext tenantContext=context.createContext(request);
  final Invoice invoice=invoiceApi.getInvoice(UUID.fromString(invoiceId),tenantContext);
  final Set<UUID> invoicePaymentIds=ImmutableSet.copyOf(Iterables.transform(invoice.getPayments(),new Function<InvoicePayment,UUID>(){
    @Override public UUID apply(    final InvoicePayment input){
      return input.getPaymentId();
    }
  }
));
  final List<Payment> payments=new ArrayList<Payment>();
  for (  final UUID paymentId : invoicePaymentIds) {
    final Payment payment=paymentApi.getPayment(paymentId,withPluginInfo,ImmutableList.<PluginProperty>of(),tenantContext);
    payments.add(payment);
  }
  final List<InvoicePaymentJson> result=new ArrayList<InvoicePaymentJson>(payments.size());
  if (payments.isEmpty()) {
    return Response.status(Status.OK).entity(result).build();
  }
  for (  final Payment cur : payments) {
    result.add(new InvoicePaymentJson(cur,invoice.getId(),null));
  }
  return Response.status(Status.OK).entity(result).build();
}
