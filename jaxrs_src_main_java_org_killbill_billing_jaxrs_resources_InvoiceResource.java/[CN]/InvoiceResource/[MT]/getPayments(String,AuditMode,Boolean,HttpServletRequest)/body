{
  final TenantContext tenantContext=context.createContext(request);
  final Invoice invoice=invoiceApi.getInvoice(UUID.fromString(invoiceId),tenantContext);
  final Set<UUID> invoicePaymentIds=ImmutableSet.copyOf(Iterables.transform(invoice.getPayments(),new Function<InvoicePayment,UUID>(){
    @Override public UUID apply(    final InvoicePayment input){
      return input.getPaymentId();
    }
  }
));
  if (invoicePaymentIds.isEmpty()) {
    return Response.status(Status.OK).entity(ImmutableList.<InvoicePaymentJson>of()).build();
  }
  final List<Payment> payments=new ArrayList<Payment>();
  for (  final UUID paymentId : invoicePaymentIds) {
    final Payment payment=paymentApi.getPayment(paymentId,withPluginInfo,ImmutableList.<PluginProperty>of(),tenantContext);
    payments.add(payment);
  }
  final Iterable<InvoicePaymentJson> result=INVOICE_PAYMENT_ORDERING.sortedCopy(Iterables.transform(payments,new Function<Payment,InvoicePaymentJson>(){
    @Override public InvoicePaymentJson apply(    final Payment input){
      return new InvoicePaymentJson(input,invoice.getId(),null);
    }
  }
));
  return Response.status(Status.OK).entity(result).build();
}
