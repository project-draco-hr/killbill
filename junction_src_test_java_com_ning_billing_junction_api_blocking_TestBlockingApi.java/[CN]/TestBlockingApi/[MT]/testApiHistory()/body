{
  final UUID uuid=UUID.randomUUID();
  final String overdueStateName="WayPassedItMan";
  final String service="TEST";
  final boolean blockChange=true;
  final boolean blockEntitlement=false;
  final boolean blockBilling=false;
  final BlockingState state1=new DefaultBlockingState(uuid,overdueStateName,Type.SUBSCRIPTION_BUNDLE,service,blockChange,blockEntitlement,blockBilling);
  blockingInternalApi.setBlockingState(state1,internalCallContext);
  clock.setDeltaFromReality(1000 * 3600 * 24);
  final String overdueStateName2="NoReallyThisCantGoOn";
  final BlockingState state2=new DefaultBlockingState(uuid,overdueStateName2,Type.SUBSCRIPTION_BUNDLE,service,blockChange,blockEntitlement,blockBilling);
  blockingInternalApi.setBlockingState(state2,internalCallContext);
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getId()).thenReturn(uuid);
  final List<BlockingState> history1=blockingInternalApi.getBlockingHistory(bundle,internalCallContext);
  final List<BlockingState> history2=blockingInternalApi.getBlockingHistory(bundle.getId(),internalCallContext);
  Assert.assertEquals(history1.size(),2);
  Assert.assertEquals(history1.get(0).getStateName(),overdueStateName);
  Assert.assertEquals(history1.get(1).getStateName(),overdueStateName2);
  Assert.assertEquals(history2.size(),2);
  Assert.assertEquals(history2.get(0).getStateName(),overdueStateName);
  Assert.assertEquals(history2.get(1).getStateName(),overdueStateName2);
}
