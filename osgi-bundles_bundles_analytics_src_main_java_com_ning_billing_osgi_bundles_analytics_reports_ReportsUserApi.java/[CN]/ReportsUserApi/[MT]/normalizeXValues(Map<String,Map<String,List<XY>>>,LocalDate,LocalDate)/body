{
  DateTime minDate=null;
  if (startDate != null) {
    minDate=startDate.toDateTimeAtStartOfDay(DateTimeZone.UTC);
  }
  DateTime maxDate=null;
  if (endDate != null) {
    maxDate=endDate.toDateTimeAtStartOfDay(DateTimeZone.UTC);
  }
  if (minDate == null || maxDate == null) {
    for (    final Map<String,List<XY>> dataForReport : dataForReports.values()) {
      for (      final List<XY> dataForPivot : dataForReport.values()) {
        for (        final XY xy : dataForPivot) {
          if (minDate == null || xy.getxDate().isBefore(minDate)) {
            minDate=xy.getxDate();
          }
          if (maxDate == null || xy.getxDate().isAfter(maxDate)) {
            maxDate=xy.getxDate();
          }
        }
      }
    }
  }
  if (minDate == null || maxDate == null) {
    throw new IllegalStateException();
  }
  DateTime curDate=minDate;
  while (maxDate.isAfter(curDate)) {
    for (    final Map<String,List<XY>> dataForReport : dataForReports.values()) {
      for (      final List<XY> dataForPivot : dataForReport.values()) {
        addMissingValueForDateIfNeeded(curDate,dataForPivot);
      }
    }
    curDate=curDate.plusDays(1);
  }
  for (  final String reportName : dataForReports.keySet()) {
    for (    final String pivotName : dataForReports.get(reportName).keySet()) {
      Collections.sort(dataForReports.get(reportName).get(pivotName),new Comparator<XY>(){
        @Override public int compare(        final XY o1,        final XY o2){
          return o1.getxDate().compareTo(o2.getxDate());
        }
      }
);
    }
  }
}
