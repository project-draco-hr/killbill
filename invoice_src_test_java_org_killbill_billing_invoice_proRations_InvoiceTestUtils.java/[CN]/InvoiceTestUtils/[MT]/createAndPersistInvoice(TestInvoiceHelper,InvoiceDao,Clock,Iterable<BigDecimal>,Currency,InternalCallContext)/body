{
  final Invoice invoice=Mockito.mock(Invoice.class);
  final UUID invoiceId=UUID.randomUUID();
  final UUID accountId;
  try {
    final Account account=testInvoiceHelper.createAccount(internalCallContext.toCallContext(null));
    accountId=account.getId();
  }
 catch (  final AccountApiException e) {
    Assert.fail(e.getMessage());
    return null;
  }
  Mockito.when(invoice.getId()).thenReturn(invoiceId);
  Mockito.when(invoice.getAccountId()).thenReturn(accountId);
  Mockito.when(invoice.getInvoiceDate()).thenReturn(clock.getUTCToday());
  Mockito.when(invoice.getTargetDate()).thenReturn(clock.getUTCToday());
  Mockito.when(invoice.getCurrency()).thenReturn(currency);
  Mockito.when(invoice.isMigrationInvoice()).thenReturn(false);
  final List<InvoiceItem> invoiceItems=new ArrayList<InvoiceItem>();
  final List<InvoiceItemModelDao> invoiceModelItems=new ArrayList<InvoiceItemModelDao>();
  for (  final BigDecimal amount : amounts) {
    final InvoiceItem invoiceItem=createInvoiceItem(clock,invoiceId,accountId,amount,currency);
    invoiceModelItems.add(new InvoiceItemModelDao(invoiceItem));
    invoiceItems.add(invoiceItem);
  }
  Mockito.when(invoice.getInvoiceItems()).thenReturn(invoiceItems);
  final DefaultAccountDateAndTimeZoneContext dateAndTimeZoneContext=new DefaultAccountDateAndTimeZoneContext(clock.getUTCNow(),DateTimeZone.UTC);
  invoiceDao.createInvoice(new InvoiceModelDao(invoice),invoiceModelItems,true,new FutureAccountNotifications(dateAndTimeZoneContext,ImmutableMap.<UUID,List<SubscriptionNotification>>of()),internalCallContext);
  return invoice;
}
