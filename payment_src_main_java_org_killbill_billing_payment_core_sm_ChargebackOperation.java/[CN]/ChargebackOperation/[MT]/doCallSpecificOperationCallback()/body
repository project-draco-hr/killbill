{
  logger.debug("Starting CHARGEBACK for payment {} ({} {})",paymentStateContext.getPaymentId(),paymentStateContext.getAmount(),paymentStateContext.getCurrency());
  final PaymentPluginStatus status;
  if (!paymentStateContext.getOnLeavingStateExistingTransactions().isEmpty()) {
    final Iterable<PaymentTransactionModelDao> purchaseTransactions=getOnLeavingStateExistingTransactionsForType(TransactionType.PURCHASE);
    final Iterable<PaymentTransactionModelDao> captureTransactions=getOnLeavingStateExistingTransactionsForType(TransactionType.CAPTURE);
    final Iterable<PaymentTransactionModelDao> refundTransactions=getOnLeavingStateExistingTransactionsForType(TransactionType.REFUND);
    final Iterable<PaymentTransactionModelDao> chargebackTransactions=getOnLeavingStateExistingTransactionsForType(TransactionType.CHARGEBACK);
    final BigDecimal purchasedAmount=getSumAmount(purchaseTransactions);
    final BigDecimal capturedAmount=getSumAmount(captureTransactions);
    final BigDecimal refundedAmount=getSumAmount(refundTransactions);
    final BigDecimal chargebackAmount=getSumAmount(chargebackTransactions);
    final BigDecimal chargebackAvailableAmount=purchasedAmount.add(capturedAmount).subtract(refundedAmount.add(chargebackAmount));
    if (paymentStateContext.getAmount().compareTo(chargebackAvailableAmount) > 0) {
      status=PaymentPluginStatus.ERROR;
    }
 else {
      status=PaymentPluginStatus.PROCESSED;
    }
  }
 else {
    status=PaymentPluginStatus.PROCESSED;
  }
  return new DefaultNoOpPaymentInfoPlugin(paymentStateContext.getPaymentId(),paymentStateContext.getTransactionPaymentId(),TransactionType.CHARGEBACK,paymentStateContext.getAmount(),paymentStateContext.getCurrency(),null,null,status,null);
}
