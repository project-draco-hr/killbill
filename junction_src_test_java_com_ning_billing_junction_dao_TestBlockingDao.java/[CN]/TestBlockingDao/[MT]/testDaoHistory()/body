{
  final ClockMock clock=new ClockMock();
  final UUID uuid=UUID.randomUUID();
  final String overdueStateName="WayPassedItMan";
  final String service="TEST";
  final boolean blockChange=true;
  final boolean blockEntitlement=false;
  final boolean blockBilling=false;
  final BlockingState state1=new DefaultBlockingState(uuid,overdueStateName,Blockable.Type.SUBSCRIPTION_BUNDLE,service,blockChange,blockEntitlement,blockBilling);
  dao.setBlockingState(state1,clock);
  clock.setDeltaFromReality(1000 * 3600 * 24);
  final String overdueStateName2="NoReallyThisCantGoOn";
  final BlockingState state2=new DefaultBlockingState(uuid,overdueStateName2,Blockable.Type.SUBSCRIPTION_BUNDLE,service,blockChange,blockEntitlement,blockBilling);
  dao.setBlockingState(state2,clock);
  final SubscriptionBundle bundle=BrainDeadProxyFactory.createBrainDeadProxyFor(SubscriptionBundle.class);
  ((ZombieControl)bundle).addResult("getId",uuid);
  final SortedSet<BlockingState> history1=dao.getBlockingHistoryFor(bundle);
  final SortedSet<BlockingState> history2=dao.getBlockingHistoryFor(bundle.getId());
  Assert.assertEquals(history1.size(),2);
  Assert.assertEquals(history1.first().getStateName(),overdueStateName);
  Assert.assertEquals(history1.last().getStateName(),overdueStateName2);
  Assert.assertEquals(history2.size(),2);
  Assert.assertEquals(history2.first().getStateName(),overdueStateName);
  Assert.assertEquals(history2.last().getStateName(),overdueStateName2);
}
