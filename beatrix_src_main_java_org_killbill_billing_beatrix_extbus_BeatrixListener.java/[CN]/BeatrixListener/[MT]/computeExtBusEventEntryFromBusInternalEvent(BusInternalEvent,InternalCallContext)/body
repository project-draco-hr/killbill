{
  ObjectType objectType=null;
  UUID objectId=null;
  ExtBusEventType eventBusType=null;
  String metaData=null;
  UUID accountId=null;
switch (event.getBusEventType()) {
case ACCOUNT_CREATE:
    final AccountCreationInternalEvent realEventACR=(AccountCreationInternalEvent)event;
  objectType=ObjectType.ACCOUNT;
objectId=realEventACR.getId();
eventBusType=ExtBusEventType.ACCOUNT_CREATION;
break;
case ACCOUNT_CHANGE:
final AccountChangeInternalEvent realEventACH=(AccountChangeInternalEvent)event;
objectType=ObjectType.ACCOUNT;
objectId=realEventACH.getAccountId();
eventBusType=ExtBusEventType.ACCOUNT_CHANGE;
break;
case SUBSCRIPTION_TRANSITION:
final SubscriptionInternalEvent realEventST=(SubscriptionInternalEvent)event;
objectType=ObjectType.SUBSCRIPTION;
objectId=realEventST.getSubscriptionId();
if (realEventST.getTransitionType() == SubscriptionBaseTransitionType.CREATE || realEventST.getTransitionType() == SubscriptionBaseTransitionType.RE_CREATE || realEventST.getTransitionType() == SubscriptionBaseTransitionType.TRANSFER || realEventST.getTransitionType() == SubscriptionBaseTransitionType.MIGRATE_ENTITLEMENT) {
eventBusType=ExtBusEventType.SUBSCRIPTION_CREATION;
}
 else if (realEventST.getTransitionType() == SubscriptionBaseTransitionType.CANCEL) {
eventBusType=ExtBusEventType.SUBSCRIPTION_CANCEL;
}
 else if (realEventST.getTransitionType() == SubscriptionBaseTransitionType.PHASE) {
eventBusType=ExtBusEventType.SUBSCRIPTION_PHASE;
}
 else if (realEventST.getTransitionType() == SubscriptionBaseTransitionType.CHANGE) {
eventBusType=ExtBusEventType.SUBSCRIPTION_CHANGE;
}
 else if (realEventST.getTransitionType() == SubscriptionBaseTransitionType.UNCANCEL) {
eventBusType=ExtBusEventType.SUBSCRIPTION_UNCANCEL;
}
break;
case BLOCKING_STATE:
final BlockingTransitionInternalEvent realEventBS=(BlockingTransitionInternalEvent)event;
if (realEventBS.getBlockingType() == BlockingStateType.ACCOUNT) {
objectType=ObjectType.ACCOUNT;
}
 else if (realEventBS.getBlockingType() == BlockingStateType.SUBSCRIPTION_BUNDLE) {
objectType=ObjectType.BUNDLE;
}
 else if (realEventBS.getBlockingType() == BlockingStateType.SUBSCRIPTION) {
objectType=ObjectType.SUBSCRIPTION;
}
objectId=realEventBS.getBlockableId();
break;
case ENTITLEMENT_TRANSITION:
final EntitlementInternalEvent realEventET=(EntitlementInternalEvent)event;
objectType=ObjectType.BUNDLE;
objectId=realEventET.getBundleId();
if (realEventET.getTransitionType() == EntitlementTransitionType.BLOCK_BUNDLE) {
eventBusType=ExtBusEventType.BUNDLE_PAUSE;
}
 else if (realEventET.getTransitionType() == EntitlementTransitionType.UNBLOCK_BUNDLE) {
eventBusType=ExtBusEventType.BUNDLE_RESUME;
}
break;
case INVOICE_CREATION:
final InvoiceCreationInternalEvent realEventInv=(InvoiceCreationInternalEvent)event;
objectType=ObjectType.INVOICE;
objectId=realEventInv.getInvoiceId();
eventBusType=ExtBusEventType.INVOICE_CREATION;
break;
case INVOICE_NOTIFICATION:
final InvoiceNotificationInternalEvent realEventInvNotification=(InvoiceNotificationInternalEvent)event;
objectType=ObjectType.INVOICE;
objectId=null;
accountId=realEventInvNotification.getAccountId();
eventBusType=ExtBusEventType.INVOICE_NOTIFICATION;
break;
case INVOICE_ADJUSTMENT:
final InvoiceAdjustmentInternalEvent realEventInvAdj=(InvoiceAdjustmentInternalEvent)event;
objectType=ObjectType.INVOICE;
objectId=realEventInvAdj.getInvoiceId();
eventBusType=ExtBusEventType.INVOICE_ADJUSTMENT;
break;
case PAYMENT_INFO:
final PaymentInfoInternalEvent realEventPay=(PaymentInfoInternalEvent)event;
objectType=ObjectType.PAYMENT;
objectId=realEventPay.getPaymentId();
eventBusType=ExtBusEventType.PAYMENT_SUCCESS;
break;
case PAYMENT_ERROR:
final PaymentErrorInternalEvent realEventPayErr=(PaymentErrorInternalEvent)event;
objectType=ObjectType.PAYMENT;
objectId=realEventPayErr.getPaymentId();
eventBusType=ExtBusEventType.PAYMENT_FAILED;
accountId=realEventPayErr.getAccountId();
break;
case PAYMENT_PLUGIN_ERROR:
final PaymentPluginErrorInternalEvent realEventPayPluginErr=(PaymentPluginErrorInternalEvent)event;
objectType=ObjectType.PAYMENT;
objectId=realEventPayPluginErr.getPaymentId();
eventBusType=ExtBusEventType.PAYMENT_FAILED;
break;
case OVERDUE_CHANGE:
final OverdueChangeInternalEvent realEventOC=(OverdueChangeInternalEvent)event;
objectType=ObjectType.ACCOUNT;
objectId=realEventOC.getOverdueObjectId();
eventBusType=ExtBusEventType.OVERDUE_CHANGE;
break;
case USER_TAG_CREATION:
final UserTagCreationInternalEvent realUserTagEventCr=(UserTagCreationInternalEvent)event;
objectType=ObjectType.TAG;
objectId=realUserTagEventCr.getTagId();
eventBusType=ExtBusEventType.TAG_CREATION;
break;
case CONTROL_TAG_CREATION:
final ControlTagCreationInternalEvent realTagEventCr=(ControlTagCreationInternalEvent)event;
objectType=ObjectType.TAG;
objectId=realTagEventCr.getTagId();
eventBusType=ExtBusEventType.TAG_CREATION;
break;
case USER_TAG_DELETION:
final UserTagDeletionInternalEvent realUserTagEventDel=(UserTagDeletionInternalEvent)event;
objectType=ObjectType.TAG;
objectId=realUserTagEventDel.getTagId();
eventBusType=ExtBusEventType.TAG_DELETION;
break;
case CONTROL_TAG_DELETION:
final ControlTagDeletionInternalEvent realTagEventDel=(ControlTagDeletionInternalEvent)event;
objectType=ObjectType.TAG;
objectId=realTagEventDel.getTagId();
eventBusType=ExtBusEventType.TAG_DELETION;
break;
case CUSTOM_FIELD_CREATION:
final CustomFieldCreationEvent realCustomFieldEventCr=(CustomFieldCreationEvent)event;
objectType=ObjectType.CUSTOM_FIELD;
objectId=realCustomFieldEventCr.getCustomFieldId();
eventBusType=ExtBusEventType.CUSTOM_FIELD_CREATION;
break;
case CUSTOM_FIELD_DELETION:
final CustomFieldDeletionEvent realCustomFieldEventDel=(CustomFieldDeletionEvent)event;
objectType=ObjectType.CUSTOM_FIELD;
objectId=realCustomFieldEventDel.getCustomFieldId();
eventBusType=ExtBusEventType.CUSTOM_FIELD_DELETION;
break;
case TENANT_CONFIG_CHANGE:
final TenantConfigChangeInternalEvent realTenantConfigEventChg=(TenantConfigChangeInternalEvent)event;
objectType=ObjectType.TENANT_KVS;
objectId=realTenantConfigEventChg.getId();
eventBusType=ExtBusEventType.TENANT_CONFIG_CHANGE;
metaData=realTenantConfigEventChg.getKey();
break;
case TENANT_CONFIG_DELETION:
final TenantConfigDeletionInternalEvent realTenantConfigEventDel=(TenantConfigDeletionInternalEvent)event;
objectType=ObjectType.TENANT_KVS;
objectId=null;
eventBusType=ExtBusEventType.TENANT_CONFIG_DELETION;
metaData=realTenantConfigEventDel.getKey();
break;
case BROADCAST_SERVICE:
final BroadcastInternalEvent realBroadcastEvent=(BroadcastInternalEvent)event;
objectType=ObjectType.SERVICE_BROADCAST;
objectId=null;
eventBusType=ExtBusEventType.BROADCAST_SERVICE;
final BroadcastMetadata metaDataObj=new BroadcastMetadata(realBroadcastEvent.getServiceName(),realBroadcastEvent.getType(),realBroadcastEvent.getJsonEvent());
metaData=objectMapper.writeValueAsString(metaDataObj);
break;
default :
}
final TenantContext tenantContext=internalCallContextFactory.createTenantContext(context);
accountId=(accountId == null) ? getAccountId(event.getBusEventType(),objectId,objectType,tenantContext) : accountId;
return eventBusType != null ? new DefaultBusExternalEvent(objectId,objectType,eventBusType,accountId,tenantContext.getTenantId(),metaData,context.getAccountRecordId(),context.getTenantRecordId(),context.getUserToken()) : null;
}
