{
  final boolean multitenant=Boolean.parseBoolean(System.getProperty(KILLBILL_MULTITENANT_PROPERTY,"false"));
  final ServerModuleBuilder builder=new ServerModuleBuilder().addConfig(KillbillServerConfig.class).addHealthCheck(KillbillHealthcheck.class).addJMXExport(KillbillHealthcheck.class).addJMXExport(NotificationQueueService.class).addJMXExport(PersistentBus.class).addModule(getModule()).setJerseyUriPattern("(" + JaxRsResourceBase.PREFIX + "|"+ JaxRsResourceBase.PLUGINS_PATH+ ")"+ "/.*").addJerseyResource("com.ning.billing.jaxrs.mappers").addJerseyResource("com.ning.billing.jaxrs.resources");
  if (multitenant) {
    builder.addFilter("/*",TenantFilter.class);
  }
  guiceModule=builder.build();
  super.contextInitialized(event);
  logger.info("KillbillLifecycleListener : contextInitialized");
  injector=injector(event);
  event.getServletContext().setAttribute(Injector.class.getName(),injector);
  killbillLifecycle=injector.getInstance(DefaultLifecycle.class);
  killbillBusService=injector.getInstance(BusService.class);
  killbilleventHandler=injector.getInstance(KillbillEventHandler.class);
  registerMBeansForCache(injector.getInstance(CacheManager.class));
  killbillLifecycle.fireStartupSequencePriorEventRegistration();
  try {
    killbillBusService.getBus().register(killbilleventHandler);
  }
 catch (  PersistentBus.EventBusException e) {
    logger.error("Failed to register for event notifications, this is bad exiting!",e);
    System.exit(1);
  }
  killbillLifecycle.fireStartupSequencePostEventRegistration();
}
