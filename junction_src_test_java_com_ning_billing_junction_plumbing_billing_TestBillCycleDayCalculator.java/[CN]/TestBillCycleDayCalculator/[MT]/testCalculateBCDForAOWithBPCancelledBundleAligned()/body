{
  final DateTimeZone accountTimeZone=DateTimeZone.UTC;
  final DateTime bpStartDateUTC=new DateTime(2012,7,16,21,0,0,DateTimeZone.UTC);
  final int expectedBCDUTC=16;
  final CatalogService catalogService=Mockito.mock(CatalogService.class);
  final EntitlementInternalApi entitlementApi=Mockito.mock(EntitlementInternalApi.class);
  final BillCycleDayCalculator billCycleDayCalculator=new BillCycleDayCalculator(catalogService,entitlementApi);
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  final Subscription subscription=Mockito.mock(Subscription.class);
  Mockito.when(subscription.getStartDate()).thenReturn(bpStartDateUTC);
  Mockito.when(entitlementApi.getBaseSubscription(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  final Plan plan=Mockito.mock(Plan.class);
  Mockito.when(plan.dateOfFirstRecurringNonZeroCharge(bpStartDateUTC,null)).thenReturn(bpStartDateUTC);
  final Catalog catalog=Mockito.mock(Catalog.class);
  Mockito.when(catalog.findPlan(Mockito.anyString(),Mockito.<DateTime>any(),Mockito.<DateTime>any())).thenReturn(plan);
  final Account account=Mockito.mock(Account.class);
  Mockito.when(account.getTimeZone()).thenReturn(accountTimeZone);
  final BillCycleDay billCycleDay=billCycleDayCalculator.calculateBcdForAlignment(BillingAlignment.BUNDLE,bundle,subscription,account,catalog,null,internalCallContext);
  Assert.assertEquals(billCycleDay.getDayOfMonthUTC(),expectedBCDUTC);
}
