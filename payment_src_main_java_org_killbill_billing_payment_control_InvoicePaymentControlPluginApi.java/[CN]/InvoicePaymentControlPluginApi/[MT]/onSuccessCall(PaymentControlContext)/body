{
  final TransactionType transactionType=paymentControlContext.getTransactionType();
  Preconditions.checkArgument(transactionType == TransactionType.PURCHASE || transactionType == TransactionType.REFUND);
  final InternalCallContext internalContext=internalCallContextFactory.createInternalCallContext(paymentControlContext.getAccountId(),paymentControlContext);
  try {
    if (transactionType == TransactionType.PURCHASE) {
      final UUID invoiceId=getInvoiceId(paymentControlContext);
      invoiceApi.notifyOfPayment(invoiceId,paymentControlContext.getAmount(),paymentControlContext.getCurrency(),paymentControlContext.getProcessedCurrency(),paymentControlContext.getPaymentId(),paymentControlContext.getCreatedDate(),internalContext);
    }
 else {
      final Map<UUID,BigDecimal> idWithAmount=extractIdsWithAmountFromProperties(paymentControlContext.getPluginProperties());
      final PluginProperty prop=getPluginProperty(paymentControlContext.getPluginProperties(),PROP_IPCD_REFUND_WITH_ADJUSTMENTS);
      final boolean isAdjusted=prop != null ? Boolean.valueOf((String)prop.getValue()) : false;
      invoiceApi.createRefund(paymentControlContext.getPaymentId(),paymentControlContext.getAmount(),isAdjusted,idWithAmount,paymentControlContext.getTransactionExternalKey(),internalContext);
    }
  }
 catch (  InvoiceApiException e) {
    logger.error("Failed to complete call: ",e);
  }
}
