{
  final TransactionType transactionType=paymentControlContext.getTransactionType();
  Preconditions.checkArgument(transactionType == TransactionType.PURCHASE || transactionType == TransactionType.REFUND || transactionType == TransactionType.CHARGEBACK);
  final InternalCallContext internalContext=internalCallContextFactory.createInternalCallContext(paymentControlContext.getAccountId(),paymentControlContext);
  try {
    final InvoicePayment existingInvoicePayment;
switch (transactionType) {
case PURCHASE:
      final UUID invoiceId=getInvoiceId(paymentControlContext);
    existingInvoicePayment=invoiceApi.getInvoicePaymentForAttempt(paymentControlContext.getPaymentId(),internalContext);
  if (existingInvoicePayment != null) {
    logger.info("onSuccessCall was already completed for payment purchase :" + paymentControlContext.getPaymentId());
  }
 else {
    invoiceApi.notifyOfPayment(invoiceId,paymentControlContext.getAmount(),paymentControlContext.getCurrency(),paymentControlContext.getProcessedCurrency(),paymentControlContext.getPaymentId(),paymentControlContext.getCreatedDate(),internalContext);
  }
break;
case REFUND:
existingInvoicePayment=invoiceApi.getInvoicePaymentForRefund(paymentControlContext.getPaymentId(),internalContext);
if (existingInvoicePayment != null) {
logger.info("onSuccessCall was already completed for payment refund :" + paymentControlContext.getPaymentId());
}
 else {
final Map<UUID,BigDecimal> idWithAmount=extractIdsWithAmountFromProperties(paymentControlContext.getPluginProperties());
final PluginProperty prop=getPluginProperty(paymentControlContext.getPluginProperties(),PROP_IPCD_REFUND_WITH_ADJUSTMENTS);
final boolean isAdjusted=prop != null ? Boolean.valueOf((String)prop.getValue()) : false;
invoiceApi.createRefund(paymentControlContext.getPaymentId(),paymentControlContext.getAmount(),isAdjusted,idWithAmount,paymentControlContext.getTransactionExternalKey(),internalContext);
}
break;
case CHARGEBACK:
existingInvoicePayment=invoiceApi.getInvoicePaymentForChargeback(paymentControlContext.getPaymentId(),internalContext);
if (existingInvoicePayment != null) {
logger.info("onSuccessCall was already completed for payment chargeback :" + paymentControlContext.getPaymentId());
}
 else {
invoiceApi.createChargeback(paymentControlContext.getPaymentId(),paymentControlContext.getProcessedAmount(),paymentControlContext.getProcessedCurrency(),internalContext);
}
break;
default :
throw new IllegalStateException("Unexpected transactionType " + transactionType);
}
}
 catch (InvoiceApiException e) {
logger.error("Failed to complete call: ",e);
}
}
