{
  super.beforeMethod();
  final Product product=new MockProduct("platinium","subscription",ProductCategory.BASE);
  final Plan plan=new MockPlan("platinum-monthly",product);
  final PlanPhase phase=new MockPhase(PhaseType.EVERGREEN,plan,MockDuration.UNLIMITED(),25.95);
  final Subscription prevISubscription=new MockSubscription(Subscription.SubscriptionState.ACTIVE,plan,phase);
  final Subscription nextISubscription=new MockSubscription(Subscription.SubscriptionState.CANCELLED,plan,phase);
  Mockito.when(catalog.findPlan(Mockito.anyString(),Mockito.<DateTime>any())).thenReturn(plan);
  Mockito.when(catalog.findPhase(Mockito.anyString(),Mockito.<DateTime>any(),Mockito.<DateTime>any())).thenReturn(phase);
  Mockito.when(catalogService.getFullCatalog()).thenReturn(catalog);
  final DateTime now=new DateTime();
  prevSubscription=new BusinessSubscription(prevISubscription,USD,catalog);
  nextSubscription=new BusinessSubscription(nextISubscription,USD,catalog);
  event=BusinessSubscriptionEvent.subscriptionCancelled(prevISubscription.getCurrentPlan().getName(),catalog,now,now);
  requestedTimestamp=new DateTime(DateTimeZone.UTC);
  totalOrdering=12L;
  bundleId=UUID.randomUUID();
  externalKey="1234";
  accountId=UUID.randomUUID();
  accountKey="pierre-1234";
  subscriptionId=UUID.randomUUID();
  transition=new BusinessSubscriptionTransitionModelDao(totalOrdering,bundleId,externalKey,accountId,accountKey,subscriptionId,requestedTimestamp,event,prevSubscription,nextSubscription);
}
