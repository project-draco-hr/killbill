{
synchronized (this) {
    long waitTimeMs=timeout;
    do {
      try {
        final DateTime before=new DateTime();
        wait(500);
        if (completed) {
          await().atMost(timeout,TimeUnit.MILLISECONDS).until(new Callable<Boolean>(){
            @Override public Boolean call() throws Exception {
              final long inProcessingBusEvents=idbi.withHandle(new HandleCallback<Long>(){
                @Override public Long withHandle(                final Handle handle) throws Exception {
                  return (Long)handle.select("select count(distinct record_id) count from bus_events").get(0).get("count");
                }
              }
);
              log.debug("Events still in processing: " + inProcessingBusEvents);
              return inProcessingBusEvents == 0;
            }
          }
);
          return completed;
        }
        final DateTime after=new DateTime();
        waitTimeMs-=after.getMillis() - before.getMillis();
      }
 catch (      final Exception ignore) {
        log.error("isCompleted got interrupted ",ignore);
        return false;
      }
    }
 while (waitTimeMs > 0 && !completed);
  }
  if (!completed) {
    final Joiner joiner=Joiner.on(" ");
    log.error("TestApiListener did not complete in " + timeout + " ms, remaining events are "+ joiner.join(nextExpectedEvent));
  }
  return completed;
}
