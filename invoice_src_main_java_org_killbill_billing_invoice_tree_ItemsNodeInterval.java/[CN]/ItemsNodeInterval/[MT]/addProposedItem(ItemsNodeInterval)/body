{
  return addNode(newNode,new AddNodeCallback(){
    @Override public boolean onExistingNode(    final NodeInterval existingNode){
      if (!shouldInsertNode(existingNode)) {
        return false;
      }
      Preconditions.checkState(newNode.getStart().compareTo(existingNode.getStart()) == 0 && newNode.getEnd().compareTo(existingNode.getEnd()) == 0);
      final Item item=newNode.getItems().get(0);
      final ItemsInterval existingOrNewNodeItems=((ItemsNodeInterval)existingNode).getItemsInterval();
      existingOrNewNodeItems.cancelItems(item);
      return true;
    }
    @Override public boolean shouldInsertNode(    final NodeInterval insertionNode){
      if (insertionNode.isRoot()) {
        return false;
      }
      final ItemsInterval insertionNodeItems=((ItemsNodeInterval)insertionNode).getItemsInterval();
      Preconditions.checkState(insertionNodeItems.getItems().size() == 1,"Expected existing node to have only one item");
      final Item insertionNodeItem=insertionNodeItems.getItems().get(0);
      final Item newNodeItem=newNode.getItems().get(0);
      if (insertionNodeItem.isSameKind(newNodeItem)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
}
