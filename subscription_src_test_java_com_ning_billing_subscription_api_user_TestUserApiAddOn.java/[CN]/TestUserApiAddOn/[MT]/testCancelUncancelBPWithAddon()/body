{
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  DefaultSubscriptionBase baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
  final String aoProduct="Telescopic-Scope";
  final BillingPeriod aoTerm=BillingPeriod.MONTHLY;
  final String aoPriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  DefaultSubscriptionBase aoSubscription=testUtil.createSubscription(bundle,aoProduct,aoTerm,aoPriceList);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(2));
  clock.addDeltaFromReality(it.toDurationMillis());
  assertListenerStatus();
  final DateTime now=clock.getUTCNow();
  final Duration ctd=testUtil.getDurationMonth(1);
  final DateTime newChargedThroughDate=TestSubscriptionHelper.addDuration(now,ctd);
  subscriptionInternalApi.setChargedThroughDate(baseSubscription.getId(),newChargedThroughDate,internalCallContext);
  baseSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  baseSubscription.cancel(callContext);
  aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
  assertEquals(aoSubscription.getState(),EntitlementState.ACTIVE);
  assertTrue(aoSubscription.isSubscriptionFutureCancelled());
  testListener.pushExpectedEvent(NextEvent.UNCANCEL);
  baseSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  baseSubscription.uncancel(callContext);
  assertListenerStatus();
  aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
  assertEquals(aoSubscription.getState(),EntitlementState.ACTIVE);
  assertFalse(aoSubscription.isSubscriptionFutureCancelled());
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(1));
  clock.addDeltaFromReality(it.toDurationMillis());
  baseSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  baseSubscription.cancel(callContext);
  baseSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  assertEquals(baseSubscription.getState(),EntitlementState.ACTIVE);
  assertTrue(baseSubscription.isSubscriptionFutureCancelled());
  aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
  assertEquals(aoSubscription.getState(),EntitlementState.ACTIVE);
  assertTrue(aoSubscription.isSubscriptionFutureCancelled());
  assertListenerStatus();
}
