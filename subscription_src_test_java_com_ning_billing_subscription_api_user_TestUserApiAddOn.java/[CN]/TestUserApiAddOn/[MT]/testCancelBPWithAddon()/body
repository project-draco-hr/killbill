{
  try {
    final String baseProduct="Shotgun";
    final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
    final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
    DefaultSubscriptionBase baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
    final String aoProduct="Telescopic-Scope";
    final BillingPeriod aoTerm=BillingPeriod.MONTHLY;
    final String aoPriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
    DefaultSubscriptionBase aoSubscription=testUtil.createSubscription(bundle,aoProduct,aoTerm,aoPriceList);
    testListener.reset();
    testListener.pushExpectedEvent(NextEvent.PHASE);
    testListener.pushExpectedEvent(NextEvent.PHASE);
    Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(2));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    final DateTime now=clock.getUTCNow();
    final Duration ctd=testUtil.getDurationMonth(1);
    final DateTime newChargedThroughDate=TestSubscriptionHelper.addDuration(now,ctd);
    subscriptionInternalApi.setChargedThroughDate(baseSubscription.getId(),newChargedThroughDate,internalCallContext);
    baseSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
    baseSubscription.cancel(now,callContext);
    aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
    assertEquals(aoSubscription.getState(),EntitlementState.ACTIVE);
    assertTrue(aoSubscription.isSubscriptionFutureCancelled());
    testListener.reset();
    testListener.pushExpectedEvent(NextEvent.CANCEL);
    testListener.pushExpectedEvent(NextEvent.CANCEL);
    it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(1));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
    assertEquals(aoSubscription.getState(),EntitlementState.CANCELLED);
    assertListenerStatus();
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
}
