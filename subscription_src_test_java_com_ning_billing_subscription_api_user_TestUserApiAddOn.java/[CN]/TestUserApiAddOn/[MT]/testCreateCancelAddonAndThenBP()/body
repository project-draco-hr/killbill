{
  try {
    final String baseProduct="Shotgun";
    final BillingPeriod baseTerm=BillingPeriod.ANNUAL;
    final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
    DefaultSubscriptionBase baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
    final String aoProduct="Telescopic-Scope";
    final BillingPeriod aoTerm=BillingPeriod.MONTHLY;
    final String aoPriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
    DefaultSubscriptionBase aoSubscription=testUtil.createSubscription(bundle,aoProduct,aoTerm,aoPriceList);
    assertEquals(aoSubscription.getState(),EntitlementState.ACTIVE);
    Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(1));
    testListener.pushExpectedEvent(NextEvent.PHASE);
    testListener.pushExpectedEvent(NextEvent.PHASE);
    clock.addDeltaFromReality(it.toDurationMillis());
    assertListenerStatus();
    final DateTime now=clock.getUTCNow();
    final Duration aoCtd=testUtil.getDurationMonth(1);
    final DateTime newAOChargedThroughDate=TestSubscriptionHelper.addDuration(now,aoCtd);
    subscriptionInternalApi.setChargedThroughDate(aoSubscription.getId(),newAOChargedThroughDate,internalCallContext);
    final Duration bpCtd=testUtil.getDurationMonth(11);
    final DateTime newBPChargedThroughDate=TestSubscriptionHelper.addDuration(now,bpCtd);
    subscriptionInternalApi.setChargedThroughDate(baseSubscription.getId(),newBPChargedThroughDate,internalCallContext);
    baseSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
    aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
    it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(1));
    clock.addDeltaFromReality(it.toDurationMillis());
    aoSubscription.cancel(callContext);
    aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
    assertEquals(aoSubscription.getState(),EntitlementState.ACTIVE);
    assertTrue(aoSubscription.isSubscriptionFutureCancelled());
    baseSubscription.cancel(callContext);
    baseSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
    assertEquals(baseSubscription.getState(),EntitlementState.ACTIVE);
    assertTrue(baseSubscription.isSubscriptionFutureCancelled());
    aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
    List<SubscriptionBaseTransition> aoTransitions=aoSubscription.getAllTransitions();
    assertEquals(aoTransitions.size(),3);
    assertEquals(aoTransitions.get(0).getTransitionType(),SubscriptionBaseTransitionType.CREATE);
    assertEquals(aoTransitions.get(1).getTransitionType(),SubscriptionBaseTransitionType.PHASE);
    assertEquals(aoTransitions.get(2).getTransitionType(),SubscriptionBaseTransitionType.CANCEL);
    assertTrue(aoSubscription.getFutureEndDate().compareTo(newAOChargedThroughDate) == 0);
    testListener.pushExpectedEvent(NextEvent.UNCANCEL);
    aoSubscription.uncancel(callContext);
    assertListenerStatus();
    aoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
    aoTransitions=aoSubscription.getAllTransitions();
    assertEquals(aoTransitions.size(),3);
    assertEquals(aoTransitions.get(0).getTransitionType(),SubscriptionBaseTransitionType.CREATE);
    assertEquals(aoTransitions.get(1).getTransitionType(),SubscriptionBaseTransitionType.PHASE);
    assertEquals(aoTransitions.get(2).getTransitionType(),SubscriptionBaseTransitionType.CANCEL);
    assertTrue(aoSubscription.getFutureEndDate().compareTo(newBPChargedThroughDate) == 0);
    assertListenerStatus();
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
}
