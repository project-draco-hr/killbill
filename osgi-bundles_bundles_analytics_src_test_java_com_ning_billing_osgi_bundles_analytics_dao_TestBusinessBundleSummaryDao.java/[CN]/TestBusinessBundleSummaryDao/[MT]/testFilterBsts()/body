{
  final UUID bundleId1=UUID.randomUUID();
  final DateTime bundle1StartDate=new DateTime(2012,1,1,1,1);
  final DateTime bundle1PhaseDate=new DateTime(2012,2,2,1,1);
  final UUID bundleId2=UUID.randomUUID();
  final DateTime bundle2StartDate=new DateTime(2012,2,1,1,1);
  final DateTime bundle2PhaseDate=new DateTime(2012,3,2,1,1);
  final UUID bundleId3=UUID.randomUUID();
  final DateTime bundle3StartDate=new DateTime(2012,3,1,1,1);
  final Collection<BusinessSubscriptionTransitionModelDao> bsts=ImmutableList.<BusinessSubscriptionTransitionModelDao>of(createBst(bundleId1,"ADD_BASE",bundle1StartDate),createBst(bundleId1,"SYSTEM_CHANGE_BASE",bundle1PhaseDate),createBst(bundleId2,"ADD_BASE",bundle2StartDate),createBst(bundleId2,"SYSTEM_CHANGE_BASE",bundle2PhaseDate),createBst(bundleId3,"ADD_BASE",bundle3StartDate),createBst(UUID.randomUUID(),"ADD_ADD_ON",new DateTime(DateTimeZone.UTC)));
  final Map<UUID,Integer> rankForBundle=new LinkedHashMap<UUID,Integer>();
  final Map<UUID,BusinessSubscriptionTransitionModelDao> bstForBundle=new LinkedHashMap<UUID,BusinessSubscriptionTransitionModelDao>();
  bundleSummaryDao.filterBstsForBasePlans(bsts,rankForBundle,bstForBundle);
  final List<BusinessSubscriptionTransitionModelDao> filteredBsts=ImmutableList.<BusinessSubscriptionTransitionModelDao>copyOf(bstForBundle.values());
  Assert.assertEquals(filteredBsts.size(),3);
  Assert.assertEquals(filteredBsts.get(0).getBundleId(),bundleId1);
  Assert.assertEquals(filteredBsts.get(0).getNextStartDate(),bundle1PhaseDate);
  Assert.assertEquals(filteredBsts.get(1).getBundleId(),bundleId2);
  Assert.assertEquals(filteredBsts.get(1).getNextStartDate(),bundle2PhaseDate);
  Assert.assertEquals(filteredBsts.get(2).getBundleId(),bundleId3);
  Assert.assertEquals(filteredBsts.get(2).getNextStartDate(),bundle3StartDate);
}
