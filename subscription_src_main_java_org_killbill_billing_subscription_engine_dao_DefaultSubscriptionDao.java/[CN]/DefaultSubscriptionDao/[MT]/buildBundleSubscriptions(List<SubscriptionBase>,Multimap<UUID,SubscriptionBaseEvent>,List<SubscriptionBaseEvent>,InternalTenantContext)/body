{
  if (input == null || input.size() == 0) {
    return Collections.emptyList();
  }
  Collections.sort(input,new Comparator<SubscriptionBase>(){
    @Override public int compare(    final SubscriptionBase o1,    final SubscriptionBase o2){
      if (o1.getCategory() == ProductCategory.BASE) {
        return -1;
      }
 else       if (o2.getCategory() == ProductCategory.BASE) {
        return 1;
      }
 else {
        return ((DefaultSubscriptionBase)o1).getAlignStartDate().compareTo(((DefaultSubscriptionBase)o2).getAlignStartDate());
      }
    }
  }
);
  final List<ApiEventChange> baseChangeEvents=new LinkedList<ApiEventChange>();
  ApiEventCancel baseCancellationEvent=null;
  final List<SubscriptionBase> result=new ArrayList<SubscriptionBase>(input.size());
  for (  final SubscriptionBase cur : input) {
    final List<SubscriptionBaseEvent> events=eventsForSubscription != null ? (List<SubscriptionBaseEvent>)eventsForSubscription.get(cur.getId()) : getEventsForSubscription(cur.getId(),context);
    mergeDryRunEvents(cur.getId(),events,dryRunEvents);
    SubscriptionBase reloaded=createSubscriptionForInternalUse(cur,events,context);
switch (cur.getCategory()) {
case BASE:
      for (      final SubscriptionBaseEvent event : events) {
        if (!event.isActive()) {
          continue;
        }
 else         if (event instanceof ApiEventCancel) {
          baseCancellationEvent=(ApiEventCancel)event;
          break;
        }
 else         if (event instanceof ApiEventChange) {
          baseChangeEvents.add((ApiEventChange)event);
        }
      }
    break;
case ADD_ON:
  final Plan targetAddOnPlan=reloaded.getCurrentPlan();
if (targetAddOnPlan == null || reloaded.getFutureEndDate() != null) {
  break;
}
SubscriptionBaseEvent baseTriggerEventForAddOnCancellation=baseCancellationEvent;
for (final ApiEventChange baseChangeEvent : baseChangeEvents) {
final String baseProductName=baseChangeEvent.getEventPlan();
if ((!addonUtils.isAddonAvailableFromPlanName(baseProductName,targetAddOnPlan,baseChangeEvent.getEffectiveDate(),context)) || (addonUtils.isAddonIncludedFromPlanName(baseProductName,targetAddOnPlan,baseChangeEvent.getEffectiveDate(),context))) {
if (baseTriggerEventForAddOnCancellation != null) {
  if (baseTriggerEventForAddOnCancellation.getEffectiveDate().isAfter(baseChangeEvent.getEffectiveDate())) {
    baseTriggerEventForAddOnCancellation=baseChangeEvent;
  }
}
 else {
  baseTriggerEventForAddOnCancellation=baseChangeEvent;
}
}
}
if (baseTriggerEventForAddOnCancellation != null) {
final DateTime now=clock.getUTCNow();
final SubscriptionBaseEvent addOnCancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(reloaded.getId()).setActiveVersion(((DefaultSubscriptionBase)reloaded).getActiveVersion()).setProcessedDate(now).setEffectiveDate(baseTriggerEventForAddOnCancellation.getEffectiveDate()).setRequestedDate(now).setCreatedDate(baseTriggerEventForAddOnCancellation.getCreatedDate()).setFromDisk(false));
events.add(addOnCancelEvent);
reloaded=createSubscriptionForInternalUse(cur,events,context);
}
break;
default :
break;
}
result.add(reloaded);
}
return result;
}
