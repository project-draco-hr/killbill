{
  final SubscriptionSqlDao transSubDao=entitySqlDaoWrapperFactory.become(SubscriptionSqlDao.class);
  final BundleSqlDao transBundleDao=entitySqlDaoWrapperFactory.become(BundleSqlDao.class);
  final DefaultSubscriptionBaseBundle bundleData=bundleTransferData.getData();
  final List<SubscriptionBundleModelDao> existingBundleModels=transBundleDao.getBundlesFromAccountAndKey(bundleData.getAccountId().toString(),bundleData.getExternalKey(),context);
  if (existingBundleModels.size() != 0) {
    log.error(String.format("Attempted to create a bundle for account %s and key %s that already existed, skip...",bundleData.getAccountId().toString(),bundleData.getExternalKey()));
    return;
  }
  for (  final SubscriptionMigrationData curSubscription : bundleTransferData.getSubscriptions()) {
    final DefaultSubscriptionBase subData=curSubscription.getData();
    for (    final SubscriptionBaseEvent curEvent : curSubscription.getInitialEvents()) {
      transactional.create(new SubscriptionEventModelDao(curEvent),context);
      recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,curEvent.getEffectiveDate(),new SubscriptionNotificationKey(curEvent.getId()),context);
    }
    transSubDao.create(new SubscriptionModelDao(subData),context);
    final SubscriptionBaseEvent finalEvent=curSubscription.getInitialEvents().get(curSubscription.getInitialEvents().size() - 1);
    notifyBusOfRequestedChange(entitySqlDaoWrapperFactory,subData,finalEvent,SubscriptionBaseTransitionType.MIGRATE_BILLING,context);
  }
  transBundleDao.create(new SubscriptionBundleModelDao(bundleData),context);
}
