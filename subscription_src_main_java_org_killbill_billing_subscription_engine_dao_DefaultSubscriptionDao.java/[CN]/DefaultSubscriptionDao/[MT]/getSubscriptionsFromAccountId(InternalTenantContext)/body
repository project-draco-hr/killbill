{
  final List<SubscriptionBase> allSubscriptions=transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<List<SubscriptionBase>>(){
    @Override public List<SubscriptionBase> inTransaction(    final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
      final List<SubscriptionModelDao> models=entitySqlDaoWrapperFactory.become(SubscriptionSqlDao.class).getByAccountRecordId(context);
      return new ArrayList<SubscriptionBase>(Collections2.transform(models,new Function<SubscriptionModelDao,SubscriptionBase>(){
        @Override public SubscriptionBase apply(        final SubscriptionModelDao input){
          return SubscriptionModelDao.toSubscription(input);
        }
      }
));
    }
  }
);
  final Map<UUID,List<SubscriptionBase>> result=new HashMap<UUID,List<SubscriptionBase>>();
  for (  final SubscriptionBase subscriptionBase : allSubscriptions) {
    if (result.get(subscriptionBase.getBundleId()) == null) {
      result.put(subscriptionBase.getBundleId(),new LinkedList<SubscriptionBase>());
    }
    result.get(subscriptionBase.getBundleId()).add(subscriptionBase);
  }
  return result;
}
