{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
      final SubscriptionEventSqlDao transactional=entitySqlDaoWrapperFactory.become(SubscriptionEventSqlDao.class);
      final UUID subscriptionId=subscription.getId();
      SubscriptionEventModelDao cancelledEvent=null;
      final Date now=clock.getUTCNow().toDate();
      final List<SubscriptionEventModelDao> eventModels=transactional.getFutureActiveEventForSubscription(subscriptionId.toString(),now,context);
      for (      final SubscriptionEventModelDao cur : eventModels) {
        if (cur.getUserType() == ApiEventType.CANCEL) {
          if (cancelledEvent != null) {
            throw new SubscriptionBaseError(String.format("Found multiple cancelWithRequestedDate active events for subscriptions %s",subscriptionId.toString()));
          }
          cancelledEvent=cur;
        }
      }
      if (cancelledEvent != null) {
        final String cancelledEventId=cancelledEvent.getId().toString();
        transactional.unactiveEvent(cancelledEventId,context);
        for (        final SubscriptionBaseEvent cur : uncancelEvents) {
          transactional.create(new SubscriptionEventModelDao(cur),context);
          recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,cur.getEffectiveDate(),new SubscriptionNotificationKey(cur.getId()),context);
        }
        notifyBusOfRequestedChange(entitySqlDaoWrapperFactory,subscription,uncancelEvents.get(uncancelEvents.size() - 1),SubscriptionBaseTransitionType.UNCANCEL,context);
      }
      return null;
    }
  }
);
}
