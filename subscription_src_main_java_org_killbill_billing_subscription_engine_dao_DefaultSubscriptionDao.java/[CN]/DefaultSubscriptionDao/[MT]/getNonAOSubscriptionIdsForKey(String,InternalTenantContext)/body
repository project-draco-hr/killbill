{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Iterable<UUID>>(){
    @Override public Iterable<UUID> inTransaction(    final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
      final BundleSqlDao bundleSqlDao=entitySqlDaoWrapperFactory.become(BundleSqlDao.class);
      final List<SubscriptionBundleModelDao> bundles=bundleSqlDao.getBundlesForKey(bundleKey,context);
      final Collection<UUID> nonAOSubscriptionIdsForKey=new LinkedList<UUID>();
      final SubscriptionSqlDao subscriptionSqlDao=entitySqlDaoWrapperFactory.become(SubscriptionSqlDao.class);
      for (      final SubscriptionBundleModelDao bundle : bundles) {
        final List<SubscriptionModelDao> subscriptions=subscriptionSqlDao.getSubscriptionsFromBundleId(bundle.getId().toString(),context);
        final Collection<SubscriptionModelDao> nonAddonSubscriptions=Collections2.filter(subscriptions,new Predicate<SubscriptionModelDao>(){
          @Override public boolean apply(          final SubscriptionModelDao input){
            return input.getCategory() != ProductCategory.ADD_ON;
          }
        }
);
        nonAOSubscriptionIdsForKey.addAll(Collections2.transform(nonAddonSubscriptions,new Function<SubscriptionModelDao,UUID>(){
          @Override public UUID apply(          final SubscriptionModelDao input){
            return input.getId();
          }
        }
));
      }
      return nonAOSubscriptionIdsForKey;
    }
  }
);
}
