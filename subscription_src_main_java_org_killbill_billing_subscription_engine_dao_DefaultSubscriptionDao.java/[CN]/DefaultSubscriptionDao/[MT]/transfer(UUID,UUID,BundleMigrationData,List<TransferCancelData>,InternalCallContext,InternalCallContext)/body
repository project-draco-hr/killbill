{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
      final SubscriptionEventSqlDao transactional=entitySqlDaoWrapperFactory.become(SubscriptionEventSqlDao.class);
      for (      final TransferCancelData cancel : transferCancelData) {
        cancelSubscriptionFromTransaction(cancel.getSubscription(),cancel.getCancelEvent(),entitySqlDaoWrapperFactory,fromContext,0);
      }
      migrateBundleDataFromTransaction(bundleTransferData,transactional,entitySqlDaoWrapperFactory,toContext);
      return null;
    }
  }
);
}
