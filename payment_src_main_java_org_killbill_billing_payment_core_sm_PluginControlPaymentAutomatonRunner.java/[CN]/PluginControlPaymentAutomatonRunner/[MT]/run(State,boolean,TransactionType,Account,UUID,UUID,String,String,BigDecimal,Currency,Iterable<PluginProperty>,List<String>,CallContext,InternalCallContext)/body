{
  final PaymentStateControlContext paymentStateContext=createContext(isApiPayment,transactionType,account,paymentMethodId,paymentId,paymentExternalKey,paymentTransactionExternalKey,amount,currency,properties,paymentControlPluginNames,callContext,internalCallContext);
  try {
    final OperationCallback callback=createOperationCallback(transactionType,paymentStateContext);
    final LeavingStateCallback leavingStateCallback=new DefaultControlInitiated(this,paymentStateContext,paymentDao,paymentControlStateMachineHelper.getInitialState(),paymentControlStateMachineHelper.getRetriedState(),transactionType);
    final EnteringStateCallback enteringStateCallback=new DefaultControlCompleted(this,paymentStateContext,paymentControlStateMachineHelper.getRetriedState(),retryServiceScheduler);
    state.runOperation(paymentControlStateMachineHelper.getOperation(),callback,enteringStateCallback,leavingStateCallback);
  }
 catch (  final MissingEntryException e) {
    throw new PaymentApiException(e.getCause(),ErrorCode.PAYMENT_INTERNAL_ERROR,MoreObjects.firstNonNull(e.getMessage(),""));
  }
catch (  final OperationException e) {
    if (e.getCause() instanceof PaymentApiException) {
      throw (PaymentApiException)e.getCause();
    }
 else     if (e.getCause() != null || paymentStateContext.getResult() == null) {
      throw new PaymentApiException(e.getCause(),ErrorCode.PAYMENT_INTERNAL_ERROR,MoreObjects.firstNonNull(e.getMessage(),""));
    }
  }
  return paymentStateContext.getResult();
}
