{
  final OperationCallback callback;
switch (transactionType) {
case AUTHORIZE:
    callback=new AuthorizeControlOperation(locker,paymentPluginDispatcher,paymentStateContext,paymentProcessor,paymentControlPluginRegistry);
  break;
case CAPTURE:
callback=new CaptureControlOperation(locker,paymentPluginDispatcher,paymentStateContext,paymentProcessor,paymentControlPluginRegistry);
break;
case PURCHASE:
callback=new PurchaseControlOperation(locker,paymentPluginDispatcher,paymentStateContext,paymentProcessor,paymentControlPluginRegistry);
break;
case VOID:
callback=new VoidControlOperation(locker,paymentPluginDispatcher,paymentStateContext,paymentProcessor,paymentControlPluginRegistry);
break;
case CREDIT:
callback=new CreditControlOperation(locker,paymentPluginDispatcher,paymentStateContext,paymentProcessor,paymentControlPluginRegistry);
break;
case REFUND:
callback=new RefundControlOperation(locker,paymentPluginDispatcher,paymentStateContext,paymentProcessor,paymentControlPluginRegistry);
break;
case CHARGEBACK:
callback=new ChargebackControlOperation(locker,paymentPluginDispatcher,paymentStateContext,paymentProcessor,paymentControlPluginRegistry);
break;
default :
throw new IllegalStateException("Unsupported transaction type " + transactionType);
}
return callback;
}
