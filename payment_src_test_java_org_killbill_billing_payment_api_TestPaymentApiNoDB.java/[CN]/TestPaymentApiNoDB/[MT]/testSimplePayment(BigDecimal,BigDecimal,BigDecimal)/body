{
  final LocalDate now=clock.getUTCToday();
  final Invoice invoice=testHelper.createTestInvoice(account,now,Currency.USD);
  final UUID subscriptionId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  invoice.addInvoiceItem(new MockRecurringInvoiceItem(invoice.getId(),account.getId(),subscriptionId,bundleId,"test plan","test phase",null,now,now.plusMonths(1),invoiceAmount,new BigDecimal("1.0"),Currency.USD));
  try {
    final List<PluginProperty> properties=new ArrayList<PluginProperty>();
    final PluginProperty prop1=new PluginProperty(InvoicePaymentRoutingPluginApi.PROP_IPCD_INVOICE_ID,invoice.getId().toString(),false);
    properties.add(prop1);
    final Payment paymentInfo=paymentApi.createPurchaseWithPaymentControl(account,account.getPaymentMethodId(),null,requestedAmount,account.getCurrency(),invoice.getId().toString(),UUID.randomUUID().toString(),properties,PAYMENT_OPTIONS,callContext);
    if (expectedAmount == null) {
      fail("Expected to fail because requested amount > invoice amount");
    }
    assertNotNull(paymentInfo.getId());
    assertTrue(paymentInfo.getPurchasedAmount().compareTo(expectedAmount) == 0);
    assertNotNull(paymentInfo.getPaymentNumber());
    assertEquals(paymentInfo.getExternalKey(),invoice.getId().toString());
    assertEquals(paymentInfo.getCurrency(),Currency.USD);
    assertTrue(paymentInfo.getTransactions().get(0).getAmount().compareTo(expectedAmount) == 0);
    assertEquals(paymentInfo.getTransactions().get(0).getCurrency(),Currency.USD);
    assertEquals(paymentInfo.getTransactions().get(0).getPaymentId(),paymentInfo.getId());
    assertEquals(paymentInfo.getTransactions().get(0).getTransactionType(),TransactionType.PURCHASE);
    assertEquals(paymentInfo.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  }
 catch (  final PaymentApiException e) {
    if (expectedAmount != null) {
      fail("Failed to create payment",e);
    }
 else {
      log.info(e.getMessage());
    }
  }
}
