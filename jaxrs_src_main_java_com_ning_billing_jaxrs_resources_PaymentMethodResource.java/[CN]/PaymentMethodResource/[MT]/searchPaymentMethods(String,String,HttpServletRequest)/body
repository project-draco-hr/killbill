{
  final TenantContext tenantContext=context.createContext(request);
  final List<PaymentMethod> paymentMethods;
  if (Strings.isNullOrEmpty(pluginName)) {
    paymentMethods=paymentApi.searchPaymentMethods(searchKey,tenantContext);
  }
 else {
    paymentMethods=paymentApi.searchPaymentMethods(searchKey,pluginName,tenantContext);
  }
  final Map<UUID,Account> accounts=new HashMap<UUID,Account>();
  for (  final PaymentMethod paymentMethod : paymentMethods) {
    if (accounts.get(paymentMethod.getAccountId()) == null) {
      final Account account=accountApi.getAccountById(paymentMethod.getAccountId(),tenantContext);
      accounts.put(paymentMethod.getAccountId(),account);
    }
  }
  final List<PaymentMethodJson> json=Lists.transform(paymentMethods,new Function<PaymentMethod,PaymentMethodJson>(){
    @Override public PaymentMethodJson apply(    final PaymentMethod paymentMethod){
      return PaymentMethodJson.toPaymentMethodJson(accounts.get(paymentMethod.getAccountId()),paymentMethod);
    }
  }
);
  return Response.status(Status.OK).entity(json).build();
}
