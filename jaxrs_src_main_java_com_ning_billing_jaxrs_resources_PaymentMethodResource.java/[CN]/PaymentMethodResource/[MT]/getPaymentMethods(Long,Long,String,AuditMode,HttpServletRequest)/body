{
  final TenantContext tenantContext=context.createContext(request);
  final Pagination<PaymentMethod> paymentMethods;
  if (Strings.isNullOrEmpty(pluginName)) {
    paymentMethods=paymentApi.getPaymentMethods(offset,limit,tenantContext);
  }
 else {
    paymentMethods=paymentApi.getPaymentMethods(offset,limit,pluginName,tenantContext);
  }
  final URI nextPageUri=uriBuilder.nextPage(PaymentMethodResource.class,"getPaymentMethods",paymentMethods.getNextOffset(),limit,ImmutableMap.<String,String>of(QUERY_PAYMENT_METHOD_PLUGIN_NAME,Strings.nullToEmpty(pluginName),QUERY_AUDIT,auditMode.getLevel().toString()));
  final AtomicReference<Map<UUID,AccountAuditLogs>> accountsAuditLogs=new AtomicReference<Map<UUID,AccountAuditLogs>>(new HashMap<UUID,AccountAuditLogs>());
  final Map<UUID,Account> accounts=new HashMap<UUID,Account>();
  return buildStreamingPaginationResponse(paymentMethods,new Function<PaymentMethod,PaymentMethodJson>(){
    @Override public PaymentMethodJson apply(    final PaymentMethod paymentMethod){
      if (accountsAuditLogs.get().get(paymentMethod.getAccountId()) == null) {
        accountsAuditLogs.get().put(paymentMethod.getAccountId(),auditUserApi.getAccountAuditLogs(paymentMethod.getAccountId(),auditMode.getLevel(),tenantContext));
      }
      if (accounts.get(paymentMethod.getAccountId()) == null) {
        final Account account;
        try {
          account=accountUserApi.getAccountById(paymentMethod.getAccountId(),tenantContext);
          accounts.put(paymentMethod.getAccountId(),account);
        }
 catch (        final AccountApiException e) {
          log.warn("Unable to retrieve account",e);
          return null;
        }
      }
      return PaymentMethodJson.toPaymentMethodJson(accounts.get(paymentMethod.getAccountId()),paymentMethod,accountsAuditLogs.get().get(paymentMethod.getAccountId()));
    }
  }
,nextPageUri);
}
