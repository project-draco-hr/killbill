{
  try {
    final NotificationQueueHandler queueHandler=new NotificationQueueHandler(){
      @Override public void handleReadyNotification(      final NotificationEvent inputKey,      final DateTime eventDateTime,      final UUID fromNotificationQueueUserToken,      final Long accountRecordId,      final Long tenantRecordId){
        final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(tenantRecordId,accountRecordId,"EntitlementQueue",CallOrigin.INTERNAL,UserType.SYSTEM,fromNotificationQueueUserToken);
        if (inputKey instanceof EntitlementNotificationKey) {
          final CallContext callContext=internalCallContextFactory.createCallContext(internalCallContext);
          processEntitlementNotification((EntitlementNotificationKey)inputKey,internalCallContext,callContext);
        }
 else         if (inputKey instanceof BlockingTransitionNotificationKey) {
          processBlockingNotification((BlockingTransitionNotificationKey)inputKey,internalCallContext);
        }
 else         if (inputKey != null) {
          log.error("Entitlement service received an unexpected event className='{}",inputKey.getClass());
        }
 else {
          log.error("Entitlement service received an unexpected null event");
        }
      }
    }
;
    entitlementEventQueue=notificationQueueService.createNotificationQueue(ENTITLEMENT_SERVICE_NAME,NOTIFICATION_QUEUE_NAME,queueHandler);
  }
 catch (  final NotificationQueueAlreadyExists e) {
    throw new RuntimeException(e);
  }
}
