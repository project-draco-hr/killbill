{
  final UUID subscriptionId=UUID.randomUUID();
  final Blockable overdueable=Mockito.mock(SubscriptionBase.class);
  Mockito.when(overdueable.getId()).thenReturn(subscriptionId);
  insertOverdueCheckAndVerifyQueueContent(overdueable,10,10);
  insertOverdueCheckAndVerifyQueueContent(overdueable,5,5);
  insertOverdueCheckAndVerifyQueueContent(overdueable,15,5);
  final UUID bundleId=UUID.randomUUID();
  final Blockable otherOverdueable=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(otherOverdueable.getId()).thenReturn(bundleId);
  insertOverdueCheckAndVerifyQueueContent(otherOverdueable,10,10);
  insertOverdueCheckAndVerifyQueueContent(otherOverdueable,5,5);
  insertOverdueCheckAndVerifyQueueContent(otherOverdueable,15,5);
  Assert.assertEquals(overdueQueue.getFutureNotificationForSearchKey1(OverdueCheckNotificationKey.class,internalCallContext.getAccountRecordId()).size(),2);
}
