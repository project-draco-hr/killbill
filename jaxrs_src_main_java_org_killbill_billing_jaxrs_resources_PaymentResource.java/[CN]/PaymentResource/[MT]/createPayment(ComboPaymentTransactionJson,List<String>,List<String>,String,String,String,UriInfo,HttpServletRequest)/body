{
  verifyNonNullOrEmpty(json,"ComboPaymentTransactionJson body should be specified");
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final Account account=getOrCreateAccount(json.getAccount(),callContext);
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final UUID paymentMethodId=getOrCreatePaymentMethod(account,json.getPaymentMethod(),pluginProperties,callContext);
  final PaymentTransactionJson paymentTransactionJson=json.getTransaction();
  final TransactionType transactionType=TransactionType.valueOf(paymentTransactionJson.getTransactionType());
  final PaymentOptions paymentOptions=createControlPluginApiPaymentOptions(paymentControlPluginNames);
  final Payment result;
  final UUID paymentId=null;
switch (transactionType) {
case AUTHORIZE:
    result=paymentApi.createAuthorizationWithPaymentControl(account,paymentMethodId,paymentId,paymentTransactionJson.getAmount(),account.getCurrency(),paymentTransactionJson.getPaymentExternalKey(),paymentTransactionJson.getTransactionExternalKey(),pluginProperties,paymentOptions,callContext);
  break;
case PURCHASE:
result=paymentApi.createPurchaseWithPaymentControl(account,paymentMethodId,paymentId,paymentTransactionJson.getAmount(),account.getCurrency(),paymentTransactionJson.getPaymentExternalKey(),paymentTransactionJson.getTransactionExternalKey(),pluginProperties,paymentOptions,callContext);
break;
case CREDIT:
result=paymentApi.createCreditWithPaymentControl(account,paymentMethodId,paymentId,paymentTransactionJson.getAmount(),account.getCurrency(),paymentTransactionJson.getPaymentExternalKey(),paymentTransactionJson.getTransactionExternalKey(),pluginProperties,paymentOptions,callContext);
break;
default :
return Response.status(Status.PRECONDITION_FAILED).entity("TransactionType " + transactionType + " is not allowed for an account").build();
}
return uriBuilder.buildResponse(uriInfo,PaymentResource.class,"getPayment",result.getId());
}
