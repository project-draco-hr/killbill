{
  final TenantContext tenantContext=context.createContext(request);
  final UUID paymentId=UUID.fromString(paymentIdString);
  final Payment payment=paymentApi.getPayment(paymentId,false,tenantContext);
  final PaymentJson paymentJson;
  if (withRefundsAndChargebacks) {
    final List<RefundJson> refunds=new ArrayList<RefundJson>();
    for (    final Refund refund : paymentApi.getPaymentRefunds(paymentId,tenantContext)) {
      refunds.add(new RefundJson(refund));
    }
    final List<ChargebackJson> chargebacks=new ArrayList<ChargebackJson>();
    for (    final InvoicePayment chargeback : invoicePaymentApi.getChargebacksByPaymentId(paymentId,tenantContext)) {
      chargebacks.add(new ChargebackJson(payment.getAccountId(),chargeback));
    }
    paymentJson=new PaymentJson(payment,null,refunds,chargebacks);
  }
 else {
    paymentJson=new PaymentJson(payment,null);
  }
  return Response.status(Status.OK).entity(paymentJson).build();
}
