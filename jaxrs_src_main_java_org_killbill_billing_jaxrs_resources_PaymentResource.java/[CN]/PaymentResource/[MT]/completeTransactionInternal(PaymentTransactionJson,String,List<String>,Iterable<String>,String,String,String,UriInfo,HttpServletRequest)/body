{
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final Payment initialPayment=getPaymentByIdOrKey(paymentIdStr,json == null ? null : json.getPaymentExternalKey(),pluginProperties,callContext);
  final Account account=accountUserApi.getAccountById(initialPayment.getAccountId(),callContext);
  final BigDecimal amount=json == null ? null : json.getAmount();
  final Currency currency=json == null || json.getCurrency() == null ? null : Currency.valueOf(json.getCurrency());
  final TransactionType transactionType;
  final String transactionExternalKey;
  if (json != null && json.getTransactionId() != null) {
    final Collection<PaymentTransaction> paymentTransactionCandidates=Collections2.<PaymentTransaction>filter(initialPayment.getTransactions(),new Predicate<PaymentTransaction>(){
      @Override public boolean apply(      final PaymentTransaction input){
        return input.getId().toString().equals(json.getTransactionId());
      }
    }
);
    if (paymentTransactionCandidates.size() == 1) {
      final PaymentTransaction paymentTransaction=paymentTransactionCandidates.iterator().next();
      transactionType=paymentTransaction.getTransactionType();
      transactionExternalKey=paymentTransaction.getExternalKey();
    }
 else {
      return Response.status(Status.NOT_FOUND).build();
    }
  }
 else   if (json != null && json.getTransactionExternalKey() != null && json.getTransactionType() != null) {
    transactionType=TransactionType.valueOf(json.getTransactionType());
    transactionExternalKey=json.getTransactionExternalKey();
  }
 else   if (json != null && json.getTransactionExternalKey() != null) {
    final Collection<PaymentTransaction> paymentTransactionCandidates=Collections2.<PaymentTransaction>filter(initialPayment.getTransactions(),new Predicate<PaymentTransaction>(){
      @Override public boolean apply(      final PaymentTransaction input){
        return input.getExternalKey().equals(json.getTransactionExternalKey());
      }
    }
);
    if (paymentTransactionCandidates.size() == 1) {
      transactionType=paymentTransactionCandidates.iterator().next().getTransactionType();
      transactionExternalKey=json.getTransactionExternalKey();
    }
 else {
      verifyNonNullOrEmpty(null,"PaymentTransactionJson transactionType needs to be set");
      return Response.status(Status.PRECONDITION_FAILED).build();
    }
  }
 else   if (json != null && json.getTransactionType() != null) {
    final Collection<PaymentTransaction> paymentTransactionCandidates=Collections2.<PaymentTransaction>filter(initialPayment.getTransactions(),new Predicate<PaymentTransaction>(){
      @Override public boolean apply(      final PaymentTransaction input){
        return input.getTransactionType().toString().equals(json.getTransactionType());
      }
    }
);
    if (paymentTransactionCandidates.size() == 1) {
      transactionType=TransactionType.valueOf(json.getTransactionType());
      transactionExternalKey=paymentTransactionCandidates.iterator().next().getExternalKey();
    }
 else {
      verifyNonNullOrEmpty(null,"PaymentTransactionJson externalKey needs to be set");
      return Response.status(Status.PRECONDITION_FAILED).build();
    }
  }
 else   if (initialPayment.getTransactions().size() == 1) {
    final PaymentTransaction paymentTransaction=initialPayment.getTransactions().get(0);
    transactionType=paymentTransaction.getTransactionType();
    transactionExternalKey=paymentTransaction.getExternalKey();
  }
 else {
    verifyNonNullOrEmpty(null,"PaymentTransactionJson transactionType and externalKey need to be set");
    return Response.status(Status.PRECONDITION_FAILED).build();
  }
  final PaymentOptions paymentOptions=createControlPluginApiPaymentOptions(paymentControlPluginNames);
switch (transactionType) {
case AUTHORIZE:
    paymentApi.createAuthorizationWithPaymentControl(account,initialPayment.getPaymentMethodId(),initialPayment.getId(),amount,currency,initialPayment.getExternalKey(),transactionExternalKey,pluginProperties,paymentOptions,callContext);
  break;
case PURCHASE:
paymentApi.createPurchaseWithPaymentControl(account,initialPayment.getPaymentMethodId(),initialPayment.getId(),amount,currency,initialPayment.getExternalKey(),transactionExternalKey,pluginProperties,paymentOptions,callContext);
break;
case CREDIT:
paymentApi.createCreditWithPaymentControl(account,initialPayment.getPaymentMethodId(),initialPayment.getId(),amount,currency,initialPayment.getExternalKey(),transactionExternalKey,pluginProperties,paymentOptions,callContext);
break;
case REFUND:
paymentApi.createRefundWithPaymentControl(account,initialPayment.getId(),amount,currency,transactionExternalKey,pluginProperties,paymentOptions,callContext);
break;
default :
return Response.status(Status.PRECONDITION_FAILED).entity("TransactionType " + transactionType + " cannot be completed").build();
}
return uriBuilder.buildResponse(uriInfo,PaymentResource.class,"getPayment",initialPayment.getId());
}
