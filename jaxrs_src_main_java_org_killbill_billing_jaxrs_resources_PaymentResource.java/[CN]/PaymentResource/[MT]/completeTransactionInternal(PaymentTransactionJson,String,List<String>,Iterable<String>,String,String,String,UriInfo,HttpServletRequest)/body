{
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final Payment initialPayment=getPaymentByIdOrKey(paymentIdStr,json == null ? null : json.getPaymentExternalKey(),pluginProperties,callContext);
  final Account account=accountUserApi.getAccountById(initialPayment.getAccountId(),callContext);
  final BigDecimal amount=json == null ? null : json.getAmount();
  final Currency currency=json == null || json.getCurrency() == null ? null : Currency.valueOf(json.getCurrency());
  final PaymentTransaction pendingTransaction=lookupPendingTransaction(initialPayment,json != null ? json.getTransactionId() : null,json != null ? json.getTransactionExternalKey() : null,json != null ? json.getTransactionType() : null);
  final PaymentOptions paymentOptions=createControlPluginApiPaymentOptions(paymentControlPluginNames);
switch (pendingTransaction.getTransactionType()) {
case AUTHORIZE:
    paymentApi.createAuthorizationWithPaymentControl(account,initialPayment.getPaymentMethodId(),initialPayment.getId(),amount,currency,initialPayment.getExternalKey(),pendingTransaction.getExternalKey(),pluginProperties,paymentOptions,callContext);
  break;
case CAPTURE:
paymentApi.createCaptureWithPaymentControl(account,initialPayment.getId(),amount,currency,pendingTransaction.getExternalKey(),pluginProperties,paymentOptions,callContext);
break;
case PURCHASE:
paymentApi.createPurchaseWithPaymentControl(account,initialPayment.getPaymentMethodId(),initialPayment.getId(),amount,currency,initialPayment.getExternalKey(),pendingTransaction.getExternalKey(),pluginProperties,paymentOptions,callContext);
break;
case CREDIT:
paymentApi.createCreditWithPaymentControl(account,initialPayment.getPaymentMethodId(),initialPayment.getId(),amount,currency,initialPayment.getExternalKey(),pendingTransaction.getExternalKey(),pluginProperties,paymentOptions,callContext);
break;
case REFUND:
paymentApi.createRefundWithPaymentControl(account,initialPayment.getId(),amount,currency,pendingTransaction.getExternalKey(),pluginProperties,paymentOptions,callContext);
break;
default :
return Response.status(Status.PRECONDITION_FAILED).entity("TransactionType " + pendingTransaction.getTransactionType() + " cannot be completed").build();
}
return uriBuilder.buildResponse(uriInfo,PaymentResource.class,"getPayment",initialPayment.getId());
}
