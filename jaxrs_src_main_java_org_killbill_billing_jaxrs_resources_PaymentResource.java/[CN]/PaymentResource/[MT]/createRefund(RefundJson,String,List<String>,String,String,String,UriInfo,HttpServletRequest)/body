{
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final UUID paymentUuid=UUID.fromString(paymentId);
  final Payment payment=paymentApi.getPayment(paymentUuid,false,pluginProperties,callContext);
  final Account account=accountUserApi.getAccountById(payment.getAccountId(),callContext);
  final Refund result;
  if (json.isAdjusted()) {
    if (json.getAdjustments() != null && json.getAdjustments().size() > 0) {
      final Map<UUID,BigDecimal> adjustments=new HashMap<UUID,BigDecimal>();
      for (      final InvoiceItemJson item : json.getAdjustments()) {
        adjustments.put(UUID.fromString(item.getInvoiceItemId()),item.getAmount());
      }
      result=paymentApi.createRefundWithItemsAdjustments(account,paymentUuid,adjustments,pluginProperties,callContext);
    }
 else {
      result=paymentApi.createRefundWithAdjustment(account,paymentUuid,json.getAmount(),pluginProperties,callContext);
    }
  }
 else {
    result=paymentApi.createRefund(account,paymentUuid,json.getAmount(),pluginProperties,callContext);
  }
  return uriBuilder.buildResponse(RefundResource.class,"getRefund",result.getId(),uriInfo.getBaseUri().toString());
}
