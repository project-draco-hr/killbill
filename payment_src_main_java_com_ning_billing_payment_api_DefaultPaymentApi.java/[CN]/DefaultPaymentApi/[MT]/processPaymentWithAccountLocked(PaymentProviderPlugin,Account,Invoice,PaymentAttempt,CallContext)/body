{
  PaymentInfoEvent paymentInfo=null;
  BusEvent event=null;
  try {
    PaymentInfoPlugin paymentPluginInfo=plugin.processInvoice(account,invoice);
    final String paymentMethodId=paymentPluginInfo.getPaymentMethodId();
    log.debug("Fetching payment method info for payment method id " + ((paymentMethodId == null) ? "null" : paymentMethodId));
    PaymentMethodInfo paymentMethodInfo=plugin.getPaymentMethodInfo(paymentMethodId);
    if (paymentMethodInfo instanceof CreditCardPaymentMethodInfo) {
      CreditCardPaymentMethodInfo ccPaymentMethod=(CreditCardPaymentMethodInfo)paymentMethodInfo;
      paymentInfo=new DefaultPaymentInfoEvent(paymentPluginInfo,ccPaymentMethod,account.getId(),invoice.getId());
    }
 else     if (paymentMethodInfo instanceof PaypalPaymentMethodInfo) {
      PaypalPaymentMethodInfo paypalPaymentMethodInfo=(PaypalPaymentMethodInfo)paymentMethodInfo;
      paymentInfo=new DefaultPaymentInfoEvent(paymentPluginInfo,paypalPaymentMethodInfo,account.getId(),invoice.getId());
    }
 else {
      paymentInfo=new DefaultPaymentInfoEvent(paymentPluginInfo,account.getId(),invoice.getId());
    }
    paymentDao.insertPaymentInfoWithPaymentAttemptUpdate(paymentInfo,paymentAttempt.getId(),context);
    invoicePaymentApi.notifyOfPaymentAttempt(invoice.getId(),paymentInfo == null || paymentInfo.getStatus().equalsIgnoreCase("Error") ? null : paymentInfo.getAmount(),paymentInfo == null || paymentInfo.getStatus().equalsIgnoreCase("Error") ? null : invoice.getCurrency(),paymentAttempt.getId(),paymentAttempt.getPaymentAttemptDate(),context);
    event=paymentInfo;
    return paymentInfo;
  }
 catch (  PaymentPluginApiException e) {
    log.info("Could not process a payment for " + paymentAttempt + ", error was "+ e.getMessage());
    scheduleRetry(paymentAttempt);
    event=new DefaultPaymentErrorEvent(null,e.getMessage(),account.getId(),invoice.getId(),context.getUserToken());
    throw e;
  }
 finally {
    postPaymentEvent(event,account.getId());
  }
}
