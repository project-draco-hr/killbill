{
  PaymentAttempt paymentAttempt=paymentDao.getPaymentAttemptById(paymentAttemptId);
  if (paymentAttempt != null) {
    try {
      Invoice invoice=invoicePaymentApi.getInvoice(paymentAttempt.getInvoiceId());
      Account account=accountUserApi.getAccountById(paymentAttempt.getAccountId());
      if (invoice != null && account != null) {
        if (invoice.getBalance().compareTo(BigDecimal.ZERO) <= 0) {
          log.info("Received invoice for payment with outstanding amount of 0 {} ",invoice);
          throw new PaymentApiException(ErrorCode.PAYMENT_CREATE_PAYMENT_FOR_ATTEMPT_WITH_NON_POSITIVE_INV,account.getId());
        }
 else {
          PaymentAttempt newPaymentAttempt=new DefaultPaymentAttempt.Builder(paymentAttempt).setRetryCount(paymentAttempt.getRetryCount() + 1).setPaymentAttemptId(UUID.randomUUID()).build();
          paymentDao.createPaymentAttempt(newPaymentAttempt,context);
          Either<PaymentErrorEvent,PaymentInfoEvent> result=processPayment(getPaymentProviderPlugin(account),account,invoice,newPaymentAttempt,context);
          if (result.isLeft()) {
            throw new PaymentApiException(ErrorCode.PAYMENT_CREATE_PAYMENT_FOR_ATTEMPT,account.getId(),paymentAttemptId,result.getLeft().getMessage());
          }
          return result.getRight();
        }
      }
    }
 catch (    AccountApiException e) {
      throw new PaymentApiException(e);
    }
  }
  throw new PaymentApiException(ErrorCode.PAYMENT_CREATE_PAYMENT_FOR_ATTEMPT_BAD,paymentAttemptId);
}
