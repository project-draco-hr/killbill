{
  PaymentAttempt paymentAttempt=paymentDao.getPaymentAttemptById(paymentAttemptId);
  if (paymentAttempt != null) {
    try {
      Invoice invoice=invoicePaymentApi.getInvoice(paymentAttempt.getInvoiceId());
      Account account=accountUserApi.getAccountById(paymentAttempt.getAccountId());
      if (invoice != null && account != null) {
        if (invoice.getBalance().compareTo(BigDecimal.ZERO) <= 0) {
          log.info("Received invoice for payment with outstanding amount of 0 {} ",invoice);
          return Either.left((PaymentErrorEvent)new DefaultPaymentErrorEvent("invoice_balance_0","Invoice balance was 0 or less",paymentAttempt.getAccountId(),paymentAttempt.getInvoiceId(),context.getUserToken()));
        }
 else {
          PaymentAttempt newPaymentAttempt=new PaymentAttempt.Builder(paymentAttempt).setRetryCount(paymentAttempt.getRetryCount() + 1).setPaymentAttemptId(UUID.randomUUID()).build();
          paymentDao.createPaymentAttempt(newPaymentAttempt,context);
          return processPayment(getPaymentProviderPlugin(account),account,invoice,newPaymentAttempt,context);
        }
      }
    }
 catch (    AccountApiException e) {
      log.error("Error creating payment attempt.",e);
      return new Either.Left<PaymentErrorEvent,PaymentInfoEvent>((PaymentErrorEvent)new DefaultPaymentErrorEvent("createPaymentError",e.getMessage(),null,null,context.getUserToken()));
    }
  }
  return Either.left((PaymentErrorEvent)new DefaultPaymentErrorEvent("retry_payment_error","Could not load payment attempt, invoice or account for id " + paymentAttemptId,paymentAttempt.getAccountId(),paymentAttempt.getInvoiceId(),context.getUserToken()));
}
