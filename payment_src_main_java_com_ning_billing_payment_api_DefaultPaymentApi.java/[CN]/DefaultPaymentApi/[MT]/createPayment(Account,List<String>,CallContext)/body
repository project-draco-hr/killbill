{
  final PaymentProviderPlugin plugin=getPaymentProviderPlugin(account);
  List<Either<PaymentErrorEvent,PaymentInfoEvent>> processedPaymentsOrErrors=new ArrayList<Either<PaymentErrorEvent,PaymentInfoEvent>>(invoiceIds.size());
  for (  String invoiceId : invoiceIds) {
    Invoice invoice=invoicePaymentApi.getInvoice(UUID.fromString(invoiceId));
    if (invoice.getBalance().compareTo(BigDecimal.ZERO) <= 0) {
      log.debug("Received invoice for payment with balance of 0 {} ",invoice);
    }
 else     if (invoice.isMigrationInvoice()) {
      log.info("Received invoice for payment that is a migration invoice - don't know how to handle those yet: {}",invoice);
      Either<PaymentErrorEvent,PaymentInfoEvent> result=Either.left((PaymentErrorEvent)new DefaultPaymentErrorEvent("migration invoice","Invoice balance was a migration invoice",account.getId(),UUID.fromString(invoiceId),context.getUserToken()));
      processedPaymentsOrErrors.add(result);
    }
 else {
      PaymentAttempt paymentAttempt=paymentDao.createPaymentAttempt(invoice,context);
      processedPaymentsOrErrors.add(processPayment(plugin,account,invoice,paymentAttempt,context));
    }
  }
  List<Either<PaymentErrorEvent,PaymentInfoEvent>> result=processedPaymentsOrErrors;
  List<PaymentInfoEvent> info=new LinkedList<PaymentInfoEvent>();
  for (  Either<PaymentErrorEvent,PaymentInfoEvent> cur : result) {
    if (cur.isLeft()) {
      throw new PaymentApiException(ErrorCode.PAYMENT_CREATE_PAYMENT,account.getId(),cur.getLeft().getMessage());
    }
    info.add(cur.getRight());
  }
  return info;
}
