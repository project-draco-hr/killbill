{
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final SubscriptionCallCompletionCallback<Response> callback=new SubscriptionCallCompletionCallback<Response>(){
    private boolean isImmediateOp=true;
    @Override public Response doOperation(    final CallContext ctx) throws SubscriptionUserApiException, InterruptedException, TimeoutException {
      final UUID uuid=UUID.fromString(subscriptionId);
      final Subscription current=entitlementApi.getSubscriptionFromId(uuid,callContext);
      final DateTime inputDate=(requestedDate != null) ? DATE_TIME_FORMATTER.parseDateTime(requestedDate) : null;
      if (policyString == null) {
        isImmediateOp=current.cancel(inputDate,ctx);
      }
 else {
        final ActionPolicy policy=ActionPolicy.valueOf(policyString.toUpperCase());
        isImmediateOp=current.cancelWithPolicy(inputDate,policy,ctx);
      }
      return Response.status(Status.OK).build();
    }
    @Override public boolean isImmOperation(){
      return isImmediateOp;
    }
    @Override public Response doResponseOk(    final Response operationResponse){
      return operationResponse;
    }
  }
;
  final SubscriptionCallCompletion<Response> callCompletionCreation=new SubscriptionCallCompletion<Response>();
  return callCompletionCreation.withSynchronization(callback,timeoutSec,callCompletion,callContext);
}
