{
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final SubscriptionCallCompletionCallback<SubscriptionBase> callback=new SubscriptionCallCompletionCallback<SubscriptionBase>(){
    @Override public SubscriptionBase doOperation(    final CallContext ctx) throws SubscriptionUserApiException, InterruptedException, TimeoutException {
      final DateTime inputDate=(requestedDate != null) ? DATE_TIME_FORMATTER.parseDateTime(requestedDate) : null;
      final UUID uuid=UUID.fromString(subscription.getBundleId());
      final PlanPhaseSpecifier spec=new PlanPhaseSpecifier(subscription.getProductName(),ProductCategory.valueOf(subscription.getProductCategory()),BillingPeriod.valueOf(subscription.getBillingPeriod()),subscription.getPriceList(),null);
      return null;
    }
    @Override public boolean isImmOperation(){
      return true;
    }
    @Override public Response doResponseOk(    final SubscriptionBase createdSubscription){
      return uriBuilder.buildResponse(SubscriptionResource.class,"getSubscription",createdSubscription.getId());
    }
  }
;
  final SubscriptionCallCompletion<SubscriptionBase> callCompletionCreation=new SubscriptionCallCompletion<SubscriptionBase>();
  return callCompletionCreation.withSynchronization(callback,timeoutSec,callCompletion,callContext);
}
