{
  final FixedPriceInvoiceItem fixedItem=new FixedPriceInvoiceItem(UUID.randomUUID(),UUID.randomUUID(),null,null,UUID.randomUUID().toString(),UUID.randomUUID().toString(),new LocalDate(),BigDecimal.TEN,Currency.USD);
  final RepairAdjInvoiceItem repairAdjInvoiceItem=new RepairAdjInvoiceItem(fixedItem.getInvoiceId(),fixedItem.getAccountId(),fixedItem.getStartDate(),fixedItem.getEndDate(),fixedItem.getAmount().negate(),fixedItem.getCurrency(),fixedItem.getId());
  final CreditBalanceAdjInvoiceItem creditBalanceAdjInvoiceItem=new CreditBalanceAdjInvoiceItem(fixedItem.getInvoiceId(),fixedItem.getAccountId(),fixedItem.getStartDate(),fixedItem.getAmount(),fixedItem.getCurrency());
  final CreditAdjInvoiceItem creditAdjInvoiceItem=new CreditAdjInvoiceItem(fixedItem.getInvoiceId(),fixedItem.getAccountId(),fixedItem.getStartDate(),BigDecimal.ONE.negate(),fixedItem.getCurrency());
  final CreditBalanceAdjInvoiceItem creditBalanceAdjInvoiceItem2=new CreditBalanceAdjInvoiceItem(fixedItem.getInvoiceId(),fixedItem.getAccountId(),fixedItem.getStartDate(),creditAdjInvoiceItem.getAmount().negate(),fixedItem.getCurrency());
  final RefundAdjInvoiceItem refundAdjInvoiceItem=new RefundAdjInvoiceItem(fixedItem.getInvoiceId(),fixedItem.getAccountId(),fixedItem.getStartDate(),BigDecimal.ONE.negate(),fixedItem.getCurrency());
  final DefaultInvoice invoice=new DefaultInvoice(fixedItem.getInvoiceId(),fixedItem.getAccountId(),null,new LocalDate(),new LocalDate(),Currency.USD,false);
  invoice.addInvoiceItem(fixedItem);
  invoice.addInvoiceItem(repairAdjInvoiceItem);
  invoice.addInvoiceItem(creditBalanceAdjInvoiceItem);
  invoice.addInvoiceItem(creditAdjInvoiceItem);
  invoice.addInvoiceItem(creditBalanceAdjInvoiceItem2);
  invoice.addInvoiceItem(refundAdjInvoiceItem);
  invoice.addPayment(new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,UUID.randomUUID(),invoice.getId(),clock.getUTCNow(),BigDecimal.TEN,Currency.USD,Currency.USD));
  invoice.addPayment(new DefaultInvoicePayment(InvoicePaymentType.REFUND,UUID.randomUUID(),invoice.getId(),clock.getUTCNow(),BigDecimal.ONE.negate(),Currency.USD,Currency.USD));
  Assert.assertEquals(invoice.getBalance().doubleValue(),0.00);
  Assert.assertEquals(invoice.getCreditedAmount().doubleValue(),11.00);
  Assert.assertEquals(invoice.getRefundedAmount().doubleValue(),-1.00);
  final InvoiceFormatter formatter=new DefaultInvoiceFormatter(config,invoice,Locale.US,null);
  final List<InvoiceItem> invoiceItems=formatter.getInvoiceItems();
  Assert.assertEquals(invoiceItems.size(),4);
  Assert.assertEquals(invoiceItems.get(0).getInvoiceItemType(),InvoiceItemType.FIXED);
  Assert.assertEquals(invoiceItems.get(0).getAmount().doubleValue(),10.00);
  Assert.assertEquals(invoiceItems.get(1).getInvoiceItemType(),InvoiceItemType.REPAIR_ADJ);
  Assert.assertEquals(invoiceItems.get(1).getAmount().doubleValue(),-10.00);
  Assert.assertEquals(invoiceItems.get(2).getInvoiceItemType(),InvoiceItemType.CBA_ADJ);
  Assert.assertEquals(invoiceItems.get(2).getAmount().doubleValue(),11.00);
  Assert.assertEquals(invoiceItems.get(3).getInvoiceItemType(),InvoiceItemType.CREDIT_ADJ);
  Assert.assertEquals(invoiceItems.get(3).getAmount().doubleValue(),-2.00);
}
