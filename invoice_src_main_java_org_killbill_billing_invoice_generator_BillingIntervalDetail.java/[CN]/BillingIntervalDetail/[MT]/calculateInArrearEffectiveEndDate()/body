{
  if (targetDate.isBefore(firstBillingCycleDate)) {
    effectiveEndDate=null;
    return;
  }
  if (endDate != null && endDate.isBefore(firstBillingCycleDate)) {
    effectiveEndDate=endDate;
    return;
  }
  final int numberOfMonthsInPeriod=billingPeriod.getNumberOfMonths();
  int numberOfPeriods=0;
  LocalDate proposedDate=firstBillingCycleDate;
  while (proposedDate.isBefore(targetDate)) {
    proposedDate=firstBillingCycleDate.plusMonths(numberOfPeriods * numberOfMonthsInPeriod);
    numberOfPeriods+=1;
  }
  proposedDate=alignProposedBillCycleDate(proposedDate,billingCycleDay);
  if (endDate != null && endDate.isBefore(proposedDate)) {
    effectiveEndDate=endDate;
  }
 else {
    effectiveEndDate=proposedDate;
  }
}
