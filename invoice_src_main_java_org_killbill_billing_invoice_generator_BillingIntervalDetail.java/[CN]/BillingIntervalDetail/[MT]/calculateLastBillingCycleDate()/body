{
  if (effectiveEndDate == null || effectiveEndDate.compareTo(firstBillingCycleDate) < 0) {
    lastBillingCycleDate=null;
    return;
  }
  LocalDate proposedDate=firstBillingCycleDate;
  int numberOfPeriods=0;
  while (!proposedDate.isAfter(effectiveEndDate)) {
    proposedDate=firstBillingCycleDate.plusMonths(numberOfPeriods * billingPeriod.getNumberOfMonths());
    numberOfPeriods+=1;
  }
  proposedDate=proposedDate.plusMonths(-billingPeriod.getNumberOfMonths());
  proposedDate=alignProposedBillCycleDate(proposedDate,billingCycleDay);
  if (proposedDate.isBefore(firstBillingCycleDate)) {
    lastBillingCycleDate=firstBillingCycleDate;
  }
 else {
    lastBillingCycleDate=proposedDate;
  }
}
