{
  final DateTime timestamp=samples.getTimestamp();
  if (chunkEndTime != null && chunkEndTime.isBefore(timestamp)) {
    extractAndQueueTimelineChunks();
    startTime=timestamp;
    chunkEndTime=timestamp.plusMillis(timelineLengthMillis);
  }
  if (startTime == null) {
    startTime=timestamp;
  }
  if (endTime == null) {
    endTime=timestamp;
  }
 else   if (!timestamp.isAfter(endTime)) {
    log.warn("Adding samples for host {}, timestamp {} is not after the end time {}; ignored",new Object[]{sourceId,dateFormatter.print(timestamp),dateFormatter.print(endTime)});
    return;
  }
  sampleSequenceNumber++;
  latestSampleAddTime=new DateTime();
  for (  final Map.Entry<Integer,ScalarSample> entry : samples.getSamples().entrySet()) {
    final Integer metricId=entry.getKey();
    final SampleSequenceNumber counter=metricIdCounters.get(metricId);
    if (counter != null) {
      counter.setSequenceNumber(sampleSequenceNumber);
    }
 else {
      metricIdCounters.put(metricId,new SampleSequenceNumber(sampleSequenceNumber));
    }
    final ScalarSample sample=entry.getValue();
    TimelineChunkAccumulator timeline=timelines.get(metricId);
    if (timeline == null) {
      timeline=new TimelineChunkAccumulator(sourceId,metricId,sampleCoder);
      if (sampleCount > 0) {
        addPlaceholders(timeline,sampleCount);
      }
      timelines.put(metricId,timeline);
    }
    final ScalarSample compressedSample=sampleCoder.compressSample(sample);
    timeline.addSample(compressedSample);
  }
  for (  final Map.Entry<Integer,SampleSequenceNumber> entry : metricIdCounters.entrySet()) {
    final SampleSequenceNumber counter=entry.getValue();
    if (counter.getSequenceNumber() < sampleSequenceNumber) {
      counter.setSequenceNumber(sampleSequenceNumber);
      final int metricId=entry.getKey();
      final TimelineChunkAccumulator timeline=timelines.get(metricId);
      timeline.addSample(nullSample);
    }
  }
  endTime=timestamp;
  sampleCount++;
  times.add(timestamp);
  if (checkEveryAccess) {
    checkSampleCounts(sampleCount);
  }
}
