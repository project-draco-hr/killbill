{
  final BigDecimal accountBalance=invoiceUserApi.getAccountBalance(accountId);
  final BigDecimal externalChargeAmount=BigDecimal.TEN;
  final InvoiceItem externalChargeInvoiceItem=invoiceUserApi.insertExternalCharge(accountId,externalChargeAmount,UUID.randomUUID().toString(),clock.getUTCToday(),accountCurrency,context);
  Assert.assertNotNull(externalChargeInvoiceItem.getInvoiceId());
  Assert.assertNotEquals(externalChargeInvoiceItem.getInvoiceId(),invoiceId);
  Assert.assertEquals(externalChargeInvoiceItem.getInvoiceItemType(),InvoiceItemType.EXTERNAL_CHARGE);
  Assert.assertEquals(externalChargeInvoiceItem.getAccountId(),accountId);
  Assert.assertEquals(externalChargeInvoiceItem.getAmount(),externalChargeAmount);
  Assert.assertEquals(externalChargeInvoiceItem.getCurrency(),accountCurrency);
  Assert.assertNull(externalChargeInvoiceItem.getLinkedItemId());
  final BigDecimal adjustedInvoiceBalance=invoiceUserApi.getInvoice(externalChargeInvoiceItem.getInvoiceId()).getBalance();
  Assert.assertEquals(adjustedInvoiceBalance.compareTo(externalChargeAmount),0);
  final BigDecimal adjustedAccountBalance=invoiceUserApi.getAccountBalance(accountId);
  Assert.assertEquals(adjustedAccountBalance,accountBalance.add(externalChargeAmount));
}
