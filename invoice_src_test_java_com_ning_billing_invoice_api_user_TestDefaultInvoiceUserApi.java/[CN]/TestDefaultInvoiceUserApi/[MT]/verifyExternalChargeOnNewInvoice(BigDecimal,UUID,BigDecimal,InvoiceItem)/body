{
  Assert.assertNotNull(externalChargeInvoiceItem.getInvoiceId());
  Assert.assertNotEquals(externalChargeInvoiceItem.getInvoiceId(),invoiceId);
  Assert.assertEquals(externalChargeInvoiceItem.getBundleId(),bundleId);
  Assert.assertEquals(externalChargeInvoiceItem.getInvoiceItemType(),InvoiceItemType.EXTERNAL_CHARGE);
  Assert.assertEquals(externalChargeInvoiceItem.getAccountId(),accountId);
  Assert.assertEquals(externalChargeInvoiceItem.getAmount(),externalChargeAmount);
  Assert.assertEquals(externalChargeInvoiceItem.getCurrency(),accountCurrency);
  Assert.assertNull(externalChargeInvoiceItem.getLinkedItemId());
  final BigDecimal adjustedInvoiceBalance=invoiceUserApi.getInvoice(externalChargeInvoiceItem.getInvoiceId(),tenantContext).getBalance();
  Assert.assertEquals(adjustedInvoiceBalance.compareTo(externalChargeAmount),0);
  final BigDecimal adjustedAccountBalance=invoiceUserApi.getAccountBalance(accountId,tenantContext);
  Assert.assertEquals(adjustedAccountBalance,initialAccountBalance.add(externalChargeAmount));
}
