{
  final Invoice initialInvoice=invoiceUserApi.getInvoice(invoiceId,callContext);
  final BigDecimal originalAmountCharged=initialInvoice.getOriginalChargedAmount();
  final BigDecimal amountCharged=initialInvoice.getChargedAmount();
  Assert.assertEquals(originalAmountCharged.compareTo(amountCharged),0);
  ((ClockMock)clock).addDays(1);
  CallContext newCallContextLater=new DefaultCallContext(callContext.getTenantId(),callContext.getUserName(),callContext.getCallOrigin(),callContext.getUserType(),callContext.getUserToken(),clock);
  final BigDecimal externalChargeAmount=BigDecimal.TEN;
  final InvoiceItem externalChargeInvoiceItem=invoiceUserApi.insertExternalChargeForInvoice(accountId,invoiceId,externalChargeAmount,UUID.randomUUID().toString(),clock.getUTCToday(),accountCurrency,newCallContextLater);
  final Invoice newInvoice=invoiceUserApi.getInvoice(invoiceId,callContext);
  final BigDecimal newOriginalAmountCharged=newInvoice.getOriginalChargedAmount();
  final BigDecimal newAmountCharged=newInvoice.getChargedAmount();
  final BigDecimal expectedChargedAmount=newInvoice.getOriginalChargedAmount().add(externalChargeInvoiceItem.getAmount());
  Assert.assertEquals(originalAmountCharged.compareTo(newOriginalAmountCharged),0);
  Assert.assertEquals(newAmountCharged.compareTo(expectedChargedAmount),0);
}
