{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final BlockingStateModelDao newBlockingStateModelDao=new BlockingStateModelDao(state,context);
      final BlockingStateSqlDao sqlDao=entitySqlDaoWrapperFactory.become(BlockingStateSqlDao.class);
      final List<BlockingStateModelDao> allForBlockedItAndService=sqlDao.getBlockingHistoryForService(state.getBlockedId(),state.getService(),clock.getUTCNow().toDate(),context);
      allForBlockedItAndService.add(newBlockingStateModelDao);
      final List<BlockingStateModelDao> allForBlockedItAndServiceOrdered=Ordering.<BlockingStateModelDao>from(new Comparator<BlockingStateModelDao>(){
        @Override public int compare(        final BlockingStateModelDao o1,        final BlockingStateModelDao o2){
          final int comparison=o1.getEffectiveDate().compareTo(o2.getEffectiveDate());
          if (comparison == 0) {
            return o1.getCreatedDate().compareTo(o2.getCreatedDate());
          }
 else {
            return comparison;
          }
        }
      }
).immutableSortedCopy(allForBlockedItAndService);
      final Collection<UUID> blockingStatesToRemove=new HashSet<UUID>();
      BlockingStateModelDao prevBlockingStateModelDao=null;
      for (      final BlockingStateModelDao blockingStateModelDao : allForBlockedItAndServiceOrdered) {
        if (prevBlockingStateModelDao != null && prevBlockingStateModelDao.getState().equals(blockingStateModelDao.getState())) {
          blockingStatesToRemove.add(blockingStateModelDao.getId());
        }
        prevBlockingStateModelDao=blockingStateModelDao;
      }
      for (      final UUID blockedId : blockingStatesToRemove) {
        if (!newBlockingStateModelDao.getId().equals(blockedId)) {
          sqlDao.unactiveEvent(blockedId.toString(),context);
        }
      }
      if (!blockingStatesToRemove.contains(newBlockingStateModelDao.getId())) {
        sqlDao.create(new BlockingStateModelDao(state,context),context);
      }
      return null;
    }
  }
);
}
