{
  final DateTime init=clock.getUTCNow();
  final DateTime requestedDate=init.minusYears(1);
  String productName="Shotgun";
  BillingPeriod term=BillingPeriod.MONTHLY;
  String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  testListener.pushExpectedEvent(NextEvent.PHASE);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  DefaultSubscriptionBase subscription=(DefaultSubscriptionBase)subscriptionInternalApi.createSubscription(bundle.getId(),testUtil.getProductSpecifier(productName,planSetName,term,null),null,requestedDate,internalCallContext);
  assertNotNull(subscription);
  assertEquals(subscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  assertEquals(subscription.getBundleId(),bundle.getId());
  assertEquals(subscription.getStartDate(),requestedDate);
  assertEquals(productName,subscription.getCurrentPlan().getProduct().getName());
  assertListenerStatus();
  productName="Pistol";
  term=BillingPeriod.MONTHLY;
  planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  try {
    if (fromUserAPi) {
      subscription=(DefaultSubscriptionBase)subscriptionInternalApi.createSubscription(bundle.getId(),testUtil.getProductSpecifier(productName,planSetName,term,null),null,requestedDate,internalCallContext);
    }
 else {
      subscription.recreate(testUtil.getProductSpecifier(productName,planSetName,term,null),null,requestedDate,callContext);
    }
    Assert.fail("Expected Create API to fail since BP already exists");
  }
 catch (  SubscriptionBaseApiException e) {
    assertTrue(true);
  }
  testListener.pushExpectedEvent(NextEvent.CANCEL);
  subscription.cancelWithDate(null,callContext);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  testListener.pushExpectedEvent(NextEvent.RE_CREATE);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ignored) {
  }
  if (fromUserAPi) {
    subscription=(DefaultSubscriptionBase)subscriptionInternalApi.createSubscription(bundle.getId(),testUtil.getProductSpecifier(productName,planSetName,term,null),null,requestedDate,internalCallContext);
  }
 else {
    subscription.recreate(testUtil.getProductSpecifier(productName,planSetName,term,null),null,clock.getUTCNow(),callContext);
  }
  assertEquals(subscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  assertEquals(subscription.getBundleId(),bundle.getId());
  assertEquals(subscription.getStartDate(),requestedDate);
  assertEquals(productName,subscription.getCurrentPlan().getProduct().getName());
  return subscription;
}
