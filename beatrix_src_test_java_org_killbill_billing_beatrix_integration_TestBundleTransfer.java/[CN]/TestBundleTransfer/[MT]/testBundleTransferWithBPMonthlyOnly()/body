{
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(0));
  final DateTime initialDate=new DateTime(2012,4,1,0,15,42,0,testTimeZone);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  assertListenerStatus();
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId(),callContext).size(),1);
  assertEquals(bpEntitlement.getSubscriptionBase().getCurrentPlan().getRecurringBillingPeriod(),BillingPeriod.MONTHLY);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(32);
  assertListenerStatus();
  final Account newAccount=createAccountWithNonOsgiPaymentMethod(getAccountData(0));
  busHandler.pushExpectedEvents(NextEvent.TRANSFER,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  transferApi.transferBundle(account.getId(),newAccount.getId(),"externalKey",clock.getUTCNow(),false,false,callContext);
  assertListenerStatus();
  final Integer oldBCD=accountUserApi.getAccountById(account.getId(),callContext).getBillCycleDayLocal();
  final Integer newBCD=accountUserApi.getAccountById(newAccount.getId(),callContext).getBillCycleDayLocal();
  assertEquals(oldBCD,(Integer)1);
  assertEquals(newBCD,(Integer)3);
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(newAccount.getId(),callContext);
  assertEquals(invoices.size(),1);
  final List<InvoiceItem> invoiceItems=invoices.get(0).getInvoiceItems();
  assertEquals(invoiceItems.size(),1);
  final InvoiceItem theItem=invoiceItems.get(0);
  assertTrue(theItem.getStartDate().compareTo(new LocalDate(2012,5,3)) == 0);
  assertTrue(theItem.getEndDate().compareTo(new LocalDate(2012,6,3)) == 0);
  assertTrue(theItem.getAmount().compareTo(new BigDecimal("249.95")) == 0);
  checkNoMoreInvoiceToGenerate(account);
}
