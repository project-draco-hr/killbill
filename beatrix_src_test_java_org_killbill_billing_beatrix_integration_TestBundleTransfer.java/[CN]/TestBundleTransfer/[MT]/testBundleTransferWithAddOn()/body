{
  final LocalDate startDate=new LocalDate(2012,4,1);
  clock.setDay(startDate);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  final Account newAccount=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String bpProductName="Shotgun";
  final String aoProductName="Telescopic-Scope";
  final String bundleExternalKey=UUID.randomUUID().toString();
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),bundleExternalKey,bpProductName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  subscriptionChecker.checkSubscriptionCreated(bpEntitlement.getId(),internalCallContext);
  final Invoice firstInvoice=invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  final DefaultEntitlement aoEntitlement=addAOEntitlementAndCheckForCompletion(bpEntitlement.getBundleId(),aoProductName,ProductCategory.ADD_ON,term,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  final Invoice secondInvoice=invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),new LocalDate(2012,5,1),InvoiceItemType.RECURRING,new BigDecimal("399.95")));
  paymentChecker.checkPayment(account.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,4,1),new BigDecimal("399.95"),TransactionStatus.SUCCESS,secondInvoice.getId(),Currency.USD));
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(30);
  assertListenerStatus();
  final Invoice thirdInvoice=invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("999.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  paymentChecker.checkPayment(account.getId(),2,callContext,new ExpectedPaymentCheck(new LocalDate(2012,5,1),new BigDecimal("1249.90"),TransactionStatus.SUCCESS,thirdInvoice.getId(),Currency.USD));
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.setTime(new DateTime(2012,6,1,1,0,DateTimeZone.UTC));
  assertListenerStatus();
  final Invoice fourthInvoice=invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("999.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  paymentChecker.checkPayment(account.getId(),3,callContext,new ExpectedPaymentCheck(new LocalDate(2012,6,1),new BigDecimal("1249.90"),TransactionStatus.SUCCESS,fourthInvoice.getId(),Currency.USD));
  final DateTime now=clock.getUTCNow();
  final LocalDate transferDay=now.toLocalDate();
  busHandler.pushExpectedEvents(NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.TRANSFER,NextEvent.TRANSFER,NextEvent.INVOICE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  final UUID newBundleId=entitlementApi.transferEntitlements(account.getId(),newAccount.getId(),bundleExternalKey,transferDay,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("999.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkInvoice(account.getId(),5,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-999.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,6,1),InvoiceItemType.CBA_ADJ,new BigDecimal("1249.90")));
  final Invoice firstInvoiceNewAccount=invoiceChecker.checkInvoice(newAccount.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("999.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  paymentChecker.checkPayment(newAccount.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,6,1),new BigDecimal("1249.90"),TransactionStatus.SUCCESS,firstInvoiceNewAccount.getId(),Currency.USD));
  final List<Entitlement> oldEntitlements=entitlementApi.getAllEntitlementsForBundle(bpEntitlement.getBundleId(),callContext);
  Assert.assertEquals(oldEntitlements.size(),2);
  for (  final Entitlement entitlement : oldEntitlements) {
    final Subscription subscription=subscriptionApi.getSubscriptionForEntitlementId(entitlement.getId(),callContext);
    Assert.assertEquals(subscription.getEffectiveStartDate(),startDate);
    Assert.assertEquals(subscription.getEffectiveEndDate(),transferDay);
    Assert.assertEquals(subscription.getBillingStartDate(),startDate);
    Assert.assertEquals(subscription.getBillingEndDate(),transferDay);
  }
  final List<Entitlement> newEntitlements=entitlementApi.getAllEntitlementsForBundle(newBundleId,callContext);
  Assert.assertEquals(newEntitlements.size(),2);
  for (  final Entitlement entitlement : newEntitlements) {
    final Subscription subscription=subscriptionApi.getSubscriptionForEntitlementId(entitlement.getId(),callContext);
    Assert.assertEquals(subscription.getEffectiveStartDate(),transferDay);
    Assert.assertNull(subscription.getEffectiveEndDate());
    Assert.assertEquals(subscription.getBillingStartDate(),transferDay);
    Assert.assertNull(subscription.getBillingEndDate());
  }
  checkNoMoreInvoiceToGenerate(account);
}
