{
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(3));
  final DateTime initialDate=new DateTime(2012,4,1,0,15,42,0,testTimeZone);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.ANNUAL;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId(),callContext).size(),1);
  assertEquals(bpEntitlement.getSubscriptionBase().getCurrentPlan().getRecurringBillingPeriod(),BillingPeriod.ANNUAL);
  busHandler.pushExpectedEvent(NextEvent.PHASE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  clock.addDays(40);
  assertListenerStatus();
  final Account newAccount=createAccountWithNonOsgiPaymentMethod(getAccountData(17));
  busHandler.pushExpectedEvent(NextEvent.TRANSFER);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  transferApi.transferBundle(account.getId(),newAccount.getId(),"externalKey",clock.getUTCNow(),false,false,callContext);
  assertListenerStatus();
  List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(newAccount.getId(),callContext);
  assertEquals(invoices.size(),1);
  final List<InvoiceItem> invoiceItems=invoices.get(0).getInvoiceItems();
  assertEquals(invoiceItems.size(),1);
  InvoiceItem theItem=invoiceItems.get(0);
  assertTrue(theItem.getStartDate().compareTo(new LocalDate(2012,5,11)) == 0);
  assertTrue(theItem.getEndDate().compareTo(new LocalDate(2013,5,11)) == 0);
  assertTrue(theItem.getAmount().compareTo(new BigDecimal("2399.9500")) == 0);
}
