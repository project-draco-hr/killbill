{
  final UUID accountId=UUID.randomUUID();
  final UUID subscriptionId=new UUID(0L,1L);
  final DateTime now=new DateTime();
  final DateTime readyTime=now.plusMillis(2000);
  final NextBillingDatePoster poster=new DefaultNextBillingDatePoster(notificationQueueService,internalCallContextFactory);
  eventBus.start();
  notifier.initialize();
  notifier.start();
  dao.inTransaction(new Transaction<Void,DummySqlTest>(){
    @Override public Void inTransaction(    final DummySqlTest transactional,    final TransactionStatus status) throws Exception {
      poster.insertNextBillingNotification(transactional,accountId,subscriptionId,readyTime);
      return null;
    }
  }
);
  ((ClockMock)clock).setDeltaFromReality(3000);
  await().atMost(1,MINUTES).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return listener.getEventCount() == 1;
    }
  }
);
  Assert.assertEquals(listener.getEventCount(),1);
  Assert.assertEquals(listener.getLatestSubscriptionId(),subscriptionId);
}
