{
  final Injector g=Guice.createInjector(Stage.PRODUCTION,new AbstractModule(){
    @Override protected void configure(){
      install(new MockClockModule());
      install(new BusModule(BusType.MEMORY));
      install(new InvoiceModuleWithMocks());
      install(new MockJunctionModule());
      install(new MockCatalogModule());
      install(new NotificationQueueModule());
      install(new TemplateModule());
      final MysqlTestingHelper helper=new MysqlTestingHelper();
      bind(MysqlTestingHelper.class).toInstance(helper);
      if (helper.isUsingLocalInstance()) {
        bind(IDBI.class).toProvider(DBIProvider.class).asEagerSingleton();
        final DbiConfig config=new ConfigurationObjectFactory(System.getProperties()).build(DbiConfig.class);
        bind(DbiConfig.class).toInstance(config);
      }
 else {
        final IDBI dbi=helper.getDBI();
        bind(IDBI.class).toInstance(dbi);
      }
    }
  }
);
  clock=g.getInstance(Clock.class);
  final IDBI dbi=g.getInstance(IDBI.class);
  dao=dbi.onDemand(DummySqlTest.class);
  eventBus=g.getInstance(Bus.class);
  helper=g.getInstance(MysqlTestingHelper.class);
  notificationQueueService=g.getInstance(NotificationQueueService.class);
  final InvoiceDispatcher dispatcher=g.getInstance(InvoiceDispatcher.class);
  final Subscription subscription=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class);
  final EntitlementUserApi entitlementUserApi=BrainDeadProxyFactory.createBrainDeadProxyFor(EntitlementUserApi.class);
  ((ZombieControl)entitlementUserApi).addResult("getSubscriptionFromId",subscription);
  final CallContextFactory factory=new DefaultCallContextFactory(clock);
  listener=new InvoiceListenerMock(factory,dispatcher);
  notifier=new DefaultNextBillingDateNotifier(notificationQueueService,g.getInstance(InvoiceConfig.class),entitlementUserApi,listener);
  startMysql();
}
