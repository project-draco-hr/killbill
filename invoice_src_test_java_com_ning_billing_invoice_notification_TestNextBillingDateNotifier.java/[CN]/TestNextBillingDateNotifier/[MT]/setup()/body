{
  final Injector g=Guice.createInjector(Stage.PRODUCTION,new AbstractModule(){
    @Override protected void configure(){
      final ClockMock clock=new ClockMock();
      bind(Clock.class).toInstance(clock);
      bind(ClockMock.class).toInstance(clock);
      install(new BusModule(BusType.MEMORY));
      install(new InvoiceModuleWithMocks());
      install(new MockJunctionModule());
      install(new MockCatalogModule());
      install(new NotificationQueueModule());
      install(new TemplateModule());
      install(new TagStoreModule());
      final DBTestingHelper helper=KillbillTestSuiteWithEmbeddedDB.getDBTestingHelper();
      if (helper.isUsingLocalInstance()) {
        bind(IDBI.class).toProvider(DBIProvider.class).asEagerSingleton();
        final DbiConfig config=new ConfigurationObjectFactory(System.getProperties()).build(DbiConfig.class);
        bind(DbiConfig.class).toInstance(config);
      }
 else {
        final IDBI dbi=helper.getDBI();
        bind(IDBI.class).toInstance(dbi);
      }
      final InternalCallContextFactory internalCallContextFactory=new InternalCallContextFactory(helper.getDBI(),clock);
      bind(InternalCallContextFactory.class).toInstance(internalCallContextFactory);
      bind(InvoiceFormatterFactory.class).to(DefaultInvoiceFormatterFactory.class).asEagerSingleton();
      bind(AccountInternalApi.class).toInstance(Mockito.mock(AccountInternalApi.class));
      bind(EntitlementInternalApi.class).toInstance(Mockito.mock(EntitlementInternalApi.class));
    }
  }
);
  clock=g.getInstance(Clock.class);
  final IDBI dbi=g.getInstance(IDBI.class);
  entitySqlDaoTransactionalJdbiWrapper=new EntitySqlDaoTransactionalJdbiWrapper(dbi);
  eventBus=g.getInstance(InternalBus.class);
  notificationQueueService=g.getInstance(NotificationQueueService.class);
  final InvoiceDispatcher dispatcher=g.getInstance(InvoiceDispatcher.class);
  final Subscription subscription=Mockito.mock(Subscription.class);
  final EntitlementInternalApi entitlementUserApi=Mockito.mock(EntitlementInternalApi.class);
  Mockito.when(entitlementUserApi.getSubscriptionFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  internalCallContextFactory=g.getInstance(InternalCallContextFactory.class);
  listener=new InvoiceListenerMock(internalCallContextFactory,dispatcher);
  notifier=new DefaultNextBillingDateNotifier(notificationQueueService,g.getInstance(InvoiceConfig.class),entitlementUserApi,listener,internalCallContextFactory);
}
