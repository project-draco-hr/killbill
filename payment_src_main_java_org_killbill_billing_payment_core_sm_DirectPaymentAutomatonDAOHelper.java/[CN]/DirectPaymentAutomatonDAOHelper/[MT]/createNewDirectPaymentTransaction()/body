{
  final PaymentTransactionModelDao paymentTransactionModelDao;
  final List<PaymentTransactionModelDao> existingTransactions;
  if (directPaymentStateContext.getDirectPaymentId() == null) {
    final PaymentModelDao newPaymentModelDao=buildNewDirectPaymentModelDao();
    final PaymentTransactionModelDao newPaymentTransactionModelDao=buildNewDirectPaymentTransactionModelDao(newPaymentModelDao.getId());
    existingTransactions=ImmutableList.of();
    final PaymentModelDao paymentModelDao=paymentDao.insertDirectPaymentWithFirstTransaction(newPaymentModelDao,newPaymentTransactionModelDao,internalCallContext);
    paymentTransactionModelDao=paymentDao.getDirectTransactionsForDirectPayment(paymentModelDao.getId(),internalCallContext).get(0);
  }
 else {
    existingTransactions=paymentDao.getDirectTransactionsForDirectPayment(directPaymentStateContext.getDirectPaymentId(),internalCallContext);
    if (existingTransactions.isEmpty()) {
      throw new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_SUCCESS_PAYMENT,directPaymentStateContext.getDirectPaymentId());
    }
    if (directPaymentStateContext.getCurrency() != null && existingTransactions.get(0).getCurrency() != directPaymentStateContext.getCurrency()) {
      throw new PaymentApiException(ErrorCode.PAYMENT_INVALID_PARAMETER,"currency"," should be " + existingTransactions.get(0).getCurrency() + " to match other existing transactions");
    }
    final PaymentTransactionModelDao newPaymentTransactionModelDao=buildNewDirectPaymentTransactionModelDao(directPaymentStateContext.getDirectPaymentId());
    paymentTransactionModelDao=paymentDao.updateDirectPaymentWithNewTransaction(directPaymentStateContext.getDirectPaymentId(),newPaymentTransactionModelDao,internalCallContext);
  }
  directPaymentStateContext.setDirectPaymentTransactionModelDao(paymentTransactionModelDao);
  directPaymentStateContext.setOnLeavingStateExistingTransactions(existingTransactions);
}
