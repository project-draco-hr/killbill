{
  final Catalog catalog=catalogService.getFullCatalog();
  final Plan prevPlan=(transition.getPreviousPlan() != null) ? catalog.findPlan(transition.getPreviousPlan(),transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  final Plan nextPlan=(transition.getNextPlan() != null) ? catalog.findPlan(transition.getNextPlan(),transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  final Plan plan=(transition.getTransitionType() != SubscriptionTransitionType.CANCEL) ? nextPlan : prevPlan;
  final Product product=plan.getProduct();
  final PlanPhase prevPhase=(transition.getPreviousPhase() != null) ? catalog.findPhase(transition.getPreviousPhase(),transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  final PlanPhase nextPhase=(transition.getNextPhase() != null) ? catalog.findPhase(transition.getNextPhase(),transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  final PlanPhase phase=(transition.getTransitionType() != SubscriptionTransitionType.CANCEL) ? nextPhase : prevPhase;
  final BillingAlignment alignment=catalog.billingAlignment(new PlanPhaseSpecifier(product.getName(),product.getCategory(),phase.getBillingPeriod(),transition.getNextPriceList(),phase.getPhaseType()),transition.getRequestedTransitionTime());
  BillCycleDay result=null;
switch (alignment) {
case ACCOUNT:
    result=account.getBillCycleDay();
  if (result == null || result.getDayOfMonthUTC() == 0) {
    result=calculateBcdFromSubscription(subscription,plan,account);
  }
break;
case BUNDLE:
final Subscription baseSub=entitlementApi.getBaseSubscription(bundle.getId());
Plan basePlan=baseSub.getCurrentPlan();
if (basePlan == null) {
final EffectiveSubscriptionEvent previousTransition=baseSub.getPreviousTransition();
basePlan=catalog.findPlan(previousTransition.getPreviousPlan(),previousTransition.getEffectiveTransitionTime(),previousTransition.getSubscriptionStartDate());
}
result=calculateBcdFromSubscription(baseSub,basePlan,account);
break;
case SUBSCRIPTION:
result=calculateBcdFromSubscription(subscription,plan,account);
break;
}
if (result == null) {
throw new CatalogApiException(ErrorCode.CAT_INVALID_BILLING_ALIGNMENT,alignment.toString());
}
return result;
}
