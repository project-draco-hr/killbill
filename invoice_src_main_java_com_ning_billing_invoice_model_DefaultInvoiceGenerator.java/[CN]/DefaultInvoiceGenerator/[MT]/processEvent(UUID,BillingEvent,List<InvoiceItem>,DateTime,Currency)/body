{
  try {
    InternationalPrice recurringPrice=event.getRecurringPrice();
    BigDecimal rate=(recurringPrice == null) ? BigDecimal.ZERO : recurringPrice.getPrice(targetCurrency);
    BigDecimal numberOfBillingPeriods=calculateNumberOfBillingPeriods(event,targetDate);
    if (numberOfBillingPeriods.compareTo(BigDecimal.ZERO) != 0) {
      BigDecimal invoiceItemAmount=numberOfBillingPeriods.multiply(rate);
      BillingMode billingMode=getBillingMode(event.getBillingMode());
      DateTime billThroughDate=billingMode.calculateEffectiveEndDate(event.getEffectiveDate(),targetDate,event.getBillCycleDay(),event.getBillingPeriod());
      addInvoiceItem(invoiceId,items,event,billThroughDate,invoiceItemAmount,rate,targetCurrency);
    }
  }
 catch (  CatalogApiException e) {
    log.error(String.format("Encountered a catalog error processing invoice %s for billing event on date %s",invoiceId.toString(),ISODateTimeFormat.basicDateTime().print(event.getEffectiveDate())),e);
  }
}
