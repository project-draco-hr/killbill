{
  final List<SubscriptionBaseBundle> bundles=subscriptionApi.getBundlesForAccount(accountId,context);
  final StaticCatalog currentCatalog=catalogService.getCurrentCatalog(context);
  final ImmutableAccountData account=accountApi.getImmutableAccountDataById(accountId,context);
  final DefaultBillingEventSet result=new DefaultBillingEventSet(false,currentCatalog.getRecurringBillingMode(),account.getTimeZone());
  final Set<UUID> skippedSubscriptions=new HashSet<UUID>();
  try {
    final List<Tag> accountTags=tagApi.getTags(accountId,ObjectType.ACCOUNT,context);
    final boolean found_AUTO_INVOICING_OFF=is_AUTO_INVOICING_OFF(accountTags);
    if (found_AUTO_INVOICING_OFF) {
      return new DefaultBillingEventSet(true,currentCatalog.getRecurringBillingMode(),account.getTimeZone());
    }
    addBillingEventsForBundles(bundles,account,dryRunArguments,context,result,skippedSubscriptions);
  }
 catch (  SubscriptionBaseApiException e) {
    log.warn("Failed while getting BillingEvent",e);
  }
  final StringBuilder logStringBuilder=new StringBuilder("Computed billing events for accountId ").append(accountId);
  eventsToString(logStringBuilder,result,"\nBilling Events Raw");
  blockCalculator.insertBlockingEvents(result,skippedSubscriptions,context);
  eventsToString(logStringBuilder,result,"\nBilling Events After Blocking");
  log.info(logStringBuilder.toString());
  return result;
}
