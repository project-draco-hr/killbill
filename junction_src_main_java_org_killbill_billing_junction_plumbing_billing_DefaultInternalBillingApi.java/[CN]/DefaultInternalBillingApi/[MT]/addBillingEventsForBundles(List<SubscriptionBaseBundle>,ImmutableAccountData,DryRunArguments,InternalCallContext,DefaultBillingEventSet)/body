{
  final boolean dryRunMode=dryRunArguments != null;
  if (dryRunArguments != null && dryRunArguments.getAction() == SubscriptionEventType.START_BILLING && dryRunArguments.getBundleId() == null) {
    final UUID fakeBundleId=UUIDs.randomUUID();
    final List<SubscriptionBase> subscriptions=subscriptionApi.getSubscriptionsForBundle(fakeBundleId,dryRunArguments,context);
    addBillingEventsForSubscription(account,subscriptions,fakeBundleId,dryRunMode,context,result);
  }
  for (  final SubscriptionBaseBundle bundle : bundles) {
    final DryRunArguments dryRunArgumentsForBundle=(dryRunArguments != null && dryRunArguments.getBundleId() != null && dryRunArguments.getBundleId().equals(bundle.getId())) ? dryRunArguments : null;
    final List<SubscriptionBase> subscriptions=subscriptionApi.getSubscriptionsForBundle(bundle.getId(),dryRunArgumentsForBundle,context);
    final List<Tag> bundleTags=tagApi.getTags(bundle.getId(),ObjectType.BUNDLE,context);
    boolean found_AUTO_INVOICING_OFF=is_AUTO_INVOICING_OFF(bundleTags);
    if (found_AUTO_INVOICING_OFF) {
      for (      final SubscriptionBase subscription : subscriptions) {
        result.getSubscriptionIdsWithAutoInvoiceOff().add(subscription.getId());
      }
    }
 else {
      addBillingEventsForSubscription(account,subscriptions,bundle.getId(),dryRunMode,context,result);
    }
  }
}
