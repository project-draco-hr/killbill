{
  try {
    return paymentPluginFormDispatcher.dispatchWithTimeout(new CallableWithAccountLock<HostedPaymentPageFormDescriptor>(locker,account.getExternalKey(),new WithAccountLockCallback<HostedPaymentPageFormDescriptor>(){
      @Override public HostedPaymentPageFormDescriptor doOperation() throws PaymentApiException {
        final PaymentPluginApi plugin=getPaymentProviderPlugin(account,internalCallContext);
        try {
          return plugin.buildFormDescriptor(account.getId(),customFields,properties,callContext);
        }
 catch (        final RuntimeException e) {
          throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR);
        }
catch (        final PaymentPluginApiException e) {
          throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR);
        }
      }
    }
));
  }
 catch (  final TimeoutException e) {
    throw new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_TIMEOUT,account.getId(),null);
  }
catch (  final RuntimeException e) {
    throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,e.getMessage());
  }
catch (  OperationException e) {
    throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,e.getMessage());
  }
}
