{
  return dispatchWithExceptionHandling(account,new CallableWithAccountLock<HostedPaymentPageFormDescriptor,PaymentApiException>(locker,account.getExternalKey(),new WithAccountLockCallback<PluginDispatcherReturnType<HostedPaymentPageFormDescriptor>,PaymentApiException>(){
    @Override public PluginDispatcherReturnType<HostedPaymentPageFormDescriptor> doOperation() throws PaymentApiException {
      final PaymentPluginApi plugin=getPaymentProviderPlugin(account,internalCallContext);
      try {
        final HostedPaymentPageFormDescriptor result=plugin.buildFormDescriptor(account.getId(),customFields,properties,callContext);
        return PluginDispatcher.createPluginDispatcherReturnType(result);
      }
 catch (      final RuntimeException e) {
        throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,Objects.firstNonNull(e.getMessage(),""));
      }
catch (      final PaymentPluginApiException e) {
        throw new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage());
      }
    }
  }
),paymentPluginFormDispatcher);
}
