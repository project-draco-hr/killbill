{
  final String pluginName=getPaymentProviderPluginName(paymentMethodId,internalCallContext);
  if (shouldDispatch) {
    return dispatchWithExceptionHandling(account,pluginName,new Callable<PluginDispatcherReturnType<HostedPaymentPageFormDescriptor>>(){
      @Override public PluginDispatcherReturnType<HostedPaymentPageFormDescriptor> call() throws PaymentApiException {
        final PaymentPluginApi plugin=getPaymentPluginApi(pluginName);
        try {
          final HostedPaymentPageFormDescriptor result=plugin.buildFormDescriptor(account.getId(),customFields,properties,callContext);
          return PluginDispatcher.createPluginDispatcherReturnType(result == null ? new DefaultNoOpHostedPaymentPageFormDescriptor(account.getId()) : result);
        }
 catch (        final RuntimeException e) {
          throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,Objects.firstNonNull(e.getMessage(),""));
        }
catch (        final PaymentPluginApiException e) {
          throw new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage());
        }
      }
    }
,paymentPluginFormDispatcher);
  }
 else {
    final PaymentPluginApi plugin=getPaymentPluginApi(pluginName);
    try {
      return plugin.buildFormDescriptor(account.getId(),customFields,properties,callContext);
    }
 catch (    final PaymentPluginApiException e) {
      throw new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage());
    }
  }
}
