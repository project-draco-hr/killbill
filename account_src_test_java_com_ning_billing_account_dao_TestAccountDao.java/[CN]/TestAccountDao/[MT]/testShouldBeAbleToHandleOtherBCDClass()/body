{
  final Account account=createTestAccount();
  accountDao.create(account,internalCallContext);
  final MutableAccountData otherAccount=account.toMutableAccountData();
  otherAccount.setAddress1(UUID.randomUUID().toString());
  otherAccount.setEmail(UUID.randomUUID().toString());
  otherAccount.setBillCycleDay(new BillCycleDay(){
    @Override public int getDayOfMonthUTC(){
      return account.getBillCycleDay().getDayOfMonthUTC();
    }
    @Override public int getDayOfMonthLocal(){
      return account.getBillCycleDay().getDayOfMonthLocal();
    }
  }
);
  final DefaultAccount newAccount=new DefaultAccount(account.getId(),otherAccount);
  accountDao.update(newAccount,internalCallContext);
  final Account newFetchedAccount=accountDao.getById(account.getId(),internalCallContext);
  Assert.assertEquals(newFetchedAccount.getAddress1(),newAccount.getAddress1());
  Assert.assertEquals(newFetchedAccount.getEmail(),newAccount.getEmail());
  Assert.assertEquals(newFetchedAccount.getBillCycleDay(),account.getBillCycleDay());
}
