{
  final AccountModelDao account=createTestAccount();
  accountDao.create(account,internalCallContext);
  final MutableAccountData otherAccount=new DefaultAccount(account).toMutableAccountData();
  otherAccount.setAddress1(UUID.randomUUID().toString());
  otherAccount.setEmail(UUID.randomUUID().toString());
  otherAccount.setBillCycleDay(new BillCycleDay(){
    @Override public int getDayOfMonthUTC(){
      return account.getBillingCycleDayUTC();
    }
    @Override public int getDayOfMonthLocal(){
      return account.getBillingCycleDayLocal();
    }
  }
);
  final AccountModelDao newAccount=new AccountModelDao(account.getId(),otherAccount);
  accountDao.update(newAccount,internalCallContext);
  final AccountModelDao newFetchedAccount=accountDao.getById(account.getId(),internalCallContext);
  Assert.assertEquals(newFetchedAccount.getAddress1(),newAccount.getAddress1());
  Assert.assertEquals(newFetchedAccount.getEmail(),newAccount.getEmail());
  Assert.assertEquals(newFetchedAccount.getBillingCycleDayUTC(),account.getBillingCycleDayUTC());
  Assert.assertEquals(newFetchedAccount.getBillingCycleDayLocal(),account.getBillingCycleDayLocal());
}
