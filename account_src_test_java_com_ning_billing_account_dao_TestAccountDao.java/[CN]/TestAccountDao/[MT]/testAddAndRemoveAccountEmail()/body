{
  final UUID accountId=UUID.randomUUID();
  final String email1=UUID.randomUUID().toString();
  final String email2=UUID.randomUUID().toString();
  assertEquals(accountDao.getEmailsByAccountId(accountId,internalCallContext).size(),0);
  final AccountEmail accountEmail1=new DefaultAccountEmail(accountId,email1);
  accountDao.addEmail(new AccountEmailModelDao(accountEmail1),internalCallContext);
  final List<AccountEmailModelDao> firstEmails=accountDao.getEmailsByAccountId(accountId,internalCallContext);
  assertEquals(firstEmails.size(),1);
  assertEquals(firstEmails.get(0).getAccountId(),accountId);
  assertEquals(firstEmails.get(0).getEmail(),email1);
  final AccountEmail accountEmail2=new DefaultAccountEmail(accountId,email2);
  accountDao.addEmail(new AccountEmailModelDao(accountEmail2),internalCallContext);
  final List<AccountEmailModelDao> secondEmails=accountDao.getEmailsByAccountId(accountId,internalCallContext);
  assertEquals(secondEmails.size(),2);
  assertTrue(secondEmails.get(0).getAccountId().equals(accountId));
  assertTrue(secondEmails.get(1).getAccountId().equals(accountId));
  assertTrue(secondEmails.get(0).getEmail().equals(email1) || secondEmails.get(0).getEmail().equals(email2));
  assertTrue(secondEmails.get(1).getEmail().equals(email1) || secondEmails.get(1).getEmail().equals(email2));
  accountDao.removeEmail(new AccountEmailModelDao(accountEmail1),internalCallContext);
  final List<AccountEmailModelDao> thirdEmails=accountDao.getEmailsByAccountId(accountId,internalCallContext);
  assertEquals(thirdEmails.size(),1);
  assertEquals(thirdEmails.get(0).getAccountId(),accountId);
  assertEquals(thirdEmails.get(0).getEmail(),email2);
}
