{
  final UUID accountId=UUID.randomUUID();
  final String email1=UUID.randomUUID().toString();
  final String email2=UUID.randomUUID().toString();
  assertEquals(accountEmailDao.getEmails(accountId).size(),0);
  final AccountEmail accountEmail1=new DefaultAccountEmail(accountId,email1);
  accountEmailDao.addEmail(accountId,accountEmail1,context);
  final List<AccountEmail> firstEmails=accountEmailDao.getEmails(accountId);
  assertEquals(firstEmails.size(),1);
  assertEquals(firstEmails.get(0).getAccountId(),accountId);
  assertEquals(firstEmails.get(0).getEmail(),email1);
  final AccountEmail accountEmail2=new DefaultAccountEmail(accountId,email2);
  accountEmailDao.addEmail(accountId,accountEmail2,context);
  final List<AccountEmail> secondEmails=accountEmailDao.getEmails(accountId);
  assertEquals(secondEmails.size(),2);
  assertTrue(secondEmails.get(0).getAccountId().equals(accountId));
  assertTrue(secondEmails.get(1).getAccountId().equals(accountId));
  assertTrue(secondEmails.get(0).getEmail().equals(email1) || secondEmails.get(0).getEmail().equals(email2));
  assertTrue(secondEmails.get(1).getEmail().equals(email1) || secondEmails.get(1).getEmail().equals(email2));
  accountEmailDao.removeEmail(accountId,accountEmail1,context);
  final List<AccountEmail> thirdEmails=accountEmailDao.getEmails(accountId);
  assertEquals(thirdEmails.size(),1);
  assertEquals(thirdEmails.get(0).getAccountId(),accountId);
  assertEquals(thirdEmails.get(0).getEmail(),email2);
  verifyAccountEmailAuditAndHistoryCount(accountId,3);
}
