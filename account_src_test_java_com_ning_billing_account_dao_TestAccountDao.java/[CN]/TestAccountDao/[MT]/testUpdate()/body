{
  final Account account=createTestAccount(1);
  accountDao.create(account,context);
  final AccountData accountData=new MockAccountBuilder(account).migrated(false).isNotifiedForInvoices(false).timeZone(DateTimeZone.forID("Australia/Darwin")).locale("FR-CA").build();
  final Account updatedAccount=new DefaultAccount(account.getId(),accountData);
  accountDao.update(updatedAccount,context);
  final Account savedAccount=accountDao.getAccountByKey(account.getExternalKey());
  assertNotNull(savedAccount);
  assertEquals(savedAccount.getName(),updatedAccount.getName());
  assertEquals(savedAccount.getEmail(),updatedAccount.getEmail());
  assertEquals(savedAccount.getPaymentMethodId(),updatedAccount.getPaymentMethodId());
  assertEquals(savedAccount.getBillCycleDay(),updatedAccount.getBillCycleDay());
  assertEquals(savedAccount.getFirstNameLength(),updatedAccount.getFirstNameLength());
  assertEquals(savedAccount.getTimeZone(),updatedAccount.getTimeZone());
  assertEquals(savedAccount.getLocale(),updatedAccount.getLocale());
  assertEquals(savedAccount.getAddress1(),updatedAccount.getAddress1());
  assertEquals(savedAccount.getAddress2(),updatedAccount.getAddress2());
  assertEquals(savedAccount.getCity(),updatedAccount.getCity());
  assertEquals(savedAccount.getStateOrProvince(),updatedAccount.getStateOrProvince());
  assertEquals(savedAccount.getCountry(),updatedAccount.getCountry());
  assertEquals(savedAccount.getPostalCode(),updatedAccount.getPostalCode());
  assertEquals(savedAccount.getPhone(),updatedAccount.getPhone());
}
