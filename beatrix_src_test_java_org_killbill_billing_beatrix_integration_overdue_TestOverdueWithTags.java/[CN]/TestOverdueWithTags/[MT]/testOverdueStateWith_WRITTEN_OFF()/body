{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  paymentPlugin.makeAllInvoicesFailWithError(true);
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  bundle=subscriptionApi.getSubscriptionBundle(baseEntitlement.getBundleId(),callContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  final Invoice nonNullInvoice=invoices.get(1);
  assertTrue(nonNullInvoice.getBalance().compareTo(BigDecimal.ZERO) > 0);
  busHandler.pushExpectedEvents(NextEvent.TAG);
  tagUserApi.addTag(nonNullInvoice.getId(),ObjectType.INVOICE,ControlTagType.WRITTEN_OFF.getId(),callContext);
  assertListenerStatus();
  addDaysAndCheckForCompletion(6);
  checkODState(OverdueWrapper.CLEAR_STATE_NAME);
  busHandler.pushExpectedEvents(NextEvent.TAG,NextEvent.BLOCK);
  tagUserApi.removeTag(nonNullInvoice.getId(),ObjectType.INVOICE,ControlTagType.WRITTEN_OFF.getId(),callContext);
  assertListenerStatus();
  checkODState("OD1");
}
