{
  final ObjectType objectType=getObjectType();
  final CacheType cacheType=cachableAnnotation.value();
  final CacheController<Object,Object> cache=cacheControllerDispatcher.getCacheController(cacheType);
  Object result=null;
  if (cache != null) {
    final Map<Integer,Object> keyPieces=new LinkedHashMap<Integer,Object>();
    final Annotation[][] annotations=method.getParameterAnnotations();
    for (int i=0; i < annotations.length; i++) {
      for (int j=0; j < annotations[i].length; j++) {
        final Annotation annotation=annotations[i][j];
        if (CachableKey.class.equals(annotation.annotationType())) {
          keyPieces.put(((CachableKey)annotation).value() - 1,args[i]);
          break;
        }
      }
    }
    final String cacheKey=buildCacheKey(keyPieces);
    final InternalTenantContext internalTenantContext=(InternalTenantContext)Iterables.find(ImmutableList.copyOf(args),new Predicate<Object>(){
      @Override public boolean apply(      final Object input){
        return input instanceof InternalTenantContext;
      }
    }
,null);
    final CacheLoaderArgument cacheLoaderArgument=new CacheLoaderArgument(objectType,args,internalTenantContext,handle);
    return cache.get(cacheKey,cacheLoaderArgument);
  }
  if (result == null) {
    result=prof.executeWithProfiling(ProfilingFeatureType.DAO_DETAILS,sqlDaoClass.getSimpleName() + "(raw) :" + method.getName(),new WithProfilingCallback(){
      @Override public Object execute() throws Throwable {
        return method.invoke(sqlDao,args);
      }
    }
);
  }
  return result;
}
