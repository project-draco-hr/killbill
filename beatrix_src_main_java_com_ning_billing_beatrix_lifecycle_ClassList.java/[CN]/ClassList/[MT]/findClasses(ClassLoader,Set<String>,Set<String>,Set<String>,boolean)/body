{
  Map<String,Set<Class<?>>> classTable=new HashMap<String,Set<Class<?>>>();
  Object[] classPaths;
  try {
    classPaths=((java.net.URLClassLoader)classLoader).getURLs();
  }
 catch (  ClassCastException cce) {
    classPaths=System.getProperty("java.class.path","").split(File.pathSeparator);
  }
  for (int h=0; h < classPaths.length; h++) {
    Enumeration<?> files=null;
    JarFile module=null;
    File classPath=new File((URL.class).isInstance(classPaths[h]) ? ((URL)classPaths[h]).getFile() : classPaths[h].toString());
    if (classPath.isDirectory() && jarFilter == null) {
      List<String> dirListing=new ArrayList<String>();
      recursivelyListDir(dirListing,classPath,new StringBuffer());
      files=Collections.enumeration(dirListing);
    }
 else     if (classPath.getName().endsWith(".jar")) {
      if (jarFilter != null && !jarFilter.contains(classPath.getName())) {
        continue;
      }
      boolean failed=true;
      try {
        module=new JarFile(classPath);
        failed=false;
      }
 catch (      MalformedURLException mue) {
        throw new ClassNotFoundException("Bad classpath. Error: " + mue.getMessage());
      }
catch (      IOException io) {
        System.out.println("ERROR: jar file '" + classPath.getName() + "' could not be instantiate from file path. Error: "+ io.getMessage());
      }
      if (!failed) {
        files=module.entries();
      }
    }
    while (files != null && files.hasMoreElements()) {
      String fileName=files.nextElement().toString();
      if (fileName.endsWith(".class")) {
        String className=fileName.replaceAll("/",".").substring(0,fileName.length() - 6);
        if (packageFilter != null) {
          boolean skip=true;
          Iterator<String> it=packageFilter.iterator();
          while (it.hasNext()) {
            String filter=it.next() + ".";
            if (className.startsWith(filter)) {
              skip=false;
              break;
            }
          }
          if (skip) {
            continue;
          }
        }
        Class<?> theClass=null;
        try {
          theClass=Class.forName(className,false,classLoader);
        }
 catch (        NoClassDefFoundError e) {
          continue;
        }
        if (theClass.isInterface()) {
          continue;
        }
        if (filterAbstract && Modifier.isAbstract(theClass.getModifiers())) {
          continue;
        }
        Class<?>[] classInterfaces=theClass.getInterfaces();
        String interfaceName=null;
        for (int i=0; i < classInterfaces.length || (i == 0 && interfaceFilter == null); i++) {
          if (i < classInterfaces.length) {
            interfaceName=classInterfaces[i].getName();
            if (interfaceFilter != null && !interfaceFilter.contains(interfaceName)) {
              continue;
            }
          }
          if (classTable.containsKey(interfaceName)) {
            classTable.get(interfaceName).add(theClass);
          }
 else {
            Set<Class<?>> allClasses=new HashSet<Class<?>>();
            allClasses.add(theClass);
            classTable.put(interfaceName,allClasses);
          }
        }
      }
    }
    if (module != null) {
      try {
        module.close();
      }
 catch (      IOException ioe) {
        throw new ClassNotFoundException("The module jar file '" + classPath.getName() + "' could not be closed. Error: "+ ioe.getMessage());
      }
    }
  }
  return classTable;
}
