{
  final DateTime today=new DateTime(2012,4,1,0,0,0,0,testTimeZone);
  final DateTime trialEndDate=new DateTime(2012,5,1,0,0,0,0,testTimeZone);
  final Account account=createAccountWithPaymentMethod(getAccountData(1));
  clock.setDeltaFromReality(today.getMillis() - clock.getUTCNow().getMillis());
  final SubscriptionBundle bundle=entitlementUserApi.createBundleForAccount(account.getId(),"whatever",context);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.INVOICE);
  final PlanPhaseSpecifier bpPlanPhaseSpecifier=new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null);
  final SubscriptionData bpSubscription=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),bpPlanPhaseSpecifier,null,context));
  assertNotNull(bpSubscription);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT);
  final PlanPhaseSpecifier addonPlanPhaseSpecifier=new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final SubscriptionData aoSubscription=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),addonPlanPhaseSpecifier,null,context));
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  busHandler.pushExpectedEvents(NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.INVOICE);
  bpSubscription.cancel(clock.getUTCNow(),false,context);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId());
  assertEquals(invoices.size(),3);
  assertEquals(invoices.get(0).getNumberOfItems(),1);
  assertEquals(invoices.get(0).getInvoiceItems().get(0).getStartDate().compareTo(today),0);
  assertEquals(invoices.get(0).getInvoiceItems().get(0).getEndDate().compareTo(trialEndDate),0);
  assertEquals(invoices.get(1).getNumberOfItems(),3);
  for (  final InvoiceItem item : invoices.get(1).getInvoiceItems()) {
    if (InvoiceItemType.RECURRING.equals(item.getInvoiceItemType())) {
      assertEquals(item.getStartDate().compareTo(today),0);
      assertEquals(item.getEndDate().compareTo(trialEndDate),0);
      assertEquals(item.getAmount().compareTo(new BigDecimal("399.9500")),0);
    }
 else     if (InvoiceItemType.REPAIR_ADJ.equals(item.getInvoiceItemType())) {
      assertEquals(item.getStartDate().compareTo(today),0);
      assertEquals(item.getEndDate().compareTo(trialEndDate),0);
      assertEquals(item.getAmount().compareTo(new BigDecimal("-399.9500")),0);
    }
 else {
      assertEquals(item.getInvoiceItemType(),InvoiceItemType.CBA_ADJ);
      assertEquals(item.getStartDate().compareTo(today),0);
      assertEquals(item.getEndDate().compareTo(today),0);
      assertEquals(item.getAmount().compareTo(new BigDecimal("399.9500")),0);
    }
  }
  assertEquals(invoices.get(2).getNumberOfItems(),0);
}
