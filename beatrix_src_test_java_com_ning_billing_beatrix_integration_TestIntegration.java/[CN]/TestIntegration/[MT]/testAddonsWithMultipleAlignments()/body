{
  final DateTime initialDate=new DateTime(2012,4,25,0,13,42,0,testTimeZone);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(25));
  assertNotNull(account);
  final SubscriptionBundle bundle=entitlementUserApi.createBundleForAccount(account.getId(),"whatever",callContext);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  busHandler.pushExpectedEvent(NextEvent.CREATE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  final SubscriptionData baseSubscription=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null),null,callContext));
  assertNotNull(baseSubscription);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  final Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(3));
  log.info("Moving clock from" + clock.getUTCNow() + " to "+ clock.getUTCNow().plusDays(3));
  clock.addDays(3);
  busHandler.pushExpectedEvent(NextEvent.CREATE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null),null,callContext));
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  busHandler.pushExpectedEvent(NextEvent.CREATE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  final SubscriptionData aoSubscription2=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),new PlanPhaseSpecifier("Laser-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null),null,callContext));
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  busHandler.pushExpectedEvent(NextEvent.PHASE);
  busHandler.pushExpectedEvent(NextEvent.PHASE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  log.info("Moving clock from" + clock.getUTCNow() + " to "+ clock.getUTCNow().plusDays(28));
  clock.addDays(28);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  busHandler.pushExpectedEvent(NextEvent.PHASE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  log.info("Moving clock from" + clock.getUTCNow() + " to "+ clock.getUTCNow().plusDays(3));
  clock.addDays(3);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  log.info("Moving clock from" + clock.getUTCNow() + " to "+ clock.getUTCNow().plusDays(10));
  clock.addDays(10);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  log.info("Moving clock from" + clock.getUTCNow() + " to "+ clock.getUTCNow().plusDays(18));
  clock.addDays(18);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  log.info("Moving clock from" + clock.getUTCNow() + " to "+ clock.getUTCNow().plusDays(3));
  clock.addDays(3);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
}
