{
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final EntitlementCallCompletionCallback<Response> callback=new EntitlementCallCompletionCallback<Response>(){
    private boolean isImmediateOp=true;
    @Override public Response doOperation(    final CallContext ctx) throws EntitlementApiException, InterruptedException, TimeoutException, AccountApiException {
      final UUID uuid=UUID.fromString(entitlementId);
      final Entitlement current=entitlementApi.getEntitlementForId(uuid,ctx);
      final LocalDate inputLocalDate=toLocalDate(current.getAccountId(),requestedDate,callContext);
      final Entitlement newEntitlement;
      if (billingPolicyString == null && entitlementPolicyString == null) {
        newEntitlement=current.cancelEntitlementWithDate(inputLocalDate,useRequestedDateForBilling,ctx);
      }
 else       if (billingPolicyString == null && entitlementPolicyString != null) {
        final EntitlementActionPolicy entitlementPolicy=EntitlementActionPolicy.valueOf(entitlementPolicyString);
        newEntitlement=current.cancelEntitlementWithPolicy(entitlementPolicy,ctx);
      }
 else       if (billingPolicyString != null && entitlementPolicyString == null) {
        final BillingActionPolicy billingPolicy=BillingActionPolicy.valueOf(billingPolicyString.toUpperCase());
        newEntitlement=current.cancelEntitlementWithDateOverrideBillingPolicy(inputLocalDate,billingPolicy,ctx);
      }
 else {
        final EntitlementActionPolicy entitlementPolicy=EntitlementActionPolicy.valueOf(entitlementPolicyString);
        final BillingActionPolicy billingPolicy=BillingActionPolicy.valueOf(billingPolicyString.toUpperCase());
        newEntitlement=current.cancelEntitlementWithPolicyOverrideBillingPolicy(entitlementPolicy,billingPolicy,ctx);
      }
      isImmediateOp=newEntitlement.getState() == EntitlementState.ACTIVE;
      return Response.status(Status.OK).build();
    }
    @Override public boolean isImmOperation(){
      return isImmediateOp;
    }
    @Override public Response doResponseOk(    final Response operationResponse){
      return operationResponse;
    }
  }
;
  final EntitlementCallCompletion<Response> callCompletionCreation=new EntitlementCallCompletion<Response>();
  return callCompletionCreation.withSynchronization(callback,timeoutSec,callCompletion,callContext);
}
