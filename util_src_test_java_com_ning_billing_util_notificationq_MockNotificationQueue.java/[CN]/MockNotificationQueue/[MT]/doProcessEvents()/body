{
  int result=0;
  final List<Notification> processedNotifications=new ArrayList<Notification>();
  final List<Notification> oldNotifications=new ArrayList<Notification>();
  final List<Notification> readyNotifications=new ArrayList<Notification>();
synchronized (notifications) {
    final Iterator<Notification> it=notifications.iterator();
    while (it.hasNext()) {
      final Notification cur=it.next();
      if (cur.isAvailableForProcessing(clock.getUTCNow())) {
        readyNotifications.add(cur);
      }
    }
  }
  result=readyNotifications.size();
  for (  final Notification cur : readyNotifications) {
    NotificationKey key=deserializeEvent(cur.getNotificationKeyClass(),cur.getNotificationKey());
    handler.handleReadyNotification(key,cur.getEffectiveDate());
    final DefaultNotification processedNotification=new DefaultNotification(-1L,cur.getId(),hostname,hostname,"MockQueue",clock.getUTCNow().plus(CLAIM_TIME_MS),PersistentQueueEntryLifecycleState.PROCESSED,cur.getNotificationKeyClass(),cur.getNotificationKey(),cur.getEffectiveDate());
    oldNotifications.add(cur);
    processedNotifications.add(processedNotification);
  }
synchronized (notifications) {
    if (oldNotifications.size() > 0) {
      notifications.removeAll(oldNotifications);
    }
    if (processedNotifications.size() > 0) {
      notifications.addAll(processedNotifications);
    }
  }
  return result;
}
