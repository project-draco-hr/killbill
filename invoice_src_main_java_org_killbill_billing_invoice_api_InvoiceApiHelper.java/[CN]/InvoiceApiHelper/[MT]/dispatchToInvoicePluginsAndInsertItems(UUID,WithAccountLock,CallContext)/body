{
  GlobalLock lock=null;
  try {
    lock=locker.lockWithNumberOfTries(LockerType.ACCNT_INV_PAY.toString(),accountId.toString(),NB_LOCK_TRY);
    final Iterable<Invoice> invoicesForPlugins=withAccountLock.prepareInvoices();
    final List<InvoiceModelDao> invoiceModelDaos=new LinkedList<InvoiceModelDao>();
    for (    final Invoice invoiceForPlugin : invoicesForPlugins) {
      final List<InvoiceItem> additionalInvoiceItems=invoicePluginDispatcher.getAdditionalInvoiceItems(invoiceForPlugin,context);
      invoiceForPlugin.addInvoiceItems(additionalInvoiceItems);
      final InvoiceModelDao invoiceModelDao=new InvoiceModelDao(invoiceForPlugin);
      final List<InvoiceItem> invoiceItems=invoiceForPlugin.getInvoiceItems();
      final List<InvoiceItemModelDao> invoiceItemModelDaos=toInvoiceItemModelDao(invoiceItems);
      invoiceModelDao.addInvoiceItems(invoiceItemModelDaos);
      invoiceModelDaos.add(invoiceModelDao);
    }
    final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(accountId,context);
    final List<InvoiceItemModelDao> createdInvoiceItems=dao.createInvoices(invoiceModelDaos,internalCallContext);
    return fromInvoiceItemModelDao(createdInvoiceItems);
  }
 catch (  final LockFailedException e) {
    log.error(String.format("Failed to process invoice items for account %s",accountId.toString()),e);
    return ImmutableList.<InvoiceItem>of();
  }
 finally {
    if (lock != null) {
      lock.release();
    }
  }
}
