{
  final String name="First" + UUID.randomUUID().toString() + " "+ "Last"+ UUID.randomUUID().toString();
  final String externalKey=UUID.randomUUID().toString();
  final Account account=Mockito.mock(Account.class);
  Mockito.when(account.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(account.getExternalKey()).thenReturn(externalKey);
  Mockito.when(account.getName()).thenReturn(name);
  Mockito.when(account.getFirstNameLength()).thenReturn(10);
  Mockito.when(account.getPhone()).thenReturn("123-456-7890");
  Mockito.when(account.getEmail()).thenReturn(email);
  Mockito.when(account.getCurrency()).thenReturn(Currency.USD);
  Mockito.when(account.getBillCycleDayLocal()).thenReturn(1);
  Mockito.when(account.isMigrated()).thenReturn(false);
  Mockito.when(account.isNotifiedForInvoices()).thenReturn(false);
  Mockito.when(AccountApi.getAccountById(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(account);
  Mockito.when(AccountApi.getAccountByKey(Mockito.anyString(),Mockito.<InternalTenantContext>any())).thenReturn(account);
  if (addPaymentMethod) {
    final PaymentMethodPlugin pm=new DefaultNoOpPaymentMethodPlugin(UUID.randomUUID().toString(),true,null);
    addTestPaymentMethod(account,pm);
  }
  return account;
}
