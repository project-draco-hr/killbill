{
  final List<UUID> invoiceIds=new ArrayList<UUID>();
  try {
    DateTime lastInvoiceDate=null;
    BigDecimal totalInvoiceBalance=BigDecimal.ZERO;
    String lastPaymentStatus=null;
    String paymentMethod=null;
    String creditCardType=null;
    String billingAddressCountry=null;
    final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId());
    if (invoices != null && invoices.size() > 0) {
      for (      final Invoice invoice : invoices) {
        invoiceIds.add(invoice.getId());
        totalInvoiceBalance=totalInvoiceBalance.add(invoice.getBalance());
        if (lastInvoiceDate == null || invoice.getInvoiceDate().isAfter(lastInvoiceDate)) {
          lastInvoiceDate=invoice.getInvoiceDate();
        }
      }
      DateTime lastPaymentDate=null;
      final List<Payment> payments=paymentApi.getAccountPayments(account.getId());
      if (payments != null) {
        for (        final Payment cur : payments) {
          if (lastPaymentDate == null || cur.getEffectiveDate().isAfter(lastPaymentDate)) {
            lastPaymentDate=cur.getEffectiveDate();
            lastPaymentStatus=cur.getPaymentStatus().toString();
            paymentMethod=null;
            creditCardType=null;
            billingAddressCountry=null;
          }
        }
      }
    }
    bac.setLastPaymentStatus(lastPaymentStatus);
    bac.setPaymentMethod(paymentMethod);
    bac.setCreditCardType(creditCardType);
    bac.setBillingAddressCountry(billingAddressCountry);
    bac.setLastInvoiceDate(lastInvoiceDate);
    bac.setTotalInvoiceBalance(totalInvoiceBalance);
    bac.setBalance(invoiceUserApi.getAccountBalance(account.getId()));
  }
 catch (  PaymentApiException ex) {
    log.error(String.format("Failed to handle account update for account %s",account.getId()),ex);
  }
}
