{
  List<IEvent> events=dao.getEventsForSubscription(id);
  if (events == null) {
    return;
  }
  SubscriptionState nextState=null;
  String nextPlanName=null;
  String nextPhaseName=null;
  String nextPriceList=null;
  SubscriptionState previousState=null;
  String previousPlanName=null;
  String previousPhaseName=null;
  String previousPriceList=null;
  this.transitions=new LinkedList<SubscriptionTransition>();
  for (  final IEvent cur : events) {
    if (!cur.isActive() || cur.getActiveVersion() < activeVersion) {
      continue;
    }
    ApiEventType apiEventType=null;
switch (cur.getType()) {
case PHASE:
      IPhaseEvent phaseEV=(IPhaseEvent)cur;
    nextPhaseName=phaseEV.getPhase();
  break;
case API_USER:
IApiEvent userEV=(IApiEvent)cur;
apiEventType=userEV.getEventType();
switch (apiEventType) {
case CREATE:
nextState=SubscriptionState.ACTIVE;
nextPlanName=userEV.getEventPlan();
nextPhaseName=userEV.getEventPlanPhase();
nextPriceList=userEV.getPriceList();
break;
case CHANGE:
nextPlanName=userEV.getEventPlan();
nextPhaseName=userEV.getEventPlanPhase();
nextPriceList=userEV.getPriceList();
break;
case PAUSE:
nextState=SubscriptionState.PAUSED;
break;
case RESUME:
nextState=SubscriptionState.ACTIVE;
break;
case CANCEL:
nextState=SubscriptionState.CANCELLED;
nextPlanName=null;
nextPhaseName=null;
break;
case UNCANCEL:
break;
default :
throw new EntitlementError(String.format("Unexpected UserEvent type = %s",userEV.getEventType().toString()));
}
break;
default :
throw new EntitlementError(String.format("Unexpected Event type = %s",cur.getType()));
}
IPlan previousPlan=null;
IPlanPhase previousPhase=null;
IPlan nextPlan=null;
IPlanPhase nextPhase=null;
try {
previousPlan=catalog.findPlan(previousPlanName);
previousPhase=catalog.findPhase(previousPhaseName);
nextPlan=catalog.findPlan(nextPlanName);
nextPhase=catalog.findPhase(nextPhaseName);
}
 catch (CatalogApiException e) {
e.printStackTrace();
}
SubscriptionTransition transition=new SubscriptionTransition(id,bundleId,cur.getType(),apiEventType,cur.getRequestedDate(),cur.getEffectiveDate(),previousState,previousPlan,previousPhase,previousPriceList,nextState,nextPlan,nextPhase,nextPriceList);
transitions.add(transition);
previousState=nextState;
previousPlanName=nextPlanName;
previousPhaseName=nextPhaseName;
previousPriceList=nextPriceList;
}
}
