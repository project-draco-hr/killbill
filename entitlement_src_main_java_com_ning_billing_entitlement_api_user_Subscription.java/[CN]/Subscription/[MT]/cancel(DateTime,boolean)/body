{
  SubscriptionState currentState=getState();
  if (currentState != SubscriptionState.ACTIVE) {
    throw new EntitlementUserApiException(ErrorCode.ENT_CANCEL_BAD_STATE,id,currentState);
  }
  DateTime now=clock.getUTCNow();
  if (requestedDate != null && requestedDate.isAfter(now)) {
    throw new EntitlementUserApiException(ErrorCode.ENT_INVALID_REQUESTED_DATE,requestedDate.toString());
  }
  IPlan currentPlan=getCurrentPlan();
  PlanPhaseSpecifier planPhase=new PlanPhaseSpecifier(currentPlan.getProduct().getName(),currentPlan.getProduct().getCategory(),getCurrentPlan().getBillingPeriod(),getCurrentPriceList(),getCurrentPhase().getPhaseType());
  ActionPolicy policy=null;
  try {
    policy=catalog.planCancelPolicy(planPhase);
  }
 catch (  CatalogApiException e) {
    e.printStackTrace();
  }
  DateTime effectiveDate=getPlanChangeEffectiveDate(policy,now);
  IEvent cancelEvent=new ApiEventCancel(id,bundleStartDate,now,now,effectiveDate,activeVersion);
  dao.cancelSubscription(id,cancelEvent);
  rebuildTransitions();
}
