{
  requestedDate=(requestedDate != null) ? Clock.truncateMs(requestedDate) : null;
  String currentPriceList=getCurrentPriceList();
  SubscriptionState currentState=getState();
  if (currentState != SubscriptionState.ACTIVE) {
    throw new EntitlementUserApiException(ErrorCode.ENT_CHANGE_NON_ACTIVE,id,currentState);
  }
  if (isSubscriptionFutureCancelled()) {
    throw new EntitlementUserApiException(ErrorCode.ENT_CHANGE_FUTURE_CANCELLED,id);
  }
  DateTime now=clock.getUTCNow();
  PlanChangeResult planChangeResult=null;
  try {
    IProduct destProduct=catalog.findProduct(productName);
    if (destProduct == null) {
      throw new EntitlementUserApiException(ErrorCode.ENT_CREATE_BAD_CATALOG,productName,term.toString(),"");
    }
    IPlan currentPlan=getCurrentPlan();
    PlanPhaseSpecifier fromPlanPhase=new PlanPhaseSpecifier(currentPlan.getProduct().getName(),currentPlan.getProduct().getCategory(),currentPlan.getBillingPeriod(),currentPriceList,getCurrentPhase().getPhaseType());
    PlanSpecifier toPlanPhase=new PlanSpecifier(productName,destProduct.getCategory(),term,priceList);
    planChangeResult=catalog.planChange(fromPlanPhase,toPlanPhase);
  }
 catch (  CatalogApiException e) {
    throw new EntitlementUserApiException(e);
  }
  ActionPolicy policy=planChangeResult.getPolicy();
  IPriceList newPriceList=planChangeResult.getNewPriceList();
  IPlan newPlan=null;
  try {
    newPlan=catalog.findPlan(productName,term,newPriceList.getName());
  }
 catch (  CatalogApiException e) {
    e.printStackTrace();
  }
  if (newPlan == null) {
    throw new EntitlementUserApiException(ErrorCode.ENT_CREATE_BAD_CATALOG,productName,term.toString(),newPriceList.getName());
  }
  DateTime effectiveDate=getPlanChangeEffectiveDate(policy,now);
  TimedPhase currentTimedPhase=planAligner.getCurrentTimedPhaseOnChange(this,newPlan,newPriceList.getName(),effectiveDate);
  IEvent changeEvent=new ApiEventChange(new ApiEventBuilder().setSubscriptionId(id).setEventPlan(newPlan.getName()).setEventPlanPhase(currentTimedPhase.getPhase().getName()).setEventPriceList(newPriceList.getName()).setActiveVersion(activeVersion).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(now));
  TimedPhase nextTimedPhase=planAligner.getNextTimedPhaseOnChange(this,newPlan,newPriceList.getName(),effectiveDate);
  IPhaseEvent nextPhaseEvent=PhaseEvent.getNextPhaseEvent(nextTimedPhase,this,now);
  List<IEvent> changeEvents=new ArrayList<IEvent>();
  if (nextPhaseEvent != null && !nextPhaseEvent.getEffectiveDate().equals(changeEvent.getEffectiveDate())) {
    changeEvents.add(nextPhaseEvent);
  }
  changeEvents.add(changeEvent);
  dao.changePlan(id,changeEvents);
  rebuildTransitions();
}
