{
  final LocalDate today=new LocalDate(2012,4,1);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  clock.setDay(today);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String pricelistName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),1);
  ImmutableList<ExpectedInvoiceItemCheck> toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  clock.addDays(3);
  assertListenerStatus();
  changeEntitlementAndCheckForCompletion(bpEntitlement,"Assault-Rifle",term,BillingActionPolicy.IMMEDIATE,NextEvent.CHANGE,NextEvent.INVOICE);
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,4),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addDays(28);
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),3);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,4),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("599.95")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  clock.addDays(5);
  changeEntitlementAndCheckForCompletion(bpEntitlement,"Blowdart",term,BillingActionPolicy.IMMEDIATE,NextEvent.CHANGE,NextEvent.INVOICE);
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),4);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,4),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("599.95")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("8.02")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-483.83")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,5,7),InvoiceItemType.CBA_ADJ,new BigDecimal("475.81")));
  invoiceChecker.checkInvoice(invoices.get(3).getId(),callContext,toBeChecked);
  clock.addDays(1);
  changeEntitlementAndCheckForCompletion(bpEntitlement,"Pistol",term,BillingActionPolicy.IMMEDIATE,NextEvent.CHANGE,NextEvent.INVOICE);
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),5);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,4),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("599.95")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("8.02")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-483.83")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,5,7),InvoiceItemType.CBA_ADJ,new BigDecimal("475.81")));
  invoiceChecker.checkInvoice(invoices.get(3).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("23.19")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-7.70")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,5,8),InvoiceItemType.CBA_ADJ,new BigDecimal("-15.49")));
  invoiceChecker.checkInvoice(invoices.get(4).getId(),callContext,toBeChecked);
  busHandler.pushExpectedEvents(NextEvent.INVOICE);
  clock.addMonths(1);
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),6);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,4),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("599.95")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("8.02")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-483.83")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,5,7),InvoiceItemType.CBA_ADJ,new BigDecimal("475.81")));
  invoiceChecker.checkInvoice(invoices.get(3).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("23.19")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-7.70")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,5,8),InvoiceItemType.CBA_ADJ,new BigDecimal("-15.49")));
  invoiceChecker.checkInvoice(invoices.get(4).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("29.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,8),new LocalDate(2012,6,8),InvoiceItemType.CBA_ADJ,new BigDecimal("-29.95")));
  invoiceChecker.checkInvoice(invoices.get(5).getId(),callContext,toBeChecked);
  busHandler.pushExpectedEvents(NextEvent.INVOICE);
  clock.addMonths(1);
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),7);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,4),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("599.95")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("8.02")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-483.83")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,7),new LocalDate(2012,5,7),InvoiceItemType.CBA_ADJ,new BigDecimal("475.81")));
  invoiceChecker.checkInvoice(invoices.get(3).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("23.19")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-7.70")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,8),new LocalDate(2012,5,8),InvoiceItemType.CBA_ADJ,new BigDecimal("-15.49")));
  invoiceChecker.checkInvoice(invoices.get(4).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("29.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,8),new LocalDate(2012,6,8),InvoiceItemType.CBA_ADJ,new BigDecimal("-29.95")));
  invoiceChecker.checkInvoice(invoices.get(5).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,7,1),new LocalDate(2012,8,1),InvoiceItemType.RECURRING,new BigDecimal("29.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,8),new LocalDate(2012,7,8),InvoiceItemType.CBA_ADJ,new BigDecimal("-29.95")));
  invoiceChecker.checkInvoice(invoices.get(6).getId(),callContext,toBeChecked);
  checkNoMoreInvoiceToGenerate(account);
}
