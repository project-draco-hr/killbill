{
  final List<ExistingEvent> result=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  String prevProductName=null;
  BillingPeriod prevBillingPeriod=null;
  String prevPriceListName=null;
  PhaseType prevPhaseType=null;
  DateTime startDate=null;
  for (  final EntitlementEvent cur : events) {
    if (cur.getActiveVersion() != activeVersion) {
      continue;
    }
    startDate=(startDate == null) ? cur.getEffectiveDate() : startDate;
    String productName=null;
    BillingPeriod billingPeriod=null;
    String priceListName=null;
    PhaseType phaseType=null;
    String planPhaseName=null;
    ApiEventType apiType=null;
switch (cur.getType()) {
case PHASE:
      final PhaseEvent phaseEV=(PhaseEvent)cur;
    planPhaseName=phaseEV.getPhase();
  phaseType=catalog.findPhase(phaseEV.getPhase(),cur.getEffectiveDate(),startDate).getPhaseType();
productName=prevProductName;
billingPeriod=catalog.findPhase(phaseEV.getPhase(),cur.getEffectiveDate(),startDate).getBillingPeriod();
priceListName=prevPriceListName;
break;
case API_USER:
final ApiEvent userEV=(ApiEvent)cur;
apiType=userEV.getEventType();
planPhaseName=userEV.getEventPlanPhase();
final Plan plan=(userEV.getEventPlan() != null) ? catalog.findPlan(userEV.getEventPlan(),cur.getRequestedDate(),startDate) : null;
phaseType=(userEV.getEventPlanPhase() != null) ? catalog.findPhase(userEV.getEventPlanPhase(),cur.getEffectiveDate(),startDate).getPhaseType() : prevPhaseType;
productName=(plan != null) ? plan.getProduct().getName() : prevProductName;
billingPeriod=(userEV.getEventPlanPhase() != null) ? catalog.findPhase(userEV.getEventPlanPhase(),cur.getEffectiveDate(),startDate).getBillingPeriod() : prevBillingPeriod;
priceListName=(userEV.getPriceList() != null) ? userEV.getPriceList() : prevPriceListName;
break;
}
final SubscriptionTransitionType transitionType=SubscriptionTransitionData.toSubscriptionTransitionType(cur.getType(),apiType);
final String planPhaseNameWithClosure=planPhaseName;
final PlanPhaseSpecifier spec=new PlanPhaseSpecifier(productName,category,billingPeriod,priceListName,phaseType);
result.add(new ExistingEvent(){
@Override public SubscriptionTransitionType getSubscriptionTransitionType(){
return transitionType;
}
@Override public DateTime getRequestedDate(){
return cur.getRequestedDate();
}
@Override public PlanPhaseSpecifier getPlanPhaseSpecifier(){
return spec;
}
@Override public UUID getEventId(){
return cur.getId();
}
@Override public DateTime getEffectiveDate(){
return cur.getEffectiveDate();
}
@Override public String getPlanPhaseName(){
return planPhaseNameWithClosure;
}
}
);
prevProductName=productName;
prevBillingPeriod=billingPeriod;
prevPriceListName=priceListName;
prevPhaseType=phaseType;
}
sortExistingEvent(result);
return result;
}
