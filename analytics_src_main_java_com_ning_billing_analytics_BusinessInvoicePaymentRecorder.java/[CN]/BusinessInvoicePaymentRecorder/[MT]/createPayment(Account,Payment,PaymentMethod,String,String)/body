{
  final PaymentMethodPlugin pluginDetail=paymentMethod.getPluginDetail();
  final String cardCountry=pluginDetail != null ? pluginDetail.getValueString("country") : null;
  final String cardType=pluginDetail != null ? pluginDetail.getValueString("cardType") : null;
  final String paymentMethodString=cardType != null ? "CreditCard" : "Other";
  invoicePaymentSqlDao.inTransaction(new Transaction<Void,BusinessInvoicePaymentSqlDao>(){
    @Override public Void inTransaction(    final BusinessInvoicePaymentSqlDao transactional,    final TransactionStatus status) throws Exception {
      transactional.deleteInvoicePayment(payment.getId().toString());
      final BusinessInvoicePayment invoicePayment=new BusinessInvoicePayment(account.getExternalKey(),payment.getAmount(),extPaymentRefId,cardCountry,cardType,clock.getUTCNow(),payment.getCurrency(),payment.getEffectiveDate(),payment.getInvoiceId(),message,payment.getId(),paymentMethodString,"Electronic",paymentMethod.getPluginName(),payment.getPaymentStatus().toString(),payment.getAmount(),clock.getUTCNow());
      transactional.createInvoicePayment(invoicePayment);
      final BusinessInvoiceSqlDao invoiceSqlDao=transactional.become(BusinessInvoiceSqlDao.class);
      invoiceRecorder.rebuildInvoicesForAccountInTransaction(account.getId(),invoiceSqlDao);
      final BusinessAccountSqlDao accountSqlDao=transactional.become(BusinessAccountSqlDao.class);
      accountRecorder.updateAccountInTransaction(account,accountSqlDao);
      log.info("Added payment {}",invoicePayment);
      return null;
    }
  }
);
}
