{
  Preconditions.checkState(!isBuilt);
switch (invoiceItem.getInvoiceItemType()) {
case RECURRING:
    final boolean result=root.addProposedItem(new ItemsNodeInterval(root,targetInvoiceId,new Item(invoiceItem,targetInvoiceId,ItemAction.ADD)));
  if (!result) {
    items.add(new Item(invoiceItem,targetInvoiceId,ItemAction.ADD));
  }
break;
case FIXED:
final InvoiceItem existingItem=Iterables.tryFind(existingFixedItems,new Predicate<InvoiceItem>(){
@Override public boolean apply(final InvoiceItem input){
  return input.matches(invoiceItem);
}
}
).orNull();
if (existingItem == null) {
remainingFixedItems.put(invoiceItem.getStartDate(),invoiceItem);
}
break;
default :
Preconditions.checkState(false,"Unexpected proposed item " + invoiceItem);
}
}
