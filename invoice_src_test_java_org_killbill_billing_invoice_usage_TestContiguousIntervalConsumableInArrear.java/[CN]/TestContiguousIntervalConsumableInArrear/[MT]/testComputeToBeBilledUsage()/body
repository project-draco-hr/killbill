{
  final LocalDate startDate=new LocalDate(2014,03,20);
  final LocalDate endDate=new LocalDate(2014,04,20);
  final DefaultTieredBlock block=createDefaultTieredBlock("unit",100,1000,BigDecimal.ONE);
  final DefaultTier tier=createDefaultTier(block);
  final DefaultUsage usage=createDefaultUsage(usageName,tier);
  final LocalDate targetDate=startDate.plusDays(1);
  final ContiguousIntervalConsumableInArrear intervalConsumableInArrear=createContiguousIntervalConsumableInArrear(usage,targetDate,false,createMockBillingEvent(targetDate.toDateTimeAtStartOfDay(DateTimeZone.UTC)));
  final List<InvoiceItem> existingUsage=Lists.newArrayList();
  final UsageInvoiceItem ii1=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,usage.getName(),startDate,endDate,BigDecimal.TEN,currency);
  existingUsage.add(ii1);
  final UsageInvoiceItem ii2=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,usage.getName(),startDate,endDate,BigDecimal.TEN,currency);
  existingUsage.add(ii2);
  final UsageInvoiceItem ii3=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,usage.getName(),startDate.minusDays(1),endDate,BigDecimal.TEN,currency);
  existingUsage.add(ii3);
  final UsageInvoiceItem ii4=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,"other",startDate,endDate,BigDecimal.TEN,currency);
  existingUsage.add(ii4);
  final FixedPriceInvoiceItem ii5=new FixedPriceInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,BigDecimal.TEN,currency);
  existingUsage.add(ii5);
  final BigDecimal result=intervalConsumableInArrear.computeBilledUsage(startDate,endDate,existingUsage);
  assertEquals(result,BigDecimal.TEN.add(BigDecimal.TEN));
}
