{
  final LocalDate startDate=new LocalDate(2014,03,20);
  final LocalDate firstBCDDate=new LocalDate(2014,04,15);
  final LocalDate endDate=new LocalDate(2014,05,15);
  final RolledUpUsage usage1=new DefaultRolledUpUsage(subscriptionId,"unit",startDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),firstBCDDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),new BigDecimal("130"));
  final RolledUpUsage usage2=new DefaultRolledUpUsage(subscriptionId,"unit",startDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),firstBCDDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),new BigDecimal("271"));
  final RolledUpUsage usage3=new DefaultRolledUpUsage(subscriptionId,"unit",firstBCDDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),endDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),new BigDecimal("199"));
  final List<RolledUpUsage> usages=ImmutableList.<RolledUpUsage>builder().add(usage1).add(usage2).add(usage3).build();
  this.mockUsageUserApi=createMockUsageUserApi(usages);
  final DefaultTieredBlock block=createDefaultTieredBlock("unit",100,10,BigDecimal.ONE);
  final DefaultTier tier=createDefaultTier(block);
  final DefaultUsage usage=createDefaultUsage(usageName,tier);
  final LocalDate targetDate=endDate;
  final BillingEvent event1=createMockBillingEvent(startDate.toDateTimeAtStartOfDay(DateTimeZone.UTC));
  final BillingEvent event2=createMockBillingEvent(endDate.toDateTimeAtStartOfDay(DateTimeZone.UTC));
  final ContiguousIntervalConsumableInArrear intervalConsumableInArrear=createContiguousIntervalConsumableInArrear(usage,targetDate,true,event1,event2);
  final List<InvoiceItem> invoiceItems=new ArrayList<InvoiceItem>();
  InvoiceItem ii1=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,usage.getName(),startDate,firstBCDDate,BigDecimal.ONE,currency);
  invoiceItems.add(ii1);
  InvoiceItem ii2=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,usage.getName(),firstBCDDate,endDate,BigDecimal.ONE,currency);
  invoiceItems.add(ii2);
  final List<InvoiceItem> result=intervalConsumableInArrear.computeMissingItems(invoiceItems);
  assertEquals(result.size(),2);
  assertTrue(result.get(0).getAmount().compareTo(new BigDecimal("4.0")) == 0);
  assertEquals(result.get(0).getCurrency(),Currency.BTC);
  assertEquals(result.get(0).getAccountId(),accountId);
  assertEquals(result.get(0).getBundleId(),bundleId);
  assertEquals(result.get(0).getSubscriptionId(),subscriptionId);
  assertEquals(result.get(0).getPlanName(),planName);
  assertEquals(result.get(0).getPhaseName(),phaseName);
  assertEquals(result.get(0).getUsageName(),usage.getName());
  assertTrue(result.get(0).getStartDate().compareTo(startDate) == 0);
  assertTrue(result.get(0).getEndDate().compareTo(firstBCDDate) == 0);
  assertTrue(result.get(1).getAmount().compareTo(new BigDecimal("1.0")) == 0);
  assertEquals(result.get(1).getCurrency(),Currency.BTC);
  assertEquals(result.get(1).getAccountId(),accountId);
  assertEquals(result.get(1).getBundleId(),bundleId);
  assertEquals(result.get(1).getSubscriptionId(),subscriptionId);
  assertEquals(result.get(1).getPlanName(),planName);
  assertEquals(result.get(1).getPhaseName(),phaseName);
  assertEquals(result.get(1).getUsageName(),usage.getName());
  assertTrue(result.get(1).getStartDate().compareTo(firstBCDDate) == 0);
  assertTrue(result.get(1).getEndDate().compareTo(endDate) == 0);
}
