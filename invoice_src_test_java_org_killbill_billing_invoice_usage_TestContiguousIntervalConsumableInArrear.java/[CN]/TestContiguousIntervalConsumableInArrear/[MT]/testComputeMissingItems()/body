{
  final LocalDate startDate=new LocalDate(2014,03,20);
  final LocalDate firstBCDDate=new LocalDate(2014,04,15);
  final LocalDate endDate=new LocalDate(2014,05,15);
  final List<RawUsage> rawUsages=new ArrayList<RawUsage>();
  rawUsages.add(new DefaultRawUsage(subscriptionId,new LocalDate(2014,03,20),"unit",130L));
  rawUsages.add(new DefaultRawUsage(subscriptionId,new LocalDate(2014,03,21),"unit",271L));
  rawUsages.add(new DefaultRawUsage(subscriptionId,new LocalDate(2014,04,15),"unit",199L));
  final DefaultTieredBlock block=createDefaultTieredBlock("unit",100,10,BigDecimal.ONE);
  final DefaultTier tier=createDefaultTier(block);
  final DefaultUsage usage=createDefaultUsage(usageName,BillingPeriod.MONTHLY,tier);
  final LocalDate targetDate=endDate;
  final BillingEvent event1=createMockBillingEvent(startDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),BillingPeriod.MONTHLY,Collections.<Usage>emptyList());
  final BillingEvent event2=createMockBillingEvent(endDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),BillingPeriod.MONTHLY,Collections.<Usage>emptyList());
  final ContiguousIntervalConsumableInArrear intervalConsumableInArrear=createContiguousIntervalConsumableInArrear(usage,rawUsages,targetDate,true,event1,event2);
  final List<InvoiceItem> invoiceItems=new ArrayList<InvoiceItem>();
  final InvoiceItem ii1=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,usage.getName(),startDate,firstBCDDate,BigDecimal.ONE,currency);
  invoiceItems.add(ii1);
  final InvoiceItem ii2=new UsageInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,usage.getName(),firstBCDDate,endDate,BigDecimal.ONE,currency);
  invoiceItems.add(ii2);
  final ConsumableInArrearItemsAndNextNotificationDate usageResult=intervalConsumableInArrear.computeMissingItemsAndNextNotificationDate(invoiceItems);
  final List<InvoiceItem> rawResults=usageResult.getInvoiceItems();
  assertEquals(rawResults.size(),4);
  final List<InvoiceItem> result=ImmutableList.copyOf(Iterables.filter(rawResults,new Predicate<InvoiceItem>(){
    @Override public boolean apply(    final InvoiceItem input){
      return input.getAmount().compareTo(BigDecimal.ZERO) > 0;
    }
  }
));
  assertEquals(result.get(0).getAmount().compareTo(new BigDecimal("4.0")),0,String.format("%s != 4.0",result.get(0).getAmount()));
  assertEquals(result.get(0).getCurrency(),Currency.BTC);
  assertEquals(result.get(0).getAccountId(),accountId);
  assertEquals(result.get(0).getBundleId(),bundleId);
  assertEquals(result.get(0).getSubscriptionId(),subscriptionId);
  assertEquals(result.get(0).getPlanName(),planName);
  assertEquals(result.get(0).getPhaseName(),phaseName);
  assertEquals(result.get(0).getUsageName(),usage.getName());
  assertTrue(result.get(0).getStartDate().compareTo(startDate) == 0);
  assertTrue(result.get(0).getEndDate().compareTo(firstBCDDate) == 0);
  assertEquals(result.get(1).getAmount().compareTo(new BigDecimal("1.0")),0,String.format("%s != 1.0",result.get(0).getAmount()));
  assertEquals(result.get(1).getCurrency(),Currency.BTC);
  assertEquals(result.get(1).getAccountId(),accountId);
  assertEquals(result.get(1).getBundleId(),bundleId);
  assertEquals(result.get(1).getSubscriptionId(),subscriptionId);
  assertEquals(result.get(1).getPlanName(),planName);
  assertEquals(result.get(1).getPhaseName(),phaseName);
  assertEquals(result.get(1).getUsageName(),usage.getName());
  assertTrue(result.get(1).getStartDate().compareTo(firstBCDDate) == 0);
  assertTrue(result.get(1).getEndDate().compareTo(endDate) == 0);
}
