{
  loadSystemPropertiesFromClasspath("/resource.properties");
  final ClockMock clock=new ClockMock();
  bind(Clock.class).toInstance(clock);
  bind(ClockMock.class).toInstance(clock);
  bind(CallContextFactory.class).to(DefaultCallContextFactory.class).asEagerSingleton();
  install(new TagStoreModule());
  install(new CustomFieldModule());
  final DBTestingHelper helper=KillbillTestSuiteWithEmbeddedDB.getDBTestingHelper();
  if (helper.isUsingLocalInstance()) {
    bind(IDBI.class).toProvider(DBIProvider.class).asEagerSingleton();
    final DbiConfig config=new ConfigurationObjectFactory(System.getProperties()).build(DbiConfig.class);
    bind(DbiConfig.class).toInstance(config);
  }
 else {
    final IDBI dbi=helper.getDBI();
    bind(IDBI.class).toInstance(dbi);
  }
  final InternalCallContextFactory internalCallContextFactory=new InternalCallContextFactory(helper.getDBI(),clock);
  bind(InternalCallContextFactory.class).toInstance(internalCallContextFactory);
  bind(InvoiceFormatterFactory.class).to(DefaultInvoiceFormatterFactory.class).asEagerSingleton();
  bind(AccountInternalApi.class).toInstance(Mockito.mock(AccountInternalApi.class));
  bind(EntitlementInternalApi.class).toInstance(Mockito.mock(EntitlementInternalApi.class));
  install(new EmailModule());
  install(new TestGlobalLockerModule(helper));
  install(new NotificationQueueModule());
  install(new CatalogModule());
  install(new BusModule());
  installInvoiceModule();
  install(new MockJunctionModule());
  install(new TemplateModule());
}
