{
  final AccountData accountData=getAccountData(1);
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  add_AUTO_PAY_OFF_Tag(account.getId(),ObjectType.ACCOUNT);
  clock.setDay(new LocalDate(2012,4,1));
  busHandler.pushExpectedEvents(NextEvent.INVOICE_ADJUSTMENT);
  final InvoiceItem item1=invoiceUserApi.insertExternalCharge(account.getId(),BigDecimal.TEN,"Initial external charge",clock.getToday(DateTimeZone.UTC),Currency.USD,callContext);
  assertListenerStatus();
  busHandler.pushExpectedEvents(NextEvent.PAYMENT);
  final Payment payment1=paymentApi.createPayment(account,item1.getInvoiceId(),new BigDecimal("4.00"),callContext);
  assertListenerStatus();
  Invoice invoice1=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  assertTrue(invoice1.getBalance().compareTo(new BigDecimal("6.00")) == 0);
  assertTrue(invoice1.getPaidAmount().compareTo(new BigDecimal("4.00")) == 0);
  assertTrue(invoice1.getChargedAmount().compareTo(BigDecimal.TEN) == 0);
  BigDecimal accountBalance=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance.compareTo(new BigDecimal("6.00")) == 0);
  busHandler.pushExpectedEvents(NextEvent.PAYMENT);
  final Payment payment2=paymentApi.createPayment(account,item1.getInvoiceId(),new BigDecimal("6.00"),callContext);
  assertListenerStatus();
  invoice1=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  assertTrue(invoice1.getBalance().compareTo(BigDecimal.ZERO) == 0);
  assertTrue(invoice1.getPaidAmount().compareTo(BigDecimal.TEN) == 0);
  assertTrue(invoice1.getChargedAmount().compareTo(BigDecimal.TEN) == 0);
  accountBalance=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance.compareTo(BigDecimal.ZERO) == 0);
  paymentApi.createRefund(account,payment2.getId(),new BigDecimal("5.00"),callContext);
  invoice1=invoiceUserApi.getInvoice(item1.getInvoiceId(),callContext);
  assertTrue(invoice1.getBalance().compareTo(new BigDecimal("5.00")) == 0);
  accountBalance=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance.compareTo(new BigDecimal("5.00")) == 0);
}
