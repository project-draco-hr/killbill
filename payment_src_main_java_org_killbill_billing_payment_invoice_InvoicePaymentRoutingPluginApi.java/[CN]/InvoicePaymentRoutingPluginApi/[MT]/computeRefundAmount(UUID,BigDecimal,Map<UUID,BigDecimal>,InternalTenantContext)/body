{
  if (invoiceItemIdsWithAmounts.size() == 0) {
    if (specifiedRefundAmount == null || specifiedRefundAmount.compareTo(BigDecimal.ZERO) <= 0) {
      throw new PaymentRoutingApiException("You need to specify positive a refund amount");
    }
    return specifiedRefundAmount;
  }
  final List<InvoiceItem> items;
  try {
    items=invoiceApi.getInvoiceForPaymentId(paymentId,context).getInvoiceItems();
    BigDecimal amountFromItems=BigDecimal.ZERO;
    for (    final UUID itemId : invoiceItemIdsWithAmounts.keySet()) {
      final BigDecimal specifiedItemAmount=invoiceItemIdsWithAmounts.get(itemId);
      final BigDecimal itemAmount=getAmountFromItem(items,itemId);
      if (specifiedItemAmount != null && (specifiedItemAmount.compareTo(BigDecimal.ZERO) <= 0 || specifiedItemAmount.compareTo(itemAmount) > 0)) {
        throw new PaymentRoutingApiException("You need to specify valid invoice item amount ");
      }
      amountFromItems=amountFromItems.add(Objects.firstNonNull(specifiedItemAmount,itemAmount));
    }
    return amountFromItems;
  }
 catch (  InvoiceApiException e) {
    throw new PaymentRoutingApiException(e);
  }
}
