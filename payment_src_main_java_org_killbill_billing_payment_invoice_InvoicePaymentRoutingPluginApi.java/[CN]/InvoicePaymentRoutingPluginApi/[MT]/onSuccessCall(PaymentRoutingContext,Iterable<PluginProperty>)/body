{
  final TransactionType transactionType=paymentRoutingContext.getTransactionType();
  Preconditions.checkArgument(transactionType == TransactionType.PURCHASE || transactionType == TransactionType.REFUND || transactionType == TransactionType.CHARGEBACK);
  final InternalCallContext internalContext=internalCallContextFactory.createInternalCallContext(paymentRoutingContext.getAccountId(),paymentRoutingContext);
  try {
    final InvoicePayment existingInvoicePayment;
switch (transactionType) {
case PURCHASE:
      final UUID invoiceId=getInvoiceId(paymentRoutingContext);
    existingInvoicePayment=invoiceApi.getInvoicePaymentForAttempt(paymentRoutingContext.getPaymentId(),internalContext);
  if (existingInvoicePayment != null) {
    logger.info("onSuccessCall was already completed for payment purchase :" + paymentRoutingContext.getPaymentId());
  }
 else {
    invoiceApi.notifyOfPayment(invoiceId,paymentRoutingContext.getAmount(),paymentRoutingContext.getCurrency(),paymentRoutingContext.getProcessedCurrency(),paymentRoutingContext.getPaymentId(),paymentRoutingContext.getCreatedDate(),internalContext);
  }
break;
case REFUND:
existingInvoicePayment=invoiceApi.getInvoicePaymentForRefund(paymentRoutingContext.getPaymentId(),internalContext);
if (existingInvoicePayment != null) {
logger.info("onSuccessCall was already completed for payment refund :" + paymentRoutingContext.getPaymentId());
}
 else {
final Map<UUID,BigDecimal> idWithAmount=extractIdsWithAmountFromProperties(paymentRoutingContext.getPluginProperties());
final PluginProperty prop=getPluginProperty(paymentRoutingContext.getPluginProperties(),PROP_IPCD_REFUND_WITH_ADJUSTMENTS);
final boolean isAdjusted=prop != null ? Boolean.valueOf((String)prop.getValue()) : false;
invoiceApi.createRefund(paymentRoutingContext.getPaymentId(),paymentRoutingContext.getAmount(),isAdjusted,idWithAmount,paymentRoutingContext.getTransactionExternalKey(),internalContext);
}
break;
case CHARGEBACK:
existingInvoicePayment=invoiceApi.getInvoicePaymentForChargeback(paymentRoutingContext.getPaymentId(),internalContext);
if (existingInvoicePayment != null) {
logger.info("onSuccessCall was already completed for payment chargeback :" + paymentRoutingContext.getPaymentId());
}
 else {
invoiceApi.createChargeback(paymentRoutingContext.getPaymentId(),paymentRoutingContext.getProcessedAmount(),paymentRoutingContext.getProcessedCurrency(),internalContext);
}
break;
default :
throw new IllegalStateException("Unexpected transactionType " + transactionType);
}
}
 catch (final InvoiceApiException e) {
logger.error("InvoicePaymentRoutingPluginApi onSuccessCall failed for attemptId = " + paymentRoutingContext.getAttemptPaymentId() + ", transactionType  = "+ transactionType,e);
}
return null;
}
