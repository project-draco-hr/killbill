{
  final Map<UUID,BigDecimal> idWithAmount=extractIdsWithAmountFromProperties(paymentRoutingPluginContext.getPluginProperties());
  if ((paymentRoutingPluginContext.getAmount() == null || paymentRoutingPluginContext.getAmount().compareTo(BigDecimal.ZERO) == 0) && idWithAmount.size() == 0) {
    throw new PaymentRoutingApiException("Refund for payment, key = " + paymentRoutingPluginContext.getPaymentExternalKey() + " aborted: requested refund amount is = "+ paymentRoutingPluginContext.getAmount());
  }
  final PaymentModelDao payment=paymentDao.getPayment(paymentRoutingPluginContext.getPaymentId(),internalContext);
  if (payment == null) {
    throw new PaymentRoutingApiException();
  }
  final BigDecimal amountToBeRefunded=computeRefundAmount(payment.getId(),paymentRoutingPluginContext.getAmount(),idWithAmount,internalContext);
  final boolean isAborted=amountToBeRefunded.compareTo(BigDecimal.ZERO) == 0;
  if (paymentRoutingPluginContext.isApiPayment() && isAborted) {
    throw new PaymentRoutingApiException("Refund for payment " + payment.getId() + " aborted : invoice item sum amount is "+ amountToBeRefunded+ ", requested refund amount is = "+ paymentRoutingPluginContext.getAmount());
  }
 else {
    return new DefaultPriorPaymentRoutingResult(isAborted,amountToBeRefunded);
  }
}
