{
  boolean hasAccountRecordIdColumn=false;
  boolean firstColumn=true;
  final StringBuilder queryBuilder=new StringBuilder("select ");
  for (  final ColumnInfo column : columnsForTable) {
    if (!firstColumn) {
      queryBuilder.append(", ");
    }
 else {
      firstColumn=false;
    }
    queryBuilder.append(column.getColumnName());
    if (column.getColumnName().equals("account_record_id")) {
      hasAccountRecordIdColumn=true;
    }
  }
  if (!hasAccountRecordIdColumn) {
    return;
  }
  final String tableName=columnsForTable.get(0).getTableName();
  queryBuilder.append(" from ").append(tableName).append(" where account_record_id = :accountRecordId and tenant_record_id = :tenantRecordId");
  out.newTable(tableName,columnsForTable);
  dbi.withHandle(new HandleCallback<Void>(){
    @Override public Void withHandle(    final Handle handle) throws Exception {
      final ResultIterator<Map<String,Object>> iterator=handle.createQuery(queryBuilder.toString()).bind("accountRecordId",context.getAccountRecordId()).bind("tenantRecordId",context.getTenantRecordId()).iterator();
      try {
        while (iterator.hasNext()) {
          final Map<String,Object> row=iterator.next();
          out.write(row);
        }
      }
  finally {
        iterator.close();
      }
      return null;
    }
  }
);
}
