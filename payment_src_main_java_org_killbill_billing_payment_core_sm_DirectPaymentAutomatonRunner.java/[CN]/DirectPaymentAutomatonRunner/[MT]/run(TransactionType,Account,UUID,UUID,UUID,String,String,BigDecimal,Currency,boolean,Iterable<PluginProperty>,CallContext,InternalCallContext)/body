{
  final DateTime utcNow=clock.getUTCNow();
  final DirectPaymentStateContext directPaymentStateContext=new DirectPaymentStateContext(directPaymentId,attemptId,directPaymentExternalKey,directPaymentTransactionExternalKey,transactionType,account,paymentMethodId,amount,currency,shouldLockAccount,properties,internalCallContext,callContext);
  final DirectPaymentAutomatonDAOHelper daoHelper=new DirectPaymentAutomatonDAOHelper(directPaymentStateContext,utcNow,paymentDao,pluginRegistry,internalCallContext,paymentSMHelper);
  final UUID effectivePaymentMethodId;
  final String currentStateMachineName;
  final String currentStateName;
  if (directPaymentId != null) {
    final PaymentModelDao paymentModelDao=daoHelper.getDirectPayment();
    effectivePaymentMethodId=paymentModelDao.getPaymentMethodId();
    currentStateName=paymentModelDao.getLastSuccessStateName() != null ? paymentModelDao.getLastSuccessStateName() : paymentSMHelper.getInitStateNameForTransaction(transactionType);
    Preconditions.checkState(currentStateName != null,"State name cannot be null for direct payment " + directPaymentId);
    Preconditions.checkState(paymentMethodId == null || effectivePaymentMethodId.equals(paymentMethodId),"Specified payment method id " + paymentMethodId + " doesn't match the one on the payment "+ effectivePaymentMethodId);
  }
 else {
    effectivePaymentMethodId=paymentMethodId != null ? paymentMethodId : daoHelper.getDefaultPaymentMethodId();
    currentStateName=paymentSMHelper.getInitStateNameForTransaction(transactionType);
  }
  directPaymentStateContext.setPaymentMethodId(effectivePaymentMethodId);
  final String operationStateMachineName;
  final String operationName;
  final OperationCallback operationCallback;
  final LeavingStateCallback leavingStateCallback;
  final EnteringStateCallback enteringStateCallback;
switch (transactionType) {
case PURCHASE:
    operationCallback=new PurchaseOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
  leavingStateCallback=new PurchaseInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new PurchaseCompleted(daoHelper,directPaymentStateContext);
break;
case AUTHORIZE:
operationCallback=new AuthorizeOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new AuthorizeInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new AuthorizeCompleted(daoHelper,directPaymentStateContext);
break;
case CAPTURE:
operationCallback=new CaptureOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new CaptureInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new CaptureCompleted(daoHelper,directPaymentStateContext);
break;
case VOID:
operationCallback=new VoidOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new VoidInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new VoidCompleted(daoHelper,directPaymentStateContext);
break;
case REFUND:
operationCallback=new RefundOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new RefundInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new RefundCompleted(daoHelper,directPaymentStateContext);
break;
case CREDIT:
operationCallback=new CreditOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new CreditInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new CreditCompleted(daoHelper,directPaymentStateContext);
break;
case CHARGEBACK:
operationCallback=new ChargebackOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new ChargebackInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new ChargebackCompleted(daoHelper,directPaymentStateContext);
break;
default :
throw new IllegalStateException("Unsupported transaction type " + transactionType);
}
runStateMachineOperation(currentStateName,transactionType,leavingStateCallback,operationCallback,enteringStateCallback);
return directPaymentStateContext.getDirectPaymentId();
}
