{
  final DateTime utcNow=clock.getUTCNow();
  final DirectPaymentStateContext directPaymentStateContext=new DirectPaymentStateContext(directPaymentId,directPaymentExternalKey,directPaymentTransactionExternalKey,transactionType,account,paymentMethodId,amount,currency,shouldLockAccount,properties,internalCallContext,callContext);
  final DirectPaymentAutomatonDAOHelper daoHelper=new DirectPaymentAutomatonDAOHelper(directPaymentStateContext,utcNow,paymentDao,pluginRegistry,internalCallContext);
  final UUID nonNullPaymentMethodId;
  final String currentStateMachineName;
  final String currentStateName;
  if (directPaymentId != null) {
    final DirectPaymentModelDao directPaymentModelDao=daoHelper.getDirectPayment();
    nonNullPaymentMethodId=directPaymentModelDao.getPaymentMethodId();
    currentStateName=directPaymentModelDao.getCurrentStateName();
    currentStateMachineName=getStateMachineName(currentStateName);
    Preconditions.checkState(currentStateMachineName != null,"State machine name cannot be null for direct payment " + directPaymentId);
    Preconditions.checkState(currentStateName != null,"State name cannot be null for direct payment " + directPaymentId);
    Preconditions.checkState(paymentMethodId == null || nonNullPaymentMethodId.equals(paymentMethodId),"Specified payment method id " + paymentMethodId + " doesn't match the one on the payment "+ nonNullPaymentMethodId);
  }
 else {
    nonNullPaymentMethodId=Objects.firstNonNull(paymentMethodId,daoHelper.getDefaultPaymentMethodId());
switch (transactionType) {
case AUTHORIZE:
      currentStateMachineName="AUTHORIZE";
    currentStateName="AUTH_INIT";
  break;
case CREDIT:
currentStateMachineName="CREDIT";
currentStateName="CREDIT_INIT";
break;
case PURCHASE:
currentStateMachineName="PURCHASE";
currentStateName="PURCHASE_INIT";
break;
default :
throw new IllegalStateException("Unsupported transaction type " + transactionType + " for null direct payment id");
}
}
directPaymentStateContext.setPaymentMethodId(nonNullPaymentMethodId);
final String operationStateMachineName;
final String operationName;
final OperationCallback operationCallback;
final LeavingStateCallback leavingStateCallback;
final EnteringStateCallback enteringStateCallback;
switch (transactionType) {
case PURCHASE:
operationStateMachineName="PURCHASE";
operationName="OP_PURCHASE";
operationCallback=new PurchaseOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new PurchaseInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new PurchaseCompleted(daoHelper,directPaymentStateContext);
break;
case AUTHORIZE:
operationStateMachineName="AUTHORIZE";
operationName="OP_AUTHORIZE";
operationCallback=new AuthorizeOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new AuthorizeInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new AuthorizeCompleted(daoHelper,directPaymentStateContext);
break;
case CAPTURE:
operationStateMachineName="CAPTURE";
operationName="OP_CAPTURE";
operationCallback=new CaptureOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new CaptureInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new CaptureCompleted(daoHelper,directPaymentStateContext);
break;
case VOID:
operationStateMachineName="VOID";
operationName="OP_VOID";
operationCallback=new VoidOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new VoidInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new VoidCompleted(daoHelper,directPaymentStateContext);
break;
case REFUND:
operationStateMachineName="REFUND";
operationName="OP_REFUND";
operationCallback=new RefundOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new RefundInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new RefundCompleted(daoHelper,directPaymentStateContext);
break;
case CREDIT:
operationStateMachineName="CREDIT";
operationName="OP_CREDIT";
operationCallback=new CreditOperation(daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
leavingStateCallback=new CreditInitiated(daoHelper,directPaymentStateContext);
enteringStateCallback=new CreditCompleted(daoHelper,directPaymentStateContext);
break;
default :
throw new IllegalStateException("Unsupported transaction type " + transactionType);
}
runStateMachineOperation(currentStateMachineName,currentStateName,operationStateMachineName,operationName,leavingStateCallback,operationCallback,enteringStateCallback);
return directPaymentStateContext.getDirectPaymentId();
}
