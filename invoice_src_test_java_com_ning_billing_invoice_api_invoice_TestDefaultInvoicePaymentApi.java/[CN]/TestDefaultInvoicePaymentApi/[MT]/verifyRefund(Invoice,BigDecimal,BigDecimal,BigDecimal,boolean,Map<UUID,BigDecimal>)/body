{
  final InvoicePayment payment=createAndPersistPayment(invoiceInternalApi,clock,invoice.getId(),invoiceAmount,CURRENCY,internalCallContext);
  final BigDecimal initialInvoiceBalance=invoicePaymentApi.getInvoice(invoice.getId(),callContext).getBalance();
  Assert.assertEquals(initialInvoiceBalance.compareTo(BigDecimal.ZERO),0);
  final InvoicePayment refund=invoiceInternalApi.createRefund(payment.getPaymentId(),refundAmount,adjusted,invoiceItemIdsWithAmounts,UUID.randomUUID(),internalCallContext);
  Assert.assertEquals(refund.getAmount().compareTo(refundAmount.negate()),0);
  Assert.assertEquals(refund.getCurrency(),CURRENCY);
  Assert.assertEquals(refund.getInvoiceId(),invoice.getId());
  Assert.assertEquals(refund.getPaymentId(),payment.getPaymentId());
  Assert.assertEquals(refund.getType(),InvoicePaymentType.REFUND);
  final BigDecimal newInvoiceBalance=invoicePaymentApi.getInvoice(invoice.getId(),callContext).getBalance().setScale(2,RoundingMode.HALF_UP);
  Assert.assertEquals(newInvoiceBalance.compareTo(finalInvoiceAmount.setScale(2,RoundingMode.HALF_UP)),0);
}
