{
  final DateTime start=clock.getUTCNow();
  final List<DateTime> visits=generatePageViews(nbVisits,start);
  final DateTime end=dateTimeOrdering.max(visits);
  final List<Map<String,Object>> meteringAggregateUsage=getMeteringAggregateUsage(source,category,start,end);
  final List<DateTime> visitsFound=new ArrayList<DateTime>();
  for (  final Map<String,Object> oneUsage : meteringAggregateUsage) {
    Assert.assertEquals(oneUsage.get("sourceName"),source);
    Assert.assertEquals(oneUsage.get("eventCategory"),category);
    Assert.assertEquals(oneUsage.get("metric"),"__AGGREGATE__");
    final ImmutableList<String> samples=ImmutableList.<String>copyOf(Splitter.on(",").split((String)oneUsage.get("samples")));
    for (int i=0; i < samples.size(); i++) {
      visitsFound.add(new DateTime(Long.valueOf(samples.get(i)) * 1000,DateTimeZone.UTC));
      i++;
    }
  }
  Assert.assertEquals(dateTimeOrdering.immutableSortedCopy(visitsFound),dateTimeOrdering.immutableSortedCopy(visits));
}
