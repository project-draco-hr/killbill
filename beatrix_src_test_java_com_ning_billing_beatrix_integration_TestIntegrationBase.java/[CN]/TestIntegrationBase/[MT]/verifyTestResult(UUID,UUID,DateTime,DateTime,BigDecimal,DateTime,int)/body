{
  final SubscriptionData subscription=subscriptionDataFromSubscription(entitlementUserApi.getSubscriptionFromId(subscriptionId));
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(accountId);
  final List<InvoiceItem> invoiceItems=new ArrayList<InvoiceItem>();
  for (  final Invoice invoice : invoices) {
    invoiceItems.addAll(invoice.getInvoiceItems());
  }
  assertEquals(invoiceItems.size(),totalInvoiceItemCount);
  boolean wasFound=false;
  final DateTime roundedStartDate=InvoiceDateUtils.roundDateTimeToDate(startDate,testTimeZone);
  final DateTime roundedEndDate=InvoiceDateUtils.roundDateTimeToDate(endDate,testTimeZone);
  for (  final InvoiceItem item : invoiceItems) {
    if (item.getStartDate().compareTo(roundedStartDate) == 0) {
      if (item.getEndDate().compareTo(roundedEndDate) == 0) {
        if (item.getAmount().compareTo(amount) == 0) {
          wasFound=true;
          break;
        }
      }
    }
  }
  if (!wasFound) {
    fail();
  }
  final DateTime ctd=subscription.getChargedThroughDate();
  assertNotNull(ctd);
  log.info("Checking CTD: " + ctd.toString() + "; clock is "+ clock.getUTCNow().toString());
  assertTrue(clock.getUTCNow().isBefore(ctd));
  assertTrue(ctd.compareTo(InvoiceDateUtils.roundDateTimeToDate(chargeThroughDate,testTimeZone)) == 0);
}
