{
  logoutTenant();
  try {
    killBillClient.createAccount(getAccount(),createdBy,reason,comment);
    Assert.fail();
  }
 catch (  final KillBillClientException e) {
    Assert.assertEquals(e.getResponse().getStatusCode(),Status.UNAUTHORIZED.getStatusCode());
  }
  final String apiKeyTenant1="pierre";
  final String apiSecretTenant1="pierreIsFr3nch";
  loginTenant(apiKeyTenant1,apiSecretTenant1);
  final Tenant tenant1=new Tenant();
  tenant1.setApiKey(apiKeyTenant1);
  tenant1.setApiSecret(apiSecretTenant1);
  killBillClient.createTenant(tenant1,createdBy,reason,comment);
  final Account account1=createAccount();
  Assert.assertEquals(killBillClient.getAccount(account1.getExternalKey()),account1);
  logoutTenant();
  final String apiKeyTenant2="stephane";
  final String apiSecretTenant2="stephane1sAlsoFr3nch";
  loginTenant(apiKeyTenant2,apiSecretTenant2);
  final Tenant tenant2=new Tenant();
  tenant2.setApiKey(apiKeyTenant2);
  tenant2.setApiSecret(apiSecretTenant2);
  killBillClient.createTenant(tenant2,createdBy,reason,comment);
  final Account account2=createAccount();
  Assert.assertEquals(killBillClient.getAccount(account2.getExternalKey()),account2);
  Assert.assertNull(killBillClient.getAccount(account1.getExternalKey()));
  loginTenant(apiKeyTenant1,apiSecretTenant1);
  Assert.assertNull(killBillClient.getAccount(account2.getExternalKey()));
}
