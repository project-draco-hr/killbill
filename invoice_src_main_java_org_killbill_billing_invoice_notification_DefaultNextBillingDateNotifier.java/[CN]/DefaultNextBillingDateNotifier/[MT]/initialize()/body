{
  final NotificationQueueHandler notificationQueueHandler=new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationEvent notificationKey,    final DateTime eventDate,    final UUID userToken,    final Long accountRecordId,    final Long tenantRecordId){
      if (!(notificationKey instanceof NextBillingDateNotificationKey)) {
        log.error("Invoice service received an unexpected event className='{}",notificationKey.getClass());
        return;
      }
      final NextBillingDateNotificationKey key=(NextBillingDateNotificationKey)notificationKey;
      final DateTime targetDate=key.getTargetDate() != null ? key.getTargetDate() : eventDate;
      try {
        final SubscriptionBase subscription=subscriptionApi.getSubscriptionFromId(key.getUuidKey(),callContextFactory.createInternalTenantContext(tenantRecordId,accountRecordId));
        if (subscription == null) {
          log.warn("Unable to retrieve subscriptionId='{}' for event {}",key.getUuidKey(),key);
          return;
        }
        if (key.isDryRunForInvoiceNotification() != null && key.isDryRunForInvoiceNotification()) {
          processEventForInvoiceNotification(key.getUuidKey(),targetDate,userToken,accountRecordId,tenantRecordId);
        }
 else {
          processEventForInvoiceGeneration(key.getUuidKey(),targetDate,userToken,accountRecordId,tenantRecordId);
        }
      }
 catch (      SubscriptionBaseApiException e) {
        log.error(String.format("Error retrieving subscriptionId='%s'",key.getUuidKey()),e);
      }
    }
  }
;
  nextBillingQueue=notificationQueueService.createNotificationQueue(DefaultInvoiceService.INVOICE_SERVICE_NAME,NEXT_BILLING_DATE_NOTIFIER_QUEUE,notificationQueueHandler);
}
