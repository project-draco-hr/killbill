{
  final UUID invoiceId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final String accountKey=UUID.randomUUID().toString();
  final BusinessInvoice invoice=createInvoice(accountId,invoiceId,accountKey);
  Assert.assertNull(invoiceSqlDao.getInvoice(invoice.getInvoiceId().toString(),internalCallContext));
  Assert.assertEquals(invoiceSqlDao.deleteInvoice(invoice.getInvoiceId().toString(),internalCallContext),0);
  Assert.assertEquals(invoiceSqlDao.createInvoice(invoice,internalCallContext),1);
  Assert.assertEquals(invoiceSqlDao.getInvoice(invoice.getInvoiceId().toString(),internalCallContext),invoice);
  Assert.assertEquals(invoiceSqlDao.getInvoicesForAccount(invoice.getAccountId().toString(),internalCallContext).size(),1);
  Assert.assertEquals(invoiceSqlDao.getInvoicesForAccount(invoice.getAccountId().toString(),internalCallContext).get(0),invoice);
  Assert.assertEquals(invoiceSqlDao.deleteInvoice(invoice.getInvoiceId().toString(),internalCallContext),1);
  Assert.assertNull(invoiceSqlDao.getInvoice(invoice.getInvoiceId().toString(),internalCallContext));
  Assert.assertEquals(invoiceSqlDao.getInvoicesForAccount(invoice.getAccountId().toString(),internalCallContext).size(),0);
}
