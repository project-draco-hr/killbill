{
  final String xml="<condition>" + "	<controlTag>OVERDUE_ENFORCEMENT_OFF</controlTag>" + "</condition>";
  final InputStream is=new ByteArrayInputStream(xml.getBytes());
  final MockCondition c=XMLLoader.getObjectFromStreamNoValidation(is,MockCondition.class);
  final UUID unpaidInvoiceId=UUID.randomUUID();
  final LocalDate now=new LocalDate();
  final ObjectType objectType=ObjectType.BUNDLE;
  final UUID objectId=new UUID(0L,1L);
  final BillingState state0=new BillingState(objectId,0,BigDecimal.ZERO,null,DateTimeZone.UTC,unpaidInvoiceId,PaymentResponse.LOST_OR_STOLEN_CARD,new Tag[]{new DefaultControlTag(ControlTagType.AUTO_INVOICING_OFF,objectType,objectId,clock.getUTCNow()),new DescriptiveTag(UUID.randomUUID(),objectType,objectId,clock.getUTCNow())});
  final BillingState state1=new BillingState(objectId,1,new BigDecimal("100.00"),now.minusDays(10),DateTimeZone.UTC,unpaidInvoiceId,PaymentResponse.INSUFFICIENT_FUNDS,new Tag[]{new DefaultControlTag(ControlTagType.OVERDUE_ENFORCEMENT_OFF,objectType,objectId,clock.getUTCNow())});
  final BillingState state2=new BillingState(objectId,1,new BigDecimal("200.00"),now.minusDays(20),DateTimeZone.UTC,unpaidInvoiceId,PaymentResponse.DO_NOT_HONOR,new Tag[]{new DefaultControlTag(ControlTagType.OVERDUE_ENFORCEMENT_OFF,objectType,objectId,clock.getUTCNow()),new DefaultControlTag(ControlTagType.AUTO_INVOICING_OFF,objectType,objectId,clock.getUTCNow()),new DescriptiveTag(UUID.randomUUID(),objectType,objectId,clock.getUTCNow())});
  Assert.assertTrue(!c.evaluate(state0,now));
  Assert.assertTrue(c.evaluate(state1,now));
  Assert.assertTrue(c.evaluate(state2,now));
}
