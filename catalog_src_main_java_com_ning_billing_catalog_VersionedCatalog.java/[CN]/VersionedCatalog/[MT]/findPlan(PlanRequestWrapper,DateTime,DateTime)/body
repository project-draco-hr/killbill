{
  List<StandaloneCatalog> catalogs=versionsBeforeDate(requestedDate.toDate());
  if (catalogs.size() == 0) {
    throw new CatalogApiException(ErrorCode.CAT_NO_CATALOG_FOR_GIVEN_DATE,requestedDate.toDate().toString());
  }
  for (int i=catalogs.size() - 1; i >= 0; i--) {
    StandaloneCatalog c=catalogs.get(i);
    Plan plan=null;
    try {
      plan=wrapper.findPlan(c);
    }
 catch (    CatalogApiException e) {
      if (e.getCode() != ErrorCode.CAT_NO_SUCH_PLAN.getCode()) {
        throw e;
      }
 else {
        break;
      }
    }
    DateTime catalogEffectiveDate=new DateTime(c.getEffectiveDate());
    if (subscriptionStartDate.isAfter(catalogEffectiveDate)) {
      return plan;
    }
 else {
      if (plan.getEffectiveDateForExistingSubscriptons() != null) {
        DateTime existingSubscriptionDate=new DateTime(plan.getEffectiveDateForExistingSubscriptons());
        if (requestedDate.isAfter(existingSubscriptionDate)) {
          return plan;
        }
      }
    }
  }
  throw new CatalogApiException(ErrorCode.CAT_NO_CATALOG_FOR_GIVEN_DATE,requestedDate.toDate().toString());
}
