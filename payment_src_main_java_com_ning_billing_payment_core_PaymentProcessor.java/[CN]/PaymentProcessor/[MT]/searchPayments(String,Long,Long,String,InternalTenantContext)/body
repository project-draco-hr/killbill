{
  final PaymentPluginApi pluginApi=getPaymentPluginApi(pluginName);
  final Pagination<PaymentInfoPlugin> payments;
  try {
    payments=pluginApi.searchPayments(searchKey,offset,limit,buildTenantContext(internalTenantContext));
  }
 catch (  final PaymentPluginApiException e) {
    throw new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_SEARCH_PAYMENTS,pluginName,searchKey);
  }
  return new DefaultPagination<Payment>(payments,limit,Iterators.<Payment>filter(Iterators.<PaymentInfoPlugin,Payment>transform(payments.iterator(),new Function<PaymentInfoPlugin,Payment>(){
    @Override public Payment apply(    final PaymentInfoPlugin paymentInfoPlugin){
      if (paymentInfoPlugin.getKbPaymentId() == null) {
        log.debug("Plugin {} returned a payment without a kbPaymentId for searchKey {}",pluginName,searchKey);
        return null;
      }
      final PaymentModelDao model=paymentDao.getPayment(paymentInfoPlugin.getKbPaymentId(),internalTenantContext);
      if (model == null) {
        log.warn("Unable to find payment id " + paymentInfoPlugin.getKbPaymentId() + " present in plugin "+ pluginName);
        return null;
      }
      return fromPaymentModelDao(model,paymentInfoPlugin,internalTenantContext);
    }
  }
),Predicates.<Payment>notNull()));
}
