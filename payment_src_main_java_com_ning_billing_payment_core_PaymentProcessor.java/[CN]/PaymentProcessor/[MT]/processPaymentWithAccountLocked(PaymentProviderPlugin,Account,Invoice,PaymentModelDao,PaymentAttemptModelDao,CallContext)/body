{
  BusEvent event=null;
  List<PaymentAttemptModelDao> allAttempts=null;
  PaymentAttemptModelDao lastAttempt=null;
  try {
    allAttempts=paymentDao.getAttemptsForPayment(payment.getId());
    lastAttempt=allAttempts.get(allAttempts.size() - 1);
    PaymentInfoPlugin paymentPluginInfo=plugin.processInvoice(account,invoice);
    PaymentStatus paymentStatus=paymentPluginInfo.getStatus() == PaymentPluginStatus.ERROR ? PaymentStatus.ERROR : PaymentStatus.SUCCESS;
    paymentDao.updateStatusForPaymentWithAttempt(payment.getId(),paymentStatus,paymentPluginInfo.getError(),attemptInput.getId(),context);
    invoicePaymentApi.notifyOfPaymentAttempt(invoice.getId(),paymentStatus == PaymentStatus.SUCCESS ? payment.getAmount() : null,paymentStatus == PaymentStatus.SUCCESS ? payment.getCurrency() : null,lastAttempt.getId(),lastAttempt.getEffectiveDate(),context);
    event=new DefaultPaymentInfoEvent(account.getId(),invoice.getId(),payment.getId(),payment.getAmount(),payment.getPaymentNumber(),paymentStatus,context.getUserToken(),payment.getEffectiveDate());
  }
 catch (  PaymentPluginApiException e) {
    log.info(String.format("Could not process payment for account %s, invoice %s, error = %s",account.getId(),invoice.getId(),e.getMessage()));
    scheduleRetry(payment.getId(),lastAttempt.getEffectiveDate(),allAttempts.size());
    event=new DefaultPaymentErrorEvent(account.getId(),invoice.getId(),payment.getId(),e.getErrorMessage(),context.getUserToken());
    throw new PaymentApiException(e,ErrorCode.PAYMENT_CREATE_PAYMENT,account.getId(),e.getMessage());
  }
 finally {
    postPaymentEvent(event,account.getId());
  }
  return null;
}
