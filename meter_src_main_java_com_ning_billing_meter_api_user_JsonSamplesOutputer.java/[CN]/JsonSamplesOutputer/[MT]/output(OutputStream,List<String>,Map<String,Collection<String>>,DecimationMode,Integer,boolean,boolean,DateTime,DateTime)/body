{
  final List<Integer> sourceIds=translateSourcesToSourceIds(sources);
  final List<Integer> metricIds=translateCategoriesAndMetricNamesToMetricIds(metricsPerCategory);
  final Map<Integer,Map<Integer,DecimatingSampleFilter>> filters=createDecimatingSampleFilters(sourceIds,metricIds,decimationMode,startTime,endTime,outputCount);
  final ObjectWriter writer;
  if (compact) {
    writer=objectMapper.writerWithView(TimelineChunksViews.Compact.class);
  }
 else {
    writer=objectMapper.writerWithView(TimelineChunksViews.Loose.class);
  }
  final JsonGenerator generator=objectMapper.getJsonFactory().createJsonGenerator(output);
  generator.writeStartArray();
  writeJsonForStoredChunks(generator,writer,filters,sourceIds,metricIds,startTime,endTime,decodeSamples);
  writeJsonForInMemoryChunks(generator,writer,filters,sourceIds,metricIds,startTime,endTime,decodeSamples);
  generator.writeEndArray();
  generator.flush();
  generator.close();
}
