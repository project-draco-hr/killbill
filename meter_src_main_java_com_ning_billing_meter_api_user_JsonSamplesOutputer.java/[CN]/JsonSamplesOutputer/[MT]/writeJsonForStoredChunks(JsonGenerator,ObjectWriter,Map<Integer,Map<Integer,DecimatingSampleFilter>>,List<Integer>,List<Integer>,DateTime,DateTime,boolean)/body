{
  final AtomicReference<Integer> lastHostId=new AtomicReference<Integer>(null);
  final AtomicReference<Integer> lastSampleKindId=new AtomicReference<Integer>(null);
  final List<TimelineChunk> chunksForHostAndSampleKind=new ArrayList<TimelineChunk>();
  timelineDao.getSamplesBySourceIdsAndMetricIds(hostIdsList,sampleKindIdsList,startTime,endTime,new TimelineChunkConsumer(){
    @Override public void processTimelineChunk(    final TimelineChunk chunks){
      final Integer previousHostId=lastHostId.get();
      final Integer previousSampleKindId=lastSampleKindId.get();
      final Integer currentHostId=chunks.getSourceId();
      final Integer currentSampleKindId=chunks.getMetricId();
      chunksForHostAndSampleKind.add(chunks);
      if (previousHostId != null && (!previousHostId.equals(currentHostId) || !previousSampleKindId.equals(currentSampleKindId))) {
        try {
          writeJsonForChunks(generator,writer,filters,chunksForHostAndSampleKind,decodeSamples);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        chunksForHostAndSampleKind.clear();
      }
      lastHostId.set(currentHostId);
      lastSampleKindId.set(currentSampleKindId);
    }
  }
,context);
  if (chunksForHostAndSampleKind.size() > 0) {
    writeJsonForChunks(generator,writer,filters,chunksForHostAndSampleKind,decodeSamples);
    chunksForHostAndSampleKind.clear();
  }
}
