{
  final Iterable<NodeInfo> nodeInfos=killbillInfoApi.getNodesInfo();
  final List<NodeInfoJson> nodeInfosJson=ImmutableList.copyOf(Iterables.transform(nodeInfos,new Function<NodeInfo,NodeInfoJson>(){
    @Override public NodeInfoJson apply(    final NodeInfo input){
      final Iterable<PluginInfo> pluginsInfo=input.getPluginInfo();
      final List<PluginInfoJson> pluginsInfoJson=ImmutableList.copyOf(Iterables.transform(pluginsInfo,new Function<PluginInfo,PluginInfoJson>(){
        @Override public PluginInfoJson apply(        final PluginInfo input){
          final Set<PluginServiceInfo> services=input.getServices();
          final Set<PluginServiceInfoJson> servicesJson=ImmutableSet.copyOf(Iterables.transform(services,new Function<PluginServiceInfo,PluginServiceInfoJson>(){
            @Override public PluginServiceInfoJson apply(            final PluginServiceInfo input){
              return new PluginServiceInfoJson(input.getServiceTypeName(),input.getRegistrationName());
            }
          }
));
          return new PluginInfoJson(input.getBundleSymbolicName(),input.getPluginName(),input.getVersion(),input.getPluginState().name(),input.isSelectedForStart(),servicesJson);
        }
      }
));
      return new NodeInfoJson(input.getNodeName(),input.getBootTime(),input.getLastUpdatedDate(),input.getKillbillVersion(),input.getApiVersion(),input.getPluginApiVersion(),input.getCommonVersion(),input.getPlatformVersion(),pluginsInfoJson);
    }
  }
));
  return Response.status(Status.OK).entity(nodeInfosJson).build();
}
