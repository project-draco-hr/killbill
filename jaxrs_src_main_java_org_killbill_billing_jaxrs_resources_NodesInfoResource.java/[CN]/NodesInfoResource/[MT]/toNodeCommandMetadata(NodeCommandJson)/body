{
  if (input.getNodeCommandProperties() == null || input.getNodeCommandProperties().isEmpty()) {
    return new NodeCommandMetadata(){
      @Override public List<NodeCommandProperty> getProperties(){
        return ImmutableList.<NodeCommandProperty>of();
      }
    }
;
  }
  String pluginName=null;
  String pluginVersion=null;
  final Iterator<NodeCommandPropertyJson> it=input.getNodeCommandProperties().iterator();
  while (it.hasNext()) {
    final NodeCommandProperty cur=it.next();
    if (PluginNodeCommandMetadata.PLUGIN_NAME.equals(cur.getKey())) {
      pluginName=(String)cur.getValue();
    }
 else     if (PluginNodeCommandMetadata.PLUGIN_VERSION.equals(cur.getKey())) {
      pluginVersion=(String)cur.getValue();
    }
    if (pluginName != null && pluginVersion != null) {
      break;
    }
  }
  if (pluginName != null) {
    input.getNodeCommandProperties().remove(PluginNodeCommandMetadata.PLUGIN_NAME);
    input.getNodeCommandProperties().remove(PluginNodeCommandMetadata.PLUGIN_VERSION);
    return new PluginNodeCommandMetadata(pluginName,pluginVersion,toNodeCommandProperties(input.getNodeCommandProperties()));
  }
 else {
    return new NodeCommandMetadata(){
      @Override public List<NodeCommandProperty> getProperties(){
        return toNodeCommandProperties(input.getNodeCommandProperties());
      }
    }
;
  }
}
