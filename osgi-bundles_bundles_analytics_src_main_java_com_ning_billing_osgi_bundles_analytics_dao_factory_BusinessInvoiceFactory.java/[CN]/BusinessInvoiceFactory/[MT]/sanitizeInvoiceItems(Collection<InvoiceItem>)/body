{
  final Map<UUID,InvoiceItem> repareeInvoiceItemIdToRepairItemMappings=findRepareeInvoiceItems(allInvoiceItems);
  final Collection<AdjustedCBAInvoiceItem> mergedCBAItems=buildMergedCBAItems(allInvoiceItems,repareeInvoiceItemIdToRepairItemMappings);
  final Collection<InvoiceItem> invoiceItemsForAnalytics=new LinkedList<InvoiceItem>();
  for (  final InvoiceItem invoiceItem : allInvoiceItems) {
    if (InvoiceItemType.CBA_ADJ.equals(invoiceItem.getInvoiceItemType())) {
    }
 else     if (InvoiceItemType.REPAIR_ADJ.equals(invoiceItem.getInvoiceItemType())) {
    }
 else     if (repareeInvoiceItemIdToRepairItemMappings.keySet().contains(invoiceItem.getId())) {
      final InvoiceItem repairInvoiceItem=repareeInvoiceItemIdToRepairItemMappings.get(invoiceItem.getId());
      final InvoiceItem reparationInvoiceItem=invoiceItem;
      invoiceItemsForAnalytics.add(new AdjustmentInvoiceItemForRepair(repairInvoiceItem,reparationInvoiceItem));
    }
 else {
      invoiceItemsForAnalytics.add(invoiceItem);
    }
  }
  invoiceItemsForAnalytics.addAll(mergedCBAItems);
  return invoiceItemsForAnalytics;
}
