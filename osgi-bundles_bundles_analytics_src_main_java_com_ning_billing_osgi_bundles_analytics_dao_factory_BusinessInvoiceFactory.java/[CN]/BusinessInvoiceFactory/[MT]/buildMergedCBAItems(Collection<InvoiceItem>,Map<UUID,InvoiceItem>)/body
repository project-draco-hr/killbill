{
  final Set<UUID> cbasToIgnore=new HashSet<UUID>();
  final Collection<AdjustedCBAInvoiceItem> newCbasToAdd=new LinkedList<AdjustedCBAInvoiceItem>();
  for (  final InvoiceItem cbaInvoiceItem : allInvoiceItems) {
    if (!InvoiceItemType.CBA_ADJ.equals(cbaInvoiceItem.getInvoiceItemType())) {
      continue;
    }
    for (    final InvoiceItem invoiceItem : allInvoiceItems) {
      if (repareeInvoiceItemIdToRepairItemMappings.keySet().contains(invoiceItem.getId())) {
        final InvoiceItem repairInvoiceItem=repareeInvoiceItemIdToRepairItemMappings.get(invoiceItem.getId());
        final InvoiceItem reparationInvoiceItem=invoiceItem;
        if (repairInvoiceItem.getAmount().negate().compareTo(cbaInvoiceItem.getAmount()) == 0) {
          cbasToIgnore.add(cbaInvoiceItem.getId());
          newCbasToAdd.add(new AdjustedCBAInvoiceItem(cbaInvoiceItem,cbaInvoiceItem.getAmount().add(reparationInvoiceItem.getAmount().negate()),reparationInvoiceItem.getId()));
          for (          final InvoiceItem cbaUsedOnNextInvoiceItem : allInvoiceItems) {
            if (!InvoiceItemType.CBA_ADJ.equals(cbaUsedOnNextInvoiceItem.getInvoiceItemType()) || !cbaUsedOnNextInvoiceItem.getInvoiceId().equals(reparationInvoiceItem.getInvoiceId())) {
              continue;
            }
            cbasToIgnore.add(cbaUsedOnNextInvoiceItem.getId());
            newCbasToAdd.add(new AdjustedCBAInvoiceItem(cbaUsedOnNextInvoiceItem,cbaUsedOnNextInvoiceItem.getAmount().add(reparationInvoiceItem.getAmount()),reparationInvoiceItem.getId()));
            break;
          }
          break;
        }
      }
    }
  }
  return newCbasToAdd;
}
