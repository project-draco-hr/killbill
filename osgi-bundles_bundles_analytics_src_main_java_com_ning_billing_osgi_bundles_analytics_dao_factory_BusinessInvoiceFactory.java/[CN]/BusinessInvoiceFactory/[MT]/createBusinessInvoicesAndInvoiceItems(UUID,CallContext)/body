{
  final Account account=getAccount(accountId,context);
  final Long accountRecordId=getAccountRecordId(account.getId(),context);
  final Long tenantRecordId=getTenantRecordId(context);
  final ReportGroup reportGroup=getReportGroup(account.getId(),context);
  final Collection<Invoice> invoices=getInvoicesByAccountId(account.getId(),context);
  final Multimap<UUID,InvoiceItem> allInvoiceItems=ArrayListMultimap.<UUID,InvoiceItem>create();
  final Map<UUID,Invoice> invoiceIdToInvoiceMappings=new LinkedHashMap<UUID,Invoice>();
  for (  final Invoice invoice : invoices) {
    invoiceIdToInvoiceMappings.put(invoice.getId(),invoice);
    allInvoiceItems.get(invoice.getId()).addAll(invoice.getInvoiceItems());
  }
  final CompletionService<BusinessInvoiceItemBaseModelDao> completionService=new ExecutorCompletionService<BusinessInvoiceItemBaseModelDao>(executor);
  final Multimap<UUID,BusinessInvoiceItemBaseModelDao> businessInvoiceItemsForInvoiceId=ArrayListMultimap.<UUID,BusinessInvoiceItemBaseModelDao>create();
  for (  final InvoiceItem invoiceItem : allInvoiceItems.values()) {
    completionService.submit(new Callable<BusinessInvoiceItemBaseModelDao>(){
      @Override public BusinessInvoiceItemBaseModelDao call() throws Exception {
        return createBusinessInvoiceItem(invoiceItem,allInvoiceItems,invoiceIdToInvoiceMappings,account,accountRecordId,tenantRecordId,reportGroup,context);
      }
    }
);
  }
  for (int i=0; i < allInvoiceItems.values().size(); ++i) {
    try {
      final BusinessInvoiceItemBaseModelDao businessInvoiceItemModelDao=completionService.take().get();
      if (businessInvoiceItemModelDao != null) {
        businessInvoiceItemsForInvoiceId.get(businessInvoiceItemModelDao.getInvoiceId()).add(businessInvoiceItemModelDao);
      }
    }
 catch (    InterruptedException e) {
      throw new AnalyticsRefreshException(e);
    }
catch (    ExecutionException e) {
      throw new AnalyticsRefreshException(e);
    }
  }
  final Map<BusinessInvoiceModelDao,Collection<BusinessInvoiceItemBaseModelDao>> businessRecords=new HashMap<BusinessInvoiceModelDao,Collection<BusinessInvoiceItemBaseModelDao>>();
  for (  final Invoice invoice : invoices) {
    final Collection<BusinessInvoiceItemBaseModelDao> businessInvoiceItems=businessInvoiceItemsForInvoiceId.get(invoice.getId());
    if (businessInvoiceItems == null) {
      continue;
    }
    final BusinessInvoiceModelDao businessInvoice=createBusinessInvoice(account,invoice,accountRecordId,tenantRecordId,reportGroup,context);
    businessRecords.put(businessInvoice,businessInvoiceItems);
  }
  return businessRecords;
}
