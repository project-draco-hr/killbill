{
  final Set<UUID> repairInvoiceBlackList=new HashSet<UUID>();
  for (  final InvoiceItem repairInvoiceItem : repareeInvoiceItemToRepairItemMappings.values()) {
    boolean shouldBlackList=true;
    for (    final InvoiceItem invoiceItem : allInvoiceItems.get(repairInvoiceItem.getInvoiceId())) {
      if (invoiceItem.getInvoiceItemType().equals(InvoiceItemType.CBA_ADJ) && invoiceItem.getAmount().compareTo(repairInvoiceItem.getAmount().negate()) == 0) {
        shouldBlackList=false;
      }
    }
    if (shouldBlackList) {
      repairInvoiceBlackList.add(repairInvoiceItem.getInvoiceId());
    }
  }
  final Map<UUID,BigDecimal> cbaAdjustmentPerInvoice=new HashMap<UUID,BigDecimal>();
  for (  final InvoiceItem repareeInvoiceItem : repareeInvoiceItemToRepairItemMappings.keySet()) {
    final InvoiceItem repairInvoiceItem=repareeInvoiceItemToRepairItemMappings.get(repareeInvoiceItem);
    if (repairInvoiceBlackList.contains(repairInvoiceItem.getInvoiceId())) {
      continue;
    }
    if (cbaAdjustmentPerInvoice.get(repairInvoiceItem.getInvoiceId()) == null) {
      cbaAdjustmentPerInvoice.put(repairInvoiceItem.getInvoiceId(),BigDecimal.ZERO);
    }
    final BigDecimal currentCBAForOriginalInvoice=cbaAdjustmentPerInvoice.get(repairInvoiceItem.getInvoiceId());
    final BigDecimal adjustedCBAForOriginalInvoice=currentCBAForOriginalInvoice.add(repareeInvoiceItem.getAmount().negate());
    cbaAdjustmentPerInvoice.put(repairInvoiceItem.getInvoiceId(),adjustedCBAForOriginalInvoice);
    if (cbaAdjustmentPerInvoice.get(repareeInvoiceItem.getInvoiceId()) == null) {
      cbaAdjustmentPerInvoice.put(repareeInvoiceItem.getInvoiceId(),BigDecimal.ZERO);
    }
    final BigDecimal currentCBAForNewInvoice=cbaAdjustmentPerInvoice.get(repareeInvoiceItem.getInvoiceId());
    final BigDecimal adjustedCBAForNewInvoice=currentCBAForNewInvoice.add(repareeInvoiceItem.getAmount());
    cbaAdjustmentPerInvoice.put(repareeInvoiceItem.getInvoiceId(),adjustedCBAForNewInvoice);
  }
  final Collection<AdjustedCBAInvoiceItem> mergedCBAs=new LinkedList<AdjustedCBAInvoiceItem>();
  for (  final UUID invoiceId : allInvoiceItems.keySet()) {
    if (allInvoiceItems.get(invoiceId) == null) {
      continue;
    }
    final Collection<InvoiceItem> cbaItemsForInvoice=Collections2.filter(allInvoiceItems.get(invoiceId),new Predicate<InvoiceItem>(){
      @Override public boolean apply(      final InvoiceItem invoiceItem){
        return InvoiceItemType.CBA_ADJ.equals(invoiceItem.getInvoiceItemType());
      }
    }
);
    if (cbaItemsForInvoice.size() == 0) {
      continue;
    }
    BigDecimal revenueRecognizableCBA=cbaAdjustmentPerInvoice.get(invoiceId);
    if (revenueRecognizableCBA == null) {
      revenueRecognizableCBA=BigDecimal.ZERO;
    }
    BigDecimal nonRevenueRecognizableCBA=BigDecimal.ZERO;
    UUID accountId=null;
    Currency currency=null;
    for (    final InvoiceItem invoiceItem : cbaItemsForInvoice) {
      final Collection<InvoiceItem> otherInvoiceItems=Collections2.filter(allInvoiceItems.values(),new Predicate<InvoiceItem>(){
        @Override public boolean apply(        final InvoiceItem input){
          return !input.getId().equals(invoiceItem.getId());
        }
      }
);
      final Boolean isRevenueRecognizable=isRevenueRecognizable(invoiceItem,otherInvoiceItems);
      if (isRevenueRecognizable) {
        revenueRecognizableCBA=revenueRecognizableCBA.add(invoiceItem.getAmount());
      }
 else {
        nonRevenueRecognizableCBA=nonRevenueRecognizableCBA.add(invoiceItem.getAmount());
      }
      if (accountId == null) {
        accountId=invoiceItem.getAccountId();
      }
      if (currency == null) {
        currency=invoiceItem.getCurrency();
      }
    }
    if (revenueRecognizableCBA.compareTo(BigDecimal.ZERO) != 0) {
      mergedCBAs.add(new AdjustedCBAInvoiceItem(invoiceId,accountId,revenueRecognizableCBA,currency));
    }
    if (nonRevenueRecognizableCBA.compareTo(BigDecimal.ZERO) != 0) {
      mergedCBAs.add(new AdjustedCBAInvoiceItem(invoiceId,accountId,nonRevenueRecognizableCBA,currency));
    }
  }
  return mergedCBAs;
}
