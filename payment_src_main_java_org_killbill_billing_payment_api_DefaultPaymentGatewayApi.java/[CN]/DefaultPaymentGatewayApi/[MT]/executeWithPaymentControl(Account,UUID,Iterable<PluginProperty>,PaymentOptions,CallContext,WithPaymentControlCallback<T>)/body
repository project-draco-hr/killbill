{
  final List<String> paymentControlPluginNames=toPaymentControlPluginNames(paymentOptions);
  if (paymentControlPluginNames.isEmpty()) {
    return callback.doPaymentGatewayApiOperation(properties);
  }
  final PriorPaymentControlResult priorCallResult;
  try {
    priorCallResult=controlPluginRunner.executePluginPriorCalls(account,paymentMethodId,null,null,null,null,PaymentApiType.HPP,null,HPPType.BUILD_FORM_DESCRIPTOR,null,null,true,paymentControlPluginNames,properties,callContext);
  }
 catch (  final PaymentControlApiException e) {
    throw new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e);
  }
  try {
    final T result=callback.doPaymentGatewayApiOperation(priorCallResult.getAdjustedPluginProperties());
    controlPluginRunner.executePluginOnSuccessCalls(account,paymentMethodId,null,null,null,null,null,PaymentApiType.HPP,null,HPPType.BUILD_FORM_DESCRIPTOR,null,null,null,null,true,paymentControlPluginNames,priorCallResult.getAdjustedPluginProperties(),callContext);
    return result;
  }
 catch (  final PaymentApiException e) {
    controlPluginRunner.executePluginOnFailureCalls(account,paymentMethodId,null,null,null,null,PaymentApiType.HPP,null,HPPType.BUILD_FORM_DESCRIPTOR,null,null,true,paymentControlPluginNames,priorCallResult.getAdjustedPluginProperties(),callContext);
    throw e;
  }
}
