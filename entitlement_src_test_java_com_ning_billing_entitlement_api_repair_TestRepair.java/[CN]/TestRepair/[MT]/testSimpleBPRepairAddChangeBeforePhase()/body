{
  String baseProduct="Shotgun";
  BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  Subscription baseSubscription=createSubscription(baseProduct,baseTerm,basePriceList);
  BundleRepair bundleRepair=repairApi.getBundleRepair(bundle.getId());
  sortEventsOnBundle(bundleRepair);
  Duration moveTenDays=getDurationDay(10);
  clock.setDeltaFromReality(moveTenDays,0);
  DateTime changeTime=baseSubscription.getStartDate().plusDays(3);
  String newBaseProduct="Assault-Rifle";
  BillingPeriod newBaseTerm=BillingPeriod.MONTHLY;
  String newBasePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  PlanPhaseSpecifier spec=new PlanPhaseSpecifier(newBaseProduct,ProductCategory.BASE,newBaseTerm,newBasePriceList,PhaseType.TRIAL);
  NewEvent ne=createNewEvent(SubscriptionTransitionType.CHANGE,changeTime,spec);
  DeletedEvent de=createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(1).getEventId());
  SubscriptionRepair sRepair=createSubscriptionReapir(baseSubscription.getId(),Collections.singletonList(de),Collections.singletonList(ne));
  BundleRepair bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(sRepair));
  boolean dryRun=true;
  BundleRepair dryRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  List<SubscriptionRepair> subscriptionRepair=dryRunBundleRepair.getSubscriptions();
  assertEquals(subscriptionRepair.size(),1);
  SubscriptionRepair cur=subscriptionRepair.get(0);
  assertEquals(cur.getId(),baseSubscription.getId());
  List<ExistingEvent> events=cur.getExistingEvents();
  assertEquals(events.size(),3);
  assertEquals(events.get(0).getPlanPhaseSpecifier().getProductName(),baseProduct);
  assertEquals(events.get(0).getPlanPhaseSpecifier().getPhaseType(),PhaseType.TRIAL);
  assertEquals(events.get(0).getPlanPhaseSpecifier().getProductCategory(),ProductCategory.BASE);
  assertEquals(events.get(0).getPlanPhaseSpecifier().getPriceListName(),basePriceList);
  assertEquals(events.get(0).getPlanPhaseSpecifier().getBillingPeriod(),BillingPeriod.NO_BILLING_PERIOD);
  assertEquals(events.get(1).getPlanPhaseSpecifier().getProductName(),newBaseProduct);
  assertEquals(events.get(1).getPlanPhaseSpecifier().getPhaseType(),PhaseType.TRIAL);
  assertEquals(events.get(1).getPlanPhaseSpecifier().getProductCategory(),ProductCategory.BASE);
  assertEquals(events.get(1).getPlanPhaseSpecifier().getPriceListName(),basePriceList);
  assertEquals(events.get(1).getPlanPhaseSpecifier().getBillingPeriod(),BillingPeriod.NO_BILLING_PERIOD);
  assertEquals(events.get(2).getPlanPhaseSpecifier().getProductName(),newBaseProduct);
  assertEquals(events.get(2).getPlanPhaseSpecifier().getPhaseType(),PhaseType.EVERGREEN);
  assertEquals(events.get(2).getPlanPhaseSpecifier().getProductCategory(),ProductCategory.BASE);
  assertEquals(events.get(2).getPlanPhaseSpecifier().getPriceListName(),basePriceList);
  assertEquals(events.get(2).getPlanPhaseSpecifier().getBillingPeriod(),baseTerm);
  SubscriptionData dryRunBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId());
  assertEquals(dryRunBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  assertEquals(dryRunBaseSubscription.getBundleId(),bundle.getId());
  assertEquals(dryRunBaseSubscription.getStartDate(),baseSubscription.getStartDate());
  Plan currentPlan=dryRunBaseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),baseProduct);
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),baseTerm);
  PlanPhase currentPhase=dryRunBaseSubscription.getCurrentPhase();
  assertNotNull(currentPhase);
  assertEquals(currentPhase.getPhaseType(),PhaseType.TRIAL);
}
