{
  final UUID paymentMethodId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final String externalKey1="gfhfg";
  final String transactionExternalKey1="sadas";
  final String externalKey2="asdwqeqw";
  final String transactionExternalKey2="fghfg";
  final DateTime createdAfterDate=clock.getUTCNow().minusDays(10);
  final DateTime createdBeforeDate=clock.getUTCNow().minusDays(1);
  final String stateName="FOO";
  final String pluginName="miraculous";
  final PaymentAttemptModelDao attempt1=new PaymentAttemptModelDao(accountId,paymentMethodId,createdAfterDate,createdAfterDate,externalKey1,UUID.randomUUID(),transactionExternalKey1,TransactionType.AUTHORIZE,stateName,BigDecimal.ONE,Currency.USD,ImmutableList.<String>of(pluginName),null);
  final PaymentAttemptModelDao attempt2=new PaymentAttemptModelDao(accountId,paymentMethodId,createdAfterDate,createdAfterDate,externalKey2,UUID.randomUUID(),transactionExternalKey2,TransactionType.AUTHORIZE,stateName,BigDecimal.ONE,Currency.USD,ImmutableList.<String>of(pluginName),null);
  internalCallContext.setAccountRecordId(1L);
  internalCallContext.setCreatedDate(createdAfterDate);
  internalCallContext.setUpdatedDate(createdAfterDate);
  paymentDao.insertPaymentAttemptWithProperties(attempt1,internalCallContext);
  internalCallContext.setAccountRecordId(2L);
  internalCallContext.setCreatedDate(createdAfterDate);
  internalCallContext.setUpdatedDate(createdAfterDate);
  paymentDao.insertPaymentAttemptWithProperties(attempt2,internalCallContext);
  final Pagination<PaymentAttemptModelDao> result=paymentDao.getPaymentAttemptsByStateAcrossTenants(stateName,createdBeforeDate,0L,2L);
  Assert.assertEquals(result.getTotalNbRecords().longValue(),2L);
}
