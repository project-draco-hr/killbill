{
  final UUID directTransactionId=UUID.randomUUID();
  final String paymentExternalKey="vraiment?";
  final String transactionExternalKey="tduteuqweq";
  final String stateName="INIT";
  final TransactionType transactionType=TransactionType.AUTHORIZE;
  final String pluginName="superPlugin";
  final UUID accountId=UUID.randomUUID();
  final PaymentAttemptModelDao attempt=new PaymentAttemptModelDao(UUID.randomUUID(),UUID.randomUUID(),clock.getUTCNow(),clock.getUTCNow(),paymentExternalKey,directTransactionId,transactionExternalKey,transactionType,stateName,BigDecimal.ZERO,Currency.ALL,pluginName);
  final PluginPropertyModelDao prop1=new PluginPropertyModelDao(attempt.getId(),"foo",transactionExternalKey,accountId,"PLUGIN","key1","value1","yo",clock.getUTCNow());
  final PluginPropertyModelDao prop2=new PluginPropertyModelDao(attempt.getId(),"foo2",transactionExternalKey,accountId,"PLUGIN","key2","value2","yo",clock.getUTCNow());
  final PluginPropertyModelDao prop3=new PluginPropertyModelDao(UUID.randomUUID(),"foo3","other",UUID.randomUUID(),"PLUGIN","key2","value2","yo",clock.getUTCNow());
  final List<PluginPropertyModelDao> props=new ArrayList<PluginPropertyModelDao>();
  props.add(prop1);
  props.add(prop2);
  props.add(prop3);
  PaymentAttemptModelDao savedAttempt=paymentDao.insertPaymentAttemptWithProperties(attempt,props,internalCallContext);
  assertEquals(savedAttempt.getTransactionExternalKey(),transactionExternalKey);
  assertEquals(savedAttempt.getTransactionType(),transactionType);
  assertEquals(savedAttempt.getStateName(),stateName);
  assertEquals(savedAttempt.getPluginName(),pluginName);
  final List<PluginPropertyModelDao> retrievedProperties=paymentDao.getProperties(attempt.getId(),internalCallContext);
  assertEquals(retrievedProperties.size(),2);
  assertEquals(retrievedProperties.get(0).getAccountId(),accountId);
  assertEquals(retrievedProperties.get(0).getTransactionExternalKey(),transactionExternalKey);
  assertEquals(retrievedProperties.get(0).getPluginName(),"PLUGIN");
  assertEquals(retrievedProperties.get(0).getPaymentExternalKey(),"foo");
  assertEquals(retrievedProperties.get(0).getPropKey(),"key1");
  assertEquals(retrievedProperties.get(0).getPropValue(),"value1");
  assertEquals(retrievedProperties.get(0).getCreatedBy(),"yo");
  assertEquals(retrievedProperties.get(1).getAccountId(),accountId);
  assertEquals(retrievedProperties.get(1).getTransactionExternalKey(),transactionExternalKey);
  assertEquals(retrievedProperties.get(1).getPluginName(),"PLUGIN");
  assertEquals(retrievedProperties.get(1).getPaymentExternalKey(),"foo2");
  assertEquals(retrievedProperties.get(1).getPropKey(),"key2");
  assertEquals(retrievedProperties.get(1).getPropValue(),"value2");
  assertEquals(retrievedProperties.get(1).getCreatedBy(),"yo");
  final PaymentAttemptModelDao retrievedAttempt1=paymentDao.getPaymentAttempt(attempt.getId(),internalCallContext);
  assertEquals(retrievedAttempt1.getTransactionExternalKey(),transactionExternalKey);
  assertEquals(retrievedAttempt1.getTransactionType(),transactionType);
  assertEquals(retrievedAttempt1.getStateName(),stateName);
  assertEquals(retrievedAttempt1.getPluginName(),pluginName);
  final List<PaymentAttemptModelDao> retrievedAttempts=paymentDao.getPaymentAttemptByTransactionExternalKey(transactionExternalKey,internalCallContext);
  assertEquals(retrievedAttempts.size(),1);
  assertEquals(retrievedAttempts.get(0).getTransactionExternalKey(),transactionExternalKey);
  assertEquals(retrievedAttempts.get(0).getTransactionType(),transactionType);
  assertEquals(retrievedAttempts.get(0).getStateName(),stateName);
  assertEquals(retrievedAttempts.get(0).getPluginName(),pluginName);
}
