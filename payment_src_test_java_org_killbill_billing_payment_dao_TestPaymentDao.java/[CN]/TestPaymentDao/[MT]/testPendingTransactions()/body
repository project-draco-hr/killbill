{
  final UUID paymentMethodId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final String externalKey="hhhhooo";
  final String transactionExternalKey1="transaction1";
  final String transactionExternalKey2="transaction2";
  final String transactionExternalKey3="transaction3";
  final String transactionExternalKey4="transaction4";
  final DateTime initialTime=clock.getUTCNow().minusMinutes(1);
  final PaymentModelDao paymentModelDao=new PaymentModelDao(initialTime,initialTime,accountId,paymentMethodId,externalKey);
  final PaymentTransactionModelDao transaction1=new PaymentTransactionModelDao(initialTime,initialTime,null,transactionExternalKey1,paymentModelDao.getId(),TransactionType.AUTHORIZE,initialTime,TransactionStatus.PENDING,BigDecimal.TEN,Currency.AED,"pending","");
  final PaymentModelDao payment=paymentDao.insertPaymentWithFirstTransaction(paymentModelDao,transaction1,internalCallContext);
  final PaymentTransactionModelDao transaction2=new PaymentTransactionModelDao(initialTime,initialTime,null,transactionExternalKey2,paymentModelDao.getId(),TransactionType.AUTHORIZE,initialTime,TransactionStatus.PENDING,BigDecimal.TEN,Currency.AED,"pending","");
  paymentDao.updatePaymentWithNewTransaction(paymentModelDao.getId(),transaction2,internalCallContext);
  final PaymentTransactionModelDao transaction3=new PaymentTransactionModelDao(initialTime,initialTime,null,transactionExternalKey3,paymentModelDao.getId(),TransactionType.AUTHORIZE,initialTime,TransactionStatus.SUCCESS,BigDecimal.TEN,Currency.AED,"success","");
  paymentDao.updatePaymentWithNewTransaction(paymentModelDao.getId(),transaction3,internalCallContext);
  clock.addDays(1);
  final DateTime newTime=clock.getUTCNow();
  final InternalCallContext internalCallContextWithNewTime=new InternalCallContext(InternalCallContextFactory.INTERNAL_TENANT_RECORD_ID,1687L,UUID.randomUUID(),UUID.randomUUID().toString(),CallOrigin.TEST,UserType.TEST,"Testing","This is a test",newTime,newTime);
  final PaymentTransactionModelDao transaction4=new PaymentTransactionModelDao(initialTime,initialTime,null,transactionExternalKey4,paymentModelDao.getId(),TransactionType.AUTHORIZE,newTime,TransactionStatus.PENDING,BigDecimal.TEN,Currency.AED,"pending","");
  paymentDao.updatePaymentWithNewTransaction(paymentModelDao.getId(),transaction4,internalCallContextWithNewTime);
  final List<PaymentTransactionModelDao> result=getPendingTransactions(paymentModelDao.getId());
  Assert.assertEquals(result.size(),3);
  final Iterable<PaymentTransactionModelDao> transactions1=paymentDao.getByTransactionStatusAcrossTenants(ImmutableList.of(TransactionStatus.PENDING),newTime,initialTime,0L,3L);
  for (  PaymentTransactionModelDao paymentTransaction : transactions1) {
    final String newPaymentState="XXX_FAILED";
    paymentDao.updatePaymentAndTransactionOnCompletion(payment.getAccountId(),payment.getId(),paymentTransaction.getTransactionType(),newPaymentState,payment.getLastSuccessStateName(),paymentTransaction.getId(),TransactionStatus.PAYMENT_FAILURE,paymentTransaction.getProcessedAmount(),paymentTransaction.getProcessedCurrency(),paymentTransaction.getGatewayErrorCode(),paymentTransaction.getGatewayErrorMsg(),internalCallContext);
  }
  final List<PaymentTransactionModelDao> result2=getPendingTransactions(paymentModelDao.getId());
  Assert.assertEquals(result2.size(),1);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  ;
  final Iterable<PaymentTransactionModelDao> transactions2=paymentDao.getByTransactionStatusAcrossTenants(ImmutableList.of(TransactionStatus.PENDING),clock.getUTCNow(),initialTime,0L,1L);
  for (  PaymentTransactionModelDao paymentTransaction : transactions2) {
    final String newPaymentState="XXX_FAILED";
    paymentDao.updatePaymentAndTransactionOnCompletion(payment.getAccountId(),payment.getId(),paymentTransaction.getTransactionType(),newPaymentState,payment.getLastSuccessStateName(),paymentTransaction.getId(),TransactionStatus.PAYMENT_FAILURE,paymentTransaction.getProcessedAmount(),paymentTransaction.getProcessedCurrency(),paymentTransaction.getGatewayErrorCode(),paymentTransaction.getGatewayErrorMsg(),internalCallContext);
  }
  final List<PaymentTransactionModelDao> result3=getPendingTransactions(paymentModelDao.getId());
  Assert.assertEquals(result3.size(),0);
}
