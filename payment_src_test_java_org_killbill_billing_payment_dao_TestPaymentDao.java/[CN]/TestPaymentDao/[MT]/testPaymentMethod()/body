{
  final UUID paymentMethodId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final String pluginName="nobody";
  final Boolean isActive=Boolean.TRUE;
  final PaymentMethodModelDao method=new PaymentMethodModelDao(paymentMethodId,UUID.randomUUID().toString(),null,null,accountId,pluginName,isActive);
  PaymentMethodModelDao savedMethod=paymentDao.insertPaymentMethod(method,internalCallContext);
  assertEquals(savedMethod.getId(),paymentMethodId);
  assertEquals(savedMethod.getAccountId(),accountId);
  assertEquals(savedMethod.getPluginName(),pluginName);
  assertEquals(savedMethod.isActive(),isActive);
  final List<PaymentMethodModelDao> result=paymentDao.getPaymentMethods(internalCallContext);
  assertEquals(result.size(),1);
  savedMethod=result.get(0);
  assertEquals(savedMethod.getId(),paymentMethodId);
  assertEquals(savedMethod.getAccountId(),accountId);
  assertEquals(savedMethod.getPluginName(),pluginName);
  assertEquals(savedMethod.isActive(),isActive);
  paymentDao.deletedPaymentMethod(paymentMethodId,internalCallContext);
  PaymentMethodModelDao deletedPaymentMethod=paymentDao.getPaymentMethod(paymentMethodId,internalCallContext);
  assertNull(deletedPaymentMethod);
  deletedPaymentMethod=paymentDao.getPaymentMethodIncludedDeleted(paymentMethodId,internalCallContext);
  assertNotNull(deletedPaymentMethod);
  assertFalse(deletedPaymentMethod.isActive());
  assertEquals(deletedPaymentMethod.getAccountId(),accountId);
  assertEquals(deletedPaymentMethod.getId(),paymentMethodId);
  assertEquals(deletedPaymentMethod.getPluginName(),pluginName);
}
