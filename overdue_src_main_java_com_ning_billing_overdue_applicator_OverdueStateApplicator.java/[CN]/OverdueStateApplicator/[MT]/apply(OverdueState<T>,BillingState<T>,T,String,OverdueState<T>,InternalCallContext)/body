{
  try {
    log.debug("OverdueStateApplicator <enter> : time = " + clock.getUTCNow() + ", previousState = "+ previousOverdueStateName+ ", nextState = "+ nextOverdueState);
    final boolean conditionForNextNotfication=!nextOverdueState.isClearState() || (firstOverdueState != null && billingState != null && billingState.getDateOfEarliestUnpaidInvoice() != null);
    if (conditionForNextNotfication) {
      final Period reevaluationInterval=nextOverdueState.isClearState() ? firstOverdueState.getReevaluationInterval() : nextOverdueState.getReevaluationInterval();
      createFutureNotification(overdueable,clock.getUTCNow().plus(reevaluationInterval),context);
      log.debug("OverdueStateApplicator <notificationQ> : inserting notification for time = " + clock.getUTCNow().plus(reevaluationInterval));
    }
    if (previousOverdueStateName.equals(nextOverdueState.getName())) {
      return;
    }
    storeNewState(overdueable,nextOverdueState,context);
    cancelSubscriptionsIfRequired(overdueable,nextOverdueState,context);
    sendEmailIfRequired(billingState,overdueable,nextOverdueState,context);
  }
 catch (  OverdueApiException e) {
    if (e.getCode() != ErrorCode.OVERDUE_NO_REEVALUATION_INTERVAL.getCode()) {
      throw new OverdueException(e);
    }
  }
  if (nextOverdueState.isClearState()) {
    clear(overdueable,context);
  }
  try {
    bus.post(createOverdueEvent(overdueable,previousOverdueStateName,nextOverdueState.getName(),context),context);
  }
 catch (  Exception e) {
    log.error("Error posting overdue change event to bus",e);
  }
}
