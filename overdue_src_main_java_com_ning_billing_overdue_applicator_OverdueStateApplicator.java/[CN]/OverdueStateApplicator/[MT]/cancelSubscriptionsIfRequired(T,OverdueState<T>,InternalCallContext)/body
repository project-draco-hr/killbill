{
  if (nextOverdueState.getSubscriptionCancellationPolicy() == OverdueCancellationPolicicy.NONE) {
    return;
  }
  try {
    final ActionPolicy actionPolicy;
switch (nextOverdueState.getSubscriptionCancellationPolicy()) {
case END_OF_TERM:
      actionPolicy=ActionPolicy.END_OF_TERM;
    break;
case IMMEDIATE:
  actionPolicy=ActionPolicy.IMMEDIATE;
break;
default :
throw new IllegalStateException("Unexpected OverdueCancellationPolicy " + nextOverdueState.getSubscriptionCancellationPolicy());
}
final List<SubscriptionBase> toBeCancelled=new LinkedList<SubscriptionBase>();
computeSubscriptionsToCancel(blockable,toBeCancelled,context);
for (final SubscriptionBase cur : toBeCancelled) {
cur.cancelWithPolicy(clock.getUTCNow(),actionPolicy,context.toCallContext());
}
}
 catch (SubscriptionUserApiException e) {
throw new OverdueException(e);
}
}
