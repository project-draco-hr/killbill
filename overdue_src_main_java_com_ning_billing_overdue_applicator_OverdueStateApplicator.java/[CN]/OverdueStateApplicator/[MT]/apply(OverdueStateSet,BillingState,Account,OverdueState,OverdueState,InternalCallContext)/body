{
  try {
    if (isAccountTaggedWith_OVERDUE_ENFORCEMENT_OFF(context)) {
      log.debug("OverdueStateApplicator:apply returns because account (recordId = " + context.getAccountRecordId() + ") is set with OVERDUE_ENFORCEMENT_OFF ");
      return;
    }
    log.debug("OverdueStateApplicator:apply <enter> : time = " + clock.getUTCNow() + ", previousState = "+ previousOverdueState.getName()+ ", nextState = "+ nextOverdueState);
    final OverdueState firstOverdueState=overdueStateSet.getFirstState();
    final Period initialReevaluationPeriod=overdueStateSet.getInitialReevaluationInterval() != null ? overdueStateSet.getInitialReevaluationInterval() : new Period(24,0,0,0);
    final boolean conditionForNextNotfication=!nextOverdueState.isClearState() || (firstOverdueState != null && billingState != null && billingState.getDateOfEarliestUnpaidInvoice() != null);
    if (conditionForNextNotfication) {
      final Period reevaluationInterval=nextOverdueState.isClearState() ? initialReevaluationPeriod : nextOverdueState.getReevaluationInterval();
      createFutureNotification(account,clock.getUTCNow().plus(reevaluationInterval),context);
      log.debug("OverdueStateApplicator <notificationQ> : inserting notification for time = " + clock.getUTCNow().plus(reevaluationInterval));
    }
 else     if (nextOverdueState.isClearState()) {
      clearFutureNotification(account,context);
    }
    if (previousOverdueState.getName().equals(nextOverdueState.getName())) {
      return;
    }
    storeNewState(account,nextOverdueState,context);
    cancelSubscriptionsIfRequired(account,nextOverdueState,context);
    triggerInvoiceIfNeeded(account,previousOverdueState,nextOverdueState,context);
    sendEmailIfRequired(billingState,account,nextOverdueState,context);
  }
 catch (  OverdueApiException e) {
    if (e.getCode() != ErrorCode.OVERDUE_NO_REEVALUATION_INTERVAL.getCode()) {
      throw new OverdueException(e);
    }
  }
catch (  InvoiceApiException e) {
    throw new OverdueException(e);
  }
  try {
    bus.post(createOverdueEvent(account,previousOverdueState.getName(),nextOverdueState.getName(),isBlockBillingTransition(previousOverdueState,nextOverdueState),isUnblockBillingTransition(previousOverdueState,nextOverdueState),context));
  }
 catch (  Exception e) {
    log.error("Error posting overdue change event to bus",e);
  }
}
