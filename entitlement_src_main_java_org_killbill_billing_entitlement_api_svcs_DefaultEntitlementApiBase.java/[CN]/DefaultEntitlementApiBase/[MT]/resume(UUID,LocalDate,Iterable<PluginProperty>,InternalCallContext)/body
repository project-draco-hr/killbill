{
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.RESUME_SUBSCRIPTION,null,null,bundleId,null,null,localEffectiveDate,properties,internalCallContextFactory.createCallContext(internalCallContext));
  final WithEntitlementPlugin<Void> resumeWithPlugin=new WithEntitlementPlugin<Void>(){
    @Override public Void doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      try {
        final SubscriptionBaseBundle bundle=subscriptionInternalApi.getBundleFromId(bundleId,internalCallContext);
        final ImmutableAccountData account=accountApi.getImmutableAccountDataById(bundle.getAccountId(),internalCallContext);
        final SubscriptionBase baseSubscription=subscriptionInternalApi.getBaseSubscription(bundleId,internalCallContext);
        final DateTime effectiveDate=dateHelper.fromLocalDateAndReferenceTime(updatedPluginContext.getEffectiveDate(),baseSubscription.getStartDate(),internalCallContext);
        if (!dateHelper.isBeforeOrEqualsToday(effectiveDate,account.getTimeZone())) {
          recordPauseResumeNotificationEntry(baseSubscription.getId(),bundleId,effectiveDate,false,internalCallContext);
          return null;
        }
        final BlockingState currentState=blockingStateDao.getBlockingStateForService(bundleId,BlockingStateType.SUBSCRIPTION_BUNDLE,EntitlementService.ENTITLEMENT_SERVICE_NAME,internalCallContext);
        if (currentState == null || currentState.getStateName().equals(DefaultEntitlementApi.ENT_STATE_CLEAR)) {
          log.warn("Current state is {}, nothing to resume",currentState);
          return null;
        }
        final UUID blockingId=blockUnblockBundle(bundleId,DefaultEntitlementApi.ENT_STATE_CLEAR,EntitlementService.ENTITLEMENT_SERVICE_NAME,localEffectiveDate,false,false,false,baseSubscription,internalCallContext);
        final DefaultEffectiveEntitlementEvent event=new DefaultEffectiveEntitlementEvent(blockingId,baseSubscription.getId(),bundleId,bundle.getAccountId(),EntitlementTransitionType.UNBLOCK_BUNDLE,effectiveDate,clock.getUTCNow(),internalCallContext.getAccountRecordId(),internalCallContext.getTenantRecordId(),internalCallContext.getUserToken());
        try {
          eventBus.post(event);
        }
 catch (        EventBusException e) {
          log.warn("Failed to post bus event for resume operation on bundle " + bundleId);
        }
      }
 catch (      SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
catch (      AccountApiException e) {
        throw new EntitlementApiException(e);
      }
      return null;
    }
  }
;
  pluginExecution.executeWithPlugin(resumeWithPlugin,pluginContext);
}
