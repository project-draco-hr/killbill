{
  final AccountData accountData=getAccountData(1);
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  clock.setDay(new LocalDate(2012,4,1));
  final List<PlanPhasePriceOverride> overrides=new ArrayList<PlanPhasePriceOverride>();
  overrides.add(new DefaultPlanPhasePriceOverride("shotgun-monthly-evergreen",account.getCurrency(),null,BigDecimal.TEN));
  final DefaultEntitlement bpSubscription=createBaseEntitlementWithPriceOverrideAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,overrides,NextEvent.CREATE,NextEvent.INVOICE);
  subscriptionChecker.checkSubscriptionCreated(bpSubscription.getId(),internalCallContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  busHandler.pushExpectedEvent(NextEvent.PHASE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  clock.addDays(30);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,BigDecimal.TEN));
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  clock.addMonths(1);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,BigDecimal.TEN));
}
