{
  final TenantContext tenantContext=context.createContext(request);
  final UUID uuid=UUID.fromString(accountId);
  final Account account=accountUserApi.getAccountById(uuid,tenantContext);
  final List<SubscriptionBundle> bundles=(externalKey != null) ? subscriptionApi.getSubscriptionBundlesForAccountIdAndExternalKey(uuid,externalKey,tenantContext) : subscriptionApi.getSubscriptionBundlesForAccountId(uuid,tenantContext);
  final Collection<BundleJson> result=Collections2.transform(bundles,new Function<SubscriptionBundle,BundleJson>(){
    @Override public BundleJson apply(    final SubscriptionBundle input){
      try {
        return new BundleJson(input,account.getCurrency(),null);
      }
 catch (      final CatalogApiException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  return Response.status(Status.OK).entity(result).build();
}
