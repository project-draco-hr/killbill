{
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final UUID accountId=UUID.fromString(accountIdStr);
  final Account account=accountUserApi.getAccountById(accountId,callContext);
  final UUID paymentMethodId=paymentMethodIdStr == null ? account.getPaymentMethodId() : UUID.fromString(paymentMethodIdStr);
  final Currency currency=json.getCurrency() == null ? account.getCurrency() : Currency.valueOf(json.getCurrency());
  final UUID directPaymentId=json.getPaymentId() == null ? null : UUID.fromString(json.getPaymentId());
  final TransactionType transactionType=TransactionType.valueOf(json.getTransactionType());
  final DirectPayment result;
switch (transactionType) {
case AUTHORIZE:
    result=paymentApi.createAuthorization(account,paymentMethodId,directPaymentId,json.getAmount(),currency,json.getPaymentExternalKey(),json.getTransactionExternalKey(),pluginProperties,callContext);
  break;
case PURCHASE:
result=paymentApi.createPurchase(account,paymentMethodId,directPaymentId,json.getAmount(),currency,json.getPaymentExternalKey(),json.getTransactionExternalKey(),pluginProperties,callContext);
break;
case CREDIT:
result=paymentApi.createCredit(account,paymentMethodId,directPaymentId,json.getAmount(),currency,json.getPaymentExternalKey(),json.getTransactionExternalKey(),pluginProperties,callContext);
break;
default :
return Response.status(Status.PRECONDITION_FAILED).entity("TransactionType " + transactionType + " is not allowed for an account").build();
}
return uriBuilder.buildResponse(DirectPaymentResource.class,"getDirectPayment",result.getId(),uriInfo.getBaseUri().toString());
}
