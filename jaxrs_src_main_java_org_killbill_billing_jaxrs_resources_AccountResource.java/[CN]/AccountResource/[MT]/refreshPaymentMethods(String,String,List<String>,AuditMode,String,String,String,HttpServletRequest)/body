{
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final Account account=accountUserApi.getAccountById(UUID.fromString(accountId),callContext);
  final List<PaymentMethod> refreshedPaymentMethods=paymentApi.refreshPaymentMethods(account,pluginName,pluginProperties,callContext);
  final AccountAuditLogs accountAuditLogs=auditUserApi.getAccountAuditLogs(account.getId(),auditMode.getLevel(),callContext);
  final List<PaymentMethodJson> json=new ArrayList<PaymentMethodJson>(Collections2.transform(refreshedPaymentMethods,new Function<PaymentMethod,PaymentMethodJson>(){
    @Override public PaymentMethodJson apply(    final PaymentMethod input){
      return PaymentMethodJson.toPaymentMethodJson(account,input,accountAuditLogs);
    }
  }
));
  return Response.status(Status.OK).entity(json).build();
}
