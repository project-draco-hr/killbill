{
  verifyNonNullOrEmpty(json,"PaymentTransactionJson body should be specified");
  verifyNonNullOrEmpty(json.getTransactionType(),"PaymentTransactionJson transactionType needs to be set",json.getAmount(),"PaymentTransactionJson amount needs to be set");
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final Currency currency=json.getCurrency() == null ? account.getCurrency() : Currency.valueOf(json.getCurrency());
  final UUID paymentId=json.getPaymentId() == null ? null : UUID.fromString(json.getPaymentId());
  final UUID paymentMethodId;
  if (paymentId != null) {
    final Payment initialPayment=paymentApi.getPayment(paymentId,false,pluginProperties,callContext);
    final PaymentTransaction pendingTransaction=lookupPendingTransaction(initialPayment,json != null ? json.getTransactionId() : null,json != null ? json.getTransactionExternalKey() : null,json != null ? json.getTransactionType() : null);
    paymentMethodId=initialPayment.getPaymentMethodId();
  }
 else {
    paymentMethodId=paymentMethodIdStr == null ? account.getPaymentMethodId() : UUID.fromString(paymentMethodIdStr);
  }
  validatePaymentMethodForAccount(account.getId(),paymentMethodId,callContext);
  final TransactionType transactionType=TransactionType.valueOf(json.getTransactionType());
  final PaymentOptions paymentOptions=createControlPluginApiPaymentOptions(paymentControlPluginNames);
  final Payment result;
switch (transactionType) {
case AUTHORIZE:
    result=paymentApi.createAuthorizationWithPaymentControl(account,paymentMethodId,paymentId,json.getAmount(),currency,json.getPaymentExternalKey(),json.getTransactionExternalKey(),pluginProperties,paymentOptions,callContext);
  break;
case PURCHASE:
result=paymentApi.createPurchaseWithPaymentControl(account,paymentMethodId,paymentId,json.getAmount(),currency,json.getPaymentExternalKey(),json.getTransactionExternalKey(),pluginProperties,paymentOptions,callContext);
break;
case CREDIT:
result=paymentApi.createCreditWithPaymentControl(account,paymentMethodId,paymentId,json.getAmount(),currency,json.getPaymentExternalKey(),json.getTransactionExternalKey(),pluginProperties,paymentOptions,callContext);
break;
default :
return Response.status(Status.PRECONDITION_FAILED).entity("TransactionType " + transactionType + " is not allowed for an account").build();
}
return createPaymentResponse(uriInfo,result,transactionType,json.getTransactionExternalKey(),jaxrsConfig.getJaxrsReturnPathLikeUrl());
}
