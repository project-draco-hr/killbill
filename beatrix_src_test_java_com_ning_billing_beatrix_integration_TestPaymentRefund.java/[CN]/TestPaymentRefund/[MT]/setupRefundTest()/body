{
  final int billingDay=31;
  initialCreationDate=new DateTime(2012,2,1,0,3,42,0,testTimeZone);
  account=createAccountWithNonOsgiPaymentMethod(getAccountData(billingDay));
  clock.setTime(initialCreationDate);
  final SubscriptionBundle bundle=subscriptionUserApi.createBundleForAccount(account.getId(),"whatever",callContext);
  invoiceItemCount=0;
  SubscriptionData subscription=subscriptionDataFromSubscription(createBaseEntitlementAndCheckForCompletion(bundle.getId(),"Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE));
  invoiceChecker.checkInvoice(account.getId(),++invoiceItemCount,callContext,new ExpectedInvoiceItemCheck(initialCreationDate.toLocalDate(),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),clock.getUTCToday(),callContext);
  setDateAndCheckForCompletion(new DateTime(2012,3,2,23,59,59,0,testTimeZone),NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoice=invoiceChecker.checkInvoice(account.getId(),++invoiceItemCount,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,3,2),new LocalDate(2012,3,31),InvoiceItemType.RECURRING,new BigDecimal("233.83")));
  payment=paymentChecker.checkPayment(account.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,3,2),new BigDecimal("233.83"),PaymentStatus.SUCCESS,invoice.getId(),Currency.USD));
  invoiceItems=new HashSet<UUID>(Collections2.transform(Collections2.filter(invoice.getInvoiceItems(),new Predicate<InvoiceItem>(){
    @Override public boolean apply(    @Nullable final InvoiceItem invoiceItem){
      return invoiceItem.getInvoiceItemType() == InvoiceItemType.RECURRING;
    }
  }
),new Function<InvoiceItem,UUID>(){
    @Nullable @Override public UUID apply(    @Nullable final InvoiceItem invoiceItem){
      return invoiceItem.getId();
    }
  }
));
}
