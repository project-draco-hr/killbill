{
  final BusinessAccountModelDao bac=bacFactory.createBusinessAccount(accountId,context);
  final Map<UUID,BusinessInvoiceModelDao> invoices=new HashMap<UUID,BusinessInvoiceModelDao>();
  final Map<UUID,Collection<BusinessInvoiceItemBaseModelDao>> invoiceItems=new HashMap<UUID,Collection<BusinessInvoiceItemBaseModelDao>>();
  final Map<UUID,Collection<BusinessInvoicePaymentBaseModelDao>> invoicePayments=new HashMap<UUID,Collection<BusinessInvoicePaymentBaseModelDao>>();
  createBusinessPojos(accountId,invoices,invoiceItems,invoicePayments,context);
  sqlDao.inTransaction(new Transaction<Void,BusinessAnalyticsSqlDao>(){
    @Override public Void inTransaction(    final BusinessAnalyticsSqlDao transactional,    final TransactionStatus status) throws Exception {
      updateInTransaction(bac,invoices,invoiceItems,invoicePayments,transactional,context);
      return null;
    }
  }
);
}
