{
  final String externalKey="fooXXX";
  final LocalDate initialDate=new LocalDate(2013,8,7);
  clock.setDay(initialDate);
  final Account account=accountApi.createAccount(getAccountData(7),callContext);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final Entitlement entitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,externalKey,null,initialDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  assertEquals(entitlement.getAccountId(),account.getId());
  assertEquals(entitlement.getExternalKey(),externalKey);
  assertEquals(entitlement.getEffectiveStartDate(),initialDate);
  assertNull(entitlement.getEffectiveEndDate());
  final List<SubscriptionBundle> bundles=subscriptionApi.getSubscriptionBundlesForExternalKey(externalKey,callContext);
  assertEquals(bundles.size(),1);
  final SubscriptionBundle activeBundle=subscriptionApi.getActiveSubscriptionBundleForExternalKey(externalKey,callContext);
  assertEquals(activeBundle.getId(),entitlement.getBundleId());
  clock.addDays(3);
  testListener.pushExpectedEvents(NextEvent.CANCEL,NextEvent.BLOCK);
  entitlement.cancelEntitlementWithDate(new LocalDate(clock.getUTCNow(),account.getTimeZone()),true,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  try {
    subscriptionApi.getActiveSubscriptionBundleForExternalKey(externalKey,callContext);
    Assert.fail("Expected getActiveSubscriptionBundleForExternalKey to fail after cancellation");
  }
 catch (  SubscriptionApiException e) {
    assertEquals(e.getCode(),ErrorCode.SUB_GET_INVALID_BUNDLE_KEY.getCode());
  }
  clock.addDays(1);
  final PlanPhaseSpecifier spec2=new PlanPhaseSpecifier("Pistol",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final Entitlement entitlement2=entitlementApi.createBaseEntitlement(account.getId(),spec2,externalKey,null,new LocalDate(clock.getUTCNow(),account.getTimeZone()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  assertEquals(entitlement2.getAccountId(),account.getId());
  assertEquals(entitlement2.getExternalKey(),externalKey);
  final List<SubscriptionBundle> bundles2=subscriptionApi.getSubscriptionBundlesForExternalKey(externalKey,callContext);
  assertEquals(bundles2.size(),2);
  SubscriptionBundle firstbundle=bundles2.get(0);
  assertEquals(firstbundle.getSubscriptions().size(),1);
  assertEquals(firstbundle.getSubscriptions().get(0).getEffectiveStartDate(),new LocalDate(2013,8,7));
  assertEquals(firstbundle.getSubscriptions().get(0).getBillingStartDate(),new LocalDate(2013,8,7));
  assertEquals(firstbundle.getSubscriptions().get(0).getEffectiveEndDate(),new LocalDate(2013,8,10));
  assertEquals(firstbundle.getSubscriptions().get(0).getBillingEndDate(),new LocalDate(2013,8,10));
  SubscriptionBundle secondbundle=bundles2.get(1);
  assertEquals(secondbundle.getSubscriptions().size(),1);
  assertEquals(secondbundle.getSubscriptions().get(0).getEffectiveStartDate(),new LocalDate(2013,8,11));
  assertEquals(secondbundle.getSubscriptions().get(0).getBillingStartDate(),new LocalDate(2013,8,11));
  assertNull(secondbundle.getSubscriptions().get(0).getEffectiveEndDate());
  assertNull(secondbundle.getSubscriptions().get(0).getBillingEndDate());
  assertEquals(secondbundle.getOriginalCreatedDate().compareTo(firstbundle.getCreatedDate()),0);
  final List<SubscriptionBundle> bundles2Again=subscriptionApi.getSubscriptionBundlesForAccountIdAndExternalKey(account.getId(),externalKey,callContext);
  assertEquals(bundles2Again.size(),2);
  clock.addDays(3);
  final Account account2=accountApi.createAccount(getAccountData(7),callContext);
  testListener.pushExpectedEvents(NextEvent.TRANSFER,NextEvent.CANCEL,NextEvent.BLOCK);
  entitlementApi.transferEntitlements(account.getId(),account2.getId(),externalKey,new LocalDate(clock.getUTCNow(),account.getTimeZone()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  final List<SubscriptionBundle> bundles3=subscriptionApi.getSubscriptionBundlesForExternalKey(externalKey,callContext);
  assertEquals(bundles3.size(),3);
  firstbundle=bundles3.get(0);
  assertEquals(firstbundle.getSubscriptions().size(),1);
  assertEquals(firstbundle.getSubscriptions().get(0).getEffectiveStartDate(),new LocalDate(2013,8,7));
  assertEquals(firstbundle.getSubscriptions().get(0).getBillingStartDate(),new LocalDate(2013,8,7));
  assertEquals(firstbundle.getSubscriptions().get(0).getEffectiveEndDate(),new LocalDate(2013,8,10));
  assertEquals(firstbundle.getSubscriptions().get(0).getBillingEndDate(),new LocalDate(2013,8,10));
  secondbundle=bundles3.get(1);
  assertEquals(secondbundle.getSubscriptions().size(),1);
  assertEquals(secondbundle.getSubscriptions().get(0).getEffectiveStartDate(),new LocalDate(2013,8,11));
  assertEquals(secondbundle.getSubscriptions().get(0).getBillingStartDate(),new LocalDate(2013,8,11));
  assertEquals(secondbundle.getSubscriptions().get(0).getEffectiveEndDate(),new LocalDate(2013,8,14));
  assertEquals(secondbundle.getSubscriptions().get(0).getBillingEndDate(),new LocalDate(2013,8,14));
  assertEquals(secondbundle.getOriginalCreatedDate().compareTo(firstbundle.getCreatedDate()),0);
  SubscriptionBundle thirdBundle=bundles3.get(2);
  assertEquals(thirdBundle.getSubscriptions().size(),1);
  assertEquals(thirdBundle.getSubscriptions().get(0).getEffectiveStartDate(),new LocalDate(2013,8,14));
  assertEquals(thirdBundle.getSubscriptions().get(0).getBillingStartDate(),new LocalDate(2013,8,14));
  assertNull(thirdBundle.getSubscriptions().get(0).getEffectiveEndDate());
  assertNull(thirdBundle.getSubscriptions().get(0).getBillingEndDate());
  assertEquals(thirdBundle.getOriginalCreatedDate().compareTo(firstbundle.getCreatedDate()),0);
}
