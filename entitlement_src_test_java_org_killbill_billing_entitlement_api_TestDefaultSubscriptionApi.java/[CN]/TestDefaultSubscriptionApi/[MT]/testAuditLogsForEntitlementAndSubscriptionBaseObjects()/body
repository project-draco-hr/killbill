{
  final LocalDate initialDate=new LocalDate(2013,8,7);
  clock.setDay(initialDate);
  final Account account=accountApi.createAccount(getAccountData(7),callContext);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.ANNUAL,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final Entitlement baseEntitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,account.getExternalKey(),null,initialDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  testListener.pushExpectedEvents(NextEvent.PHASE);
  clock.setDay(new LocalDate(2013,9,7));
  assertListenerStatus();
  final LocalDate pauseDate=new LocalDate(2013,9,17);
  entitlementApi.pause(baseEntitlement.getBundleId(),pauseDate,ImmutableList.<PluginProperty>of(),callContext);
  testListener.pushExpectedEvents(NextEvent.PAUSE,NextEvent.BLOCK);
  clock.setDay(pauseDate);
  assertListenerStatus();
  final LocalDate resumeDate=new LocalDate(2013,12,24);
  entitlementApi.resume(baseEntitlement.getBundleId(),resumeDate,ImmutableList.<PluginProperty>of(),callContext);
  testListener.pushExpectedEvents(NextEvent.RESUME,NextEvent.BLOCK);
  clock.setDay(resumeDate);
  assertListenerStatus();
  final LocalDate cancelDate=new LocalDate(2013,12,27);
  baseEntitlement.cancelEntitlementWithDate(cancelDate,true,ImmutableList.<PluginProperty>of(),callContext);
  testListener.pushExpectedEvents(NextEvent.CANCEL,NextEvent.BLOCK);
  clock.setDay(cancelDate);
  assertListenerStatus();
  final SubscriptionBundle bundle=subscriptionApi.getSubscriptionBundle(baseEntitlement.getBundleId(),callContext);
  final List<SubscriptionEvent> transitions=bundle.getTimeline().getSubscriptionEvents();
  assertEquals(transitions.size(),9);
  checkSubscriptionEventAuditLog(transitions,0,SubscriptionEventType.START_ENTITLEMENT);
  checkSubscriptionEventAuditLog(transitions,1,SubscriptionEventType.START_BILLING);
  checkSubscriptionEventAuditLog(transitions,2,SubscriptionEventType.PHASE);
  checkSubscriptionEventAuditLog(transitions,3,SubscriptionEventType.PAUSE_ENTITLEMENT);
  checkSubscriptionEventAuditLog(transitions,4,SubscriptionEventType.PAUSE_BILLING);
  checkSubscriptionEventAuditLog(transitions,5,SubscriptionEventType.RESUME_ENTITLEMENT);
  checkSubscriptionEventAuditLog(transitions,6,SubscriptionEventType.RESUME_BILLING);
  checkSubscriptionEventAuditLog(transitions,7,SubscriptionEventType.STOP_ENTITLEMENT);
  checkSubscriptionEventAuditLog(transitions,8,SubscriptionEventType.STOP_BILLING);
}
