{
  final String productType="subscription";
  final Product product=new MockProduct("platinum",productType,ProductCategory.BASE);
  final Plan plan=new MockPlan("platinum-monthly",product);
  final PlanPhase phase=new MockPhase(PhaseType.TRIAL,plan,MockDuration.UNLIMITED(),25.95);
  final Catalog catalog=Mockito.mock(Catalog.class);
  Mockito.when(catalog.findPlan(Mockito.anyString(),Mockito.<DateTime>any(),Mockito.<DateTime>any())).thenReturn(plan);
  Mockito.when(catalog.findPhase(Mockito.anyString(),Mockito.<DateTime>any(),Mockito.<DateTime>any())).thenReturn(phase);
  final BusinessSubscriptionTransitionModelDao transition=new BusinessSubscriptionTransitionModelDao(3L,UUID.randomUUID(),UUID.randomUUID().toString(),UUID.randomUUID(),UUID.randomUUID().toString(),UUID.randomUUID(),clock.getUTCNow(),BusinessSubscriptionEvent.subscriptionCreated(plan.getName(),catalog,clock.getUTCNow(),clock.getUTCNow()),null,new BusinessSubscription("DEFAULT",plan.getName(),phase.getName(),Currency.USD,clock.getUTCNow(),Subscription.SubscriptionState.ACTIVE,catalog));
  subscriptionTransitionSqlDao.createTransition(transition,internalCallContext);
  final TimeSeriesData notFoundData=analyticsUserApi.getSubscriptionsCreatedOverTime(productType,UUID.randomUUID().toString(),callContext);
  Assert.assertEquals(notFoundData.getDates().size(),0);
  Assert.assertEquals(notFoundData.getValues().size(),0);
  final TimeSeriesData data=analyticsUserApi.getSubscriptionsCreatedOverTime(productType,phase.getName(),callContext);
  Assert.assertEquals(data.getDates().size(),1);
  Assert.assertEquals(data.getDates().get(0),clock.getUTCToday());
  Assert.assertEquals(data.getValues().size(),1);
  Assert.assertEquals(data.getValues().get(0),(double)1);
}
