{
  final Account account=createAccountWithDefaultPaymentMethod();
  final String paymentExternalKey="extkey";
  final String authTransactionExternalKey=UUID.randomUUID().toString();
  final PaymentTransaction authTransaction=new PaymentTransaction();
  authTransaction.setAmount(BigDecimal.TEN);
  authTransaction.setCurrency(account.getCurrency());
  authTransaction.setPaymentExternalKey(paymentExternalKey);
  authTransaction.setTransactionExternalKey(authTransactionExternalKey);
  authTransaction.setTransactionType("AUTHORIZE");
  final Payment authPayment=killBillClient.createPayment(account.getAccountId(),account.getPaymentMethodId(),authTransaction,basicRequestOptions());
  fixPaymentState(authPayment,null,"AUTH_FAILED",TransactionStatus.PAYMENT_FAILURE);
  final Payment updatedPayment1=killBillClient.getPayment(authPayment.getPaymentId());
  Assert.assertEquals(updatedPayment1.getTransactions().size(),1);
  final PaymentTransaction authTransaction1=updatedPayment1.getTransactions().get(0);
  Assert.assertEquals(authTransaction1.getStatus(),TransactionStatus.PAYMENT_FAILURE.toString());
  doCapture(updatedPayment1,false);
  fixPaymentState(authPayment,"AUTH_FAILED","AUTH_FAILED",TransactionStatus.PAYMENT_FAILURE);
  final Payment updatedPayment2=killBillClient.getPayment(authPayment.getPaymentId());
  Assert.assertEquals(updatedPayment2.getTransactions().size(),2);
  final PaymentTransaction authTransaction2=updatedPayment2.getTransactions().get(0);
  Assert.assertEquals(authTransaction2.getStatus(),TransactionStatus.PAYMENT_FAILURE.toString());
  final PaymentTransaction captureTransaction2=updatedPayment2.getTransactions().get(1);
  Assert.assertEquals(captureTransaction2.getStatus(),TransactionStatus.SUCCESS.toString());
  doCapture(updatedPayment2,true);
}
