{
  if (billingPeriod == null) {
    errors.add(new ValidationError(String.format("Phase %s of plan %s has a recurring price but no billing period",type.toString(),plan.getName()),catalog.getCatalogURI(),DefaultPlanPhase.class,type.toString()));
  }
  if (billingPeriod == BillingPeriod.NO_BILLING_PERIOD && recurringPrice != null) {
    errors.add(new ValidationError(String.format("Phase %s of plan %s has a recurring price but no billing period",type.toString(),plan.getName()),catalog.getCatalogURI(),DefaultPlanPhase.class,type.toString()));
  }
  if ((recurringPrice != null) && (billingPeriod == null || billingPeriod == BillingPeriod.NO_BILLING_PERIOD)) {
    errors.add(new ValidationError(String.format("Phase %s of plan %s has a recurring price but no billing period",type.toString(),plan.getName()),catalog.getCatalogURI(),DefaultPlanPhase.class,type.toString()));
  }
  if ((recurringPrice == null) && billingPeriod != BillingPeriod.NO_BILLING_PERIOD) {
    errors.add(new ValidationError(String.format("Phase %s of plan %s has no recurring price but does have a billing period. The billing period should be set to '%s'",type.toString(),plan.getName(),BillingPeriod.NO_BILLING_PERIOD),catalog.getCatalogURI(),DefaultPlanPhase.class,type.toString()));
  }
  if ((recurringPrice == null) && fixedPrice == null) {
    errors.add(new ValidationError(String.format("Phase %s of plan %s has neither a recurring price or a fixed price.",type.toString(),plan.getName()),catalog.getCatalogURI(),DefaultPlanPhase.class,type.toString()));
  }
  return errors;
}
