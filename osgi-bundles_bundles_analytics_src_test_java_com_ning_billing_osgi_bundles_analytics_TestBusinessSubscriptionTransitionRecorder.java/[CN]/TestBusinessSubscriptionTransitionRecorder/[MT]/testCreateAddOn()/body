{
  final UUID bundleId=UUID.randomUUID();
  final UUID externalKey=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final UUID subscriptionId=UUID.randomUUID();
  Mockito.when(catalogService.getFullCatalog()).thenReturn(Mockito.mock(Catalog.class));
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getId()).thenReturn(bundleId);
  Mockito.when(bundle.getAccountId()).thenReturn(accountId);
  Mockito.when(bundle.getExternalKey()).thenReturn(externalKey.toString());
  Mockito.when(entitlementInternalApi.getBundleFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(bundle);
  final Account account=Mockito.mock(Account.class);
  Mockito.when(account.getExternalKey()).thenReturn(externalKey.toString());
  Mockito.when(accountInternalApi.getAccountById(Mockito.eq(bundle.getAccountId()),Mockito.<InternalTenantContext>any())).thenReturn(account);
  final EffectiveSubscriptionInternalEvent eventEffective=Mockito.mock(EffectiveSubscriptionInternalEvent.class);
  Mockito.when(eventEffective.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(eventEffective.getTransitionType()).thenReturn(SubscriptionTransitionType.CREATE);
  Mockito.when(eventEffective.getSubscriptionId()).thenReturn(subscriptionId);
  Mockito.when(eventEffective.getRequestedTransitionTime()).thenReturn(new DateTime(DateTimeZone.UTC));
  Mockito.when(eventEffective.getNextPlan()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(eventEffective.getEffectiveTransitionTime()).thenReturn(new DateTime(DateTimeZone.UTC));
  Mockito.when(eventEffective.getSubscriptionStartDate()).thenReturn(new DateTime(DateTimeZone.UTC));
  final Subscription subscription=Mockito.mock(Subscription.class);
  Mockito.when(subscription.getId()).thenReturn(subscriptionId);
  Mockito.when(entitlementInternalApi.getAllTransitions(Mockito.eq(subscription),Mockito.<InternalTenantContext>any())).thenReturn(ImmutableList.<EffectiveSubscriptionInternalEvent>of(eventEffective));
  Mockito.when(entitlementInternalApi.getSubscriptionsForBundle(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(ImmutableList.<Subscription>of(subscription));
  subscriptionTransitionDao.update(bundle.getId(),internalCallContext);
  Assert.assertEquals(subscriptionTransitionSqlDao.getTransitionsByKey(externalKey.toString(),internalCallContext).size(),1);
  final BusinessSubscriptionTransitionModelDao transition=subscriptionTransitionSqlDao.getTransitionsByKey(externalKey.toString(),internalCallContext).get(0);
  Assert.assertEquals(transition.getTotalOrdering(),(long)eventEffective.getTotalOrdering());
  Assert.assertEquals(transition.getAccountKey(),externalKey.toString());
  Assert.assertNull(transition.getPreviousSubscription());
}
