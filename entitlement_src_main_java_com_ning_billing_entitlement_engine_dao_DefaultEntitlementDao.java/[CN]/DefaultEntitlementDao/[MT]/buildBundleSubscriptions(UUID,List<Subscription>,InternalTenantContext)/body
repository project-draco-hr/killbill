{
  if (input == null || input.size() == 0) {
    return Collections.emptyList();
  }
  Collections.sort(input,new Comparator<Subscription>(){
    @Override public int compare(    final Subscription o1,    final Subscription o2){
      if (o1.getCategory() == ProductCategory.BASE) {
        return -1;
      }
 else       if (o2.getCategory() == ProductCategory.BASE) {
        return 1;
      }
 else {
        return ((SubscriptionData)o1).getAlignStartDate().compareTo(((SubscriptionData)o2).getAlignStartDate());
      }
    }
  }
);
  EntitlementEvent futureBaseEvent=null;
  final List<Subscription> result=new ArrayList<Subscription>(input.size());
  for (  final Subscription cur : input) {
    final List<EntitlementEvent> events=getEventsForSubscription(cur.getId(),context);
    Subscription reloaded=createSubscriptionForInternalUse(cur,events);
switch (cur.getCategory()) {
case BASE:
      final Collection<EntitlementEvent> futureApiEvents=Collections2.filter(events,new Predicate<EntitlementEvent>(){
        @Override public boolean apply(        final EntitlementEvent input){
          return (input.getEffectiveDate().isAfter(clock.getUTCNow()) && ((input instanceof ApiEventCancel) || (input instanceof ApiEventChange)));
        }
      }
);
    futureBaseEvent=(futureApiEvents.size() == 0) ? null : futureApiEvents.iterator().next();
  break;
case ADD_ON:
final Plan targetAddOnPlan=reloaded.getCurrentPlan();
final String baseProductName=(futureBaseEvent instanceof ApiEventChange) ? ((ApiEventChange)futureBaseEvent).getEventPlan() : null;
final boolean createCancelEvent=(futureBaseEvent != null && targetAddOnPlan != null) && ((futureBaseEvent instanceof ApiEventCancel) || ((!addonUtils.isAddonAvailableFromPlanName(baseProductName,futureBaseEvent.getEffectiveDate(),targetAddOnPlan)) || (addonUtils.isAddonIncludedFromPlanName(baseProductName,futureBaseEvent.getEffectiveDate(),targetAddOnPlan))));
if (createCancelEvent) {
final DateTime now=clock.getUTCNow();
final EntitlementEvent addOnCancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(reloaded.getId()).setActiveVersion(((SubscriptionData)reloaded).getActiveVersion()).setProcessedDate(now).setEffectiveDate(futureBaseEvent.getEffectiveDate()).setRequestedDate(now).setFromDisk(false));
events.add(addOnCancelEvent);
reloaded=createSubscriptionForInternalUse(cur,events);
}
break;
default :
break;
}
result.add(reloaded);
}
return result;
}
