{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final EntitlementEventSqlDao transactional=entitySqlDaoWrapperFactory.become(EntitlementEventSqlDao.class);
      for (      final EntitlementEvent cur : recreateEvents) {
        transactional.create(new EntitlementEventModelDao(cur),context);
        final boolean isBusEvent=cur.getEffectiveDate().compareTo(clock.getUTCNow()) <= 0 && (cur.getType() == EventType.API_USER);
        recordBusOrFutureNotificationFromTransaction(subscription,cur,entitySqlDaoWrapperFactory,isBusEvent,0,context);
      }
      notifyBusOfRequestedChange(entitySqlDaoWrapperFactory,subscription,recreateEvents.get(recreateEvents.size() - 1),context);
      return null;
    }
  }
);
}
