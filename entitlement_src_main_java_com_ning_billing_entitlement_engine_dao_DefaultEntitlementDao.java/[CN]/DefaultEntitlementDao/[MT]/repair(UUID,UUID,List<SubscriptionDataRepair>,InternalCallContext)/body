{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final SubscriptionSqlDao transactional=entitySqlDaoWrapperFactory.become(SubscriptionSqlDao.class);
      final EntitlementEventSqlDao transEventDao=entitySqlDaoWrapperFactory.become(EntitlementEventSqlDao.class);
      for (      final SubscriptionDataRepair cur : inRepair) {
        transactional.updateForRepair(cur.getId().toString(),cur.getActiveVersion(),cur.getAlignStartDate().toDate(),cur.getBundleStartDate().toDate(),context);
        for (        final EntitlementEvent event : cur.getInitialEvents()) {
          transEventDao.updateVersion(event.getId().toString(),event.getActiveVersion(),context);
        }
        for (        final EntitlementEvent event : cur.getNewEvents()) {
          transEventDao.create(new EntitlementEventModelDao(event),context);
          if (event.getEffectiveDate().isAfter(clock.getUTCNow())) {
            recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,event.getEffectiveDate(),new EntitlementNotificationKey(event.getId()),context);
          }
        }
      }
      try {
        final RepairEntitlementInternalEvent busEvent=new DefaultRepairEntitlementEvent(accountId,bundleId,clock.getUTCNow());
        eventBus.postFromTransaction(busEvent,context.getUserToken(),context.getAccountRecordId(),context.getTenantRecordId(),entitySqlDaoWrapperFactory.getSqlDao());
      }
 catch (      EventBusException e) {
        log.warn("Failed to post repair entitlement event for bundle " + bundleId,e);
      }
      return null;
    }
  }
);
}
