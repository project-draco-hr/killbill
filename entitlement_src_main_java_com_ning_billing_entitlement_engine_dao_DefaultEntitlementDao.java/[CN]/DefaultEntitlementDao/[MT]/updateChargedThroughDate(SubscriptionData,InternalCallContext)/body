{
  final Date ctd=(subscription.getChargedThroughDate() != null) ? subscription.getChargedThroughDate().toDate() : null;
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final SubscriptionSqlDao transactionalDao=entitySqlDaoWrapperFactory.become(SubscriptionSqlDao.class);
      transactionalDao.updateChargedThroughDate(subscription.getId().toString(),ctd,context);
      final BundleSqlDao bundleSqlDao=entitySqlDaoWrapperFactory.become(BundleSqlDao.class);
      final String bundleId=subscription.getBundleId().toString();
      bundleSqlDao.updateBundleLastSysTime(bundleId,clock.getUTCNow().toDate(),context);
      return null;
    }
  }
);
}
