{
  final EntitlementEventModelDao migrateBillingEvent=findFutureEventFromTransaction(subscriptionId,entitySqlDaoWrapperFactory,EventType.API_USER,ApiEventType.MIGRATE_BILLING,context);
  if (migrateBillingEvent == null) {
    return changeEvents;
  }
  String prevPlan=null;
  String prevPhase=null;
  String prevPriceList=null;
  for (  EntitlementEvent cur : changeEvents) {
switch (cur.getType()) {
case API_USER:
      final ApiEvent apiEvent=(ApiEvent)cur;
    prevPlan=apiEvent.getEventPlan();
  prevPhase=apiEvent.getEventPlanPhase();
prevPriceList=apiEvent.getPriceList();
break;
case PHASE:
final PhaseEvent phaseEvent=(PhaseEvent)cur;
prevPhase=phaseEvent.getPhase();
break;
default :
throw new EntitlementError("Unknown event type " + cur.getType());
}
if (cur.getEffectiveDate().compareTo(migrateBillingEvent.getEffectiveDate()) > 0) {
if (cur.getType() == EventType.API_USER && ((ApiEvent)cur).getEventType() == ApiEventType.CHANGE) {
return changeEvents;
}
break;
}
}
if (prevPlan != null) {
final DateTime now=clock.getUTCNow();
final ApiEventBuilder builder=new ApiEventBuilder().setActive(true).setEventType(ApiEventType.MIGRATE_BILLING).setFromDisk(true).setTotalOrdering(migrateBillingEvent.getTotalOrdering()).setUuid(UUID.randomUUID()).setSubscriptionId(migrateBillingEvent.getSubscriptionId()).setCreatedDate(now).setUpdatedDate(now).setRequestedDate(migrateBillingEvent.getRequestedDate()).setEffectiveDate(migrateBillingEvent.getEffectiveDate()).setProcessedDate(now).setActiveVersion(migrateBillingEvent.getCurrentVersion()).setUserToken(context.getUserToken()).setEventPlan(prevPlan).setEventPlanPhase(prevPhase).setEventPriceList(prevPriceList);
final EntitlementEvent newMigrateBillingEvent=new ApiEventMigrateBilling(builder);
changeEvents.add(newMigrateBillingEvent);
Collections.sort(changeEvents,new Comparator<EntitlementEvent>(){
@Override public int compare(final EntitlementEvent o1,final EntitlementEvent o2){
return o1.getEffectiveDate().compareTo(o2.getEffectiveDate());
}
}
);
}
return changeEvents;
}
