{
  if (transactionType != TransactionType.AUTHORIZE && transactionType != TransactionType.PURCHASE && transactionType != TransactionType.CREDIT) {
    return;
  }
  final PaymentTransactionModelDao existingPendingTransactionForDifferentKey=Iterables.tryFind(pendingTransactionsForPaymentAndTransactionType,new Predicate<PaymentTransactionModelDao>(){
    @Override public boolean apply(    final PaymentTransactionModelDao input){
      return !input.getTransactionExternalKey().equals(paymentTransactionExternalKey);
    }
  }
).orNull();
  if (existingPendingTransactionForDifferentKey != null) {
    throw new RuntimeException(String.format("Failed to create another initial transaction for paymentId='%s' : Existing PENDING transactionId='%s'",existingPendingTransactionForDifferentKey.getPaymentId(),existingPendingTransactionForDifferentKey.getId()));
  }
}
