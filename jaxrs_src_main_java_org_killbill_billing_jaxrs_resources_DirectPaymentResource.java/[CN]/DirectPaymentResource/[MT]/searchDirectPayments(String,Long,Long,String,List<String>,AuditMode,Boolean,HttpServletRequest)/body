{
  final Iterable<PluginProperty> pluginProperties=extractPluginProperties(pluginPropertiesString);
  final TenantContext tenantContext=context.createContext(request);
  final Pagination<DirectPayment> directPayments;
  if (Strings.isNullOrEmpty(pluginName)) {
    directPayments=paymentApi.searchPayments(searchKey,offset,limit,withPluginInfo,pluginProperties,tenantContext);
  }
 else {
    directPayments=paymentApi.searchPayments(searchKey,offset,limit,pluginName,withPluginInfo,pluginProperties,tenantContext);
  }
  final URI nextPageUri=uriBuilder.nextPage(DirectPaymentResource.class,"searchDirectPayments",directPayments.getNextOffset(),limit,ImmutableMap.<String,String>of("searchKey",searchKey,QUERY_PAYMENT_METHOD_PLUGIN_NAME,Strings.nullToEmpty(pluginName),QUERY_AUDIT,auditMode.getLevel().toString()));
  final AtomicReference<Map<UUID,AccountAuditLogs>> accountsAuditLogs=new AtomicReference<Map<UUID,AccountAuditLogs>>(new HashMap<UUID,AccountAuditLogs>());
  return buildStreamingPaginationResponse(directPayments,new Function<DirectPayment,DirectPaymentJson>(){
    @Override public DirectPaymentJson apply(    final DirectPayment directPayment){
      if (accountsAuditLogs.get().get(directPayment.getAccountId()) == null) {
        accountsAuditLogs.get().put(directPayment.getAccountId(),auditUserApi.getAccountAuditLogs(directPayment.getAccountId(),auditMode.getLevel(),tenantContext));
      }
      final AccountAuditLogs accountAuditLogs=accountsAuditLogs.get().get(directPayment.getAccountId());
      return new DirectPaymentJson(directPayment,accountAuditLogs);
    }
  }
,nextPageUri);
}
