{
  final List<PaymentTransactionModelDao> paymentTransactionsForCurrentPayment=daoHelper.getPaymentDao().getTransactionsForPayment(paymentStateContext.getPaymentId(),paymentStateContext.getInternalCallContext());
  final Collection<PaymentTransactionModelDao> completionCandidates=new LinkedList<PaymentTransactionModelDao>();
  for (  final PaymentTransactionModelDao paymentTransactionModelDao : paymentTransactionsForCurrentPayment) {
    if (!(paymentStateContext.getTransactionId() != null && paymentTransactionModelDao.getId().equals(paymentStateContext.getTransactionId())) && !(paymentStateContext.getPaymentTransactionExternalKey() != null && paymentTransactionModelDao.getTransactionExternalKey().equals(paymentStateContext.getPaymentTransactionExternalKey()))) {
      if ((paymentTransactionModelDao.getTransactionType() == TransactionType.AUTHORIZE || paymentTransactionModelDao.getTransactionType() == TransactionType.PURCHASE || paymentTransactionModelDao.getTransactionType() == TransactionType.CREDIT) && paymentTransactionModelDao.getTransactionStatus() == TransactionStatus.PENDING) {
        final PaymentModelDao paymentModelDao=daoHelper.getPayment();
        throw new PaymentApiException(ErrorCode.PAYMENT_INVALID_OPERATION,paymentTransactionModelDao.getTransactionType(),paymentModelDao.getStateName());
      }
 else {
        continue;
      }
    }
    if (paymentTransactionModelDao.getTransactionType() != paymentStateContext.getTransactionType()) {
      final PaymentModelDao paymentModelDao=daoHelper.getPayment();
      throw new PaymentApiException(ErrorCode.PAYMENT_INVALID_OPERATION,paymentStateContext.getTransactionType(),paymentModelDao.getStateName());
    }
    if (paymentTransactionModelDao.getTransactionStatus() == TransactionStatus.PENDING || paymentTransactionModelDao.getTransactionStatus() == TransactionStatus.UNKNOWN) {
      completionCandidates.add(paymentTransactionModelDao);
    }
  }
  Preconditions.checkState(Iterables.<PaymentTransactionModelDao>size(completionCandidates) <= 1,"There should be at most one completion candidate");
  return Iterables.<PaymentTransactionModelDao>getLast(completionCandidates,null);
}
