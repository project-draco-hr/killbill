{
  final List<PaymentModelDao> paymentsModelDao=paymentDao.getPaymentsForAccount(accountId,tenantContext);
  final List<PaymentTransactionModelDao> transactionsModelDao=paymentDao.getTransactionsForAccount(accountId,tenantContext);
  final Map<UUID,PaymentPluginApi> paymentPluginByPaymentMethodId=new HashMap<UUID,PaymentPluginApi>();
  final Collection<UUID> absentPlugins=new HashSet<UUID>();
  final List<Payment> transformedPayments=Lists.<PaymentModelDao,Payment>transform(paymentsModelDao,new Function<PaymentModelDao,Payment>(){
    @Override public Payment apply(    final PaymentModelDao paymentModelDao){
      List<PaymentTransactionInfoPlugin> pluginInfo=null;
      if (withPluginInfo) {
        PaymentPluginApi pluginApi=paymentPluginByPaymentMethodId.get(paymentModelDao.getPaymentMethodId());
        if (pluginApi == null && !absentPlugins.contains(paymentModelDao.getPaymentMethodId())) {
          try {
            pluginApi=getPaymentProviderPlugin(paymentModelDao.getPaymentMethodId(),tenantContext);
            paymentPluginByPaymentMethodId.put(paymentModelDao.getPaymentMethodId(),pluginApi);
          }
 catch (          final PaymentApiException e) {
            log.warn("Unable to retrieve pluginApi for payment method " + paymentModelDao.getPaymentMethodId());
            absentPlugins.add(paymentModelDao.getPaymentMethodId());
          }
        }
        pluginInfo=getPaymentTransactionInfoPluginsIfNeeded(pluginApi,paymentModelDao,context);
      }
      return toPayment(paymentModelDao,transactionsModelDao,pluginInfo,tenantContext);
    }
  }
);
  return ImmutableList.<Payment>copyOf(transformedPayments);
}
