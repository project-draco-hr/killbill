{
  final Ordering<PaymentTransaction> perPaymentTransactionOrdering=Ordering.<PaymentTransaction>from(new Comparator<PaymentTransaction>(){
    @Override public int compare(    final PaymentTransaction o1,    final PaymentTransaction o2){
      return o1.getEffectiveDate().compareTo(o2.getEffectiveDate());
    }
  }
);
  final Iterable<PaymentTransactionModelDao> filteredTransactions=Iterables.filter(curTransactionsModelDao,new Predicate<PaymentTransactionModelDao>(){
    @Override public boolean apply(    final PaymentTransactionModelDao curPaymentTransactionModelDao){
      return curPaymentTransactionModelDao.getPaymentId().equals(curPaymentModelDao.getId());
    }
  }
);
  PaymentModelDao newPaymentModelDao=curPaymentModelDao;
  final Collection<PaymentTransaction> transactions=new LinkedList<PaymentTransaction>();
  for (  final PaymentTransactionModelDao curPaymentTransactionModelDao : filteredTransactions) {
    PaymentTransactionModelDao newPaymentTransactionModelDao=curPaymentTransactionModelDao;
    final PaymentTransactionInfoPlugin paymentTransactionInfoPlugin=findPaymentTransactionInfoPlugin(newPaymentTransactionModelDao,pluginTransactions);
    if (paymentTransactionInfoPlugin != null && curPaymentTransactionModelDao.getTransactionStatus() == TransactionStatus.UNKNOWN) {
      final Boolean hasChanged=incompletePaymentTransactionTask.updatePaymentAndTransactionIfNeededWithAccountLock(newPaymentModelDao,newPaymentTransactionModelDao,paymentTransactionInfoPlugin,internalTenantContext);
      if (hasChanged != null && hasChanged) {
        newPaymentModelDao=paymentDao.getPayment(newPaymentModelDao.getId(),internalTenantContext);
        newPaymentTransactionModelDao=paymentDao.getPaymentTransaction(newPaymentTransactionModelDao.getId(),internalTenantContext);
      }
    }
    final PaymentTransaction transaction=new DefaultPaymentTransaction(newPaymentTransactionModelDao.getId(),newPaymentTransactionModelDao.getAttemptId(),newPaymentTransactionModelDao.getTransactionExternalKey(),newPaymentTransactionModelDao.getCreatedDate(),newPaymentTransactionModelDao.getUpdatedDate(),newPaymentTransactionModelDao.getPaymentId(),newPaymentTransactionModelDao.getTransactionType(),newPaymentTransactionModelDao.getEffectiveDate(),newPaymentTransactionModelDao.getTransactionStatus(),newPaymentTransactionModelDao.getAmount(),newPaymentTransactionModelDao.getCurrency(),newPaymentTransactionModelDao.getProcessedAmount(),newPaymentTransactionModelDao.getProcessedCurrency(),newPaymentTransactionModelDao.getGatewayErrorCode(),newPaymentTransactionModelDao.getGatewayErrorMsg(),paymentTransactionInfoPlugin);
    transactions.add(transaction);
  }
  final List<PaymentTransaction> sortedTransactions=perPaymentTransactionOrdering.immutableSortedCopy(transactions);
  return new DefaultPayment(curPaymentModelDao.getId(),curPaymentModelDao.getCreatedDate(),curPaymentModelDao.getUpdatedDate(),curPaymentModelDao.getAccountId(),curPaymentModelDao.getPaymentMethodId(),curPaymentModelDao.getPaymentNumber(),curPaymentModelDao.getExternalKey(),sortedTransactions);
}
