{
  internalCallContext.setAccountRecordId((long)accountNb);
  final PaymentModelDao specifiedFirstPaymentModelDao=generatePaymentModelDao(accountId);
  final PaymentTransactionModelDao specifiedFirstPaymentTransactionModelDao=generatePaymentTransactionModelDao(specifiedFirstPaymentModelDao.getId());
  final PaymentModelDao firstPaymentModelDao=paymentDao.insertPaymentWithFirstTransaction(specifiedFirstPaymentModelDao,specifiedFirstPaymentTransactionModelDao,internalCallContext);
  verifyPayment(firstPaymentModelDao,specifiedFirstPaymentModelDao);
  verifyPaymentAndTransactions(internalCallContext,specifiedFirstPaymentModelDao,specifiedFirstPaymentTransactionModelDao);
  final PaymentTransactionModelDao specifiedSecondPaymentTransactionModelDao=generatePaymentTransactionModelDao(specifiedFirstPaymentModelDao.getId());
  final PaymentTransactionModelDao secondTransactionModelDao=paymentDao.updatePaymentWithNewTransaction(specifiedFirstPaymentTransactionModelDao.getPaymentId(),specifiedSecondPaymentTransactionModelDao,internalCallContext);
  verifyPaymentTransaction(secondTransactionModelDao,specifiedSecondPaymentTransactionModelDao);
  verifyPaymentAndTransactions(internalCallContext,specifiedFirstPaymentModelDao,specifiedFirstPaymentTransactionModelDao,specifiedSecondPaymentTransactionModelDao);
  final BigDecimal processedAmount=new BigDecimal("902341.23232");
  final Currency processedCurrency=Currency.USD;
  final String gatewayErrorCode=UUID.randomUUID().toString().substring(0,5);
  final String gatewayErrorMsg=UUID.randomUUID().toString();
  paymentDao.updatePaymentAndTransactionOnCompletion(accountId,specifiedSecondPaymentTransactionModelDao.getAttemptId(),specifiedSecondPaymentTransactionModelDao.getPaymentId(),specifiedFirstPaymentTransactionModelDao.getTransactionType(),"SOME_ERRORED_STATE","SOME_ERRORED_STATE",specifiedSecondPaymentTransactionModelDao.getId(),TransactionStatus.PAYMENT_FAILURE,processedAmount,processedCurrency,gatewayErrorCode,gatewayErrorMsg,internalCallContext);
  final PaymentTransactionModelDao updatedSecondPaymentTransactionModelDao=paymentDao.getPaymentTransaction(specifiedSecondPaymentTransactionModelDao.getId(),internalCallContext);
  Assert.assertEquals(updatedSecondPaymentTransactionModelDao.getTransactionStatus(),TransactionStatus.PAYMENT_FAILURE);
  Assert.assertEquals(updatedSecondPaymentTransactionModelDao.getGatewayErrorMsg(),gatewayErrorMsg);
  Assert.assertEquals(updatedSecondPaymentTransactionModelDao.getGatewayErrorMsg(),gatewayErrorMsg);
  for (int i=0; i < 3; i++) {
    final PaymentModelDao paymentModelDao=generatePaymentModelDao(accountId);
    final PaymentTransactionModelDao paymentTransactionModelDao=generatePaymentTransactionModelDao(paymentModelDao.getId());
    final PaymentModelDao insertedPaymentModelDao=paymentDao.insertPaymentWithFirstTransaction(paymentModelDao,paymentTransactionModelDao,internalCallContext);
    verifyPayment(insertedPaymentModelDao,paymentModelDao);
    Assert.assertEquals(ImmutableList.<PaymentModelDao>copyOf(paymentDao.searchPayments(paymentModelDao.getPaymentMethodId().toString(),0L,100L,internalCallContext).iterator()).size(),1);
    Assert.assertEquals(ImmutableList.<PaymentModelDao>copyOf(paymentDao.searchPayments(paymentModelDao.getExternalKey(),0L,100L,internalCallContext).iterator()).size(),1);
  }
  Assert.assertEquals(paymentDao.getPaymentsForAccount(specifiedFirstPaymentModelDao.getAccountId(),internalCallContext).size(),4);
  Assert.assertEquals(ImmutableList.<PaymentModelDao>copyOf(paymentDao.searchPayments(accountId.toString(),0L,100L,internalCallContext).iterator()).size(),4);
}
