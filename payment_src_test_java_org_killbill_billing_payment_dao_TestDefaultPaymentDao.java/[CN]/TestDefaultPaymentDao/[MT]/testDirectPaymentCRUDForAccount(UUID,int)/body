{
  final InternalCallContext accountCallContext=new InternalCallContext(internalCallContext,(long)accountNb);
  final PaymentModelDao specifiedFirstPaymentModelDao=generateDirectPaymentModelDao(accountId);
  final PaymentTransactionModelDao specifiedFirstDirectPaymentTransactionModelDao=generateDirectPaymentTransactionModelDao(specifiedFirstPaymentModelDao.getId());
  final PaymentModelDao firstPaymentModelDao=paymentDao.insertDirectPaymentWithFirstTransaction(specifiedFirstPaymentModelDao,specifiedFirstDirectPaymentTransactionModelDao,accountCallContext);
  verifyDirectPayment(firstPaymentModelDao,specifiedFirstPaymentModelDao);
  verifyDirectPaymentAndTransactions(accountCallContext,specifiedFirstPaymentModelDao,specifiedFirstDirectPaymentTransactionModelDao);
  final PaymentTransactionModelDao specifiedSecondDirectPaymentTransactionModelDao=generateDirectPaymentTransactionModelDao(specifiedFirstPaymentModelDao.getId());
  final PaymentTransactionModelDao secondDirectTransactionModelDao=paymentDao.updateDirectPaymentWithNewTransaction(specifiedFirstDirectPaymentTransactionModelDao.getPaymentId(),specifiedSecondDirectPaymentTransactionModelDao,accountCallContext);
  verifyDirectPaymentTransaction(secondDirectTransactionModelDao,specifiedSecondDirectPaymentTransactionModelDao);
  verifyDirectPaymentAndTransactions(accountCallContext,specifiedFirstPaymentModelDao,specifiedFirstDirectPaymentTransactionModelDao,specifiedSecondDirectPaymentTransactionModelDao);
  final BigDecimal processedAmount=new BigDecimal("902341.23232");
  final Currency processedCurrency=Currency.USD;
  final String gatewayErrorCode=UUID.randomUUID().toString().substring(0,5);
  final String gatewayErrorMsg=UUID.randomUUID().toString();
  paymentDao.updateDirectPaymentAndTransactionOnCompletion(specifiedSecondDirectPaymentTransactionModelDao.getPaymentId(),"SOME_ERRORED_STATE",specifiedSecondDirectPaymentTransactionModelDao.getId(),TransactionStatus.PAYMENT_FAILURE,processedAmount,processedCurrency,gatewayErrorCode,gatewayErrorMsg,accountCallContext);
  final PaymentTransactionModelDao updatedSecondDirectPaymentTransactionModelDao=paymentDao.getDirectPaymentTransaction(specifiedSecondDirectPaymentTransactionModelDao.getId(),accountCallContext);
  Assert.assertEquals(updatedSecondDirectPaymentTransactionModelDao.getTransactionStatus(),TransactionStatus.PAYMENT_FAILURE);
  Assert.assertEquals(updatedSecondDirectPaymentTransactionModelDao.getGatewayErrorMsg(),gatewayErrorMsg);
  Assert.assertEquals(updatedSecondDirectPaymentTransactionModelDao.getGatewayErrorMsg(),gatewayErrorMsg);
  for (int i=0; i < 3; i++) {
    final PaymentModelDao paymentModelDao=generateDirectPaymentModelDao(accountId);
    final PaymentTransactionModelDao directPaymentTransactionModelDao=generateDirectPaymentTransactionModelDao(paymentModelDao.getId());
    final PaymentModelDao insertedPaymentModelDao=paymentDao.insertDirectPaymentWithFirstTransaction(paymentModelDao,directPaymentTransactionModelDao,accountCallContext);
    verifyDirectPayment(insertedPaymentModelDao,paymentModelDao);
  }
  Assert.assertEquals(paymentDao.getDirectPaymentsForAccount(specifiedFirstPaymentModelDao.getAccountId(),accountCallContext).size(),4);
}
