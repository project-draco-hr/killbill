{
  final String name=UUID.randomUUID().toString().substring(0,20);
  final String externalKey=UUID.randomUUID().toString();
  final Account accountData=new MockAccountBuilder().currency(Currency.MXN).build();
  Mockito.when(accountInternalApi.getAccountById(Mockito.eq(accountData.getId()),Mockito.<InternalCallContext>any())).thenReturn(accountData);
  Mockito.when(accountInternalApi.getAccountByKey(Mockito.eq(accountData.getExternalKey()),Mockito.<InternalCallContext>any())).thenReturn(accountData);
  final UUID bundleId=UUID.randomUUID();
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getId()).thenReturn(bundleId);
  Mockito.when(bundle.getAccountId()).thenReturn(accountData.getId());
  Mockito.when(bundle.getExternalKey()).thenReturn(externalKey);
  Mockito.when(entitlementInternalApi.getBundleFromId(Mockito.eq(bundleId),Mockito.<InternalCallContext>any())).thenReturn(bundle);
  Assert.assertEquals(subscriptionTransitionTagSqlDao.getTagsForBusinessSubscriptionTransitionByKey(externalKey,internalCallContext).size(),0);
  tagDao.tagAdded(ObjectType.BUNDLE,bundleId,name,internalCallContext);
  Assert.assertEquals(subscriptionTransitionTagSqlDao.getTagsForBusinessSubscriptionTransitionByKey(externalKey,internalCallContext).size(),1);
  tagDao.tagRemoved(ObjectType.BUNDLE,bundleId,name,internalCallContext);
  Assert.assertEquals(subscriptionTransitionTagSqlDao.getTagsForBusinessSubscriptionTransitionByKey(externalKey,internalCallContext).size(),0);
}
