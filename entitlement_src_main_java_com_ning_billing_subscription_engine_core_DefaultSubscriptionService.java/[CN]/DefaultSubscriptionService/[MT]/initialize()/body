{
  try {
    final NotificationQueueHandler queueHandler=new NotificationQueueHandler(){
      @Override public void handleReadyNotification(      final NotificationEvent inputKey,      final DateTime eventDateTime,      final UUID fromNotificationQueueUserToken,      final Long accountRecordId,      final Long tenantRecordId){
        if (!(inputKey instanceof EntitlementNotificationKey)) {
          log.error("Entitlement service received an unexpected event type {}" + inputKey.getClass().getName());
          return;
        }
        final EntitlementNotificationKey key=(EntitlementNotificationKey)inputKey;
        final SubscriptionEvent event=dao.getEventById(key.getEventId(),internalCallContextFactory.createInternalTenantContext(tenantRecordId,accountRecordId));
        if (event == null) {
          log.info("Failed to extract event for notification key {}",inputKey);
          return;
        }
        final InternalCallContext context=internalCallContextFactory.createInternalCallContext(tenantRecordId,accountRecordId,"SubscriptionEventQueue",CallOrigin.INTERNAL,UserType.SYSTEM,fromNotificationQueueUserToken);
        processEventReady(event,key.getSeqId(),context);
      }
    }
;
    subscriptionEventQueue=notificationQueueService.createNotificationQueue(ENTITLEMENT_SERVICE_NAME,NOTIFICATION_QUEUE_NAME,queueHandler);
  }
 catch (  NotificationQueueAlreadyExists e) {
    throw new RuntimeException(e);
  }
}
