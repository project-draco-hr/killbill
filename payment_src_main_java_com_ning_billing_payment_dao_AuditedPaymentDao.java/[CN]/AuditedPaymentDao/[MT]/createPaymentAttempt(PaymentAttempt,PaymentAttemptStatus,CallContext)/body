{
  final PaymentAttempt newPaymentAttempt=new DefaultPaymentAttempt(paymentAttempt,paymentAttemptStatus);
  return paymentAttemptSqlDao.inTransaction(new Transaction<PaymentAttempt,PaymentAttemptSqlDao>(){
    @Override public PaymentAttempt inTransaction(    PaymentAttemptSqlDao transactional,    TransactionStatus status) throws Exception {
      transactional.insertPaymentAttempt(newPaymentAttempt,context);
      PaymentAttempt savedPaymentAttempt=transactional.getPaymentAttemptById(newPaymentAttempt.getId().toString());
      Long recordId=transactional.getRecordId(newPaymentAttempt.getId().toString());
      EntityHistory<PaymentAttempt> history=new EntityHistory<PaymentAttempt>(newPaymentAttempt.getId(),recordId,newPaymentAttempt,ChangeType.INSERT);
      transactional.insertHistoryFromTransaction(history,context);
      Long historyRecordId=transactional.getHistoryRecordId(recordId);
      EntityAudit audit=new EntityAudit(TableName.PAYMENT_ATTEMPTS,historyRecordId,ChangeType.INSERT);
      transactional.insertAuditFromTransaction(audit,context);
      return savedPaymentAttempt;
    }
  }
);
}
