{
  paymentSqlDao.inTransaction(new Transaction<Void,PaymentSqlDao>(){
    @Override public Void inTransaction(    PaymentSqlDao transactional,    TransactionStatus status) throws Exception {
      transactional.insertPaymentInfo(paymentInfo,context);
      Long recordId=transactional.getRecordId(paymentInfo.getId().toString());
      EntityHistory<PaymentInfoEvent> history=new EntityHistory<PaymentInfoEvent>(paymentInfo.getId(),recordId,paymentInfo,ChangeType.INSERT);
      transactional.insertHistoryFromTransaction(history,context);
      Long historyRecordId=transactional.getHistoryRecordId(recordId);
      EntityAudit audit=new EntityAudit(TableName.PAYMENTS,historyRecordId,ChangeType.INSERT);
      transactional.insertAuditFromTransaction(audit,context);
      if (paymentInfo.getId() != null && paymentAttemptId != null) {
        PaymentAttemptSqlDao transAttemptSqlDao=transactional.become(PaymentAttemptSqlDao.class);
        transAttemptSqlDao.updatePaymentAttemptWithPaymentId(paymentAttemptId.toString(),paymentInfo.getId().toString(),context);
        PaymentAttempt paymentAttempt=transAttemptSqlDao.getPaymentAttemptById(paymentAttemptId.toString());
        recordId=transAttemptSqlDao.getRecordId(paymentAttemptId.toString());
        EntityHistory<PaymentAttempt> historyAttempt=new EntityHistory<PaymentAttempt>(paymentAttemptId,recordId,paymentAttempt,ChangeType.UPDATE);
        transAttemptSqlDao.insertHistoryFromTransaction(historyAttempt,context);
        historyRecordId=transAttemptSqlDao.getHistoryRecordId(recordId);
        audit=new EntityAudit(TableName.PAYMENT_ATTEMPTS,historyRecordId,ChangeType.UPDATE);
        transAttemptSqlDao.insertAuditFromTransaction(audit,context);
      }
      return null;
    }
  }
);
}
