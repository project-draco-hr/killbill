{
  final NotificationQueue checkOverdueQueue;
  try {
    checkOverdueQueue=notificationQueueService.getNotificationQueue(DefaultOverdueService.OVERDUE_SERVICE_NAME,DefaultOverdueCheckNotifier.OVERDUE_CHECK_NOTIFIER_QUEUE);
    transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
      @Override public Void inTransaction(      final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
        boolean shouldInsertNewNotification=true;
        final List<Notification> futureNotifications=getFutureNotificationsForAccountAndOverdueableInTransaction(entitySqlDaoWrapperFactory,checkOverdueQueue,overdueable,context);
        if (futureNotifications.size() > 0) {
          final DateTime earliestExistingNotificationDate=futureNotifications.get(0).getEffectiveDate();
          final int minIndexToDeleteFrom;
          if (earliestExistingNotificationDate.isBefore(futureNotificationTime)) {
            minIndexToDeleteFrom=1;
            shouldInsertNewNotification=false;
          }
 else {
            minIndexToDeleteFrom=0;
          }
          for (int i=minIndexToDeleteFrom; i < futureNotifications.size(); i++) {
            checkOverdueQueue.removeNotificationFromTransaction(entitySqlDaoWrapperFactory,futureNotifications.get(i).getId(),context);
          }
        }
        if (shouldInsertNewNotification) {
          log.debug("Queuing overdue check notification. Overdueable id: {}, timestamp: {}",overdueable.getId().toString(),futureNotificationTime.toString());
          final OverdueCheckNotificationKey notificationKey=new OverdueCheckNotificationKey(overdueable.getId(),Type.get(overdueable));
          checkOverdueQueue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,futureNotificationTime,notificationKey,context);
        }
 else {
          log.debug("Skipping queuing overdue check notification. Overdueable id: {}, timestamp: {}",overdueable.getId().toString(),futureNotificationTime.toString());
        }
        return null;
      }
    }
);
  }
 catch (  NoSuchNotificationQueue e) {
    log.error("Attempting to put items on a non-existent queue (DefaultOverdueCheck).",e);
  }
}
