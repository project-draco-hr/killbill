{
  final Map<Notification,OverdueCheckNotificationKey> candidates=checkOverdueQueue.getFutureNotificationsForAccountAndTypeFromTransaction(OverdueCheckNotificationKey.class,context.getAccountRecordId(),entitySqlDaoWrapperFactory.getSqlDao());
  final Map<Notification,OverdueCheckNotificationKey> notifications=Maps.filterEntries(candidates,new Predicate<Entry<Notification,OverdueCheckNotificationKey>>(){
    @Override public boolean apply(    @Nullable final Entry<Notification,OverdueCheckNotificationKey> input){
      final OverdueCheckNotificationKey notificationKey=input.getValue();
      return (Type.get(overdueable).equals(notificationKey.getType()) && overdueable.getId().equals(notificationKey.getUuidKey()));
    }
  }
);
  final List<Notification> result=new ArrayList(notifications.keySet());
  Collections.sort(result,new Comparator<Notification>(){
    @Override public int compare(    final Notification o1,    final Notification o2){
      return o1.getEffectiveDate().compareTo(o2.getEffectiveDate());
    }
  }
);
  return result;
}
