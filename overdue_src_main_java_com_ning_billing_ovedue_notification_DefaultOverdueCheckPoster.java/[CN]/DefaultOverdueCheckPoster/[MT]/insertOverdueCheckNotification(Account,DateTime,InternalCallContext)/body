{
  final NotificationQueue checkOverdueQueue;
  try {
    checkOverdueQueue=notificationQueueService.getNotificationQueue(DefaultOverdueService.OVERDUE_SERVICE_NAME,DefaultOverdueCheckNotifier.OVERDUE_CHECK_NOTIFIER_QUEUE);
    transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
      @Override public Void inTransaction(      final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
        boolean shouldInsertNewNotification=true;
        final Collection<NotificationEventWithMetadata<OverdueCheckNotificationKey>> futureNotifications=getFutureNotificationsForAccountAndOverdueableInTransaction(entitySqlDaoWrapperFactory,checkOverdueQueue,account,context);
        if (futureNotifications.size() > 0) {
          final DateTime earliestExistingNotificationDate=futureNotifications.iterator().next().getEffectiveDate();
          final int minIndexToDeleteFrom;
          if (earliestExistingNotificationDate.isBefore(futureNotificationTime)) {
            minIndexToDeleteFrom=1;
            shouldInsertNewNotification=false;
          }
 else {
            minIndexToDeleteFrom=0;
          }
          int index=0;
          final Iterator<NotificationEventWithMetadata<OverdueCheckNotificationKey>> it=futureNotifications.iterator();
          while (it.hasNext()) {
            final NotificationEventWithMetadata<OverdueCheckNotificationKey> cur=it.next();
            if (minIndexToDeleteFrom <= index) {
              checkOverdueQueue.removeNotificationFromTransaction(entitySqlDaoWrapperFactory.getSqlDao(),cur.getRecordId());
            }
            index++;
          }
        }
        if (shouldInsertNewNotification) {
          log.debug("Queuing overdue check notification. Account id: {}, timestamp: {}",account.getId().toString(),futureNotificationTime.toString());
          final OverdueCheckNotificationKey notificationKey=new OverdueCheckNotificationKey(account.getId());
          checkOverdueQueue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory.getSqlDao(),futureNotificationTime,notificationKey,context.getUserToken(),context.getAccountRecordId(),context.getTenantRecordId());
        }
 else {
          log.debug("Skipping queuing overdue check notification. Account id: {}, timestamp: {}",account.getId().toString(),futureNotificationTime.toString());
        }
        return null;
      }
    }
);
  }
 catch (  NoSuchNotificationQueue e) {
    log.error("Attempting to put items on a non-existent queue (DefaultOverdueCheck).",e);
  }
}
