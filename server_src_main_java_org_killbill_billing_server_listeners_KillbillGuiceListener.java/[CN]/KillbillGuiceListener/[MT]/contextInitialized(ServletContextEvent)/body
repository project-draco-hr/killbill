{
  configSource=new KillbillConfigSource();
  config=new ConfigurationObjectFactory(configSource).build(KillbillServerConfig.class);
  final BaseServerModuleBuilder builder=new BaseServerModuleBuilder().setJaxrsUriPattern("(" + JaxRsResourceBase.PREFIX + "|"+ JaxRsResourceBase.PLUGINS_PATH+ ")"+ "/.*").addJaxrsResource("org.killbill.billing.jaxrs.mappers").addJaxrsResource("org.killbill.billing.jaxrs.resources");
  if (config.isMultiTenancyEnabled()) {
    builder.addFilter("/*",TenantFilter.class);
  }
  guiceModules=ImmutableList.<Module>of(builder.build(),new JaxrsJacksonModule(new ObjectMapper()),new JMXModule(KillbillHealthcheck.class,NotificationQueueService.class,PersistentBus.class),new StatsModule(METRICS_SERVLETS_PATHS.get(0),METRICS_SERVLETS_PATHS.get(1),METRICS_SERVLETS_PATHS.get(2),METRICS_SERVLETS_PATHS.get(3),ImmutableList.<Class<? extends HealthCheck>>of(KillbillHealthcheck.class)),getModule(event.getServletContext()));
  super.contextInitialized(event);
  logger.info("KillbillLifecycleListener : contextInitialized");
  injector=injector(event);
  event.getServletContext().setAttribute(Injector.class.getName(),injector);
  event.getServletContext().setAttribute(HealthCheckServlet.HEALTH_CHECK_REGISTRY,injector.getInstance(HealthCheckRegistry.class));
  event.getServletContext().setAttribute(MetricsServlet.METRICS_REGISTRY,injector.getInstance(MetricRegistry.class));
  killbillLifecycle=injector.getInstance(DefaultLifecycle.class);
  killbillBusService=injector.getInstance(BusService.class);
  killbilleventHandler=injector.getInstance(KillbillEventHandler.class);
  embeddedDB=injector.getInstance(EmbeddedDB.class);
  registerMBeansForCache(injector.getInstance(CacheManager.class));
  killbillLifecycle.fireStartupSequencePriorEventRegistration();
  try {
    killbillBusService.getBus().register(killbilleventHandler);
  }
 catch (  PersistentBus.EventBusException e) {
    logger.error("Failed to register for event notifications, this is bad exiting!",e);
    System.exit(1);
  }
  killbillLifecycle.fireStartupSequencePostEventRegistration();
}
