{
  super(toAuditLogJson(subscriptionAuditLogs));
  this.startDate=subscription.getEffectiveStartDate();
  this.productName=subscription.getLastActiveProduct().getName();
  this.productCategory=subscription.getLastActiveProductCategory().name();
  this.billingPeriod=subscription.getLastActivePlan().getBillingPeriod().toString();
  this.priceList=subscription.getLastActivePriceList().getName();
  this.cancelledDate=subscription.getEffectiveEndDate();
  this.chargedThroughDate=subscription.getChargedThroughDate();
  this.billingStartDate=subscription.getBillingStartDate();
  this.billingEndDate=subscription.getBillingEndDate();
  this.accountId=subscription.getAccountId().toString();
  this.bundleId=subscription.getBundleId().toString();
  this.subscriptionId=subscription.getId().toString();
  this.externalKey=subscription.getExternalKey();
  this.events=new LinkedList<SubscriptionReadEventJson>();
  for (  SubscriptionEvent cur : subscriptionEvents) {
    final BillingPeriod billingPeriod=cur.getNextBillingPeriod() != null ? cur.getNextBillingPeriod() : cur.getPrevBillingPeriod();
    final Product product=cur.getNextProduct() != null ? cur.getNextProduct() : cur.getPrevProduct();
    final PriceList priceList=cur.getNextPriceList() != null ? cur.getNextPriceList() : cur.getPrevPriceList();
    final PlanPhase phase=cur.getNextPhase() != null ? cur.getNextPhase() : cur.getPrevPhase();
    this.events.add(new SubscriptionReadEventJson(cur.getId().toString(),billingPeriod != null ? billingPeriod.toString() : null,cur.getRequestedDate(),cur.getEffectiveDate(),product != null ? product.getName() : null,priceList != null ? priceList.getName() : null,cur.getSubscriptionEventType().toString(),phase != null ? phase.getName() : null,toAuditLogJson(subscriptionEventsAuditLogs.get(cur.getId()))));
  }
  this.newEvents=null;
  this.deletedEvents=null;
}
