{
  final List<ContiguousInArrearUsageInterval> usageInterval=Lists.newLinkedList();
  ContiguousInArrearUsageInterval existingInterval=null;
  for (  BillingEvent event : subscriptionBillingEvents) {
    final Usage usage=findUsage(event);
    if (usage == null || !usage.equals(existingInterval.getUsage())) {
      if (existingInterval != null) {
        usageInterval.add(existingInterval.build(true));
        existingInterval=null;
      }
    }
    if (usage != null) {
      if (existingInterval == null) {
        existingInterval=new ContiguousInArrearUsageInterval(usage,invoiceId,unitType,usageApi,targetDate,context);
      }
      existingInterval.addBillingEvent(event);
    }
  }
  if (existingInterval != null) {
    usageInterval.add(existingInterval.build(false));
  }
  return usageInterval;
}
