{
  final UUID invoiceId=UUID.randomUUID();
  Assert.assertFalse(invoiceDao.isInvoiceAdjustmentItem(createInvoiceItem(invoiceId,InvoiceItemType.RECURRING),ImmutableList.<InvoiceItem>of()));
  Assert.assertTrue(invoiceDao.isInvoiceAdjustmentItem(createInvoiceItem(invoiceId,InvoiceItemType.REFUND_ADJ),ImmutableList.<InvoiceItem>of()));
  final InvoiceItem creditAdj=createInvoiceItem(invoiceId,InvoiceItemType.CREDIT_ADJ);
  Assert.assertFalse(invoiceDao.isInvoiceAdjustmentItem(creditAdj,ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.CBA_ADJ,creditAdj.getAmount().negate()))));
  Assert.assertTrue(invoiceDao.isInvoiceAdjustmentItem(creditAdj,ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.CBA_ADJ,creditAdj.getAmount().negate().add(BigDecimal.ONE)))));
  Assert.assertTrue(invoiceDao.isInvoiceAdjustmentItem(creditAdj,ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.RECURRING),createInvoiceItem(invoiceId,InvoiceItemType.CBA_ADJ,creditAdj.getAmount().negate()))));
}
