{
  final UUID invoiceItemId=UUID.randomUUID();
  final InvoiceItem invoiceItem=Mockito.mock(InvoiceItem.class);
  Mockito.when(invoiceItem.getId()).thenReturn(invoiceItemId);
  Mockito.when(invoiceItem.getInvoiceItemType()).thenReturn(invoiceItemType);
  Mockito.when(invoiceItem.getInvoiceId()).thenReturn(invoiceId);
  Mockito.when(invoiceItem.getAccountId()).thenReturn(accountId);
  Mockito.when(invoiceItem.getStartDate()).thenReturn(startDate);
  Mockito.when(invoiceItem.getEndDate()).thenReturn(endDate);
  Mockito.when(invoiceItem.getAmount()).thenReturn(amount);
  Mockito.when(invoiceItem.getCurrency()).thenReturn(Currency.EUR);
  Mockito.when(invoiceItem.getDescription()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getBundleId()).thenReturn(bundleId);
  Mockito.when(invoiceItem.getSubscriptionId()).thenReturn(subscriptionId);
  Mockito.when(invoiceItem.getPlanName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getPhaseName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getRate()).thenReturn(new BigDecimal("1203"));
  Mockito.when(invoiceItem.getLinkedItemId()).thenReturn(linkedItemId);
  Mockito.when(invoiceItem.getCreatedDate()).thenReturn(new DateTime(2016,1,22,10,56,51,DateTimeZone.UTC));
  return invoiceItem;
}
