{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<InvoiceItemModelDao>(){
    @Override public InvoiceItemModelDao inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final InvoiceSqlDao transactional=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
      UUID invoiceIdForExternalCharge=invoiceId;
      if (invoiceIdForExternalCharge == null) {
        final InvoiceModelDao invoiceForExternalCharge=new InvoiceModelDao(accountId,effectiveDate,effectiveDate,currency);
        transactional.create(invoiceForExternalCharge,context);
        invoiceIdForExternalCharge=invoiceForExternalCharge.getId();
      }
      final InvoiceItemModelDao externalCharge=new InvoiceItemModelDao(context.getCreatedDate(),InvoiceItemType.EXTERNAL_CHARGE,invoiceIdForExternalCharge,accountId,bundleId,null,description,null,effectiveDate,null,amount,null,currency,null);
      final InvoiceItemSqlDao transInvoiceItemDao=entitySqlDaoWrapperFactory.become(InvoiceItemSqlDao.class);
      transInvoiceItemDao.create(externalCharge,context);
      final InvoiceModelDao invoice=transactional.getById(invoiceIdForExternalCharge.toString(),context);
      if (invoice == null) {
        throw new InvoiceApiException(ErrorCode.INVOICE_NOT_FOUND,invoiceIdForExternalCharge);
      }
      populateChildren(invoice,entitySqlDaoWrapperFactory,context);
      useExistingCBAFromTransaction(accountId,entitySqlDaoWrapperFactory,context);
      notifyBusOfInvoiceAdjustment(entitySqlDaoWrapperFactory,invoiceId,accountId,context.getUserToken(),context);
      return externalCharge;
    }
  }
);
}
