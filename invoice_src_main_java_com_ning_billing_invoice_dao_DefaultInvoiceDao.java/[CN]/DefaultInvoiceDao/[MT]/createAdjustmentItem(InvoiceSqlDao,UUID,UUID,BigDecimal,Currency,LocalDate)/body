{
  final InvoiceItemSqlDao invoiceItemSqlDao=transactional.become(InvoiceItemSqlDao.class);
  final InvoiceItem invoiceItemToBeAdjusted=invoiceItemSqlDao.getById(invoiceItemId.toString());
  if (invoiceItemToBeAdjusted == null) {
    throw new InvoiceApiException(ErrorCode.INVOICE_ITEM_NOT_FOUND,invoiceItemId);
  }
  if (!invoiceItemToBeAdjusted.getInvoiceId().equals(invoiceId)) {
    throw new InvoiceApiException(ErrorCode.INVOICE_INVALID_FOR_INVOICE_ITEM_ADJUSTMENT,invoiceItemId,invoiceId);
  }
  final BigDecimal amountToAdjust=Objects.firstNonNull(positiveAdjAmount,invoiceItemToBeAdjusted.getAmount());
  final Currency currencyForAdjustment=Objects.firstNonNull(currency,invoiceItemToBeAdjusted.getCurrency());
  return new ItemAdjInvoiceItem(invoiceItemToBeAdjusted,effectiveDate,amountToAdjust.negate(),currencyForAdjustment);
}
