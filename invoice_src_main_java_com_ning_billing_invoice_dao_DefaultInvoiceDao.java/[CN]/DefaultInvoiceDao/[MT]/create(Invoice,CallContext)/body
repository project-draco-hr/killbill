{
  invoiceSqlDao.inTransaction(new Transaction<Void,InvoiceSqlDao>(){
    @Override public Void inTransaction(    final InvoiceSqlDao invoiceDao,    final TransactionStatus status) throws Exception {
      Invoice currentInvoice=invoiceDao.getById(invoice.getId().toString());
      if (currentInvoice == null) {
        invoiceDao.create(invoice,context);
        List<InvoiceItem> recurringInvoiceItems=invoice.getInvoiceItems(RecurringInvoiceItem.class);
        RecurringInvoiceItemSqlDao recurringInvoiceItemDao=invoiceDao.become(RecurringInvoiceItemSqlDao.class);
        recurringInvoiceItemDao.batchCreateFromTransaction(recurringInvoiceItems,context);
        notifyOfFutureBillingEvents(invoiceSqlDao,recurringInvoiceItems);
        List<InvoiceItem> fixedPriceInvoiceItems=invoice.getInvoiceItems(FixedPriceInvoiceItem.class);
        FixedPriceInvoiceItemSqlDao fixedPriceInvoiceItemDao=invoiceDao.become(FixedPriceInvoiceItemSqlDao.class);
        fixedPriceInvoiceItemDao.batchCreateFromTransaction(fixedPriceInvoiceItems,context);
        setChargedThroughDates(invoiceSqlDao,fixedPriceInvoiceItems,recurringInvoiceItems,context);
        List<InvoicePayment> invoicePayments=invoice.getPayments();
        InvoicePaymentSqlDao invoicePaymentSqlDao=invoiceDao.become(InvoicePaymentSqlDao.class);
        invoicePaymentSqlDao.batchCreateFromTransaction(invoicePayments,context);
        AuditSqlDao auditSqlDao=invoiceDao.become(AuditSqlDao.class);
        auditSqlDao.insertAuditFromTransaction("invoices",invoice.getId().toString(),ChangeType.INSERT,context);
        auditSqlDao.insertAuditFromTransaction("recurring_invoice_items",getIdsFromInvoiceItems(recurringInvoiceItems),ChangeType.INSERT,context);
        auditSqlDao.insertAuditFromTransaction("fixed_invoice_items",getIdsFromInvoiceItems(fixedPriceInvoiceItems),ChangeType.INSERT,context);
        auditSqlDao.insertAuditFromTransaction("invoice_payments",getIdsFromInvoicePayments(invoicePayments),ChangeType.INSERT,context);
      }
      return null;
    }
  }
);
  InvoiceCreationEvent event;
  event=new DefaultInvoiceCreationNotification(invoice.getId(),invoice.getAccountId(),invoice.getBalance(),invoice.getCurrency(),invoice.getInvoiceDate(),context.getUserToken());
  try {
    eventBus.post(event);
  }
 catch (  Bus.EventBusException e) {
    throw new RuntimeException(e);
  }
}
