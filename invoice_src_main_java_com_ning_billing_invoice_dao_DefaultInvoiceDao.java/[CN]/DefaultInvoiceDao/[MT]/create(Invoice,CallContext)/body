{
  invoiceSqlDao.inTransaction(new Transaction<Void,InvoiceSqlDao>(){
    @Override public Void inTransaction(    final InvoiceSqlDao transactional,    final TransactionStatus status) throws Exception {
      final Invoice currentInvoice=transactional.getById(invoice.getId().toString());
      if (currentInvoice == null) {
        final List<EntityAudit> audits=new ArrayList<EntityAudit>();
        transactional.create(invoice,context);
        final Long recordId=transactional.getRecordId(invoice.getId().toString());
        audits.add(new EntityAudit(TableName.INVOICES,recordId,ChangeType.INSERT));
        List<Long> recordIdList;
        final List<InvoiceItem> recurringInvoiceItems=invoice.getInvoiceItems(RecurringInvoiceItem.class);
        final RecurringInvoiceItemSqlDao recurringInvoiceItemDao=transactional.become(RecurringInvoiceItemSqlDao.class);
        recurringInvoiceItemDao.batchCreateFromTransaction(recurringInvoiceItems,context);
        recordIdList=recurringInvoiceItemDao.getRecordIds(invoice.getId().toString());
        audits.addAll(createAudits(TableName.RECURRING_INVOICE_ITEMS,recordIdList));
        notifyOfFutureBillingEvents(transactional,recurringInvoiceItems);
        final List<InvoiceItem> fixedPriceInvoiceItems=invoice.getInvoiceItems(FixedPriceInvoiceItem.class);
        final FixedPriceInvoiceItemSqlDao fixedPriceInvoiceItemDao=transactional.become(FixedPriceInvoiceItemSqlDao.class);
        fixedPriceInvoiceItemDao.batchCreateFromTransaction(fixedPriceInvoiceItems,context);
        recordIdList=fixedPriceInvoiceItemDao.getRecordIds(invoice.getId().toString());
        audits.addAll(createAudits(TableName.FIXED_INVOICE_ITEMS,recordIdList));
        final List<InvoiceItem> creditInvoiceItems=invoice.getInvoiceItems(CreditBalanceAdjInvoiceItem.class);
        final CreditInvoiceItemSqlDao creditInvoiceItemSqlDao=transactional.become(CreditInvoiceItemSqlDao.class);
        creditInvoiceItemSqlDao.batchCreateFromTransaction(creditInvoiceItems,context);
        recordIdList=creditInvoiceItemSqlDao.getRecordIds(invoice.getId().toString());
        audits.addAll(createAudits(TableName.CREDIT_INVOICE_ITEMS,recordIdList));
        final List<InvoicePayment> invoicePayments=invoice.getPayments();
        final InvoicePaymentSqlDao invoicePaymentSqlDao=transactional.become(InvoicePaymentSqlDao.class);
        invoicePaymentSqlDao.batchCreateFromTransaction(invoicePayments,context);
        recordIdList=invoicePaymentSqlDao.getRecordIds(invoice.getId().toString());
        audits.addAll(createAudits(TableName.INVOICE_PAYMENTS,recordIdList));
        transactional.insertAuditFromTransaction(audits,context);
      }
      return null;
    }
  }
);
}
