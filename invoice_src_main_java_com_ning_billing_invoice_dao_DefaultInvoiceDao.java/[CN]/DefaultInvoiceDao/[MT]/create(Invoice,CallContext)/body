{
  final InvoiceCreationEvent event=new DefaultInvoiceCreationEvent(invoice.getId(),invoice.getAccountId(),invoice.getBalance(),invoice.getCurrency(),invoice.getInvoiceDate(),context.getUserToken());
  invoiceSqlDao.inTransaction(new Transaction<Void,InvoiceSqlDao>(){
    @Override public Void inTransaction(    final InvoiceSqlDao transactional,    final TransactionStatus status) throws Exception {
      Invoice currentInvoice=transactional.getById(invoice.getId().toString());
      if (currentInvoice == null) {
        transactional.create(invoice,context);
        List<InvoiceItem> recurringInvoiceItems=invoice.getInvoiceItems(RecurringInvoiceItem.class);
        RecurringInvoiceItemSqlDao recurringInvoiceItemDao=transactional.become(RecurringInvoiceItemSqlDao.class);
        recurringInvoiceItemDao.batchCreateFromTransaction(recurringInvoiceItems,context);
        notifyOfFutureBillingEvents(invoiceSqlDao,recurringInvoiceItems);
        List<InvoiceItem> fixedPriceInvoiceItems=invoice.getInvoiceItems(FixedPriceInvoiceItem.class);
        FixedPriceInvoiceItemSqlDao fixedPriceInvoiceItemDao=transactional.become(FixedPriceInvoiceItemSqlDao.class);
        fixedPriceInvoiceItemDao.batchCreateFromTransaction(fixedPriceInvoiceItems,context);
        setChargedThroughDates(invoiceSqlDao,fixedPriceInvoiceItems,recurringInvoiceItems,context);
        List<InvoicePayment> invoicePayments=invoice.getPayments();
        InvoicePaymentSqlDao invoicePaymentSqlDao=transactional.become(InvoicePaymentSqlDao.class);
        invoicePaymentSqlDao.batchCreateFromTransaction(invoicePayments,context);
        AuditSqlDao auditSqlDao=transactional.become(AuditSqlDao.class);
        auditSqlDao.insertAuditFromTransaction("invoices",invoice.getId().toString(),ChangeType.INSERT,context);
        auditSqlDao.insertAuditFromTransaction("recurring_invoice_items",getIdsFromInvoiceItems(recurringInvoiceItems),ChangeType.INSERT,context);
        auditSqlDao.insertAuditFromTransaction("fixed_invoice_items",getIdsFromInvoiceItems(fixedPriceInvoiceItems),ChangeType.INSERT,context);
        auditSqlDao.insertAuditFromTransaction("invoice_payments",getIdsFromInvoicePayments(invoicePayments),ChangeType.INSERT,context);
      }
      try {
        eventBus.postFromTransaction(event,transactional);
      }
 catch (      EventBusException e) {
        log.warn("Failed to post invoice event for invoiceId " + invoice.getId(),e);
      }
      return null;
    }
  }
);
}
