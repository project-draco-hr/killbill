{
  invoiceSqlDao.inTransaction(new Transaction<Void,InvoiceSqlDao>(){
    @Override public Void inTransaction(    final InvoiceSqlDao invoiceDao,    final TransactionStatus status) throws Exception {
      Invoice currentInvoice=invoiceDao.getById(invoice.getId());
      if (currentInvoice == null) {
        invoiceDao.create(invoice,context);
        List<InvoiceItem> recurringInvoiceItems=invoice.getInvoiceItems(RecurringInvoiceItem.class);
        RecurringInvoiceItemSqlDao recurringInvoiceItemDao=invoiceDao.become(RecurringInvoiceItemSqlDao.class);
        recurringInvoiceItemDao.batchCreateFromTransaction(recurringInvoiceItems,context);
        notifyOfFutureBillingEvents(invoiceDao,recurringInvoiceItems);
        List<InvoiceItem> fixedPriceInvoiceItems=invoice.getInvoiceItems(FixedPriceInvoiceItem.class);
        FixedPriceInvoiceItemSqlDao fixedPriceInvoiceItemDao=invoiceDao.become(FixedPriceInvoiceItemSqlDao.class);
        fixedPriceInvoiceItemDao.batchCreateFromTransaction(fixedPriceInvoiceItems,context);
        setChargedThroughDates(invoiceDao,fixedPriceInvoiceItems,recurringInvoiceItems,context);
        List<InvoicePayment> invoicePayments=invoice.getPayments();
        InvoicePaymentSqlDao invoicePaymentSqlDao=invoiceDao.become(InvoicePaymentSqlDao.class);
      }
      return null;
    }
  }
);
  InvoiceCreationEvent event;
  event=new DefaultInvoiceCreationEvent(invoice.getId(),invoice.getAccountId(),invoice.getBalance(),invoice.getCurrency(),invoice.getInvoiceDate(),context.getUserToken());
  try {
    eventBus.post(event);
  }
 catch (  Bus.EventBusException e) {
    throw new RuntimeException(e);
  }
}
