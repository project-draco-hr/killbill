{
  return invoiceSqlDao.inTransaction(new Transaction<List<Invoice>,InvoiceSqlDao>(){
    @Override public List<Invoice> inTransaction(    final InvoiceSqlDao invoiceDao,    final TransactionStatus status) throws Exception {
      List<Invoice> invoices=invoiceDao.getInvoicesByAccount(accountId);
      InvoiceItemSqlDao invoiceItemDao=invoiceDao.become(InvoiceItemSqlDao.class);
      for (      final Invoice invoice : invoices) {
        List<InvoiceItem> invoiceItems=invoiceItemDao.getInvoiceItemsByInvoice(invoice.getId().toString());
        invoice.addInvoiceItems(invoiceItems);
      }
      InvoicePaymentSqlDao invoicePaymentSqlDao=invoiceDao.become(InvoicePaymentSqlDao.class);
      for (      final Invoice invoice : invoices) {
        String invoiceId=invoice.getId().toString();
        List<InvoicePayment> invoicePayments=invoicePaymentSqlDao.getPaymentsForInvoice(invoiceId);
        invoice.addPayments(invoicePayments);
      }
      return invoices;
    }
  }
);
}
