{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final InvoiceSqlDao transactional=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
      final InvoiceModelDao currentInvoice=transactional.getById(invoice.getId().toString(),context);
      if (currentInvoice == null) {
        if (isRealInvoice) {
          transactional.create(invoice,context);
        }
        final InvoiceItemSqlDao transInvoiceItemSqlDao=entitySqlDaoWrapperFactory.become(InvoiceItemSqlDao.class);
        for (        final InvoiceItemModelDao invoiceItemModelDao : invoiceItems) {
          transInvoiceItemSqlDao.create(invoiceItemModelDao,context);
        }
        notifyOfFutureBillingEvents(entitySqlDaoWrapperFactory,invoice.getAccountId(),callbackDateTimePerSubscriptions);
        final InvoicePaymentSqlDao invoicePaymentSqlDao=entitySqlDaoWrapperFactory.become(InvoicePaymentSqlDao.class);
        invoicePaymentSqlDao.batchCreateFromTransaction(invoicePayments,context);
      }
      return null;
    }
  }
);
}
