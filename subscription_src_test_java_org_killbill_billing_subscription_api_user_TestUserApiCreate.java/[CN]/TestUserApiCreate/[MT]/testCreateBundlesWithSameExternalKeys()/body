{
  final DateTime init=clock.getUTCNow();
  final DateTime requestedDate=init.minusYears(1);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  testListener.pushExpectedEvents(NextEvent.CREATE,NextEvent.PHASE);
  final DefaultSubscriptionBase subscription=(DefaultSubscriptionBase)subscriptionInternalApi.createSubscription(bundle.getId(),testUtil.getProductSpecifier(productName,planSetName,term,null),requestedDate,internalCallContext);
  assertListenerStatus();
  assertNotNull(subscription);
  testListener.pushExpectedEvent(NextEvent.CANCEL);
  subscription.cancelWithDate(clock.getUTCNow(),callContext);
  assertListenerStatus();
  final SubscriptionBaseBundle newBundle=subscriptionInternalApi.createBundleForAccount(bundle.getAccountId(),DefaultSubscriptionTestInitializer.DEFAULT_BUNDLE_KEY,internalCallContext);
  assertNotNull(newBundle);
  assertEquals(newBundle.getOriginalCreatedDate().compareTo(bundle.getCreatedDate()),0);
  testListener.pushExpectedEvents(NextEvent.CREATE,NextEvent.PHASE);
  final DefaultSubscriptionBase newSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.createSubscription(newBundle.getId(),testUtil.getProductSpecifier(productName,planSetName,term,null),requestedDate,internalCallContext);
  subscriptionInternalApi.updateExternalKey(newBundle.getId(),"myNewSuperKey",internalCallContext);
  final SubscriptionBaseBundle bundleWithNewKey=subscriptionInternalApi.getBundleFromId(newBundle.getId(),internalCallContext);
  assertEquals(bundleWithNewKey.getExternalKey(),"myNewSuperKey");
  assertListenerStatus();
  assertNotNull(newSubscription);
}
