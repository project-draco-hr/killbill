{
  try {
    final List<InvoiceItem> items=invoiceApi.getInvoiceForPaymentId(paymentId,context).getInvoiceItems();
    BigDecimal amountFromItems=BigDecimal.ZERO;
    for (    final UUID itemId : invoiceItemIdsWithAmounts.keySet()) {
      amountFromItems=amountFromItems.add(Objects.firstNonNull(invoiceItemIdsWithAmounts.get(itemId),getAmountFromItem(items,itemId)));
    }
    if (amountFromItems.compareTo(BigDecimal.ZERO) != 0 && specifiedRefundAmount != null && specifiedRefundAmount.compareTo(amountFromItems) != 0) {
      throw new IllegalArgumentException("You can't specify a refund amount that doesn't match the invoice items amounts");
    }
    return Objects.firstNonNull(specifiedRefundAmount,amountFromItems);
  }
 catch (  InvoiceApiException e) {
    throw new PaymentApiException(e);
  }
}
