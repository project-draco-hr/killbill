{
  final UUID tenantId=nonEntityDao.retrieveIdFromObject(context.getTenantRecordId(),ObjectType.TENANT);
  return new WithAccountLock<Refund>().processAccountWithLock(locker,account.getExternalKey(),new WithAccountLockCallback<Refund>(){
    @Override public Refund doOperation() throws PaymentApiException {
      final BigDecimal refundAmount=computeRefundAmount(paymentId,specifiedRefundAmount,invoiceItemIdsWithAmounts,context);
      try {
        final PaymentModelDao payment=paymentDao.getPayment(paymentId,context);
        if (payment == null) {
          throw new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_SUCCESS_PAYMENT,paymentId);
        }
        final RefundModelDao refundInfo=new RefundModelDao(account.getId(),paymentId,refundAmount,account.getCurrency(),refundAmount,account.getCurrency(),isAdjusted);
        paymentDao.insertRefund(refundInfo,context);
        final PaymentPluginApi plugin=getPaymentProviderPlugin(payment.getPaymentMethodId(),context);
        final RefundInfoPlugin refundInfoPlugin=plugin.processRefund(account.getId(),paymentId,refundAmount,account.getCurrency(),context.toCallContext(tenantId));
        if (refundInfoPlugin.getStatus() == RefundPluginStatus.PROCESSED) {
          paymentDao.updateRefundStatus(refundInfo.getId(),RefundStatus.PLUGIN_COMPLETED,refundInfoPlugin.getAmount(),refundInfoPlugin.getCurrency(),context);
          invoiceApi.createRefund(paymentId,refundAmount,isAdjusted,invoiceItemIdsWithAmounts,refundInfo.getId(),context);
          paymentDao.updateRefundStatus(refundInfo.getId(),RefundStatus.COMPLETED,refundInfoPlugin.getAmount(),refundInfoPlugin.getCurrency(),context);
          return new DefaultRefund(refundInfo.getId(),refundInfo.getCreatedDate(),refundInfo.getUpdatedDate(),paymentId,refundInfo.getAmount(),account.getCurrency(),isAdjusted,refundInfo.getCreatedDate());
        }
 else {
          paymentDao.updateRefundStatus(refundInfo.getId(),RefundStatus.PLUGIN_ERRORED,refundAmount,account.getCurrency(),context);
          throw new PaymentPluginApiException("Refund error for RefundInfo: " + refundInfo.toString(),String.format("Gateway error: %s, Gateway error code: %s, Reference id: %s",refundInfoPlugin.getGatewayError(),refundInfoPlugin.getGatewayErrorCode(),refundInfoPlugin.getReferenceId()));
        }
      }
 catch (      PaymentPluginApiException e) {
        throw new PaymentApiException(ErrorCode.PAYMENT_CREATE_REFUND,account.getId(),e.getErrorMessage());
      }
catch (      InvoiceApiException e) {
        throw new PaymentApiException(e);
      }
    }
  }
);
}
