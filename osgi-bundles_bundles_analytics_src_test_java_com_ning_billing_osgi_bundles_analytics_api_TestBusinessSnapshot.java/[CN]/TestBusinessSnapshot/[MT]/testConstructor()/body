{
  final BusinessAccountModelDao accountModelDao=new BusinessAccountModelDao(account,BigDecimal.ONE,invoice,payment,auditLog);
  final BusinessAccount businessAccount=new BusinessAccount(accountModelDao);
  final BusinessAccountFieldModelDao businessAccountFieldModelDao=new BusinessAccountFieldModelDao(account,customField,auditLog);
  final BusinessField businessField=BusinessField.create(businessAccountFieldModelDao);
  final BusinessInvoiceModelDao invoiceModelDao=new BusinessInvoiceModelDao(account,invoice,auditLog);
  final BusinessInvoiceItemBaseModelDao invoiceItemBaseModelDao=BusinessInvoiceItemBaseModelDao.create(account,invoice,invoiceItem,bundle,plan,phase,auditLog);
  final BusinessInvoice businessInvoice=new BusinessInvoice(invoiceModelDao,ImmutableList.<BusinessInvoiceItemBaseModelDao>of(invoiceItemBaseModelDao));
  final BusinessInvoicePaymentBaseModelDao invoicePaymentBaseModelDao=BusinessInvoicePaymentModelDao.create(account,invoice,invoicePayment,payment,paymentMethod,auditLog);
  final BusinessInvoicePayment businessInvoicePayment=new BusinessInvoicePayment(invoicePaymentBaseModelDao);
  final DateTime endDate=new DateTime(2005,6,5,4,5,6,DateTimeZone.UTC);
  final BusinessOverdueStatusModelDao businessOverdueStatusModelDao=new BusinessOverdueStatusModelDao(account,bundle,blockingState,endDate,auditLog);
  final BusinessOverdueStatus businessOverdueStatus=new BusinessOverdueStatus(businessOverdueStatusModelDao);
  final DateTime startDate=new DateTime(2012,6,5,4,3,12,DateTimeZone.UTC);
  final DateTime requestedTimestamp=new DateTime(2012,7,21,10,10,10,DateTimeZone.UTC);
  final BusinessSubscriptionEvent event=BusinessSubscriptionEvent.valueOf("ADD_BASE");
  final BusinessSubscription previousSubscription=null;
  final BusinessSubscription nextSubscription=new BusinessSubscription(null,null,null,Currency.GBP,startDate,SubscriptionState.ACTIVE);
  final BusinessSubscriptionTransitionModelDao subscriptionTransitionModelDao=new BusinessSubscriptionTransitionModelDao(account,bundle,subscriptionTransition,requestedTimestamp,event,previousSubscription,nextSubscription,auditLog);
  final BusinessSubscriptionTransition businessSubscriptionTransition=new BusinessSubscriptionTransition(subscriptionTransitionModelDao);
  final BusinessAccountTagModelDao businessAccountTagModelDao=new BusinessAccountTagModelDao(account,tag,tagDefinition,auditLog);
  final BusinessTag businessTag=BusinessTag.create(businessAccountTagModelDao);
  final BusinessSnapshot businessSnapshot=new BusinessSnapshot(businessAccount,ImmutableList.<BusinessSubscriptionTransition>of(businessSubscriptionTransition),ImmutableList.<BusinessInvoice>of(businessInvoice),ImmutableList.<BusinessInvoicePayment>of(businessInvoicePayment),ImmutableList.<BusinessOverdueStatus>of(businessOverdueStatus),ImmutableList.<BusinessTag>of(businessTag),ImmutableList.<BusinessField>of(businessField));
  Assert.assertEquals(businessSnapshot.getBusinessAccount(),businessAccount);
  Assert.assertEquals(businessSnapshot.getBusinessSubscriptionTransitions().size(),1);
  Assert.assertEquals(businessSnapshot.getBusinessSubscriptionTransitions().iterator().next(),businessSubscriptionTransition);
  Assert.assertEquals(businessSnapshot.getBusinessInvoices().size(),1);
  Assert.assertEquals(businessSnapshot.getBusinessInvoices().iterator().next(),businessInvoice);
  Assert.assertEquals(businessSnapshot.getBusinessInvoicePayments().size(),1);
  Assert.assertEquals(businessSnapshot.getBusinessInvoicePayments().iterator().next(),businessInvoicePayment);
  Assert.assertEquals(businessSnapshot.getBusinessOverdueStatuses().size(),1);
  Assert.assertEquals(businessSnapshot.getBusinessOverdueStatuses().iterator().next(),businessOverdueStatus);
  Assert.assertEquals(businessSnapshot.getBusinessTags().size(),1);
  Assert.assertEquals(businessSnapshot.getBusinessTags().iterator().next(),businessTag);
  Assert.assertEquals(businessSnapshot.getBusinessFields().size(),1);
  Assert.assertEquals(businessSnapshot.getBusinessFields().iterator().next(),businessField);
}
