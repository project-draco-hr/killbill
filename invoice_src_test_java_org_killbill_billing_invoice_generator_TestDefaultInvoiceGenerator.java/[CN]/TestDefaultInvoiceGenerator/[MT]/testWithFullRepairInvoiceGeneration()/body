{
  final LocalDate april25=new LocalDate(2012,4,25);
  final SubscriptionBase baseSubscription=createSubscription();
  final Plan basePlan=new MockPlan("base Plan");
  final MockInternationalPrice price5=new MockInternationalPrice(new DefaultPrice(FIVE,Currency.USD));
  final MockInternationalPrice price10=new MockInternationalPrice(new DefaultPrice(TEN,Currency.USD));
  final MockInternationalPrice price20=new MockInternationalPrice(new DefaultPrice(TWENTY,Currency.USD));
  final PlanPhase basePlanEvergreen=new MockPlanPhase(price10,null,BillingPeriod.MONTHLY,PhaseType.EVERGREEN);
  final BillingEventSet events=new MockBillingEventSet(internalCallContext);
  events.add(createBillingEvent(baseSubscription.getId(),baseSubscription.getBundleId(),april25,basePlan,basePlanEvergreen,25));
  final InvoiceWithMetadata invoiceWithMetadata1=generator.generateInvoice(account,events,null,april25,Currency.USD,internalCallContext);
  final Invoice invoice1=invoiceWithMetadata1.getInvoice();
  assertNotNull(invoice1);
  assertEquals(invoice1.getNumberOfItems(),1);
  assertEquals(invoice1.getBalance().compareTo(TEN),0);
  final List<Invoice> invoices=new ArrayList<Invoice>();
  invoices.add(invoice1);
  final LocalDate april28=new LocalDate(2012,4,28);
  final SubscriptionBase addOnSubscription1=createSubscription();
  final Plan addOn1Plan=new MockPlan("add on 1");
  final PlanPhase addOn1PlanPhaseEvergreen=new MockPlanPhase(price5,null,BillingPeriod.MONTHLY,PhaseType.EVERGREEN);
  events.add(createBillingEvent(addOnSubscription1.getId(),baseSubscription.getBundleId(),april28,addOn1Plan,addOn1PlanPhaseEvergreen,25));
  final SubscriptionBase addOnSubscription2=createSubscription();
  final Plan addOn2Plan=new MockPlan("add on 2");
  final PlanPhase addOn2PlanPhaseEvergreen=new MockPlanPhase(price20,null,BillingPeriod.MONTHLY,PhaseType.EVERGREEN);
  events.add(createBillingEvent(addOnSubscription2.getId(),baseSubscription.getBundleId(),april28,addOn2Plan,addOn2PlanPhaseEvergreen,25));
  final InvoiceWithMetadata invoiceWithMetadata2=generator.generateInvoice(account,events,invoices,april28,Currency.USD,internalCallContext);
  final Invoice invoice2=invoiceWithMetadata2.getInvoice();
  invoices.add(invoice2);
  assertNotNull(invoice2);
  assertEquals(invoice2.getNumberOfItems(),2);
  assertEquals(invoice2.getBalance().compareTo(KillBillMoney.of(TWENTY_FIVE.multiply(new BigDecimal("0.9")),invoice2.getCurrency())),0);
  final MockBillingEventSet newEvents=new MockBillingEventSet(internalCallContext);
  final Plan basePlan2=new MockPlan("base plan 2");
  final MockInternationalPrice price13=new MockInternationalPrice(new DefaultPrice(THIRTEEN,Currency.USD));
  final PlanPhase basePlan2Phase=new MockPlanPhase(price13,null,BillingPeriod.MONTHLY,PhaseType.EVERGREEN);
  newEvents.add(createBillingEvent(baseSubscription.getId(),baseSubscription.getBundleId(),april25,basePlan2,basePlan2Phase,25));
  newEvents.add(createBillingEvent(addOnSubscription1.getId(),baseSubscription.getBundleId(),april28,addOn1Plan,addOn1PlanPhaseEvergreen,25));
  final LocalDate may1=new LocalDate(2012,5,1);
  final InvoiceWithMetadata invoiceWithMetadata3=generator.generateInvoice(account,newEvents,invoices,may1,Currency.USD,internalCallContext);
  final Invoice invoice3=invoiceWithMetadata3.getInvoice();
  assertNotNull(invoice3);
  assertEquals(invoice3.getNumberOfItems(),3);
  assertEquals(invoice3.getBalance().compareTo(FIFTEEN.negate()),0);
}
