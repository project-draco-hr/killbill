{
  final UUID accountId=UUID.randomUUID();
  final Currency currency=Currency.USD;
  final SubscriptionBase subscription=createSubscription();
  final MockInternationalPrice recurringPrice=new MockInternationalPrice(new DefaultPrice(new BigDecimal("2.9500"),Currency.USD));
  final MockPlanPhase phase=new MockPlanPhase(recurringPrice,null);
  final Plan plan=new MockPlan(phase);
  final LocalDate targetDate=new LocalDate(2013,10,30);
  final Invoice existingInvoice=new DefaultInvoice(UUID.randomUUID(),accountId,null,clock.getUTCToday(),targetDate,currency,false);
  final LocalDate startDate=new LocalDate(2013,06,15);
  final LocalDate endDate=new LocalDate(2013,07,15);
  final InvoiceItem recurringInvoiceItem=new RecurringInvoiceItem(existingInvoice.getId(),accountId,subscription.getBundleId(),subscription.getId(),plan.getName(),phase.getName(),startDate,endDate,recurringPrice.getPrice(currency),recurringPrice.getPrice(currency),Currency.USD);
  existingInvoice.addInvoiceItem(recurringInvoiceItem);
  final LocalDate repairStartDate=new LocalDate(2013,06,21);
  final LocalDate repairEndDate=new LocalDate(2013,06,26);
  final BigDecimal repairAmount=new BigDecimal("0.4900").negate();
  final InvoiceItem repairItem=new RepairAdjInvoiceItem(existingInvoice.getId(),accountId,repairStartDate,repairEndDate,repairAmount,currency,recurringInvoiceItem.getId());
  existingInvoice.addInvoiceItem(repairItem);
  final BillingEventSet events=new MockBillingEventSet(internalCallContext);
  final BillingEvent event=invoiceUtil.createMockBillingEvent(null,subscription,new DateTime("2013-06-15",DateTimeZone.UTC),plan,phase,null,recurringPrice.getPrice(currency),currency,BillingPeriod.MONTHLY,15,BillingMode.IN_ADVANCE,"testEvent",1L,SubscriptionBaseTransitionType.CREATE);
  events.add(event);
  final List<Invoice> existingInvoices=new LinkedList<Invoice>();
  existingInvoices.add(existingInvoice);
  final InvoiceWithMetadata invoiceWithMetadata=generator.generateInvoice(account,events,existingInvoices,targetDate,currency,internalCallContext);
  final Invoice invoice=invoiceWithMetadata.getInvoice();
  assertEquals(invoice.getNumberOfItems(),7);
  assertEquals(invoice.getInvoiceItems().get(0).getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(invoice.getInvoiceItems().get(0).getStartDate(),new LocalDate(2013,6,15));
  assertEquals(invoice.getInvoiceItems().get(0).getEndDate(),new LocalDate(2013,7,15));
  assertEquals(invoice.getInvoiceItems().get(1).getInvoiceItemType(),InvoiceItemType.REPAIR_ADJ);
  assertEquals(invoice.getInvoiceItems().get(1).getStartDate(),new LocalDate(2013,6,15));
  assertEquals(invoice.getInvoiceItems().get(1).getEndDate(),new LocalDate(2013,6,21));
  assertEquals(invoice.getInvoiceItems().get(2).getInvoiceItemType(),InvoiceItemType.REPAIR_ADJ);
  assertEquals(invoice.getInvoiceItems().get(2).getStartDate(),new LocalDate(2013,6,26));
  assertEquals(invoice.getInvoiceItems().get(2).getEndDate(),new LocalDate(2013,7,15));
  assertEquals(invoice.getInvoiceItems().get(3).getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(invoice.getInvoiceItems().get(3).getStartDate(),new LocalDate(2013,7,15));
  assertEquals(invoice.getInvoiceItems().get(3).getEndDate(),new LocalDate(2013,8,15));
  assertEquals(invoice.getInvoiceItems().get(4).getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(invoice.getInvoiceItems().get(4).getStartDate(),new LocalDate(2013,8,15));
  assertEquals(invoice.getInvoiceItems().get(4).getEndDate(),new LocalDate(2013,9,15));
  assertEquals(invoice.getInvoiceItems().get(5).getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(invoice.getInvoiceItems().get(5).getStartDate(),new LocalDate(2013,9,15));
  assertEquals(invoice.getInvoiceItems().get(5).getEndDate(),new LocalDate(2013,10,15));
  assertEquals(invoice.getInvoiceItems().get(6).getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(invoice.getInvoiceItems().get(6).getStartDate(),new LocalDate(2013,10,15));
  assertEquals(invoice.getInvoiceItems().get(6).getEndDate(),new LocalDate(2013,11,15));
  existingInvoices.add(invoice);
  final InvoiceWithMetadata newInvoiceWithMetdata=generator.generateInvoice(account,events,existingInvoices,targetDate,currency,internalCallContext);
  final Invoice newInvoice=newInvoiceWithMetdata.getInvoice();
  assertNull(newInvoice);
}
