{
  final BillingEventSet events=new MockBillingEventSet();
  final UUID subscriptionId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final int BILL_CYCLE_DAY=15;
  final Plan plan1=new MockPlan();
  final PlanPhase phase1=createMockMonthlyPlanPhase(null,ZERO,PhaseType.TRIAL);
  final BigDecimal DISCOUNT_PRICE=new BigDecimal("9.95");
  final PlanPhase phase2=createMockMonthlyPlanPhase(DISCOUNT_PRICE,null,PhaseType.DISCOUNT);
  final PlanPhase phase3=createMockMonthlyPlanPhase(new BigDecimal("19.95"),null,PhaseType.EVERGREEN);
  final LocalDate creationDate=new LocalDate(2012,3,6);
  events.add(createBillingEvent(subscriptionId,bundleId,creationDate,plan1,phase1,BILL_CYCLE_DAY));
  final LocalDate trialPhaseEndDate=creationDate.plusDays(30);
  events.add(createBillingEvent(subscriptionId,bundleId,trialPhaseEndDate,plan1,phase2,BILL_CYCLE_DAY));
  final LocalDate discountPhaseEndDate=trialPhaseEndDate.plusMonths(6);
  events.add(createBillingEvent(subscriptionId,bundleId,discountPhaseEndDate,plan1,phase3,BILL_CYCLE_DAY));
  final Invoice invoice1=generator.generateInvoice(accountId,events,null,creationDate,Currency.USD,internalCallContext);
  assertNotNull(invoice1);
  assertEquals(invoice1.getNumberOfItems(),1);
  assertEquals(invoice1.getBalance().compareTo(ZERO),0);
  final List<Invoice> invoiceList=new ArrayList<Invoice>();
  invoiceList.add(invoice1);
  final Invoice invoice2=generator.generateInvoice(accountId,events,invoiceList,trialPhaseEndDate,Currency.USD,internalCallContext);
  assertNotNull(invoice2);
  assertEquals(invoice2.getNumberOfItems(),1);
  assertEquals(invoice2.getInvoiceItems().get(0).getStartDate(),trialPhaseEndDate);
  assertEquals(invoice2.getBalance().compareTo(new BigDecimal("3.21")),0);
  invoiceList.add(invoice2);
  LocalDate targetDate=new LocalDate(trialPhaseEndDate.getYear(),trialPhaseEndDate.getMonthOfYear(),BILL_CYCLE_DAY);
  final Invoice invoice3=generator.generateInvoice(accountId,events,invoiceList,targetDate,Currency.USD,internalCallContext);
  assertNotNull(invoice3);
  assertEquals(invoice3.getNumberOfItems(),1);
  assertEquals(invoice3.getInvoiceItems().get(0).getStartDate(),targetDate);
  assertEquals(invoice3.getBalance().compareTo(DISCOUNT_PRICE),0);
  invoiceList.add(invoice3);
  targetDate=targetDate.plusMonths(6);
  final Invoice invoice4=generator.generateInvoice(accountId,events,invoiceList,targetDate,Currency.USD,internalCallContext);
  assertNotNull(invoice4);
  assertEquals(invoice4.getNumberOfItems(),7);
}
