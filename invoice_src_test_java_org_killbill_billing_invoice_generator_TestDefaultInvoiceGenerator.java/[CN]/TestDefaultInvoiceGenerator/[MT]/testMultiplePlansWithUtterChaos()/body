{
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final UUID subscriptionId1=UUID.randomUUID();
  final UUID subscriptionId2=UUID.randomUUID();
  final UUID subscriptionId3=UUID.randomUUID();
  final UUID subscriptionId4=UUID.randomUUID();
  final UUID subscriptionId5=UUID.randomUUID();
  final Plan plan1=new MockPlan("Change from trial to discount with immediate cancellation");
  final PlanPhase plan1Phase1=createMockMonthlyPlanPhase(EIGHT,PhaseType.TRIAL);
  final PlanPhase plan1Phase2=createMockMonthlyPlanPhase(TWELVE,PhaseType.DISCOUNT);
  final PlanPhase plan1Phase3=createMockMonthlyPlanPhase();
  final LocalDate plan1StartDate=invoiceUtil.buildDate(2011,1,5);
  final LocalDate plan1PhaseChangeDate=invoiceUtil.buildDate(2011,4,5);
  final LocalDate plan1CancelDate=invoiceUtil.buildDate(2011,4,29);
  final Plan plan2=new MockPlan("Change phase from trial to discount to evergreen");
  final PlanPhase plan2Phase1=createMockMonthlyPlanPhase(TWENTY,PhaseType.TRIAL);
  final PlanPhase plan2Phase2=createMockMonthlyPlanPhase(THIRTY,PhaseType.DISCOUNT);
  final PlanPhase plan2Phase3=createMockMonthlyPlanPhase(FORTY,PhaseType.EVERGREEN);
  final LocalDate plan2StartDate=invoiceUtil.buildDate(2011,3,10);
  final LocalDate plan2PhaseChangeToDiscountDate=invoiceUtil.buildDate(2011,6,10);
  final LocalDate plan2PhaseChangeToEvergreenDate=invoiceUtil.buildDate(2011,9,10);
  final Plan plan3=new MockPlan("Upgrade with immediate change, BCD = 31");
  final PlanPhase plan3Phase1=createMockMonthlyPlanPhase(TEN,PhaseType.EVERGREEN);
  final PlanPhase plan3Phase2=createMockAnnualPlanPhase(ONE_HUNDRED,PhaseType.EVERGREEN);
  final LocalDate plan3StartDate=invoiceUtil.buildDate(2011,5,20);
  final LocalDate plan3UpgradeToAnnualDate=invoiceUtil.buildDate(2011,7,31);
  final Plan plan4a=new MockPlan("Plan change effective EOT; plan 1");
  final Plan plan4b=new MockPlan("Plan change effective EOT; plan 2");
  final PlanPhase plan4aPhase1=createMockMonthlyPlanPhase(FIFTEEN);
  final PlanPhase plan4bPhase1=createMockMonthlyPlanPhase(TWENTY_FOUR);
  final LocalDate plan4StartDate=invoiceUtil.buildDate(2011,6,7);
  final LocalDate plan4ChangeOfPlanDate=invoiceUtil.buildDate(2011,8,7);
  final Plan plan5=new MockPlan("Add-on");
  final PlanPhase plan5Phase1=createMockMonthlyPlanPhase(TWENTY);
  final PlanPhase plan5Phase2=createMockMonthlyPlanPhase();
  final LocalDate plan5StartDate=invoiceUtil.buildDate(2011,6,21);
  final LocalDate plan5CancelDate=invoiceUtil.buildDate(2011,10,7);
  BigDecimal expectedAmount;
  final List<Invoice> invoices=new ArrayList<Invoice>();
  final BillingEventSet events=new MockBillingEventSet(internalCallContext);
  events.add(createBillingEvent(subscriptionId1,bundleId,plan1StartDate,plan1,plan1Phase1,5));
  expectedAmount=EIGHT;
  testInvoiceGeneration(accountId,events,invoices,plan1StartDate,1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,2,5),1,expectedAmount);
  expectedAmount=EIGHT;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,3,5),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,bundleId,plan2StartDate,plan2,plan2Phase1,10));
  expectedAmount=TWENTY;
  testInvoiceGeneration(accountId,events,invoices,plan2StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,bundleId,plan1PhaseChangeDate,plan1,plan1Phase2,5));
  expectedAmount=TWELVE;
  testInvoiceGeneration(accountId,events,invoices,plan1PhaseChangeDate,1,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,4,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId1,bundleId,plan1CancelDate,plan1,plan1Phase3,5));
  expectedAmount=new BigDecimal("-2.40");
  testInvoiceGeneration(accountId,events,invoices,plan1CancelDate,1,expectedAmount);
  expectedAmount=TWENTY;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,5,10),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId3,bundleId,plan3StartDate,plan3,plan3Phase1,20));
  expectedAmount=TEN;
  testInvoiceGeneration(accountId,events,invoices,plan3StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId4,bundleId,plan4StartDate,plan4a,plan4aPhase1,7));
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(accountId,events,invoices,plan4StartDate,1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,bundleId,plan2PhaseChangeToDiscountDate,plan2,plan2Phase2,10));
  expectedAmount=THIRTY;
  testInvoiceGeneration(accountId,events,invoices,plan2PhaseChangeToDiscountDate,1,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,6,20),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,bundleId,plan5StartDate,plan5,plan5Phase1,10));
  expectedAmount=TWENTY.multiply(NINETEEN).divide(THIRTY,KillBillMoney.ROUNDING_METHOD);
  testInvoiceGeneration(accountId,events,invoices,plan5StartDate,1,expectedAmount);
  expectedAmount=FIFTEEN;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,7,7),1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,7,10),2,expectedAmount);
  expectedAmount=TEN;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,7,20),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId3,bundleId,plan3UpgradeToAnnualDate,plan3,plan3Phase2,31));
  testInvoiceGeneration(accountId,events,invoices,plan3UpgradeToAnnualDate,2,new BigDecimal("93.55"));
  events.add(createBillingEvent(subscriptionId4,bundleId,plan4ChangeOfPlanDate,plan4b,plan4bPhase1,7));
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(accountId,events,invoices,plan4ChangeOfPlanDate,1,expectedAmount);
  expectedAmount=THIRTY.add(TWENTY);
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,8,10),2,expectedAmount);
  expectedAmount=TWENTY_FOUR;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,9,7),1,expectedAmount);
  events.add(createBillingEvent(subscriptionId2,bundleId,plan2PhaseChangeToEvergreenDate,plan2,plan2Phase3,10));
  expectedAmount=FORTY.add(TWENTY);
  testInvoiceGeneration(accountId,events,invoices,plan2PhaseChangeToEvergreenDate,2,expectedAmount);
  events.add(createBillingEvent(subscriptionId5,bundleId,plan5CancelDate,plan5,plan5Phase2,10));
  testInvoiceGeneration(accountId,events,invoices,plan5CancelDate,2,new BigDecimal("22.00"));
  expectedAmount=FORTY;
  testInvoiceGeneration(accountId,events,invoices,invoiceUtil.buildDate(2011,10,10),1,expectedAmount);
}
