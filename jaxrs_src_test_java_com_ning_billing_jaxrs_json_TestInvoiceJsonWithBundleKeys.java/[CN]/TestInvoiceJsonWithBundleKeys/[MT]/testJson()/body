{
  final BigDecimal amount=BigDecimal.TEN;
  final BigDecimal creditAdj=BigDecimal.ONE;
  final BigDecimal refundAdj=BigDecimal.ONE;
  final String invoiceId=UUID.randomUUID().toString();
  final LocalDate invoiceDate=clock.getUTCToday();
  final LocalDate targetDate=clock.getUTCToday();
  final String invoiceNumber=UUID.randomUUID().toString();
  final BigDecimal balance=BigDecimal.ZERO;
  final String accountId=UUID.randomUUID().toString();
  final String bundleKeys=UUID.randomUUID().toString();
  final CreditJson creditJson=createCreditJson();
  final List<CreditJson> credits=ImmutableList.<CreditJson>of(creditJson);
  final List<AuditLogJson> auditLogs=createAuditLogsJson(clock.getUTCNow());
  final InvoiceJson invoiceJsonSimple=new InvoiceJson(amount,Currency.USD.toString(),creditAdj,refundAdj,invoiceId,invoiceDate,targetDate,invoiceNumber,balance,accountId,bundleKeys,credits,null,auditLogs);
  Assert.assertEquals(invoiceJsonSimple.getAmount(),amount);
  Assert.assertEquals(invoiceJsonSimple.getCreditAdj(),creditAdj);
  Assert.assertEquals(invoiceJsonSimple.getRefundAdj(),refundAdj);
  Assert.assertEquals(invoiceJsonSimple.getInvoiceId(),invoiceId);
  Assert.assertEquals(invoiceJsonSimple.getInvoiceDate(),invoiceDate);
  Assert.assertEquals(invoiceJsonSimple.getTargetDate(),targetDate);
  Assert.assertEquals(invoiceJsonSimple.getInvoiceNumber(),invoiceNumber);
  Assert.assertEquals(invoiceJsonSimple.getBalance(),balance);
  Assert.assertEquals(invoiceJsonSimple.getAccountId(),accountId);
  Assert.assertEquals(invoiceJsonSimple.getBundleKeys(),bundleKeys);
  Assert.assertEquals(invoiceJsonSimple.getCredits(),credits);
  Assert.assertEquals(invoiceJsonSimple.getAuditLogs(),auditLogs);
  final String asJson=mapper.writeValueAsString(invoiceJsonSimple);
  final InvoiceJson fromJson=mapper.readValue(asJson,InvoiceJson.class);
  Assert.assertEquals(fromJson,invoiceJsonSimple);
}
