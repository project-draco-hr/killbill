{
  try {
    final StateMachine initialStateMachine=paymentSMHelper.getStateMachineForStateName(initialStateName);
    final State initialState=initialStateMachine.getState(initialStateName);
    final Operation operation=paymentSMHelper.getOperationForTransaction(transactionType);
    initialState.runOperation(operation,operationCallback,enteringStateCallback,leavingStateCallback);
  }
 catch (  final MissingEntryException e) {
    throw new PaymentApiException(e.getCause(),ErrorCode.PAYMENT_INVALID_OPERATION,transactionType,initialStateName);
  }
catch (  final OperationException e) {
    if (e.getCause() == null) {
      throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,Objects.firstNonNull(e.getMessage(),""));
    }
 else     if (e.getCause() instanceof PaymentApiException) {
      throw (PaymentApiException)e.getCause();
    }
 else     if (e.getCause() instanceof TimeoutException) {
      throw new PaymentApiException(e.getCause(),ErrorCode.PAYMENT_PLUGIN_TIMEOUT,accountId,invoiceId);
    }
 else {
      throw new PaymentApiException(e.getCause(),ErrorCode.PAYMENT_INTERNAL_ERROR,Objects.firstNonNull(e.getMessage(),""));
    }
  }
}
