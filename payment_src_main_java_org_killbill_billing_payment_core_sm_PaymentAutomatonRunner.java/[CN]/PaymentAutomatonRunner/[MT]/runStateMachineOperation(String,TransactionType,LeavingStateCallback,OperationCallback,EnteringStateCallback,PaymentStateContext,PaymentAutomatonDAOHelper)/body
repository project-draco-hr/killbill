{
  try {
    final StateMachineConfig stateMachineConfig=paymentSMHelper.getStateMachineConfig(daoHelper.getPaymentProviderPluginName(),paymentStateContext.getInternalCallContext());
    final StateMachine initialStateMachine=stateMachineConfig.getStateMachineForState(initialStateName);
    final State initialState=initialStateMachine.getState(initialStateName);
    final Operation operation=paymentSMHelper.getOperationForTransaction(stateMachineConfig,transactionType);
    initialState.runOperation(operation,operationCallback,enteringStateCallback,leavingStateCallback);
  }
 catch (  final MissingEntryException e) {
    throw new PaymentApiException(e.getCause(),ErrorCode.PAYMENT_INVALID_OPERATION,transactionType,initialStateName);
  }
catch (  final OperationException e) {
    if (e.getCause() == null) {
      throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,MoreObjects.firstNonNull(e.getMessage(),""));
    }
 else     if (e.getCause() instanceof PaymentApiException) {
      throw (PaymentApiException)e.getCause();
    }
 else {
      throw new PaymentApiException(e.getCause(),ErrorCode.PAYMENT_INTERNAL_ERROR,MoreObjects.firstNonNull(e.getMessage(),""));
    }
  }
}
