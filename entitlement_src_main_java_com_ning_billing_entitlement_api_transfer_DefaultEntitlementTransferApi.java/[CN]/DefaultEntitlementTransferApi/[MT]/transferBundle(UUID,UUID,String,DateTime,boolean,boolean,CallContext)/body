{
  final InternalCallContext fromInternalCallContext=internalCallContextFactory.createInternalCallContext(sourceAccountId,context);
  final InternalCallContext toInternalCallContext=internalCallContextFactory.createInternalCallContext(destAccountId,context);
  try {
    final DateTime effectiveTransferDate=transferDate == null ? clock.getUTCNow() : transferDate;
    if (effectiveTransferDate.isAfter(clock.getUTCNow())) {
      throw new EntitlementTransferApiException(ErrorCode.ENT_TRANSFER_INVALID_EFF_DATE,effectiveTransferDate);
    }
    final SubscriptionBundle bundle=dao.getSubscriptionBundleFromAccountAndKey(sourceAccountId,bundleKey,fromInternalCallContext);
    if (bundle == null) {
      throw new EntitlementTransferApiException(ErrorCode.ENT_CREATE_NO_BUNDLE,bundleKey);
    }
    final BundleTimeline bundleTimeline=timelineApi.getBundleTimeline(bundle,context);
    final SubscriptionBundleData subscriptionBundleData=new SubscriptionBundleData(bundleKey,destAccountId,effectiveTransferDate);
    final List<SubscriptionMigrationData> subscriptionMigrationDataList=new LinkedList<SubscriptionMigrationData>();
    final List<TransferCancelData> transferCancelDataList=new LinkedList<TransferCancelData>();
    DateTime bundleStartdate=null;
    for (    final SubscriptionTimeline cur : bundleTimeline.getSubscriptions()) {
      final SubscriptionData oldSubscription=(SubscriptionData)dao.getSubscriptionFromId(cur.getId(),fromInternalCallContext);
      final List<ExistingEvent> existingEvents=cur.getExistingEvents();
      final ProductCategory productCategory=existingEvents.get(0).getPlanPhaseSpecifier().getProductCategory();
      if (productCategory == ProductCategory.ADD_ON) {
        if (!transferAddOn) {
          continue;
        }
      }
 else {
        final DateTime effectiveCancelDate=!cancelImmediately && oldSubscription.getChargedThroughDate() != null && effectiveTransferDate.isBefore(oldSubscription.getChargedThroughDate()) ? oldSubscription.getChargedThroughDate() : effectiveTransferDate;
        final EntitlementEvent cancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(cur.getId()).setActiveVersion(cur.getActiveVersion()).setProcessedDate(clock.getUTCNow()).setEffectiveDate(effectiveCancelDate).setRequestedDate(effectiveTransferDate).setFromDisk(true));
        TransferCancelData cancelData=new TransferCancelData(oldSubscription,cancelEvent);
        transferCancelDataList.add(cancelData);
      }
      final DateTime subscriptionAlignStartDate=oldSubscription.getAlignStartDate();
      if (bundleStartdate == null) {
        bundleStartdate=oldSubscription.getStartDate();
      }
      final SubscriptionData subscriptionData=createSubscriptionForApiUse(new SubscriptionBuilder().setId(UUID.randomUUID()).setBundleId(subscriptionBundleData.getId()).setCategory(productCategory).setBundleStartDate(effectiveTransferDate).setAlignStartDate(subscriptionAlignStartDate),ImmutableList.<EntitlementEvent>of());
      final List<EntitlementEvent> events=toEvents(existingEvents,subscriptionData,effectiveTransferDate,context);
      final SubscriptionMigrationData curData=new SubscriptionMigrationData(subscriptionData,events,null);
      subscriptionMigrationDataList.add(curData);
    }
    BundleMigrationData bundleMigrationData=new BundleMigrationData(subscriptionBundleData,subscriptionMigrationDataList);
    dao.transfer(sourceAccountId,destAccountId,bundleMigrationData,transferCancelDataList,fromInternalCallContext,toInternalCallContext);
    return bundle;
  }
 catch (  EntitlementRepairException e) {
    throw new EntitlementTransferApiException(e);
  }
}
