{
  ApiEventMigrateEntitlement creationEvent=null;
  final List<EntitlementEvent> events=new ArrayList<EntitlementEvent>(migrationEvents.length);
  DateTime nextEventDate=null;
  for (  final TimedMigration cur : migrationEvents) {
    if (cur.getEventType() == EventType.PHASE) {
      nextEventDate=nextEventDate != null && nextEventDate.compareTo(cur.getEventTime()) < 0 ? nextEventDate : cur.getEventTime();
      final PhaseEvent nextPhaseEvent=PhaseEventData.createNextPhaseEvent(cur.getPhase().getName(),subscriptionData,now,cur.getEventTime());
      events.add(nextPhaseEvent);
    }
 else     if (cur.getEventType() == EventType.API_USER) {
      final ApiEventBuilder builder=new ApiEventBuilder().setSubscriptionId(subscriptionData.getId()).setEventPlan((cur.getPlan() != null) ? cur.getPlan().getName() : null).setEventPlanPhase((cur.getPhase() != null) ? cur.getPhase().getName() : null).setEventPriceList(cur.getPriceList()).setActiveVersion(subscriptionData.getActiveVersion()).setEffectiveDate(cur.getEventTime()).setProcessedDate(now).setRequestedDate(now).setFromDisk(true);
switch (cur.getApiEventType()) {
case MIGRATE_ENTITLEMENT:
        creationEvent=new ApiEventMigrateEntitlement(builder);
      events.add(creationEvent);
    break;
case CHANGE:
  nextEventDate=nextEventDate != null && nextEventDate.compareTo(cur.getEventTime()) < 0 ? nextEventDate : cur.getEventTime();
events.add(new ApiEventChange(builder));
break;
case CANCEL:
nextEventDate=nextEventDate != null && nextEventDate.compareTo(cur.getEventTime()) < 0 ? nextEventDate : cur.getEventTime();
events.add(new ApiEventCancel(builder));
break;
default :
throw new EntitlementError(String.format("Unexpected type of api migration event %s",cur.getApiEventType()));
}
}
 else {
throw new EntitlementError(String.format("Unexpected type of migration event %s",cur.getEventType()));
}
}
if (creationEvent == null || ctd == null) {
throw new EntitlementError(String.format("Could not create migration billing event ctd = %s",ctd));
}
if (nextEventDate == null || nextEventDate.isAfter(ctd)) {
events.add(new ApiEventMigrateBilling(creationEvent,ctd));
}
Collections.sort(events,new Comparator<EntitlementEvent>(){
int compForApiType(final EntitlementEvent o1,final EntitlementEvent o2,final ApiEventType type){
ApiEventType apiO1=null;
if (o1.getType() == EventType.API_USER) {
apiO1=((ApiEvent)o1).getEventType();
}
ApiEventType apiO2=null;
if (o2.getType() == EventType.API_USER) {
apiO2=((ApiEvent)o2).getEventType();
}
if (apiO1 != null && apiO1.equals(type)) {
return -1;
}
 else if (apiO2 != null && apiO2.equals(type)) {
return 1;
}
 else {
return 0;
}
}
@Override public int compare(final EntitlementEvent o1,final EntitlementEvent o2){
int comp=o1.getEffectiveDate().compareTo(o2.getEffectiveDate());
if (comp == 0) {
comp=compForApiType(o1,o2,ApiEventType.MIGRATE_ENTITLEMENT);
}
if (comp == 0) {
comp=compForApiType(o1,o2,ApiEventType.MIGRATE_BILLING);
}
return comp;
}
}
);
return events;
}
