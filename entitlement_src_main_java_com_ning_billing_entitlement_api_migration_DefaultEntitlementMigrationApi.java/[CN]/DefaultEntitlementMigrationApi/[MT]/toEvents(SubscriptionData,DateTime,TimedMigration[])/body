{
  List<EntitlementEvent> events=new ArrayList<EntitlementEvent>(migrationEvents.length);
  for (  TimedMigration cur : migrationEvents) {
    if (cur.getEventType() == EventType.PHASE) {
      PhaseEvent nextPhaseEvent=PhaseEventData.createNextPhaseEvent(cur.getPhase().getName(),subscriptionData,now,cur.getEventTime());
      events.add(nextPhaseEvent);
    }
 else     if (cur.getEventType() == EventType.API_USER) {
      ApiEventBuilder builder=new ApiEventBuilder().setSubscriptionId(subscriptionData.getId()).setEventPlan((cur.getPlan() != null) ? cur.getPlan().getName() : null).setEventPlanPhase((cur.getPhase() != null) ? cur.getPhase().getName() : null).setEventPriceList(cur.getPriceList()).setActiveVersion(subscriptionData.getActiveVersion()).setEffectiveDate(cur.getEventTime()).setProcessedDate(now).setRequestedDate(now);
switch (cur.getApiEventType()) {
case MIGRATE_ENTITLEMENT:
        events.add(new ApiEventMigrate(builder));
      break;
case CHANGE:
    events.add(new ApiEventChange(builder));
  break;
case CANCEL:
events.add(new ApiEventCancel(builder));
break;
default :
throw new EntitlementError(String.format("Unexpected type of api migration event %s",cur.getApiEventType()));
}
}
 else {
throw new EntitlementError(String.format("Unexpected type of migration event %s",cur.getEventType()));
}
}
return events;
}
