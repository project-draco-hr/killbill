{
  final InvoiceItem invoiceItem=Mockito.mock(InvoiceItem.class);
  Mockito.when(invoiceItem.getInvoiceId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getAccountId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getBundleId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getSubscriptionId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getPlanName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getPhaseName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getDescription()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getStartDate()).thenReturn(clock.getUTCToday());
  Mockito.when(invoiceItem.getEndDate()).thenReturn(clock.getUTCToday());
  Mockito.when(invoiceItem.getAmount()).thenReturn(BigDecimal.TEN);
  Mockito.when(invoiceItem.getCurrency()).thenReturn(Currency.EUR);
  final InvoiceItemJsonSimple invoiceItemJsonSimple=new InvoiceItemJsonSimple(invoiceItem);
  Assert.assertEquals(invoiceItemJsonSimple.getInvoiceId(),invoiceItem.getInvoiceId());
  Assert.assertEquals(invoiceItemJsonSimple.getAccountId(),invoiceItem.getAccountId());
  Assert.assertEquals(invoiceItemJsonSimple.getBundleId(),invoiceItem.getBundleId());
  Assert.assertEquals(invoiceItemJsonSimple.getSubscriptionId(),invoiceItem.getSubscriptionId());
  Assert.assertEquals(invoiceItemJsonSimple.getPlanName(),invoiceItem.getPlanName());
  Assert.assertEquals(invoiceItemJsonSimple.getPhaseName(),invoiceItem.getPhaseName());
  Assert.assertEquals(invoiceItemJsonSimple.getDescription(),invoiceItem.getDescription());
  Assert.assertEquals(invoiceItemJsonSimple.getStartDate(),invoiceItem.getStartDate());
  Assert.assertEquals(invoiceItemJsonSimple.getEndDate(),invoiceItem.getEndDate());
  Assert.assertEquals(invoiceItemJsonSimple.getAmount(),invoiceItem.getAmount());
  Assert.assertEquals(invoiceItemJsonSimple.getCurrency(),invoiceItem.getCurrency());
}
