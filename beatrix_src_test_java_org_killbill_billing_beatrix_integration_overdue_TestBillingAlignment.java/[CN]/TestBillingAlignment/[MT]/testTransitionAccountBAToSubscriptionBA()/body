{
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(25));
  clock.setDay(new LocalDate(2012,4,1));
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(bpEntitlement.getId(),new LocalDate(2012,4,1),callContext);
  addDaysAndCheckForCompletion(33,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,5,25),InvoiceItemType.RECURRING,new BigDecimal("199.96")));
  invoiceChecker.checkChargedThroughDate(bpEntitlement.getId(),new LocalDate(2012,5,25),callContext);
  final DefaultEntitlement changedBpEntitlement=changeEntitlementAndCheckForCompletion(bpEntitlement,"Shotgun",BillingPeriod.ANNUAL,null,NextEvent.CHANGE,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,4),new LocalDate(2013,5,1),InvoiceItemType.RECURRING,new BigDecimal("2380.22")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,4),new LocalDate(2012,5,25),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-174.97")));
  invoiceChecker.checkChargedThroughDate(bpEntitlement.getId(),new LocalDate(2013,5,1),callContext);
  Assert.assertEquals(changedBpEntitlement.getSubscriptionBase().getAllTransitions().size(),3);
  final SubscriptionBaseTransition trial=changedBpEntitlement.getSubscriptionBase().getAllTransitions().get(0);
  Assert.assertEquals(trial.getEffectiveTransitionTime().toLocalDate().compareTo(new LocalDate(2012,4,1)),0);
  Assert.assertEquals(trial.getNextPhase().getName(),"shotgun-monthly-trial");
  final SubscriptionBaseTransition smEvergreen=changedBpEntitlement.getSubscriptionBase().getAllTransitions().get(1);
  Assert.assertEquals(smEvergreen.getEffectiveTransitionTime().toLocalDate().compareTo(new LocalDate(2012,5,1)),0);
  Assert.assertEquals(smEvergreen.getNextPhase().getName(),"shotgun-monthly-evergreen");
  final SubscriptionBaseTransition saEvergreen=changedBpEntitlement.getSubscriptionBase().getAllTransitions().get(2);
  Assert.assertEquals(saEvergreen.getEffectiveTransitionTime().toLocalDate().compareTo(new LocalDate(2012,5,4)),0);
  Assert.assertEquals(saEvergreen.getNextPhase().getName(),"shotgun-annual-evergreen");
}
