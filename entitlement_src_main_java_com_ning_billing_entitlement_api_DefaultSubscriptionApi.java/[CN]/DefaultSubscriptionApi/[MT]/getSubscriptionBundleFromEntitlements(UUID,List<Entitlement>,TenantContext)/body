{
  final InternalTenantContext internalTenantContext=internalCallContextFactory.createInternalTenantContext(context);
  final SubscriptionBaseBundle baseBundle=subscriptionInternalApi.getBundleFromId(bundleId,internalTenantContext);
  final List<Subscription> subscriptions=new ArrayList<Subscription>(entitlements.size());
  subscriptions.addAll(Collections2.transform(entitlements,new Function<Entitlement,Subscription>(){
    @Override public Subscription apply(    final Entitlement input){
      return fromEntitlement(input,internalTenantContext);
    }
  }
));
  final Account account=accountApi.getAccountById(baseBundle.getAccountId(),internalTenantContext);
  final InternalTenantContext internalTenantContextWithAccountRecordId=internalCallContextFactory.createInternalTenantContext(account.getId(),context);
  final DateTimeZone accountTimeZone=account.getTimeZone();
  final List<BlockingState> allBlockingStatesPerAccountRecordId=blockingStateDao.getBlockingAllForAccountRecordId(internalTenantContextWithAccountRecordId);
  final Set<UUID> allEntitlementIds=new HashSet<UUID>(Collections2.<Entitlement,UUID>transform(entitlements,new Function<Entitlement,UUID>(){
    @Override public UUID apply(    final Entitlement input){
      return input.getId();
    }
  }
));
  final List<BlockingState> filteredBlockingStates=new LinkedList<BlockingState>(Collections2.filter(allBlockingStatesPerAccountRecordId,new Predicate<BlockingState>(){
    @Override public boolean apply(    final BlockingState input){
      return input.getType() == BlockingStateType.ACCOUNT || (input.getType() == BlockingStateType.SUBSCRIPTION_BUNDLE && input.getBlockedId().equals(bundleId)) || (input.getType() == BlockingStateType.SUBSCRIPTION && allEntitlementIds.contains(input.getBlockedId()));
    }
  }
));
  final SubscriptionBundleTimeline timeline=new DefaultSubscriptionBundleTimeline(accountTimeZone,account.getId(),bundleId,baseBundle.getExternalKey(),entitlements,filteredBlockingStates);
  final DefaultSubscriptionBundle bundle=new DefaultSubscriptionBundle(bundleId,baseBundle.getAccountId(),baseBundle.getExternalKey(),subscriptions,timeline,baseBundle.getOriginalCreatedDate(),baseBundle.getCreatedDate(),baseBundle.getUpdatedDate());
  return bundle;
}
