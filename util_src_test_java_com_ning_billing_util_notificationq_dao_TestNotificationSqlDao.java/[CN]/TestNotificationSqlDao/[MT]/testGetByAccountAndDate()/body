{
  final long accountRecordId=1242L;
  final String notificationKey=UUID.randomUUID().toString();
  final DateTime effDt=new DateTime();
  final Notification notif1=new DefaultNotification("testBasic1",hostname,notificationKey.getClass().getName(),notificationKey,UUID.randomUUID(),UUID.randomUUID(),effDt,accountRecordId,internalCallContext.getTenantRecordId());
  dao.insertNotification(notif1,internalCallContext);
  final Notification notif2=new DefaultNotification("testBasic2",hostname,notificationKey.getClass().getName(),notificationKey,UUID.randomUUID(),UUID.randomUUID(),effDt,accountRecordId,internalCallContext.getTenantRecordId());
  dao.insertNotification(notif2,internalCallContext);
  List<Notification> notifications=dao.getNotificationForAccountAndDate(accountRecordId,effDt.toDate(),internalCallContext);
  assertEquals(notifications.size(),2);
  for (  final Notification cur : notifications) {
    Assert.assertEquals(cur.getProcessingState(),PersistentQueueEntryLifecycleState.AVAILABLE);
    dao.removeNotification(cur.getId().toString(),internalCallContext);
  }
  notifications=dao.getNotificationForAccountAndDate(accountRecordId,effDt.toDate(),internalCallContext);
  assertEquals(notifications.size(),2);
  for (  final Notification cur : notifications) {
    Assert.assertEquals(cur.getProcessingState(),PersistentQueueEntryLifecycleState.REMOVED);
  }
}
