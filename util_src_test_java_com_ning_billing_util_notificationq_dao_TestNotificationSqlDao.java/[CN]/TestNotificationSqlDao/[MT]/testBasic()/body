{
  final String ownerId=UUID.randomUUID().toString();
  String notificationKey=UUID.randomUUID().toString();
  DateTime effDt=new DateTime();
  Notification notif=new DefaultNotification("testBasic",hostname,notificationKey,effDt);
  dao.insertNotification(notif);
  Thread.sleep(1000);
  DateTime now=new DateTime();
  List<Notification> notifications=dao.getReadyNotifications(now.toDate(),hostname,3,"testBasic");
  assertNotNull(notifications);
  assertEquals(notifications.size(),1);
  Notification notification=notifications.get(0);
  assertEquals(notification.getNotificationKey(),notificationKey);
  validateDate(notification.getEffectiveDate(),effDt);
  assertEquals(notification.getOwner(),null);
  assertEquals(notification.getProcessingState(),NotificationLifecycleState.AVAILABLE);
  assertEquals(notification.getNextAvailableDate(),null);
  DateTime nextAvailable=now.plusMinutes(5);
  int res=dao.claimNotification(ownerId,nextAvailable.toDate(),notification.getId(),now.toDate());
  assertEquals(res,1);
  dao.insertClaimedHistory(ownerId,now.toDate(),notification.getUUID().toString());
  notification=fetchNotification(notification.getUUID().toString());
  assertEquals(notification.getNotificationKey(),notificationKey);
  validateDate(notification.getEffectiveDate(),effDt);
  assertEquals(notification.getOwner().toString(),ownerId);
  assertEquals(notification.getProcessingState(),NotificationLifecycleState.IN_PROCESSING);
  validateDate(notification.getNextAvailableDate(),nextAvailable);
  dao.clearNotification(notification.getId(),ownerId);
  notification=fetchNotification(notification.getUUID().toString());
  assertEquals(notification.getNotificationKey(),notificationKey);
  validateDate(notification.getEffectiveDate(),effDt);
  assertEquals(notification.getProcessingState(),NotificationLifecycleState.PROCESSED);
  validateDate(notification.getNextAvailableDate(),nextAvailable);
}
