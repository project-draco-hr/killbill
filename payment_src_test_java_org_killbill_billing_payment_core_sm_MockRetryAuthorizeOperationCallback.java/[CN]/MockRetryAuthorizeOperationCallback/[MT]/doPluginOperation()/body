{
  if (exception != null) {
    if (exception instanceof PaymentApiException) {
      throw (PaymentApiException)exception;
    }
 else {
      throw new RuntimeException(exception);
    }
  }
  final DirectPaymentModelDao payment=new DirectPaymentModelDao(clock.getUTCNow(),clock.getUTCNow(),directPaymentStateContext.account.getId(),directPaymentStateContext.paymentMethodId,directPaymentStateContext.directPaymentExternalKey);
  final DirectPaymentTransactionModelDao transaction=new DirectPaymentTransactionModelDao(clock.getUTCNow(),clock.getUTCNow(),directPaymentStateContext.directPaymentTransactionExternalKey,directPaymentStateContext.directPaymentId,directPaymentStateContext.transactionType,clock.getUTCNow(),PaymentStatus.SUCCESS,directPaymentStateContext.amount,directPaymentStateContext.currency,"","");
  final DirectPaymentModelDao paymentModelDao=paymentDao.insertDirectPaymentWithFirstTransaction(payment,transaction,directPaymentStateContext.internalCallContext);
  final DirectPaymentTransaction convertedTransaction=new DefaultDirectPaymentTransaction(transaction.getId(),transaction.getTransactionExternalKey(),transaction.getCreatedDate(),transaction.getUpdatedDate(),transaction.getDirectPaymentId(),transaction.getTransactionType(),transaction.getEffectiveDate(),transaction.getPaymentStatus(),transaction.getAmount(),transaction.getCurrency(),transaction.getProcessedAmount(),transaction.getProcessedCurrency(),transaction.getGatewayErrorCode(),transaction.getGatewayErrorMsg(),null);
  return new DefaultDirectPayment(paymentModelDao.getId(),paymentModelDao.getCreatedDate(),paymentModelDao.getUpdatedDate(),paymentModelDao.getAccountId(),paymentModelDao.getPaymentMethodId(),paymentModelDao.getPaymentNumber(),paymentModelDao.getExternalKey(),Collections.singletonList(convertedTransaction));
}
