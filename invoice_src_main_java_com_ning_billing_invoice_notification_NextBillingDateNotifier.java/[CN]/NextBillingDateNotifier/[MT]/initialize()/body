{
  try {
    this.stoppedNotificationThread=false;
    this.startedNotificationThread=false;
    nextBillingQueue=notificationQueueService.createNotificationQueue(NEXT_BILLING_DATE_NOTIFIER_SERVICE_NAME,NEXT_BILLING_DATE_NOTIFIER_QUEUE,new NotificationQueueHandler(){
      @Override public void handleReadyNotification(      String notificationKey){
        UUID subscriptionId;
        try {
          subscriptionId=UUID.fromString(notificationKey);
        }
 catch (        IllegalArgumentException e) {
          log.error("The key returned from the NextBillingNotificationQueue is not a valid UUID",e);
          return;
        }
        processEventReady(subscriptionId);
      }
    }
,new NotificationConfig(){
      @Override public boolean isNotificationProcessingOff(){
        return config.isEventProcessingOff();
      }
      @Override public long getNotificationSleepTimeMs(){
        return config.getNotificationSleepTimeMs();
      }
      @Override public int getDaoMaxReadyEvents(){
        return config.getDaoMaxReadyEvents();
      }
      @Override public long getDaoClaimTimeMs(){
        return config.getDaoMaxReadyEvents();
      }
    }
);
  }
 catch (  NotficationQueueAlreadyExists e) {
    throw new RuntimeException(e);
  }
}
