{
  final String name=UUID.randomUUID().toString().substring(0,20);
  final String accountKey=UUID.randomUUID().toString();
  final Account accountData=new MockAccountBuilder(UUID.randomUUID()).externalKey(accountKey).currency(Currency.MXN).build();
  Mockito.when(accountInternalApi.getAccountById(Mockito.eq(accountData.getId()),Mockito.<InternalCallContext>any())).thenReturn(accountData);
  Mockito.when(accountInternalApi.getAccountByKey(Mockito.eq(accountData.getExternalKey()),Mockito.<InternalCallContext>any())).thenReturn(accountData);
  final UUID accountId=accountData.getId();
  Assert.assertEquals(accountTagSqlDao.getTagsForAccountByKey(accountKey,internalCallContext).size(),0);
  tagDao.tagAdded(ObjectType.ACCOUNT,accountId,name,internalCallContext);
  Assert.assertEquals(accountTagSqlDao.getTagsForAccountByKey(accountKey,internalCallContext).size(),1);
  tagDao.tagRemoved(ObjectType.ACCOUNT,accountId,name,internalCallContext);
  Assert.assertEquals(accountTagSqlDao.getTagsForAccountByKey(accountKey,internalCallContext).size(),0);
}
