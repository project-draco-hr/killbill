{
  final Clock clock=new ClockMock();
  final IDBI dbi=helper.getDBI();
  accountTagSqlDao=dbi.onDemand(BusinessAccountTagSqlDao.class);
  final BusinessInvoiceTagSqlDao invoiceTagSqlDao=dbi.onDemand(BusinessInvoiceTagSqlDao.class);
  final BusinessInvoicePaymentTagSqlDao invoicePaymentTagSqlDao=dbi.onDemand(BusinessInvoicePaymentTagSqlDao.class);
  subscriptionTransitionTagSqlDao=dbi.onDemand(BusinessSubscriptionTransitionTagSqlDao.class);
  eventBus=new InMemoryInternalBus();
  final AccountDao accountDao=new DefaultAccountDao(dbi,eventBus,new InternalCallContextFactory(dbi,new ClockMock()));
  callContextFactory=new DefaultCallContextFactory(clock);
  final InternalCallContextFactory internalCallContextFactory=new InternalCallContextFactory(dbi,clock);
  accountApi=new DefaultAccountInternalApi(accountDao);
  accountUserApi=new DefaultAccountUserApi(callContextFactory,internalCallContextFactory,accountDao);
  final CatalogService catalogService=new DefaultCatalogService(Mockito.mock(CatalogConfig.class),Mockito.mock(VersionedCatalogLoader.class));
  final AddonUtils addonUtils=new AddonUtils(catalogService);
  final DefaultNotificationQueueService notificationQueueService=new DefaultNotificationQueueService(dbi,clock,config,internalCallContextFactory);
  final EntitlementDao entitlementDao=new DefaultEntitlementDao(dbi,clock,addonUtils,notificationQueueService,eventBus,catalogService);
  final PlanAligner planAligner=new PlanAligner(catalogService);
  final DefaultSubscriptionApiService apiService=new DefaultSubscriptionApiService(clock,entitlementDao,catalogService,planAligner,internalCallContextFactory);
  entitlementApi=new DefaultEntitlementInternalApi(entitlementDao,apiService,clock,catalogService);
  entitlementUserApi=new DefaultEntitlementUserApi(clock,entitlementDao,catalogService,apiService,addonUtils,internalCallContextFactory);
  tagDao=new BusinessTagDao(accountTagSqlDao,invoicePaymentTagSqlDao,invoiceTagSqlDao,subscriptionTransitionTagSqlDao,accountApi,entitlementApi);
  eventBus.start();
}
