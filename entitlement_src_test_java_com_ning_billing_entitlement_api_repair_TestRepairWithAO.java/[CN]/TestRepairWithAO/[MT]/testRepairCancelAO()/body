{
  String baseProduct="Shotgun";
  BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  SubscriptionData baseSubscription=createSubscription(baseProduct,baseTerm,basePriceList);
  Duration someTimeLater=getDurationDay(3);
  clock.setDeltaFromReality(someTimeLater,DAY_IN_MS);
  SubscriptionData aoSubscription=createSubscription("Telescopic-Scope",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME);
  clock.addDeltaFromReality(someTimeLater);
  BundleRepair bundleRepair=repairApi.getBundleRepair(bundle.getId());
  sortEventsOnBundle(bundleRepair);
  SubscriptionRepair bpRepair=getSubscriptionRepair(baseSubscription.getId(),bundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),2);
  SubscriptionRepair aoRepair=getSubscriptionRepair(aoSubscription.getId(),bundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  List<DeletedEvent> des=new LinkedList<SubscriptionRepair.DeletedEvent>();
  des.add(createDeletedEvent(aoRepair.getExistingEvents().get(1).getEventId()));
  DateTime aoCancelDate=aoSubscription.getStartDate().plusDays(1);
  NewEvent ne=createNewEvent(SubscriptionTransitionType.CANCEL,aoCancelDate,null);
  SubscriptionRepair saoRepair=createSubscriptionReapir(aoSubscription.getId(),des,Collections.singletonList(ne));
  BundleRepair bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(saoRepair));
  boolean dryRun=true;
  BundleRepair dryRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  aoRepair=getSubscriptionRepair(aoSubscription.getId(),dryRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  List<ExistingEvent> expected=new LinkedList<SubscriptionRepair.ExistingEvent>();
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.CREATE,"Telescopic-Scope",PhaseType.DISCOUNT,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,aoSubscription.getStartDate()));
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.CANCEL,null,null,ProductCategory.ADD_ON,null,null,aoCancelDate));
  int index=0;
  for (  ExistingEvent e : expected) {
    validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  SubscriptionData newAoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId());
  assertEquals(newAoSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  dryRun=false;
  BundleRepair realRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  aoRepair=getSubscriptionRepair(aoSubscription.getId(),realRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  index=0;
  for (  ExistingEvent e : expected) {
    validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  newAoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId());
  assertEquals(newAoSubscription.getState(),SubscriptionState.CANCELLED);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
}
