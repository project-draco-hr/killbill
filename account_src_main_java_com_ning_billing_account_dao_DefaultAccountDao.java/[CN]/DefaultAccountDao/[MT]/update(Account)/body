{
  final String key=account.getExternalKey();
  final String objectType=DefaultAccount.OBJECT_TYPE;
  accountDao.inTransaction(new Transaction<Void,AccountSqlDao>(){
    @Override public Void inTransaction(    AccountSqlDao accountDao,    TransactionStatus status) throws Exception {
      Account currentAccount=accountDao.getAccountByKey(key);
      if (currentAccount == null) {
        throw new AccountApiException(ErrorCode.ACCOUNT_DOES_NOT_EXIST,key);
      }
      accountDao.update(account);
      String accountId=account.getId().toString();
      FieldStoreDao fieldStoreDao=accountDao.become(FieldStoreDao.class);
      fieldStoreDao.clear(accountId,objectType);
      List<CustomField> fieldList=account.getFieldList();
      if (fieldList != null) {
        fieldStoreDao.save(accountId,objectType,account.getFieldList());
      }
      TagStoreDao tagStoreDao=fieldStoreDao.become(TagStoreDao.class);
      tagStoreDao.clear(accountId,objectType);
      List<Tag> tagList=account.getTagList();
      if (tagList != null) {
        tagStoreDao.save(accountId,objectType,tagList);
      }
      AccountChangeNotification changeEvent=new DefaultAccountChangeNotification(account.getId(),currentAccount,account);
      if (changeEvent.hasChanges()) {
        eventBus.post(changeEvent);
      }
      return null;
    }
  }
);
}
