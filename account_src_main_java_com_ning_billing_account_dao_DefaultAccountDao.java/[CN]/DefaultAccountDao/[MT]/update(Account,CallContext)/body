{
  try {
    accountSqlDao.inTransaction(new Transaction<Void,AccountSqlDao>(){
      @Override public Void inTransaction(      final AccountSqlDao accountSqlDao,      final TransactionStatus status) throws EntityPersistenceException, Bus.EventBusException {
        String accountId=account.getId().toString();
        Account currentAccount=accountSqlDao.getById(accountId);
        if (currentAccount == null) {
          throw new EntityPersistenceException(ErrorCode.ACCOUNT_DOES_NOT_EXIST_FOR_ID,accountId);
        }
        String currentKey=currentAccount.getExternalKey();
        if (!currentKey.equals(account.getExternalKey())) {
          throw new EntityPersistenceException(ErrorCode.ACCOUNT_CANNOT_CHANGE_EXTERNAL_KEY,currentKey);
        }
        accountSqlDao.update(account,context);
        saveTagsFromWithinTransaction(account,accountSqlDao,context);
        saveCustomFieldsFromWithinTransaction(account,accountSqlDao,context);
        AccountChangeNotification changeEvent=new DefaultAccountChangeNotification(account.getId(),currentAccount,account);
        if (changeEvent.hasChanges()) {
          eventBus.post(changeEvent);
        }
        return null;
      }
    }
);
  }
 catch (  RuntimeException re) {
    if (re.getCause() instanceof EntityPersistenceException) {
      throw (EntityPersistenceException)re.getCause();
    }
 else {
      throw re;
    }
  }
}
