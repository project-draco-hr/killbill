{
  transactionalSqlDao.execute(AccountApiException.class,new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws EntityPersistenceException, EventBusException {
      final AccountSqlDao transactional=entitySqlDaoWrapperFactory.become(AccountSqlDao.class);
      final AccountModelDao currentAccount=transactional.getById(accountId.toString(),context);
      if (currentAccount == null) {
        throw new EntityPersistenceException(ErrorCode.ACCOUNT_DOES_NOT_EXIST_FOR_ID,accountId);
      }
      if ((currentAccount.getPaymentMethodId() == null && paymentMethodId == null) || (currentAccount.getPaymentMethodId() != null && currentAccount.getPaymentMethodId().equals(paymentMethodId))) {
        return null;
      }
      final String thePaymentMethodId=paymentMethodId != null ? paymentMethodId.toString() : null;
      transactional.updatePaymentMethod(accountId.toString(),thePaymentMethodId,context);
      final AccountModelDao account=transactional.getById(accountId.toString(),context);
      final AccountChangeInternalEvent changeEvent=new DefaultAccountChangeEvent(accountId,currentAccount,account,context.getAccountRecordId(),context.getTenantRecordId(),context.getUserToken());
      try {
        eventBus.postFromTransaction(changeEvent,entitySqlDaoWrapperFactory.getSqlDao());
      }
 catch (      final EventBusException e) {
        log.warn("Failed to post account change event for account " + accountId,e);
      }
      return null;
    }
  }
);
}
