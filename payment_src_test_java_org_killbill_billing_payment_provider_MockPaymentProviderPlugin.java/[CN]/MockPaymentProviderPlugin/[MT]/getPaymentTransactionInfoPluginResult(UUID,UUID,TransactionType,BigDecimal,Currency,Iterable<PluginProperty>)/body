{
  if (makePluginWaitSomeMilliseconds.get() > 0) {
    try {
      Thread.sleep(makePluginWaitSomeMilliseconds.get());
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new PaymentPluginApiException("An Interruption occurred while the Thread was sleeping.",e);
    }
  }
  if (makeNextInvoiceFailWithException.getAndSet(false)) {
    throw new PaymentPluginApiException("","test error");
  }
  final PluginProperty paymentPluginStatusOverride=Iterables.tryFind(pluginProperties,new Predicate<PluginProperty>(){
    @Override public boolean apply(    final PluginProperty input){
      return PLUGIN_PROPERTY_PAYMENT_PLUGIN_STATUS_OVERRIDE.equals(input.getKey());
    }
  }
).orNull();
  final PaymentPluginStatus status;
  if (paymentPluginStatusOverride != null && paymentPluginStatusOverride.getValue() != null) {
    status=PaymentPluginStatus.valueOf(paymentPluginStatusOverride.getValue().toString());
  }
 else {
    status=(makeAllInvoicesFailWithError.get() || makeNextInvoiceFailWithError.getAndSet(false)) ? PaymentPluginStatus.ERROR : PaymentPluginStatus.PROCESSED;
  }
  final String errorCode=status == PaymentPluginStatus.PROCESSED ? "" : GATEWAY_ERROR_CODE;
  final String error=status == PaymentPluginStatus.PROCESSED ? "" : GATEWAY_ERROR;
  InternalPaymentInfo info=payments.get(kbPaymentId.toString());
  if (info == null) {
    info=new InternalPaymentInfo();
    payments.put(kbPaymentId.toString(),info);
  }
  final PaymentTransactionInfoPlugin result=new DefaultNoOpPaymentInfoPlugin(kbPaymentId,kbTransactionId,type,amount,currency,clock.getUTCNow(),clock.getUTCNow(),status,errorCode,error);
  List<PaymentTransactionInfoPlugin> existingTransactions=paymentTransactions.get(kbPaymentId.toString());
  if (existingTransactions == null) {
    existingTransactions=new ArrayList<PaymentTransactionInfoPlugin>();
    paymentTransactions.put(kbPaymentId.toString(),existingTransactions);
  }
  final Iterator<PaymentTransactionInfoPlugin> iterator=existingTransactions.iterator();
  while (iterator.hasNext()) {
    final PaymentTransactionInfoPlugin existingTransaction=iterator.next();
    if (existingTransaction.getKbTransactionPaymentId().equals(kbTransactionId)) {
      info.addAmount(type,existingTransaction.getAmount().negate());
      iterator.remove();
    }
  }
  existingTransactions.add(result);
  info.addAmount(type,result.getAmount());
  return result;
}
