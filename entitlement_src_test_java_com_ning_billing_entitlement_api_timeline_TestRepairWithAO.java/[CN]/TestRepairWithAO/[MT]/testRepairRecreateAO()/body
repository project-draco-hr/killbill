{
  log.info("Starting testRepairRecreateAO");
  String baseProduct="Shotgun";
  BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  SubscriptionData baseSubscription=createSubscription(baseProduct,baseTerm,basePriceList);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(4));
  clock.addDeltaFromReality(it.toDurationMillis());
  SubscriptionData aoSubscription=createSubscription("Telescopic-Scope",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME);
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(3));
  clock.addDeltaFromReality(it.toDurationMillis());
  BundleTimeline bundleRepair=repairApi.getBundleRepair(bundle.getId());
  sortEventsOnBundle(bundleRepair);
  SubscriptionTimeline bpRepair=getSubscriptionRepair(baseSubscription.getId(),bundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),2);
  SubscriptionTimeline aoRepair=getSubscriptionRepair(aoSubscription.getId(),bundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
  des.add(createDeletedEvent(aoRepair.getExistingEvents().get(0).getEventId()));
  des.add(createDeletedEvent(aoRepair.getExistingEvents().get(1).getEventId()));
  DateTime aoRecreateDate=aoSubscription.getStartDate().plusDays(1);
  PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.DISCOUNT);
  NewEvent ne=createNewEvent(SubscriptionTransitionType.CREATE,aoRecreateDate,spec);
  SubscriptionTimeline saoRepair=createSubscriptionRepair(aoSubscription.getId(),des,Collections.singletonList(ne));
  BundleTimeline bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(saoRepair));
  boolean dryRun=true;
  BundleTimeline dryRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  aoRepair=getSubscriptionRepair(aoSubscription.getId(),dryRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  List<ExistingEvent> expected=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.CREATE,"Telescopic-Scope",PhaseType.DISCOUNT,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,aoRecreateDate));
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.PHASE,"Telescopic-Scope",PhaseType.EVERGREEN,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,baseSubscription.getStartDate().plusMonths(1)));
  int index=0;
  for (  ExistingEvent e : expected) {
    validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  SubscriptionData newAoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId());
  assertEquals(newAoSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  assertEquals(newAoSubscription.getStartDate(),aoSubscription.getStartDate());
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  dryRun=false;
  testListener.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
  BundleTimeline realRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  assertTrue(testListener.isCompleted(5000));
  aoRepair=getSubscriptionRepair(aoSubscription.getId(),realRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  index=0;
  for (  ExistingEvent e : expected) {
    validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  newAoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId());
  assertEquals(newAoSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  assertEquals(newAoSubscription.getStartDate(),aoRecreateDate);
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
}
