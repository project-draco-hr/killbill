{
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  SubscriptionData baseSubscription=createSubscription(baseProduct,baseTerm,basePriceList);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(4));
  clock.addDeltaFromReality(it.toDurationMillis());
  final SubscriptionData aoSubscription=createSubscription("Telescopic-Scope",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(40));
  clock.addDeltaFromReality(it.toDurationMillis());
  assertTrue(testListener.isCompleted(7000));
  final DateTime newChargedThroughDate=baseSubscription.getStartDate().plusDays(30).plusMonths(1);
  billingApi.setChargedThroughDate(baseSubscription.getId(),newChargedThroughDate.toLocalDate(),internalCallContext);
  baseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId(),callContext);
  BundleTimeline bundleRepair=repairApi.getBundleTimeline(bundle.getId(),callContext);
  sortEventsOnBundle(bundleRepair);
  SubscriptionTimeline bpRepair=getSubscriptionRepair(baseSubscription.getId(),bundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),2);
  SubscriptionTimeline aoRepair=getSubscriptionRepair(aoSubscription.getId(),bundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  final DateTime bpCancelDate=clock.getUTCNow().minusDays(1);
  final NewEvent ne=createNewEvent(SubscriptionTransitionType.CANCEL,bpCancelDate,null);
  bpRepair=createSubscriptionRepair(baseSubscription.getId(),Collections.<SubscriptionTimeline.DeletedEvent>emptyList(),Collections.singletonList(ne));
  bundleRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(bpRepair));
  boolean dryRun=true;
  final BundleTimeline dryRunBundleRepair=repairApi.repairBundle(bundleRepair,dryRun,callContext);
  aoRepair=getSubscriptionRepair(aoSubscription.getId(),dryRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),3);
  bpRepair=getSubscriptionRepair(baseSubscription.getId(),dryRunBundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),3);
  final List<ExistingEvent> expectedAO=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  expectedAO.add(createExistingEventForAssertion(SubscriptionTransitionType.CREATE,"Telescopic-Scope",PhaseType.DISCOUNT,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,aoSubscription.getStartDate()));
  expectedAO.add(createExistingEventForAssertion(SubscriptionTransitionType.PHASE,"Telescopic-Scope",PhaseType.EVERGREEN,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,baseSubscription.getStartDate().plusMonths(1)));
  expectedAO.add(createExistingEventForAssertion(SubscriptionTransitionType.CANCEL,"Telescopic-Scope",PhaseType.EVERGREEN,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,newChargedThroughDate));
  int index=0;
  for (  final ExistingEvent e : expectedAO) {
    validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  final List<ExistingEvent> expectedBP=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  expectedBP.add(createExistingEventForAssertion(SubscriptionTransitionType.CREATE,"Shotgun",PhaseType.TRIAL,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.NO_BILLING_PERIOD,baseSubscription.getStartDate()));
  expectedBP.add(createExistingEventForAssertion(SubscriptionTransitionType.PHASE,"Shotgun",PhaseType.EVERGREEN,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,baseSubscription.getStartDate().plusDays(30)));
  expectedBP.add(createExistingEventForAssertion(SubscriptionTransitionType.CANCEL,"Shotgun",PhaseType.EVERGREEN,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,newChargedThroughDate));
  index=0;
  for (  final ExistingEvent e : expectedBP) {
    validateExistingEventForAssertion(e,bpRepair.getExistingEvents().get(index++));
  }
  SubscriptionData newAoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId(),callContext);
  assertEquals(newAoSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  SubscriptionData newBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId(),callContext);
  assertEquals(newBaseSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newBaseSubscription.getAllTransitions().size(),2);
  assertEquals(newBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  dryRun=false;
  testListener.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
  final BundleTimeline realRunBundleRepair=repairApi.repairBundle(bundleRepair,dryRun,callContext);
  assertTrue(testListener.isCompleted(5000));
  aoRepair=getSubscriptionRepair(aoSubscription.getId(),realRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),3);
  bpRepair=getSubscriptionRepair(baseSubscription.getId(),realRunBundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),3);
  index=0;
  for (  final ExistingEvent e : expectedAO) {
    validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  index=0;
  for (  final ExistingEvent e : expectedBP) {
    validateExistingEventForAssertion(e,bpRepair.getExistingEvents().get(index++));
  }
  newAoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId(),callContext);
  assertEquals(newAoSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),3);
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  newBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId(),callContext);
  assertEquals(newBaseSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newBaseSubscription.getAllTransitions().size(),3);
  assertEquals(newBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  testListener.pushExpectedEvent(NextEvent.CANCEL);
  testListener.pushExpectedEvent(NextEvent.CANCEL);
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(32));
  clock.addDeltaFromReality(it.toDurationMillis());
  assertTrue(testListener.isCompleted(7000));
  newAoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId(),callContext);
  assertEquals(newAoSubscription.getState(),SubscriptionState.CANCELLED);
  assertEquals(newAoSubscription.getAllTransitions().size(),3);
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  newBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId(),callContext);
  assertEquals(newBaseSubscription.getState(),SubscriptionState.CANCELLED);
  assertEquals(newBaseSubscription.getAllTransitions().size(),3);
  assertEquals(newBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
}
