{
  final AccountJson input=createAccount(UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString());
  final String accountId=input.getAccountId();
  final String email1=UUID.randomUUID().toString();
  final String email2=UUID.randomUUID().toString();
  final AccountEmailJson accountEmailJson1=new AccountEmailJson(accountId,email1);
  final AccountEmailJson accountEmailJson2=new AccountEmailJson(accountId,email2);
  final String baseUri=JaxrsResource.ACCOUNTS_PATH + "/" + accountId+ "/"+ JaxrsResource.EMAILS;
  final Response firstResponse=doGet(baseUri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(firstResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final List<AccountEmailJson> firstEmails=mapper.readValue(firstResponse.getResponseBody(),new TypeReference<List<AccountEmailJson>>(){
  }
);
  Assert.assertEquals(firstEmails.size(),0);
  final String firstEmailString=mapper.writeValueAsString(accountEmailJson1);
  final Response secondResponse=doPost(baseUri,firstEmailString,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(secondResponse.getStatusCode(),javax.ws.rs.core.Response.Status.CREATED.getStatusCode());
  final Response thirdResponse=doGet(baseUri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(thirdResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final List<AccountEmailJson> secondEmails=mapper.readValue(thirdResponse.getResponseBody(),new TypeReference<List<AccountEmailJson>>(){
  }
);
  Assert.assertEquals(secondEmails.size(),1);
  Assert.assertEquals(secondEmails.get(0).getAccountId(),accountId);
  Assert.assertEquals(secondEmails.get(0).getEmail(),email1);
  final String secondEmailString=mapper.writeValueAsString(accountEmailJson2);
  final Response thridResponse=doPost(baseUri,secondEmailString,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(thridResponse.getStatusCode(),javax.ws.rs.core.Response.Status.CREATED.getStatusCode());
  final Response fourthResponse=doGet(baseUri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(fourthResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final List<AccountEmailJson> thirdEmails=mapper.readValue(fourthResponse.getResponseBody(),new TypeReference<List<AccountEmailJson>>(){
  }
);
  Assert.assertEquals(thirdEmails.size(),2);
  Assert.assertEquals(thirdEmails.get(0).getAccountId(),accountId);
  Assert.assertEquals(thirdEmails.get(1).getAccountId(),accountId);
  Assert.assertTrue(thirdEmails.get(0).getEmail().equals(email1) || thirdEmails.get(0).getEmail().equals(email2));
  Assert.assertTrue(thirdEmails.get(1).getEmail().equals(email1) || thirdEmails.get(1).getEmail().equals(email2));
  final Response fifthResponse=doDelete(baseUri + "/" + email1,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(fifthResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final Response sixthResponse=doGet(baseUri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(sixthResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final List<AccountEmailJson> fourthEmails=mapper.readValue(sixthResponse.getResponseBody(),new TypeReference<List<AccountEmailJson>>(){
  }
);
  Assert.assertEquals(fourthEmails.size(),1);
  Assert.assertEquals(fourthEmails.get(0).getAccountId(),accountId);
  Assert.assertEquals(fourthEmails.get(0).getEmail(),email2);
}
