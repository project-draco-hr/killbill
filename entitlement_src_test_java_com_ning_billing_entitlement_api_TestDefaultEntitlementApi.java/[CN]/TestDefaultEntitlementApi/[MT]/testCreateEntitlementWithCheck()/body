{
  try {
    final LocalDate initialDate=new LocalDate(2013,8,7);
    clock.setDay(initialDate);
    final Account account=accountApi.createAccount(getAccountData(7),callContext);
    final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
    final Entitlement entitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,account.getExternalKey(),initialDate,callContext);
    assertEquals(entitlement.getAccountId(),account.getId());
    assertEquals(entitlement.getExternalKey(),account.getExternalKey());
    assertEquals(entitlement.getEffectiveStartDate(),initialDate);
    assertNull(entitlement.getEffectiveEndDate());
    assertEquals(entitlement.getPriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(entitlement.getProduct().getName(),"Shotgun");
    assertEquals(entitlement.getCurrentPhase().getName(),"shotgun-monthly-trial");
    assertEquals(entitlement.getPlan().getName(),"shotgun-monthly");
    assertEquals(entitlement.getProductCategory(),ProductCategory.BASE);
    assertEquals(entitlement.getState(),EntitlementState.ACTIVE);
    assertEquals(entitlement.getSourceType(),EntitlementSourceType.NATIVE);
    assertEquals(entitlement.getLastActivePlan().getName(),"shotgun-monthly");
    assertEquals(entitlement.getLastActivePriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(entitlement.getLastActiveProduct().getName(),"Shotgun");
    assertEquals(entitlement.getLastActiveProductCategory(),ProductCategory.BASE);
    assertEquals(entitlement.getState(),EntitlementState.ACTIVE);
    assertEquals(entitlement.getSourceType(),EntitlementSourceType.NATIVE);
    final Entitlement entitlement2=entitlementApi.getEntitlementForId(entitlement.getId(),callContext);
    assertEquals(entitlement2.getAccountId(),account.getId());
    assertEquals(entitlement2.getExternalKey(),account.getExternalKey());
    assertEquals(entitlement2.getEffectiveStartDate(),initialDate);
    assertNull(entitlement2.getEffectiveEndDate());
    assertEquals(entitlement2.getPriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(entitlement2.getProduct().getName(),"Shotgun");
    assertEquals(entitlement2.getCurrentPhase().getName(),"shotgun-monthly-trial");
    assertEquals(entitlement2.getPlan().getName(),"shotgun-monthly");
    assertEquals(entitlement2.getProductCategory(),ProductCategory.BASE);
    assertEquals(entitlement2.getState(),EntitlementState.ACTIVE);
    assertEquals(entitlement2.getSourceType(),EntitlementSourceType.NATIVE);
    assertEquals(entitlement2.getLastActivePlan().getName(),"shotgun-monthly");
    assertEquals(entitlement2.getLastActivePriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(entitlement2.getLastActiveProduct().getName(),"Shotgun");
    assertEquals(entitlement2.getLastActiveProductCategory(),ProductCategory.BASE);
    assertEquals(entitlement2.getState(),EntitlementState.ACTIVE);
    assertEquals(entitlement2.getSourceType(),EntitlementSourceType.NATIVE);
    List<Entitlement> accountEntitlements=entitlementApi.getAllEntitlementsForAccountId(account.getId(),callContext);
    assertEquals(accountEntitlements.size(),1);
    final Entitlement entitlement3=accountEntitlements.get(0);
    assertEquals(entitlement3.getAccountId(),account.getId());
    assertEquals(entitlement3.getExternalKey(),account.getExternalKey());
    assertEquals(entitlement3.getEffectiveStartDate(),initialDate);
    assertNull(entitlement3.getEffectiveEndDate());
    assertEquals(entitlement3.getPriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(entitlement3.getProduct().getName(),"Shotgun");
    assertEquals(entitlement3.getCurrentPhase().getName(),"shotgun-monthly-trial");
    assertEquals(entitlement3.getPlan().getName(),"shotgun-monthly");
    assertEquals(entitlement3.getProductCategory(),ProductCategory.BASE);
    assertEquals(entitlement3.getState(),EntitlementState.ACTIVE);
    assertEquals(entitlement3.getSourceType(),EntitlementSourceType.NATIVE);
    assertEquals(entitlement3.getLastActivePlan().getName(),"shotgun-monthly");
    assertEquals(entitlement3.getLastActivePriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(entitlement3.getLastActiveProduct().getName(),"Shotgun");
    assertEquals(entitlement3.getLastActiveProductCategory(),ProductCategory.BASE);
    assertEquals(entitlement3.getState(),EntitlementState.ACTIVE);
    assertEquals(entitlement3.getSourceType(),EntitlementSourceType.NATIVE);
  }
 catch (  EntitlementApiException e) {
    Assert.fail("Test failed " + e.getMessage());
  }
catch (  AccountApiException e) {
    Assert.fail("Test failed " + e.getMessage());
  }
}
