{
  final TimelineDao dao=new DefaultTimelineDao(getDBI());
  final DateTime startTime=new DateTime(DateTimeZone.UTC);
  final DateTime endTime=startTime.plusSeconds(2);
  final String hostName=UUID.randomUUID().toString();
  final Integer hostId=dao.getOrAddSource(hostName,internalCallContext);
  Assert.assertNotNull(hostId);
  final Integer eventCategoryId=123;
  final String sampleOne=UUID.randomUUID().toString();
  final Integer sampleOneId=dao.getOrAddMetric(hostId,eventCategoryId,sampleOne,internalCallContext);
  Assert.assertNotNull(sampleOneId);
  final String sampleTwo=UUID.randomUUID().toString();
  final Integer sampleTwoId=dao.getOrAddMetric(hostId,eventCategoryId,sampleTwo,internalCallContext);
  Assert.assertNotNull(sampleTwoId);
  final BiMap<Integer,CategoryRecordIdAndMetric> sampleKinds=dao.getMetrics(internalCallContext);
  Assert.assertEquals(sampleKinds.size(),2);
  Assert.assertEquals(sampleKinds.get(sampleOneId).getEventCategoryId(),(int)eventCategoryId);
  Assert.assertEquals(sampleKinds.get(sampleOneId).getMetric(),sampleOne);
  Assert.assertEquals(sampleKinds.get(sampleTwoId).getEventCategoryId(),(int)eventCategoryId);
  Assert.assertEquals(sampleKinds.get(sampleTwoId).getMetric(),sampleTwo);
  Assert.assertEquals(dao.getCategoryIdAndMetric(sampleOneId,internalCallContext).getEventCategoryId(),(int)eventCategoryId);
  Assert.assertEquals(dao.getCategoryIdAndMetric(sampleOneId,internalCallContext).getMetric(),sampleOne);
  Assert.assertEquals(dao.getCategoryIdAndMetric(sampleTwoId,internalCallContext).getEventCategoryId(),(int)eventCategoryId);
  Assert.assertEquals(dao.getCategoryIdAndMetric(sampleTwoId,internalCallContext).getMetric(),sampleTwo);
  Assert.assertEquals(ImmutableList.<Integer>copyOf(dao.getMetricIdsBySourceId(hostId,internalCallContext)).size(),0);
  dao.insertTimelineChunk(new TimelineChunk(0,hostId,sampleOneId,startTime,endTime,new byte[0],new byte[0],0),internalCallContext);
  final ImmutableList<Integer> firstFetch=ImmutableList.<Integer>copyOf(dao.getMetricIdsBySourceId(hostId,internalCallContext));
  Assert.assertEquals(firstFetch.size(),1);
  Assert.assertEquals(firstFetch.get(0),sampleOneId);
  dao.insertTimelineChunk(new TimelineChunk(0,hostId,sampleTwoId,startTime,endTime,new byte[0],new byte[0],0),internalCallContext);
  final ImmutableList<Integer> secondFetch=ImmutableList.<Integer>copyOf(dao.getMetricIdsBySourceId(hostId,internalCallContext));
  Assert.assertEquals(secondFetch.size(),2);
  Assert.assertTrue(secondFetch.contains(sampleOneId));
  Assert.assertTrue(secondFetch.contains(sampleTwoId));
  dao.insertTimelineChunk(new TimelineChunk(0,Integer.MAX_VALUE - 100,Integer.MAX_VALUE,startTime,endTime,new byte[0],new byte[0],0),internalCallContext);
  final ImmutableList<Integer> thirdFetch=ImmutableList.<Integer>copyOf(dao.getMetricIdsBySourceId(hostId,internalCallContext));
  Assert.assertEquals(secondFetch.size(),2);
  Assert.assertTrue(thirdFetch.contains(sampleOneId));
  Assert.assertTrue(thirdFetch.contains(sampleTwoId));
  final AtomicInteger chunksSeen=new AtomicInteger(0);
  dao.getSamplesBySourceIdsAndMetricIds(ImmutableList.<Integer>of(hostId),ImmutableList.<Integer>of(sampleOneId,sampleTwoId),startTime,startTime.plusSeconds(2),new TimelineChunkConsumer(){
    @Override public void processTimelineChunk(    final TimelineChunk chunk){
      chunksSeen.incrementAndGet();
      Assert.assertEquals((Integer)chunk.getSourceId(),hostId);
      Assert.assertTrue(chunk.getMetricId() == sampleOneId || chunk.getMetricId() == sampleTwoId);
    }
  }
,internalCallContext);
  Assert.assertEquals(chunksSeen.get(),2);
  dao.getSamplesBySourceIdsAndMetricIds(ImmutableList.<Integer>of(Integer.MAX_VALUE),null,startTime,startTime.plusDays(1),FAIL_CONSUMER,internalCallContext);
  dao.getSamplesBySourceIdsAndMetricIds(ImmutableList.<Integer>of(hostId),ImmutableList.<Integer>of(Integer.MAX_VALUE),startTime,startTime.plusDays(1),FAIL_CONSUMER,internalCallContext);
  dao.getSamplesBySourceIdsAndMetricIds(ImmutableList.<Integer>of(hostId),ImmutableList.<Integer>of(sampleOneId,sampleTwoId),startTime.plusDays(1),startTime.plusDays(2),FAIL_CONSUMER,internalCallContext);
}
