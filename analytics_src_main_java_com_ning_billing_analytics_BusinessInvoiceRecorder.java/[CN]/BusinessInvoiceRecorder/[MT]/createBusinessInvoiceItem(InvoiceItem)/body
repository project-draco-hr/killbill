{
  String externalKey=null;
  Plan plan=null;
  PlanPhase planPhase=null;
  if (invoiceItem.getBundleId() != null) {
    try {
      final SubscriptionBundle bundle=entitlementApi.getBundleFromId(invoiceItem.getBundleId());
      externalKey=bundle.getKey();
    }
 catch (    EntitlementUserApiException e) {
      log.warn("Ignoring subscription fields for invoice item {} for bundle {} (bundle does not exist)",invoiceItem.getId().toString(),invoiceItem.getBundleId().toString());
    }
  }
  if (invoiceItem.getPlanName() != null) {
    try {
      plan=catalogService.getFullCatalog().findPlan(invoiceItem.getPlanName(),invoiceItem.getStartDate().toDateTimeAtStartOfDay());
    }
 catch (    CatalogApiException e) {
      log.warn("Unable to retrieve plan for invoice item {}",invoiceItem.getId());
    }
  }
  if (invoiceItem.getSubscriptionId() != null && invoiceItem.getPhaseName() != null) {
    final Subscription subscription;
    try {
      subscription=entitlementApi.getSubscriptionFromId(invoiceItem.getSubscriptionId());
      planPhase=catalogService.getFullCatalog().findPhase(invoiceItem.getPhaseName(),invoiceItem.getStartDate().toDateTimeAtStartOfDay(),subscription.getStartDate());
    }
 catch (    EntitlementUserApiException e) {
      log.warn("Ignoring subscription fields for invoice item {} for subscription {} (subscription does not exist)",invoiceItem.getId().toString(),invoiceItem.getSubscriptionId().toString());
    }
catch (    CatalogApiException e) {
      log.warn("Unable to retrieve phase for invoice item {}",invoiceItem.getId());
    }
  }
  return new BusinessInvoiceItem(externalKey,invoiceItem,plan,planPhase);
}
