{
  final Long t2=System.currentTimeMillis();
  final Long t1=t2 - (3 * MINUTES_IN_MILLIS);
  final SimpleSession session1=new SimpleSession();
  final SimpleSession session2=new SimpleSession();
  session1.setLastAccessTime(null);
  session2.setLastAccessTime(null);
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,0L));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS - 1));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS + 1));
  session1.setLastAccessTime(new Date(t1));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,0L));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS - 1));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS + 1));
  session2.setLastAccessTime(new Date(t2));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,0L));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS - 1));
  Assert.assertFalse(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS));
  Assert.assertTrue(SessionUtils.accessedRecently(session1,session2,3 * MINUTES_IN_MILLIS + 1));
}
