{
  final TagInternalEvent tagEvent;
  final TagDefinitionModelDao tagDefinition=getTagDefinitionFromTransaction(tag.getTagDefinitionId(),entitySqlDaoWrapperFactory,context);
  final boolean isControlTag=ControlTagType.getTypeFromId(tagDefinition.getId()) != null;
switch (changeType) {
case INSERT:
    tagEvent=(isControlTag) ? tagEventBuilder.newControlTagCreationEvent(tag.getId(),tag.getObjectId(),tag.getObjectType(),tagDefinition) : tagEventBuilder.newUserTagCreationEvent(tag.getId(),tag.getObjectId(),tag.getObjectType(),tagDefinition);
  break;
case DELETE:
tagEvent=(isControlTag) ? tagEventBuilder.newControlTagDeletionEvent(tag.getId(),tag.getObjectId(),tag.getObjectType(),tagDefinition) : tagEventBuilder.newUserTagDeletionEvent(tag.getId(),tag.getObjectId(),tag.getObjectType(),tagDefinition);
break;
default :
return;
}
try {
bus.postFromTransaction(tagEvent,context.getUserToken(),context.getAccountRecordId(),context.getTenantRecordId(),entitySqlDaoWrapperFactory.getSqlDao());
}
 catch (PersistentBus.EventBusException e) {
log.warn("Failed to post tag event for tag " + tag.getId().toString(),e);
}
}
