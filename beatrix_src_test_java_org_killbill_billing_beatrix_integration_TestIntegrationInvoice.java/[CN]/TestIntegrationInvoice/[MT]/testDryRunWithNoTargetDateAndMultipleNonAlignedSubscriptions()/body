{
  final int billingDay=14;
  final DateTime initialCreationDate=new DateTime(2014,1,2,0,0,0,0,testTimeZone);
  clock.setTime(initialCreationDate);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(billingDay));
  int invoiceItemCount=1;
  DefaultEntitlement baseEntitlementAnnual=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKeyAnnual","Shotgun",ProductCategory.BASE,BillingPeriod.ANNUAL,NextEvent.CREATE,NextEvent.INVOICE);
  DefaultSubscriptionBase subscriptionAnnual=subscriptionDataFromSubscription(baseEntitlementAnnual.getSubscriptionBase());
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(initialCreationDate.toLocalDate(),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(subscriptionAnnual.getId(),clock.getUTCToday(),callContext);
  final List<ExpectedInvoiceItemCheck> expectedInvoices=new ArrayList<ExpectedInvoiceItemCheck>();
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2014,2,1),new LocalDate(2015,2,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  DryRunArguments dryRun=new TestDryRunArguments(DryRunType.UPCOMING_INVOICE);
  Invoice dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),null,dryRun,callContext);
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(30);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,expectedInvoices);
  expectedInvoices.clear();
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,2,1),new LocalDate(2016,2,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),null,dryRun,callContext);
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  expectedInvoices.clear();
  final DateTime secondSubscriptionCreationDate=new DateTime(2014,12,15,0,0,0,0,testTimeZone);
  clock.setTime(secondSubscriptionCreationDate);
  DefaultEntitlement baseEntitlementMonthly=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  DefaultSubscriptionBase subscriptionMonthly=subscriptionDataFromSubscription(baseEntitlementMonthly.getSubscriptionBase());
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(secondSubscriptionCreationDate.toLocalDate(),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(subscriptionMonthly.getId(),clock.getUTCToday(),callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,1,14),new LocalDate(2015,2,14),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),null,dryRun,callContext);
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(30);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,expectedInvoices);
  expectedInvoices.clear();
  final DryRunArguments dryRunWIthSubscription=new TestDryRunArguments(DryRunType.UPCOMING_INVOICE,null,null,null,null,null,null,subscriptionMonthly.getId(),null,null,null);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,2,14),new LocalDate(2015,3,14),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),null,dryRunWIthSubscription,callContext);
  assertEquals(dryRunInvoice.getTargetDate(),new LocalDate(2015,2,14));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  expectedInvoices.clear();
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,2,1),new LocalDate(2016,2,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),null,dryRun,callContext);
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(18);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,expectedInvoices);
  expectedInvoices.clear();
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,2,14),new LocalDate(2015,3,14),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),null,dryRun,callContext);
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
}
