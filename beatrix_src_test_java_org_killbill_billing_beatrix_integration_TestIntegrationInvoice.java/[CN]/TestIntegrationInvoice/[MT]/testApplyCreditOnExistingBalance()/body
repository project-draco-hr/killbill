{
  final int billingDay=14;
  final DateTime initialCreationDate=new DateTime(2015,5,15,0,0,0,0,testTimeZone);
  log.info("Beginning test with BCD of " + billingDay);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(billingDay));
  add_AUTO_PAY_OFF_Tag(account.getId(),ObjectType.ACCOUNT);
  clock.setTime(initialCreationDate);
  createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE);
  clock.addDays(30);
  assertListenerStatus();
  final Collection<Invoice> invoices=invoiceUserApi.getUnpaidInvoicesByAccountId(account.getId(),new LocalDate(clock.getUTCNow(),account.getTimeZone()),callContext);
  assertEquals(invoices.size(),1);
  final UUID unpaidInvoiceId=invoices.iterator().next().getId();
  final Invoice unpaidInvoice=invoiceUserApi.getInvoice(unpaidInvoiceId,callContext);
  assertTrue(unpaidInvoice.getBalance().compareTo(new BigDecimal("249.95")) == 0);
  final BigDecimal accountBalance1=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance1.compareTo(new BigDecimal("249.95")) == 0);
  busHandler.pushExpectedEvents(NextEvent.INVOICE_ADJUSTMENT);
  invoiceUserApi.insertCredit(account.getId(),new BigDecimal("300"),new LocalDate(clock.getUTCNow(),account.getTimeZone()),account.getCurrency(),callContext);
  assertListenerStatus();
  final BigDecimal accountBalance2=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance2.compareTo(new BigDecimal("-50.05")) == 0);
  final Invoice unpaidInvoice2=invoiceUserApi.getInvoice(unpaidInvoiceId,callContext);
  assertTrue(unpaidInvoice2.getBalance().compareTo(BigDecimal.ZERO) == 0);
  remove_AUTO_PAY_OFF_Tag(account.getId(),ObjectType.ACCOUNT);
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(31);
  assertListenerStatus();
  final BigDecimal accountBalance3=invoiceUserApi.getAccountBalance(account.getId(),callContext);
  assertTrue(accountBalance3.compareTo(BigDecimal.ZERO) == 0);
  final List<Payment> payments=paymentApi.getAccountPayments(account.getId(),false,ImmutableList.<PluginProperty>of(),callContext);
  assertEquals(payments.size(),1);
  final Payment payment=payments.get(0);
  assertTrue(payment.getPurchasedAmount().compareTo(new BigDecimal("199.90")) == 0);
}
