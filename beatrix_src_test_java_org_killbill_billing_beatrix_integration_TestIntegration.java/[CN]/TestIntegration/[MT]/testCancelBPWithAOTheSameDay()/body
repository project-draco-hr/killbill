{
  final AccountData accountData=getAccountData(1);
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  clock.setDay(new LocalDate(2012,4,1));
  final List<ExpectedInvoiceItemCheck> expectedInvoices=new ArrayList<ExpectedInvoiceItemCheck>();
  TestDryRunArguments dryRun=new TestDryRunArguments(DryRunType.SUBSCRIPTION_ACTION,"Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,null,null,SubscriptionEventType.START_BILLING,null,null,clock.getUTCNow(),null);
  Invoice dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),clock.getUTCToday(),dryRun,callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  final DefaultEntitlement bpSubscription=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  subscriptionChecker.checkSubscriptionCreated(bpSubscription.getId(),internalCallContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,expectedInvoices);
  expectedInvoices.clear();
  dryRun=new TestDryRunArguments(DryRunType.SUBSCRIPTION_ACTION,"Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,null,null,SubscriptionEventType.START_BILLING,null,bpSubscription.getBundleId(),clock.getUTCNow(),null);
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),clock.getUTCToday(),dryRun,callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),new LocalDate(2012,5,1),InvoiceItemType.RECURRING,new BigDecimal("399.95")));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  addAOEntitlementAndCheckForCompletion(bpSubscription.getBundleId(),"Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  final Invoice invoice=invoiceChecker.checkInvoice(account.getId(),2,callContext,expectedInvoices);
  paymentChecker.checkPayment(account.getId(),1,callContext,new ExpectedPaymentCheck(new LocalDate(2012,4,1),new BigDecimal("399.95"),TransactionStatus.SUCCESS,invoice.getId(),Currency.USD));
  expectedInvoices.clear();
  dryRun=new TestDryRunArguments(DryRunType.SUBSCRIPTION_ACTION,null,null,null,null,null,SubscriptionEventType.STOP_BILLING,bpSubscription.getId(),bpSubscription.getBundleId(),clock.getUTCNow(),null);
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),clock.getUTCToday(),dryRun,callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),new LocalDate(2012,5,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-399.95")));
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),new LocalDate(2012,4,1),InvoiceItemType.CBA_ADJ,new BigDecimal("399.95"),false));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  cancelEntitlementAndCheckForCompletion(bpSubscription,clock.getUTCNow(),NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.INVOICE);
  invoiceChecker.checkInvoice(account.getId(),3,callContext,expectedInvoices);
  checkNoMoreInvoiceToGenerate(account);
}
