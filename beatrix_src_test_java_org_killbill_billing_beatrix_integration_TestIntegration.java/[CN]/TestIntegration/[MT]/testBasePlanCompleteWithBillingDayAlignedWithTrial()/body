{
  final int billingDay=2;
  final DateTime initialCreationDate=new DateTime(2012,2,1,0,3,42,0,testTimeZone);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(billingDay));
  clock.setTime(initialCreationDate);
  int invoiceItemCount=1;
  DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  DefaultSubscriptionBase subscription=subscriptionDataFromSubscription(baseEntitlement.getSubscriptionBase());
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(initialCreationDate.toLocalDate(),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),clock.getUTCToday(),callContext);
  changeEntitlementAndCheckForCompletion(baseEntitlement,"Assault-Rifle",BillingPeriod.MONTHLY,null,NextEvent.CHANGE,NextEvent.INVOICE);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(initialCreationDate.toLocalDate(),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),clock.getUTCToday(),callContext);
  setDateAndCheckForCompletion(new DateTime(2012,2,28,23,59,59,0,testTimeZone));
  setDateAndCheckForCompletion(new DateTime(2012,2,29,23,59,59,0,testTimeZone));
  setDateAndCheckForCompletion(new DateTime(2012,3,1,23,59,59,0,testTimeZone));
  setDateAndCheckForCompletion(new DateTime(2012,3,2,23,59,59,0,testTimeZone),NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,3,2),new LocalDate(2012,4,2),InvoiceItemType.RECURRING,new BigDecimal("599.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,4,2),callContext);
  final TestDryRunArguments dryRun=new TestDryRunArguments(DryRunType.SUBSCRIPTION_ACTION,"Pistol",ProductCategory.BASE,BillingPeriod.MONTHLY,null,null,SubscriptionEventType.CHANGE,subscription.getId(),subscription.getBundleId(),null,null);
  try {
    invoiceUserApi.triggerInvoiceGeneration(account.getId(),clock.getUTCToday(),dryRun,callContext);
    Assert.fail("Call should return no invoices");
  }
 catch (  final InvoiceApiException e) {
    assertEquals(e.getCode(),ErrorCode.INVOICE_NOTHING_TO_DO.getCode());
  }
  baseEntitlement=changeEntitlementAndCheckForCompletion(baseEntitlement,"Pistol",BillingPeriod.MONTHLY,null);
  subscription=subscriptionDataFromSubscription(baseEntitlement.getSubscriptionBase());
  final LocalDate firstRecurringPistolDate=subscription.getChargedThroughDate().toLocalDate();
  final LocalDate secondRecurringPistolDate=firstRecurringPistolDate.plusMonths(1);
  addDaysAndCheckForCompletion(31,NextEvent.CHANGE,NextEvent.NULL_INVOICE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,4,2),new LocalDate(2012,5,2),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),secondRecurringPistolDate,callContext);
  addDaysAndCheckForCompletion(31,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,2),new LocalDate(2012,6,2),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,6,2),callContext);
  addDaysAndCheckForCompletion(31,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,2),new LocalDate(2012,7,2),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,7,2),callContext);
  addDaysAndCheckForCompletion(31,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,2),new LocalDate(2012,8,2),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,8,2),callContext);
  cancelEntitlementAndCheckForCompletion(baseEntitlement,NextEvent.BLOCK);
  addDaysAndCheckForCompletion(31,NextEvent.CANCEL,NextEvent.NULL_INVOICE,NextEvent.NULL_INVOICE);
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,8,2),callContext);
  checkNoMoreInvoiceToGenerate(account);
}
