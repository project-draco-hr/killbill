{
  clock.setDay(new LocalDate(2015,4,1));
  final AccountData accountData=getAccountData(1);
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  final DefaultEntitlement bpSubscription=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Pistol",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  addAOEntitlementAndCheckForCompletion(bpSubscription.getBundleId(),"Refurbish-Maintenance",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  final List<ExpectedInvoiceItemCheck> expectedInvoices=new ArrayList<ExpectedInvoiceItemCheck>();
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,4,1),null,InvoiceItemType.FIXED,new BigDecimal("599.95")));
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,4,1),new LocalDate(2015,5,1),InvoiceItemType.RECURRING,new BigDecimal("199.95")));
  invoiceChecker.checkInvoice(account.getId(),2,callContext,expectedInvoices);
  expectedInvoices.clear();
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,5,1),new LocalDate(2015,6,1),InvoiceItemType.RECURRING,new BigDecimal("199.95")));
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2015,5,1),new LocalDate(2015,6,1),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.NULL_INVOICE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(30);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),3,callContext,expectedInvoices);
  expectedInvoices.clear();
  LocalDate startDate=new LocalDate(2015,6,1);
  for (int i=0; i < 10; i++) {
    final LocalDate endDate=startDate.plusMonths(1);
    expectedInvoices.add(new ExpectedInvoiceItemCheck(startDate,endDate,InvoiceItemType.RECURRING,new BigDecimal("199.95")));
    expectedInvoices.add(new ExpectedInvoiceItemCheck(startDate,endDate,InvoiceItemType.RECURRING,new BigDecimal("29.95")));
    busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
    clock.addMonths(1);
    assertListenerStatus();
    invoiceChecker.checkInvoice(account.getId(),4 + i,callContext,expectedInvoices);
    expectedInvoices.clear();
    startDate=endDate;
  }
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2016,4,1),new LocalDate(2016,5,1),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addMonths(1);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),14,callContext,expectedInvoices);
  expectedInvoices.clear();
}
