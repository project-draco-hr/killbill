{
  final int billingDay=31;
  final DateTime initialCreationDate=new DateTime(2012,2,1,0,3,42,0,testTimeZone);
  log.info("Beginning test with BCD of " + billingDay);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(billingDay));
  clock.setTime(initialCreationDate);
  int invoiceItemCount=1;
  final List<ExpectedInvoiceItemCheck> expectedInvoices=new ArrayList<ExpectedInvoiceItemCheck>();
  DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  DefaultSubscriptionBase subscription=subscriptionDataFromSubscription(baseEntitlement.getSubscriptionBase());
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(initialCreationDate.toLocalDate(),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),clock.getUTCToday(),callContext);
  TestDryRunArguments dryRun=new TestDryRunArguments("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,null,null,SubscriptionEventType.CHANGE,subscription.getId(),subscription.getBundleId(),clock.getUTCNow(),null);
  Invoice dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),clock.getUTCToday(),dryRun,callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(initialCreationDate.toLocalDate(),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  changeEntitlementAndCheckForCompletion(baseEntitlement,"Assault-Rifle",BillingPeriod.MONTHLY,null,NextEvent.CHANGE,NextEvent.INVOICE);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,expectedInvoices);
  invoiceChecker.checkChargedThroughDate(subscription.getId(),clock.getUTCToday(),callContext);
  expectedInvoices.clear();
  setDateAndCheckForCompletion(new DateTime(2012,2,28,23,59,59,0,testTimeZone));
  setDateAndCheckForCompletion(new DateTime(2012,2,29,23,59,59,0,testTimeZone));
  setDateAndCheckForCompletion(new DateTime(2012,3,1,23,59,59,0,testTimeZone));
  DateTime nextDate=clock.getUTCNow().plusDays(1);
  dryRun=new TestDryRunArguments();
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),new LocalDate(nextDate,testTimeZone),dryRun,callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2012,3,2),new LocalDate(2012,3,31),InvoiceItemType.RECURRING,new BigDecimal("561.24")));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  setDateAndCheckForCompletion(nextDate,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,expectedInvoices);
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,3,31),callContext);
  expectedInvoices.clear();
  baseEntitlement=changeEntitlementAndCheckForCompletion(baseEntitlement,"Pistol",BillingPeriod.MONTHLY,null);
  subscription=subscriptionDataFromSubscription(baseEntitlement.getSubscriptionBase());
  final LocalDate firstRecurringPistolDate=subscription.getChargedThroughDate().toLocalDate();
  final LocalDate secondRecurringPistolDate=firstRecurringPistolDate.plusMonths(1);
  nextDate=clock.getUTCNow().plusDays(31);
  dryRun=new TestDryRunArguments();
  dryRunInvoice=invoiceUserApi.triggerInvoiceGeneration(account.getId(),new LocalDate(nextDate,testTimeZone),dryRun,callContext);
  expectedInvoices.add(new ExpectedInvoiceItemCheck(new LocalDate(2012,3,31),new LocalDate(2012,4,30),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkInvoiceNoAudits(dryRunInvoice,callContext,expectedInvoices);
  addDaysAndCheckForCompletion(31,NextEvent.CHANGE,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,expectedInvoices);
  invoiceChecker.checkChargedThroughDate(subscription.getId(),secondRecurringPistolDate,callContext);
  expectedInvoices.clear();
  addDaysAndCheckForCompletion(31,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,4,30),new LocalDate(2012,5,31),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,5,31),callContext);
  addDaysAndCheckForCompletion(31,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,6,30),callContext);
  addDaysAndCheckForCompletion(31,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),invoiceItemCount++,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("29.95")));
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,7,31),callContext);
  baseEntitlement=cancelEntitlementAndCheckForCompletion(baseEntitlement,clock.getUTCNow(),NextEvent.BLOCK);
  addDaysAndCheckForCompletion(31,NextEvent.CANCEL);
  invoiceChecker.checkChargedThroughDate(subscription.getId(),new LocalDate(2012,7,31),callContext);
  checkNoMoreInvoiceToGenerate(account);
  log.info("TEST PASSED !");
}
