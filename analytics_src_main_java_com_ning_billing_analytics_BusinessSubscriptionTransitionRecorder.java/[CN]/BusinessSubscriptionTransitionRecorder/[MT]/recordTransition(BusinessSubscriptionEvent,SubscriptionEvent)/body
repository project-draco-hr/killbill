{
  Currency currency=null;
  String externalKey=null;
  String accountKey=null;
  final SubscriptionBundle bundle=entitlementApi.getBundleFromId(transition.getBundleId());
  if (bundle != null) {
    externalKey=bundle.getKey();
    final Account account=accountApi.getAccountById(bundle.getAccountId());
    if (account != null) {
      accountKey=account.getExternalKey();
      currency=account.getCurrency();
    }
  }
  DateTime previousEffectiveTransitionTime=null;
  if (event.getEventType() != BusinessSubscriptionEvent.EventType.ADD) {
    final List<BusinessSubscriptionTransition> transitions=sqlDao.getTransitions(externalKey);
    if (transitions != null && transitions.size() > 0) {
      final BusinessSubscriptionTransition lastTransition=transitions.get(transitions.size() - 1);
      if (lastTransition != null && lastTransition.getNextSubscription() != null) {
        previousEffectiveTransitionTime=lastTransition.getNextSubscription().getStartDate();
      }
    }
  }
  final BusinessSubscription prevSubscription;
  if (previousEffectiveTransitionTime == null) {
    prevSubscription=null;
  }
 else {
    prevSubscription=new BusinessSubscription(transition.getPreviousPriceList(),transition.getPreviousPlan(),transition.getPreviousPhase(),currency,previousEffectiveTransitionTime,transition.getPreviousState(),transition.getSubscriptionId(),transition.getBundleId(),catalogService.getFullCatalog());
  }
  final BusinessSubscription nextSubscription;
  if (transition.getNextPlan() == null) {
    nextSubscription=null;
  }
 else {
    nextSubscription=new BusinessSubscription(transition.getNextPriceList(),transition.getNextPlan(),transition.getNextPhase(),currency,transition.getEffectiveTransitionTime(),transition.getNextState(),transition.getSubscriptionId(),transition.getBundleId(),catalogService.getFullCatalog());
  }
  catchUpIfNeededAndRecord(transition.getTotalOrdering(),externalKey,accountKey,transition.getRequestedTransitionTime(),event,prevSubscription,nextSubscription);
}
