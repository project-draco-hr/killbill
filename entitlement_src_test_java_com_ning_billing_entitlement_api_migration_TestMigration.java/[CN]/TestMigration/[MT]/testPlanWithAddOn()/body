{
  try {
    DateTime beforeMigration=clock.getUTCNow();
    final DateTime initalBPStart=clock.getUTCNow().minusMonths(3);
    final DateTime initalAddonStart=clock.getUTCNow().minusMonths(1).plusDays(7);
    EntitlementAccountMigration toBeMigrated=createAccountWithRegularBasePlanAndAddons(initalBPStart,initalAddonStart);
    DateTime afterMigration=clock.getUTCNow();
    testListener.pushExpectedEvent(NextEvent.MIGRATE_ENTITLEMENT);
    testListener.pushExpectedEvent(NextEvent.MIGRATE_ENTITLEMENT);
    migrationApi.migrate(toBeMigrated);
    assertTrue(testListener.isCompleted(5000));
    List<SubscriptionBundle> bundles=entitlementApi.getBundlesForAccount(toBeMigrated.getAccountKey());
    assertEquals(bundles.size(),1);
    SubscriptionBundle bundle=bundles.get(0);
    List<Subscription> subscriptions=entitlementApi.getSubscriptionsForBundle(bundle.getId());
    assertEquals(subscriptions.size(),2);
    Subscription baseSubscription=(subscriptions.get(0).getCurrentPlan().getProduct().getCategory() == ProductCategory.BASE) ? subscriptions.get(0) : subscriptions.get(1);
    assertDateWithin(baseSubscription.getStartDate(),beforeMigration,afterMigration);
    assertEquals(baseSubscription.getEndDate(),null);
    assertEquals(baseSubscription.getCurrentPriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(baseSubscription.getCurrentPhase().getPhaseType(),PhaseType.EVERGREEN);
    assertEquals(baseSubscription.getState(),SubscriptionState.ACTIVE);
    assertEquals(baseSubscription.getCurrentPlan().getName(),"shotgun-annual");
    assertEquals(baseSubscription.getChargedThroughDate(),initalBPStart.plusYears(1));
    Subscription aoSubscription=(subscriptions.get(0).getCurrentPlan().getProduct().getCategory() == ProductCategory.ADD_ON) ? subscriptions.get(0) : subscriptions.get(1);
    assertEquals(aoSubscription.getStartDate(),initalAddonStart);
    assertEquals(aoSubscription.getEndDate(),null);
    assertEquals(aoSubscription.getCurrentPriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(aoSubscription.getCurrentPhase().getPhaseType(),PhaseType.DISCOUNT);
    assertEquals(aoSubscription.getState(),SubscriptionState.ACTIVE);
    assertEquals(aoSubscription.getCurrentPlan().getName(),"telescopic-scope-monthly");
    assertEquals(aoSubscription.getChargedThroughDate(),initalAddonStart.plusMonths(1));
  }
 catch (  EntitlementMigrationApiException e) {
    Assert.fail("",e);
  }
}
