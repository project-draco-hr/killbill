{
  return new EntitlementAccountMigration(){
    private final UUID accountId=UUID.randomUUID();
    @Override public EntitlementBundleMigration[] getBundles(){
      final List<EntitlementBundleMigration> bundles=new ArrayList<EntitlementBundleMigration>();
      final EntitlementBundleMigration bundle0=new EntitlementBundleMigration(){
        @Override public EntitlementSubscriptionMigration[] getSubscriptions(){
          final EntitlementSubscriptionMigration[] result=new EntitlementSubscriptionMigration[cases.size()];
          for (int i=0; i < cases.size(); i++) {
            final List<EntitlementSubscriptionMigrationCaseWithCTD> curCases=cases.get(i);
            final EntitlementSubscriptionMigration subscription=new EntitlementSubscriptionMigration(){
              @Override public EntitlementSubscriptionMigrationCaseWithCTD[] getSubscriptionCases(){
                return curCases.toArray(new EntitlementSubscriptionMigrationCaseWithCTD[curCases.size()]);
              }
              @Override public ProductCategory getCategory(){
                return curCases.get(0).getPlanPhaseSpecifier().getProductCategory();
              }
              @Override public DateTime getChargedThroughDate(){
                for (                final EntitlementSubscriptionMigrationCaseWithCTD cur : curCases) {
                  if (cur.getChargedThroughDate() != null) {
                    return cur.getChargedThroughDate();
                  }
                }
                return null;
              }
            }
;
            result[i]=subscription;
          }
          return result;
        }
        @Override public String getBundleKey(){
          return "12345";
        }
      }
;
      bundles.add(bundle0);
      return bundles.toArray(new EntitlementBundleMigration[bundles.size()]);
    }
    @Override public UUID getAccountKey(){
      return accountId;
    }
  }
;
}
