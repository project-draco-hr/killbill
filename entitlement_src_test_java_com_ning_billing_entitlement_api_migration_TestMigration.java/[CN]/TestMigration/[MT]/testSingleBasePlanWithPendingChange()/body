{
  try {
    log.info("Starting testSingleBasePlanWithPendingChange");
    final DateTime beforeMigration=clock.getUTCNow();
    final EntitlementAccountMigration toBeMigrated=createAccountFuturePendingChange();
    final DateTime afterMigration=clock.getUTCNow();
    testListener.pushExpectedEvent(NextEvent.MIGRATE_ENTITLEMENT);
    migrationApi.migrate(toBeMigrated,context);
    assertTrue(testListener.isCompleted(5000));
    final List<SubscriptionBundle> bundles=entitlementApi.getBundlesForAccount(toBeMigrated.getAccountKey());
    assertEquals(bundles.size(),1);
    final SubscriptionBundle bundle=bundles.get(0);
    final List<Subscription> subscriptions=entitlementApi.getSubscriptionsForBundle(bundle.getId());
    assertEquals(subscriptions.size(),1);
    final Subscription subscription=subscriptions.get(0);
    assertDateWithin(subscription.getStartDate(),beforeMigration,afterMigration);
    assertEquals(subscription.getEndDate(),null);
    assertEquals(subscription.getCurrentPriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(subscription.getCurrentPhase().getPhaseType(),PhaseType.EVERGREEN);
    assertEquals(subscription.getState(),SubscriptionState.ACTIVE);
    assertEquals(subscription.getCurrentPlan().getName(),"assault-rifle-monthly");
    testListener.pushExpectedEvent(NextEvent.CHANGE);
    final Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(1));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    assertDateWithin(subscription.getStartDate(),beforeMigration,afterMigration);
    assertEquals(subscription.getEndDate(),null);
    assertEquals(subscription.getCurrentPriceList().getName(),PriceListSet.DEFAULT_PRICELIST_NAME);
    assertEquals(subscription.getCurrentPhase().getPhaseType(),PhaseType.EVERGREEN);
    assertEquals(subscription.getState(),SubscriptionState.ACTIVE);
    assertEquals(subscription.getCurrentPlan().getName(),"shotgun-annual");
    assertListenerStatus();
  }
 catch (  EntitlementMigrationApiException e) {
    Assert.fail("",e);
  }
}
