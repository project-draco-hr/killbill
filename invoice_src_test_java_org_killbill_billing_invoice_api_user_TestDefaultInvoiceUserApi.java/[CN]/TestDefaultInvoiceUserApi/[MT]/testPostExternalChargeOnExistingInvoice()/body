{
  final BigDecimal invoiceBalance=invoiceUserApi.getInvoice(invoiceId,callContext).getBalance();
  Assert.assertEquals(invoiceBalance.compareTo(BigDecimal.ZERO),1);
  final BigDecimal accountBalance=invoiceUserApi.getAccountBalance(accountId,callContext);
  Assert.assertEquals(accountBalance,invoiceBalance);
  final BigDecimal externalChargeAmount=BigDecimal.TEN;
  final InvoiceItem externalCharge=new ExternalChargeInvoiceItem(invoiceId,accountId,null,UUID.randomUUID().toString(),clock.getUTCToday(),externalChargeAmount,accountCurrency);
  final InvoiceItem externalChargeInvoiceItem=invoiceUserApi.insertExternalCharges(accountId,clock.getUTCToday(),ImmutableList.<InvoiceItem>of(externalCharge),callContext).get(0);
  verifyExternalChargeOnExistingInvoice(invoiceBalance,null,externalChargeAmount,externalChargeInvoiceItem);
}
