{
  final InvoiceItem invoiceItem=invoiceUserApi.getInvoice(invoiceId,callContext).getInvoiceItems().get(0);
  Assert.assertEquals(invoiceItem.getAmount().compareTo(BigDecimal.ZERO),1);
  final BigDecimal invoiceBalance=invoiceUserApi.getInvoice(invoiceId,callContext).getBalance();
  Assert.assertEquals(invoiceBalance.compareTo(BigDecimal.ZERO),1);
  final BigDecimal accountBalance=invoiceUserApi.getAccountBalance(accountId,callContext);
  Assert.assertEquals(accountBalance,invoiceBalance);
  final BigDecimal adjAmount=invoiceItem.getAmount().divide(BigDecimal.TEN,BigDecimal.ROUND_HALF_UP);
  final InvoiceItem adjInvoiceItem=invoiceUserApi.insertInvoiceItemAdjustment(accountId,invoiceId,invoiceItem.getId(),clock.getUTCToday(),adjAmount,accountCurrency,callContext);
  Assert.assertEquals(adjInvoiceItem.getInvoiceId(),invoiceId);
  Assert.assertEquals(adjInvoiceItem.getInvoiceItemType(),InvoiceItemType.ITEM_ADJ);
  Assert.assertEquals(adjInvoiceItem.getAccountId(),accountId);
  Assert.assertEquals(adjInvoiceItem.getAmount(),adjAmount.negate());
  Assert.assertEquals(adjInvoiceItem.getCurrency(),accountCurrency);
  Assert.assertEquals(adjInvoiceItem.getLinkedItemId(),invoiceItem.getId());
  final BigDecimal adjustedInvoiceBalance=invoiceUserApi.getInvoice(invoiceId,callContext).getBalance();
  verifyAdjustedInvoiceBalance(invoiceBalance,adjAmount,accountCurrency,adjustedInvoiceBalance);
  final BigDecimal adjustedAccountBalance=invoiceUserApi.getAccountBalance(accountId,callContext);
  Assert.assertEquals(adjustedAccountBalance,adjustedInvoiceBalance);
}
