{
  final LocalDate startDate=clock.getUTCToday();
  final LocalDate endDate=startDate.plusDays(30);
  final LocalDate nextEndDate=startDate.plusMonths(1);
  final BigDecimal amount1=new BigDecimal("12.00");
  final BigDecimal amount2=new BigDecimal("14.85");
  final BigDecimal rate3=new BigDecimal("14.85");
  final BigDecimal amount3=rate3;
  final List<InvoiceItem> existing=new LinkedList<InvoiceItem>();
  final InvoiceItem item1=new FixedPriceInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,amount1,currency);
  existing.add(item1);
  final List<InvoiceItem> proposed=new LinkedList<InvoiceItem>();
  final InvoiceItem other=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,endDate,nextEndDate,amount3,rate3,currency,null);
  proposed.add(item1);
  proposed.add(other);
  gen.removeDuplicatedInvoiceItems(proposed,existing);
  assertEquals(existing.size(),0);
  assertEquals(proposed.size(),1);
  final InvoiceItem leftItem=proposed.get(0);
  assertEquals(leftItem.getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(leftItem.getAmount(),amount2);
}
