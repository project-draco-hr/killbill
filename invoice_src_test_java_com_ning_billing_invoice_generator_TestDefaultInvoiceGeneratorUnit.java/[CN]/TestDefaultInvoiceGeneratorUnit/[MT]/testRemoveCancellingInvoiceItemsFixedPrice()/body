{
  final LocalDate startDate=clock.getUTCToday();
  final LocalDate endDate=startDate.plusDays(30);
  final LocalDate nextEndDate=startDate.plusMonths(1);
  final BigDecimal amount=new BigDecimal("12.00");
  final BigDecimal rate2=new BigDecimal("14.85");
  final BigDecimal amount2=rate2;
  final List<InvoiceItem> items=new LinkedList<InvoiceItem>();
  final InvoiceItem item1=new FixedPriceInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,amount,currency);
  items.add(item1);
  items.add(new RepairAdjInvoiceItem(invoiceId,accountId,startDate,endDate,amount.negate(),currency,item1.getId()));
  items.add(new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,endDate,nextEndDate,amount2,rate2,currency));
  ((DefaultInvoiceGenerator)generator).removeRepairedAndRepairInvoiceItems(items,new LinkedList<InvoiceItem>());
  assertEquals(items.size(),1);
  final InvoiceItem leftItem=items.get(0);
  assertEquals(leftItem.getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(leftItem.getAmount(),amount2);
}
