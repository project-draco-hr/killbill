{
  final LocalDate startDate=clock.getUTCToday();
  final LocalDate endDate=startDate.plusDays(30);
  final LocalDate nextEndDate=startDate.plusMonths(1);
  final BigDecimal rate1=new BigDecimal("12.00");
  final BigDecimal amount1=rate1;
  final BigDecimal rate2=new BigDecimal("14.85");
  final BigDecimal amount2=rate2;
  final UUID firstInvoiceId=UUID.randomUUID();
  final List<InvoiceItem> existing=new LinkedList<InvoiceItem>();
  final InvoiceItem item1=new RecurringInvoiceItem(firstInvoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,amount1,rate1,currency);
  existing.add(item1);
  final List<InvoiceItem> proposed=new LinkedList<InvoiceItem>();
  final InvoiceItem other=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,endDate,nextEndDate,amount2,rate2,currency);
  proposed.add(other);
  ((DefaultInvoiceGenerator)generator).addRepairItems(existing,proposed);
  assertEquals(existing.size(),1);
  assertEquals(proposed.size(),2);
  final InvoiceItem leftItem1=proposed.get(0);
  assertEquals(leftItem1.getInvoiceId(),invoiceId);
  assertEquals(leftItem1.getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(leftItem1.getAmount(),amount2);
  final InvoiceItem newItem2=proposed.get(1);
  assertEquals(newItem2.getInvoiceId(),firstInvoiceId);
  assertEquals(newItem2.getInvoiceItemType(),InvoiceItemType.REPAIR_ADJ);
  assertEquals(newItem2.getAmount(),item1.getAmount().negate());
  assertEquals(newItem2.getLinkedItemId(),item1.getId());
}
