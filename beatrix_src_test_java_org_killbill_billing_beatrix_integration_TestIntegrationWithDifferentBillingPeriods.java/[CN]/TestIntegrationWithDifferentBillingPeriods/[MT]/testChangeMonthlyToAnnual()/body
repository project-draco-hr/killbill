{
  final LocalDate today=new LocalDate(2012,4,1);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  clock.setDeltaFromReality(today.toDateTimeAtCurrentTime(DateTimeZone.UTC).getMillis() - clock.getUTCNow().getMillis());
  final String productName="Shotgun";
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId(),callContext).size(),1);
  assertEquals(bpEntitlement.getSubscriptionBase().getCurrentPlan().getRecurringBillingPeriod(),BillingPeriod.MONTHLY);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addDays(31);
  assertListenerStatus();
  List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  ImmutableList<ExpectedInvoiceItemCheck> toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  clock.addDays(10);
  changeEntitlementAndCheckForCompletion(bpEntitlement,productName,BillingPeriod.ANNUAL,BillingActionPolicy.IMMEDIATE,NextEvent.CHANGE,NextEvent.INVOICE,NextEvent.INVOICE_ADJUSTMENT,NextEvent.PAYMENT);
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),3);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,12),new LocalDate(2012,5,12),InvoiceItemType.CBA_ADJ,new BigDecimal("161.26")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,12),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-161.26")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,12),new LocalDate(2013,5,1),InvoiceItemType.RECURRING,new BigDecimal("2327.62")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,12),new LocalDate(2012,5,12),InvoiceItemType.CBA_ADJ,new BigDecimal("-161.26")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
}
