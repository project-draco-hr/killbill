{
  final LocalDate today=new LocalDate(2012,4,1);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  clock.setDeltaFromReality(today.toDateTimeAtCurrentTime(DateTimeZone.UTC).getMillis() - clock.getUTCNow().getMillis());
  final String productName="Shotgun";
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,BillingPeriod.ANNUAL,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId(),callContext).size(),1);
  assertEquals(bpEntitlement.getSubscriptionBase().getCurrentPlan().getRecurringBillingPeriod(),BillingPeriod.ANNUAL);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addDays(31);
  assertListenerStatus();
  clock.addDays(10);
  busHandler.pushExpectedEvents(NextEvent.PAUSE,NextEvent.BLOCK,NextEvent.INVOICE_ADJUSTMENT);
  entitlementApi.pause(bpEntitlement.getBundleId(),clock.getUTCNow().toLocalDate(),callContext);
  assertListenerStatus();
  List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  ImmutableList<ExpectedInvoiceItemCheck> toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2013,5,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,12),new LocalDate(2012,5,12),InvoiceItemType.CBA_ADJ,new BigDecimal("2327.62")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,12),new LocalDate(2013,5,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-2327.62")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  clock.addDays(23);
  busHandler.pushExpectedEvents(NextEvent.RESUME,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.PAYMENT);
  entitlementApi.resume(bpEntitlement.getBundleId(),clock.getUTCNow().toLocalDate(),callContext);
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),3);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,6,4),new LocalDate(2013,6,1),InvoiceItemType.RECURRING,new BigDecimal("2380.22")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,4),new LocalDate(2012,6,4),InvoiceItemType.CBA_ADJ,new BigDecimal("-2327.62")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addYears(1);
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),4);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2013,6,1),new LocalDate(2014,6,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  invoiceChecker.checkInvoice(invoices.get(3).getId(),callContext,toBeChecked);
}
