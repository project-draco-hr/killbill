{
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(9));
  final DateTime initialDate=new DateTime(2012,4,1,0,15,42,0,testTimeZone);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final SubscriptionBundle bundle=entitlementUserApi.createBundleForAccount(account.getId(),"mycutebundle",callContext);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.INVOICE);
  final PlanPhaseSpecifier bpPlanPhaseSpecifier=new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null);
  final SubscriptionData bpSubscription=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),bpPlanPhaseSpecifier,null,callContext));
  assertNotNull(bpSubscription);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId(),callContext).size(),1);
  assertEquals(entitlementUserApi.getSubscriptionFromId(bpSubscription.getId(),callContext).getCurrentPlan().getBillingPeriod(),BillingPeriod.MONTHLY);
  busHandler.pushExpectedEvent(NextEvent.PHASE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  clock.addDays(32);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  final Account newAccount=createAccountWithNonOsgiPaymentMethod(getAccountData(15));
  busHandler.pushExpectedEvent(NextEvent.CANCEL);
  busHandler.pushExpectedEvent(NextEvent.TRANSFER);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  transferApi.transferBundle(account.getId(),newAccount.getId(),"mycutebundle",clock.getUTCNow(),false,true,callContext);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),3);
  ImmutableList<ExpectedInvoiceItemCheck> toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,5,9),InvoiceItemType.RECURRING,new BigDecimal("66.66")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,5,9),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-66.66")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,3),new LocalDate(2012,5,3),InvoiceItemType.CBA_ADJ,new BigDecimal("66.66")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,5,3),InvoiceItemType.RECURRING,new BigDecimal("16.67")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,3),new LocalDate(2012,5,3),InvoiceItemType.CBA_ADJ,new BigDecimal("-16.67")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  invoices=invoiceUserApi.getInvoicesByAccount(newAccount.getId(),callContext);
  assertEquals(invoices.size(),1);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,3),new LocalDate(2012,5,15),InvoiceItemType.RECURRING,new BigDecimal("99.98")));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
}
