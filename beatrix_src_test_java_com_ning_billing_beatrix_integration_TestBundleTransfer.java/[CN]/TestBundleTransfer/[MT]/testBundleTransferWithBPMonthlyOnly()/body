{
  final Account account=createAccountWithPaymentMethod(getAccountData(0));
  final DateTime initialDate=new DateTime(2012,4,1,0,15,42,0,testTimeZone);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final SubscriptionBundle bundle=entitlementUserApi.createBundleForAccount(account.getId(),"mycutebundle",context);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.INVOICE);
  final PlanPhaseSpecifier bpPlanPhaseSpecifier=new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null);
  final SubscriptionData bpSubscription=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),bpPlanPhaseSpecifier,null,context));
  assertNotNull(bpSubscription);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId()).size(),1);
  assertEquals(entitlementUserApi.getSubscriptionFromId(bpSubscription.getId()).getCurrentPlan().getBillingPeriod(),BillingPeriod.MONTHLY);
  busHandler.pushExpectedEvent(NextEvent.PHASE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  clock.addDays(32);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  final Account newAccount=createAccountWithPaymentMethod(getAccountData(0));
  busHandler.pushExpectedEvent(NextEvent.TRANSFER);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  transferApi.transferBundle(account.getId(),newAccount.getId(),"mycutebundle",clock.getUTCNow(),false,false,context);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  final BillCycleDay oldBCD=accountUserApi.getAccountById(account.getId()).getBillCycleDay();
  final BillCycleDay newBCD=accountUserApi.getAccountById(newAccount.getId()).getBillCycleDay();
  assertEquals(oldBCD.getDayOfMonthUTC(),1);
  assertEquals(newBCD.getDayOfMonthUTC(),3);
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(newAccount.getId());
  assertEquals(invoices.size(),1);
  final List<InvoiceItem> invoiceItems=invoices.get(0).getInvoiceItems();
  assertEquals(invoiceItems.size(),1);
  final InvoiceItem theItem=invoiceItems.get(0);
  assertTrue(theItem.getStartDate().compareTo(new LocalDate(2012,5,3)) == 0);
  assertTrue(theItem.getEndDate().compareTo(new LocalDate(2012,6,3)) == 0);
  assertTrue(theItem.getAmount().compareTo(new BigDecimal("249.95")) == 0);
}
