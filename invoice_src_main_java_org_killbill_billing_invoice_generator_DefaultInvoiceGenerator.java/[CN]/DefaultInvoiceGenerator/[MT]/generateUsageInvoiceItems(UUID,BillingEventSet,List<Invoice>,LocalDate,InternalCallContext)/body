{
  final TenantContext tenantContext=internalCallContextFactory.createTenantContext(context);
  try {
    final List<InvoiceItem> items=Lists.newArrayList();
    final Iterator<BillingEvent> events=eventSet.iterator();
    List<BillingEvent> curEvents=Lists.newArrayList();
    UUID curSubscriptionId=null;
    while (events.hasNext()) {
      final BillingEvent event=events.next();
      final LocalDate eventLocalEffectiveDate=new LocalDate(event.getEffectiveDate(),event.getAccount().getTimeZone());
      if (eventLocalEffectiveDate.isAfter(targetDate)) {
        continue;
      }
      final UUID subscriptionId=event.getSubscription().getId();
      if (curSubscriptionId != null && !curSubscriptionId.equals(subscriptionId)) {
        final SubscriptionConsumableInArrear subscriptionConsumableInArrear=new SubscriptionConsumableInArrear(invoiceId,curEvents,usageApi,config.isInsertZeroUsageItems(),targetDate,tenantContext);
        items.addAll(subscriptionConsumableInArrear.computeMissingUsageInvoiceItems(extractUsageItemsForSubscription(curSubscriptionId,existingInvoices)));
        curEvents=Lists.newArrayList();
      }
      curSubscriptionId=subscriptionId;
      curEvents.add(event);
    }
    if (curSubscriptionId != null) {
      final SubscriptionConsumableInArrear subscriptionConsumableInArrear=new SubscriptionConsumableInArrear(invoiceId,curEvents,usageApi,config.isInsertZeroUsageItems(),targetDate,tenantContext);
      items.addAll(subscriptionConsumableInArrear.computeMissingUsageInvoiceItems(extractUsageItemsForSubscription(curSubscriptionId,existingInvoices)));
    }
    return items;
  }
 catch (  CatalogApiException e) {
    throw new InvoiceApiException(e);
  }
}
