{
  final List<InvoiceItem> items=new ArrayList<InvoiceItem>();
  final BillingPeriod billingPeriod=thisEvent.getBillingPeriod();
  if (billingPeriod != BillingPeriod.NO_BILLING_PERIOD) {
    final LocalDate startDate=new LocalDate(thisEvent.getEffectiveDate(),thisEvent.getTimeZone());
    if (!startDate.isAfter(targetDate)) {
      final LocalDate endDate=(nextEvent == null) ? null : new LocalDate(nextEvent.getEffectiveDate(),nextEvent.getTimeZone());
      final int billCycleDayLocal=thisEvent.getBillCycleDayLocal();
      final RecurringInvoiceItemDataWithNextBillingCycleDate itemDataWithNextBillingCycleDate;
      try {
        itemDataWithNextBillingCycleDate=billingModeGenerator.generateInvoiceItemData(startDate,endDate,targetDate,billCycleDayLocal,billingPeriod,billingMode);
      }
 catch (      InvalidDateSequenceException e) {
        throw new InvoiceApiException(ErrorCode.INVOICE_INVALID_DATE_SEQUENCE,startDate,endDate,targetDate);
      }
      for (      final RecurringInvoiceItemData itemDatum : itemDataWithNextBillingCycleDate.getItemData()) {
        final BigDecimal rate=thisEvent.getRecurringPrice();
        if (rate != null) {
          final BigDecimal amount=KillBillMoney.of(itemDatum.getNumberOfCycles().multiply(rate),currency);
          final RecurringInvoiceItem recurringItem=new RecurringInvoiceItem(invoiceId,accountId,thisEvent.getSubscription().getBundleId(),thisEvent.getSubscription().getId(),thisEvent.getPlan().getName(),thisEvent.getPlanPhase().getName(),itemDatum.getStartDate(),itemDatum.getEndDate(),amount,rate,currency);
          items.add(recurringItem);
        }
      }
      updatePerSubscriptionNextNotificationDate(thisEvent.getSubscription().getId(),itemDataWithNextBillingCycleDate.getNextBillingCycleDate(),items,thisEvent.getBillingMode(),perSubscriptionFutureNotificationDate);
    }
  }
  logStringBuilder.append("\n").append(thisEvent);
  for (  final InvoiceItem item : items) {
    logStringBuilder.append("\n\t").append(item);
  }
  return items;
}
