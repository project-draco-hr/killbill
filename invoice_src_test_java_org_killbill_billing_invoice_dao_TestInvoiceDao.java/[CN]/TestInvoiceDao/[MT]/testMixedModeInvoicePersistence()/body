{
  final Currency currency=Currency.USD;
  final DefaultPrice zeroPrice=new DefaultPrice(BigDecimal.ZERO,Currency.USD);
  final MockInternationalPrice fixedPrice=new MockInternationalPrice(zeroPrice);
  final MockPlanPhase phase1=new MockPlanPhase(null,fixedPrice);
  final BigDecimal cheapAmount=new BigDecimal("24.95");
  final DefaultPrice cheapPrice=new DefaultPrice(cheapAmount,Currency.USD);
  final MockInternationalPrice recurringPrice=new MockInternationalPrice(cheapPrice);
  final MockPlanPhase phase2=new MockPlanPhase(recurringPrice,null);
  final MockPlan plan=new MockPlan();
  final SubscriptionBase subscription=getZombieSubscription();
  final DateTime effectiveDate1=invoiceUtil.buildDate(2011,1,1).toDateTimeAtStartOfDay();
  final BillingEvent event1=invoiceUtil.createMockBillingEvent(null,subscription,effectiveDate1,plan,phase1,fixedPrice.getPrice(currency),null,currency,BillingPeriod.MONTHLY,1,BillingMode.IN_ADVANCE,"testEvent1",1L,SubscriptionBaseTransitionType.CREATE);
  final BillingEventSet events=new MockBillingEventSet(internalCallContext);
  events.add(event1);
  final DateTime effectiveDate2=effectiveDate1.plusDays(30);
  final BillingEvent event2=invoiceUtil.createMockBillingEvent(null,subscription,effectiveDate2,plan,phase2,null,recurringPrice.getPrice(currency),currency,BillingPeriod.MONTHLY,31,BillingMode.IN_ADVANCE,"testEvent2",2L,SubscriptionBaseTransitionType.CHANGE);
  events.add(event2);
  final InvoiceWithMetadata invoiceWithMetadata=generator.generateInvoice(account,events,null,new LocalDate(effectiveDate2),Currency.USD,context);
  final Invoice invoice=invoiceWithMetadata.getInvoice();
  assertNotNull(invoice);
  assertEquals(invoice.getNumberOfItems(),2);
  assertEquals(invoice.getBalance().compareTo(cheapAmount),0);
  invoiceUtil.createInvoice(invoice,true,context);
  final InvoiceModelDao savedInvoice=invoiceDao.getById(invoice.getId(),context);
  assertNotNull(savedInvoice);
  assertEquals(savedInvoice.getInvoiceItems().size(),2);
  assertEquals(InvoiceModelDaoHelper.getBalance(savedInvoice).compareTo(cheapAmount),0);
}
