{
  final UUID accountId=account.getId();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate targetDate1=new LocalDate(2011,10,6);
  final Invoice invoice=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate1,Currency.USD);
  invoiceUtil.createInvoice(invoice,true,context);
  final LocalDate startDate=new LocalDate(2011,3,1);
  final LocalDate endDate=startDate.plusMonths(1);
  final BigDecimal amount=new BigDecimal("20.0");
  final RecurringInvoiceItem item2=new RecurringInvoiceItem(invoice.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase B",startDate,endDate,amount,amount,Currency.USD);
  invoiceUtil.createInvoiceItem(item2,context);
  BigDecimal balancePriorRefund=invoiceDao.getAccountBalance(accountId,context);
  assertEquals(balancePriorRefund.compareTo(new BigDecimal("20.00")),0);
  final UUID paymentId=UUID.randomUUID();
  final BigDecimal payment1=amount;
  final InvoicePayment payment=new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,paymentId,invoice.getId(),new DateTime(),payment1,Currency.USD,Currency.USD,null,true);
  invoiceUtil.createPayment(payment,context);
  balancePriorRefund=invoiceDao.getAccountBalance(accountId,context);
  assertEquals(balancePriorRefund.compareTo(new BigDecimal("0.00")),0);
  final InvoiceItem repairItem=new RepairAdjInvoiceItem(invoice.getId(),accountId,startDate,endDate,amount.negate(),Currency.USD,item2.getId());
  invoiceUtil.createInvoiceItem(repairItem,context);
  final InvoiceItem cbaItem=new CreditBalanceAdjInvoiceItem(invoice.getId(),accountId,startDate,amount,Currency.USD);
  invoiceUtil.createInvoiceItem(cbaItem,context);
  final Map<UUID,BigDecimal> itemAdjustment=new HashMap<UUID,BigDecimal>();
  itemAdjustment.put(item2.getId(),null);
  invoiceDao.createRefund(paymentId,refundAmount,true,itemAdjustment,UUID.randomUUID().toString(),context);
  balancePriorRefund=invoiceDao.getAccountBalance(accountId,context);
  final boolean partialRefund=refundAmount.compareTo(amount) < 0;
  final BigDecimal cba=invoiceDao.getAccountCBA(accountId,context);
  final InvoiceModelDao savedInvoice=invoiceDao.getById(invoice.getId(),context);
  final BigDecimal expectedCba=balancePriorRefund.compareTo(BigDecimal.ZERO) < 0 ? balancePriorRefund.negate() : BigDecimal.ZERO;
  assertEquals(cba.compareTo(expectedCba),0);
  final BigDecimal balanceAfterRefund=invoiceDao.getAccountBalance(accountId,context);
  final BigDecimal cbaAfterRefund=invoiceDao.getAccountCBA(accountId,context);
  if (partialRefund) {
    assertEquals(balancePriorRefund.compareTo(new BigDecimal("-13.0")),0);
    assertEquals(savedInvoice.getInvoiceItems().size(),4);
    assertEquals(balanceAfterRefund.compareTo(new BigDecimal("-13.0")),0);
    assertEquals(cbaAfterRefund.compareTo(expectedCba),0);
  }
 else {
    assertEquals(balancePriorRefund.compareTo(new BigDecimal("0.0")),0);
    assertEquals(savedInvoice.getInvoiceItems().size(),4);
    assertEquals(balanceAfterRefund.compareTo(BigDecimal.ZERO),0);
    assertEquals(cbaAfterRefund.compareTo(expectedCba),0);
  }
}
