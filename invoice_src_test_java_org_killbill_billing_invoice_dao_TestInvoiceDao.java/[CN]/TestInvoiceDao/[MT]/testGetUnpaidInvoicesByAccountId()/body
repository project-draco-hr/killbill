{
  final UUID accountId=account.getId();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate targetDate1=new LocalDate(2011,10,6);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate1,Currency.USD);
  invoiceUtil.createInvoice(invoice1,true,context);
  final LocalDate startDate=new LocalDate(2011,3,1);
  final LocalDate endDate=startDate.plusMonths(1);
  final BigDecimal rate1=new BigDecimal("17.0");
  final BigDecimal rate2=new BigDecimal("42.0");
  final RecurringInvoiceItem item1=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase A",startDate,endDate,rate1,rate1,Currency.USD);
  invoiceUtil.createInvoiceItem(item1,context);
  final RecurringInvoiceItem item2=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase B",startDate,endDate,rate2,rate2,Currency.USD);
  invoiceUtil.createInvoiceItem(item2,context);
  LocalDate upToDate;
  Collection<InvoiceModelDao> invoices;
  upToDate=new LocalDate(2011,1,1);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate,context);
  assertEquals(invoices.size(),0);
  upToDate=new LocalDate(2012,1,1);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate,context);
  assertEquals(invoices.size(),1);
  final LocalDate targetDate2=new LocalDate(2011,7,1);
  final Invoice invoice2=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate2,Currency.USD);
  invoiceUtil.createInvoice(invoice2,true,context);
  final LocalDate startDate2=new LocalDate(2011,6,1);
  final LocalDate endDate2=startDate2.plusMonths(3);
  final BigDecimal rate3=new BigDecimal("21.0");
  final RecurringInvoiceItem item3=new RecurringInvoiceItem(invoice2.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase C",startDate2,endDate2,rate3,rate3,Currency.USD);
  invoiceUtil.createInvoiceItem(item3,context);
  upToDate=new LocalDate(2011,1,1);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate,context);
  assertEquals(invoices.size(),0);
  upToDate=new LocalDate(2012,1,1);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate,context);
  assertEquals(invoices.size(),2);
}
