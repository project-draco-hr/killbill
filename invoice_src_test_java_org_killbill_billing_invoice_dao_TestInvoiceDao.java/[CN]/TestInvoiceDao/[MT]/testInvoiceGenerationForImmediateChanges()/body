{
  final UUID accountId=account.getId();
  final List<Invoice> invoiceList=new ArrayList<Invoice>();
  final LocalDate targetDate=new LocalDate(2011,2,16);
  final Currency currency=Currency.USD;
  final DefaultPrice price1=new DefaultPrice(TEN,Currency.USD);
  final MockInternationalPrice recurringPrice=new MockInternationalPrice(price1);
  final MockPlanPhase phase1=new MockPlanPhase(recurringPrice,null,BillingPeriod.MONTHLY,PhaseType.TRIAL);
  final MockPlan plan1=new MockPlan(phase1);
  final SubscriptionBase subscription=getZombieSubscription();
  final DateTime effectiveDate1=new DateTime(2011,2,1,0,0,0);
  final BillingEvent event1=invoiceUtil.createMockBillingEvent(null,subscription,effectiveDate1,plan1,phase1,null,recurringPrice.getPrice(currency),currency,BillingPeriod.MONTHLY,1,BillingMode.IN_ADVANCE,"testEvent1",1L,SubscriptionBaseTransitionType.CREATE);
  final BillingEventSet events=new MockBillingEventSet();
  events.add(event1);
  final Invoice invoice1=generator.generateInvoice(account,events,invoiceList,targetDate,Currency.USD,context);
  assertEquals(invoice1.getBalance(),KillBillMoney.of(TEN,invoice1.getCurrency()));
  invoiceList.add(invoice1);
  final DefaultPrice price2=new DefaultPrice(TWENTY,Currency.USD);
  final MockInternationalPrice recurringPrice2=new MockInternationalPrice(price2);
  final MockPlanPhase phase2=new MockPlanPhase(recurringPrice,null,BillingPeriod.MONTHLY,PhaseType.TRIAL);
  final MockPlan plan2=new MockPlan(phase2);
  final DateTime effectiveDate2=new DateTime(2011,2,15,0,0,0);
  final BillingEvent event2=invoiceUtil.createMockBillingEvent(null,subscription,effectiveDate2,plan2,phase2,null,recurringPrice2.getPrice(currency),currency,BillingPeriod.MONTHLY,1,BillingMode.IN_ADVANCE,"testEvent2",2L,SubscriptionBaseTransitionType.CREATE);
  events.add(event2);
  final Invoice invoice2=generator.generateInvoice(account,events,invoiceList,targetDate,Currency.USD,context);
  assertEquals(invoice2.getBalance(),KillBillMoney.of(FIVE,invoice2.getCurrency()));
  invoiceList.add(invoice2);
  invoiceUtil.createInvoice(invoice1,true,context);
  invoiceUtil.createInvoice(invoice2,true,context);
  final InvoiceModelDao savedInvoice1=invoiceDao.getById(invoice1.getId(),context);
  assertEquals(InvoiceModelDaoHelper.getBalance(savedInvoice1),KillBillMoney.of(TEN,savedInvoice1.getCurrency()));
  final InvoiceModelDao savedInvoice2=invoiceDao.getById(invoice2.getId(),context);
  assertEquals(InvoiceModelDaoHelper.getBalance(savedInvoice2),KillBillMoney.of(FIVE,savedInvoice2.getCurrency()));
}
