{
  final UUID accountId=account.getId();
  final UUID bundleId=UUID.randomUUID();
  createCredit(accountId,clock.getUTCToday(),new BigDecimal("20.0"));
  final String description=UUID.randomUUID().toString();
  final InvoiceModelDao invoiceForExternalCharge=new InvoiceModelDao(accountId,clock.getUTCToday(),clock.getUTCToday(),Currency.USD);
  final InvoiceItemModelDao externalCharge=new InvoiceItemModelDao(new ExternalChargeInvoiceItem(invoiceForExternalCharge.getId(),accountId,bundleId,description,clock.getUTCToday(),new BigDecimal("15.0"),Currency.USD));
  invoiceForExternalCharge.addInvoiceItem(externalCharge);
  final InvoiceItemModelDao charge=invoiceDao.createInvoices(ImmutableList.<InvoiceModelDao>of(invoiceForExternalCharge),context).get(0);
  final InvoiceModelDao newInvoice=invoiceDao.getById(charge.getInvoiceId(),context);
  final List<InvoiceItemModelDao> items=newInvoice.getInvoiceItems();
  assertEquals(items.size(),2);
  for (  final InvoiceItemModelDao cur : items) {
    if (cur.getId().equals(charge.getId())) {
      assertEquals(cur.getType(),InvoiceItemType.EXTERNAL_CHARGE);
      assertEquals(cur.getDescription(),description);
    }
 else {
      assertEquals(cur.getType(),InvoiceItemType.CBA_ADJ);
      assertTrue(cur.getAmount().compareTo(new BigDecimal("-15.00")) == 0);
    }
  }
}
