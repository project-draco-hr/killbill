{
  final UUID accountId=account.getId();
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),clock.getUTCToday(),Currency.USD);
  final RepairAdjInvoiceItem repairAdjInvoiceItem=new RepairAdjInvoiceItem(invoice1.getId(),invoice1.getAccountId(),invoice1.getInvoiceDate(),invoice1.getInvoiceDate(),BigDecimal.TEN.negate(),invoice1.getCurrency(),UUID.randomUUID());
  final CreditBalanceAdjInvoiceItem creditBalanceAdjInvoiceItem1=new CreditBalanceAdjInvoiceItem(invoice1.getId(),invoice1.getAccountId(),invoice1.getInvoiceDate(),repairAdjInvoiceItem.getAmount().negate(),invoice1.getCurrency());
  invoiceUtil.createInvoice(invoice1,true,context);
  invoiceUtil.createInvoiceItem(repairAdjInvoiceItem,context);
  invoiceUtil.createInvoiceItem(creditBalanceAdjInvoiceItem1,context);
  Assert.assertEquals(invoiceDao.getAccountCBA(accountId,context).doubleValue(),10.00);
  invoiceUtil.verifyInvoice(invoice1.getId(),0.00,10.00,context);
  try {
    invoiceDao.deleteCBA(accountId,invoice1.getId(),creditBalanceAdjInvoiceItem1.getId(),context);
    Assert.fail();
  }
 catch (  InvoiceApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.INVOICE_WOULD_BE_NEGATIVE.getCode());
  }
  Assert.assertEquals(invoiceDao.getAccountCBA(accountId,context).doubleValue(),10.00);
  invoiceUtil.verifyInvoice(invoice1.getId(),0.00,10.00,context);
}
