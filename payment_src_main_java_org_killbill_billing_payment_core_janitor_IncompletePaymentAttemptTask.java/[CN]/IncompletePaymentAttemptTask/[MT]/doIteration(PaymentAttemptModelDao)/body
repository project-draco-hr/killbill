{
  final InternalTenantContext tenantContext=internalCallContextFactory.createInternalTenantContext(attempt.getTenantRecordId(),attempt.getAccountRecordId());
  final CallContext callContext=createCallContext("AttemptCompletionJanitorTask",tenantContext);
  final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(attempt.getAccountId(),callContext);
  final List<PaymentTransactionModelDao> transactions=paymentDao.getPaymentTransactionsByExternalKey(attempt.getTransactionExternalKey(),tenantContext);
  final List<PaymentTransactionModelDao> filteredTransactions=ImmutableList.copyOf(Iterables.filter(transactions,new Predicate<PaymentTransactionModelDao>(){
    @Override public boolean apply(    final PaymentTransactionModelDao input){
      return input.getAttemptId().equals(attempt.getId());
    }
  }
));
  if (filteredTransactions.size() > 1) {
    log.warn("Found {} transactions for paymentAttempt {}",filteredTransactions.size(),attempt.getId());
  }
  final PaymentTransactionModelDao transaction=filteredTransactions.isEmpty() ? null : filteredTransactions.get(0);
  if (transaction == null || transaction.getTransactionStatus() == TransactionStatus.PLUGIN_FAILURE || transaction.getTransactionStatus() == TransactionStatus.PAYMENT_FAILURE) {
    log.info("Moving attemptId='{}' to ABORTED",attempt.getId());
    paymentDao.updatePaymentAttempt(attempt.getId(),attempt.getTransactionId(),"ABORTED",internalCallContext);
    return;
  }
  if (transaction.getTransactionStatus() == TransactionStatus.UNKNOWN) {
    return;
  }
  if (transaction.getTransactionStatus() == TransactionStatus.SUCCESS || transaction.getTransactionStatus() == TransactionStatus.PENDING) {
    try {
      log.info("Moving attemptId='{}' to SUCCESS",attempt.getId());
      final Account account=accountInternalApi.getAccountById(attempt.getAccountId(),tenantContext);
      final boolean isApiPayment=true;
      final PaymentStateControlContext paymentStateContext=new PaymentStateControlContext(attempt.toPaymentControlPluginNames(),isApiPayment,transaction.getPaymentId(),attempt.getPaymentExternalKey(),transaction.getTransactionExternalKey(),transaction.getTransactionType(),account,attempt.getPaymentMethodId(),transaction.getAmount(),transaction.getCurrency(),PluginPropertySerializer.deserialize(attempt.getPluginProperties()),internalCallContext,callContext);
      paymentStateContext.setAttemptId(attempt.getId());
      paymentStateContext.setPaymentTransactionModelDao(transaction);
      pluginControlledPaymentAutomatonRunner.completeRun(paymentStateContext);
    }
 catch (    final AccountApiException e) {
      log.warn("Error completing paymentAttemptId='{}'",attempt.getId(),e);
    }
catch (    final PluginPropertySerializerException e) {
      log.warn("Error completing paymentAttemptId='{}'",attempt.getId(),e);
    }
catch (    final PaymentApiException e) {
      log.warn("Error completing paymentAttemptId='{}'",attempt.getId(),e);
    }
  }
}
