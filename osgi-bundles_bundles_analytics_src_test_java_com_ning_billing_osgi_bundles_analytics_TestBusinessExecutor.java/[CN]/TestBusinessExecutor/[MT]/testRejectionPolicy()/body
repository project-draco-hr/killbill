{
  final Executor executor=BusinessExecutor.newCachedThreadPool();
  final CompletionService<Integer> completionService=new ExecutorCompletionService<Integer>(executor);
  final int totalTasksSize=BusinessExecutor.NB_THREADS * 50;
  final AtomicInteger taskCounter=new AtomicInteger(totalTasksSize);
  for (int i=0; i < totalTasksSize; i++) {
    completionService.submit(new Callable<Integer>(){
      @Override public Integer call() throws Exception {
        Thread.sleep(100);
        taskCounter.getAndDecrement();
        return 1;
      }
    }
);
  }
  int results=0;
  for (int i=0; i < totalTasksSize; i++) {
    try {
      results+=completionService.take().get();
    }
 catch (    InterruptedException e) {
      Assert.fail();
    }
catch (    ExecutionException e) {
      Assert.fail();
    }
  }
  Assert.assertEquals(taskCounter.get(),0);
  Assert.assertEquals(results,totalTasksSize);
}
