{
  final String accountKey=UUID.randomUUID().toString();
  final UUID bundleId=UUID.randomUUID();
  final String externalKey=UUID.randomUUID().toString();
  final String name=UUID.randomUUID().toString().substring(0,30);
  final String value=UUID.randomUUID().toString();
  Assert.assertEquals(subscriptionTransitionFieldSqlDao.getFieldsForBusinessSubscriptionTransitionByKey(externalKey,internalCallContext).size(),0);
  Assert.assertEquals(subscriptionTransitionFieldSqlDao.removeField(bundleId.toString(),name,internalCallContext),0);
  Assert.assertEquals(subscriptionTransitionFieldSqlDao.addField(accountKey,bundleId.toString(),externalKey,name,value,internalCallContext),1);
  final List<BusinessSubscriptionTransitionFieldModelDao> fieldsForBusinessSubscriptionTransition=subscriptionTransitionFieldSqlDao.getFieldsForBusinessSubscriptionTransitionByKey(externalKey,internalCallContext);
  Assert.assertEquals(fieldsForBusinessSubscriptionTransition.size(),1);
  final BusinessSubscriptionTransitionFieldModelDao subscriptionTransitionField=fieldsForBusinessSubscriptionTransition.get(0);
  Assert.assertEquals(subscriptionTransitionField.getBundleId(),bundleId);
  Assert.assertEquals(subscriptionTransitionField.getExternalKey(),externalKey);
  Assert.assertEquals(subscriptionTransitionField.getName(),name);
  Assert.assertEquals(subscriptionTransitionField.getValue(),value);
  Assert.assertEquals(subscriptionTransitionFieldSqlDao.removeField(bundleId.toString(),name,internalCallContext),1);
  Assert.assertEquals(subscriptionTransitionFieldSqlDao.getFieldsForBusinessSubscriptionTransitionByKey(externalKey,internalCallContext).size(),0);
}
