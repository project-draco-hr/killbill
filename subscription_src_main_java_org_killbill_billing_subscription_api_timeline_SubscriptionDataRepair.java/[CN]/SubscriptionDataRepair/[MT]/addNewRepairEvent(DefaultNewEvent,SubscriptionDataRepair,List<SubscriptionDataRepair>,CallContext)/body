{
  try {
    final InternalTenantContext internalTenantContext=internalCallContextFactory.createInternalTenantContext(baseSubscription.getId(),ObjectType.SUBSCRIPTION,context);
    final PlanPhaseSpecifier spec=input.getPlanPhaseSpecifier();
switch (input.getSubscriptionTransitionType()) {
case CREATE:
case RE_CREATE:
      recreate(spec,ImmutableList.<PlanPhasePriceOverride>of(),input.getRequestedDate(),context);
    checkAddonRights(baseSubscription,internalTenantContext);
  break;
case CHANGE:
changePlanWithDate(spec.getProductName(),spec.getBillingPeriod(),spec.getPriceListName(),ImmutableList.<PlanPhasePriceOverride>of(),input.getRequestedDate(),context);
checkAddonRights(baseSubscription,internalTenantContext);
trickleDownBPEffectForAddon(addonSubscriptions,getLastUserEventEffectiveDate(),context);
break;
case CANCEL:
cancelWithDate(input.getRequestedDate(),context);
trickleDownBPEffectForAddon(addonSubscriptions,getLastUserEventEffectiveDate(),context);
break;
case PHASE:
break;
default :
throw new SubscriptionBaseRepairException(ErrorCode.SUB_REPAIR_UNKNOWN_TYPE,input.getSubscriptionTransitionType(),id);
}
}
 catch (SubscriptionBaseApiException e) {
throw new SubscriptionBaseRepairException(e);
}
catch (CatalogApiException e) {
throw new SubscriptionBaseRepairException(e);
}
}
