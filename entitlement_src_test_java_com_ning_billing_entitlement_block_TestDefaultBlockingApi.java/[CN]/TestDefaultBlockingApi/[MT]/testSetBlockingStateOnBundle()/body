{
  final UUID bundleId=UUID.randomUUID();
  getDBI().withHandle(new HandleCallback<Void>(){
    @Override public Void withHandle(    final Handle handle) throws Exception {
      handle.execute("insert into bundles (id, external_key, account_id, created_by, created_date, updated_by, updated_date, account_record_id, tenant_record_id) " + "values (?, ?, ?, ?, ?, ?, ?, ?, ?)",bundleId.toString(),"foo",UUID.randomUUID().toString(),"zozo",internalCallContext.getCreatedDate().toDate(),"zozo",internalCallContext.getCreatedDate().toDate(),internalCallContext.getAccountRecordId(),internalCallContext.getTenantRecordId());
      return null;
    }
  }
);
  final BlockingState blockingState=new DefaultBlockingState(UUID.randomUUID(),bundleId,BlockingStateType.ACCOUNT,"BLOCKED","myService",true,true,true,internalCallContext.getCreatedDate(),null);
  blockingInternalApi.setBlockingState(blockingState,internalCallContext);
  final BlockingState resultState=blockingInternalApi.getBlockingStateForService(bundleId,"myService",internalCallContext);
  Assert.assertEquals(resultState.getStateName(),blockingState.getStateName());
  getDBI().withHandle(new HandleCallback<Void>(){
    @Override public Void withHandle(    final Handle handle) throws Exception {
      final List<Map<String,Object>> values=handle.select("select account_record_id from blocking_states where blockable_id = ?",bundleId.toString());
      Assert.assertEquals(values.size(),1);
      Assert.assertEquals(values.get(0).keySet().size(),1);
      Assert.assertEquals(values.get(0).get("account_record_id"),internalCallContext.getAccountRecordId());
      return null;
    }
  }
);
}
