{
  final List<String> pluginNameList=paymentStateControlContext.getPaymentControlPluginNames();
  final String pluginNames=JOINER.join(pluginNameList);
  return dispatchWithAccountLockAndTimeout(pluginNames,new DispatcherCallback<PluginDispatcherReturnType<OperationResult>,OperationException>(){
    @Override public PluginDispatcherReturnType<OperationResult> doOperation() throws OperationException {
      final PaymentControlContext paymentControlContext=new DefaultPaymentControlContext(paymentStateContext.getAccount(),paymentStateContext.getPaymentMethodId(),paymentStateControlContext.getAttemptId(),paymentStateContext.getPaymentId(),paymentStateContext.getPaymentExternalKey(),paymentStateContext.getPaymentTransactionExternalKey(),PaymentApiType.PAYMENT_TRANSACTION,paymentStateContext.getTransactionType(),null,paymentStateContext.getAmount(),paymentStateContext.getCurrency(),paymentStateControlContext.isApiPayment(),paymentStateContext.getCallContext());
      try {
        executePluginPriorCalls(paymentStateControlContext.getPaymentControlPluginNames(),paymentControlContext);
      }
 catch (      final PaymentControlApiAbortException e) {
        final PaymentApiException paymentAbortedException=new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_API_ABORTED,e.getPluginName());
        throw new OperationException(paymentAbortedException,OperationResult.EXCEPTION);
      }
catch (      final PaymentControlApiException e) {
        throw new OperationException(e,OperationResult.EXCEPTION);
      }
      final boolean success;
      try {
        final Payment result=doCallSpecificOperationCallback();
        ((PaymentStateControlContext)paymentStateContext).setResult(result);
        final PaymentTransaction transaction=((PaymentStateControlContext)paymentStateContext).getCurrentTransaction();
        success=transaction.getTransactionStatus() == TransactionStatus.SUCCESS || transaction.getTransactionStatus() == TransactionStatus.PENDING;
        final PaymentControlContext updatedPaymentControlContext=new DefaultPaymentControlContext(paymentStateContext.getAccount(),paymentStateContext.getPaymentMethodId(),paymentStateControlContext.getAttemptId(),result.getId(),result.getExternalKey(),transaction.getId(),paymentStateContext.getPaymentTransactionExternalKey(),PaymentApiType.PAYMENT_TRANSACTION,paymentStateContext.getTransactionType(),null,transaction.getAmount(),transaction.getCurrency(),transaction.getProcessedAmount(),transaction.getProcessedCurrency(),paymentStateControlContext.isApiPayment(),paymentStateContext.getCallContext());
        if (success) {
          executePluginOnSuccessCalls(paymentStateControlContext.getPaymentControlPluginNames(),updatedPaymentControlContext);
          return PluginDispatcher.createPluginDispatcherReturnType(OperationResult.SUCCESS);
        }
 else {
          throw new OperationException(null,executePluginOnFailureCallsAndSetRetryDate(updatedPaymentControlContext));
        }
      }
 catch (      final PaymentApiException e) {
        throw new OperationException(e,executePluginOnFailureCallsAndSetRetryDate(paymentControlContext));
      }
catch (      final RuntimeException e) {
        throw new OperationException(e,executePluginOnFailureCallsAndSetRetryDate(paymentControlContext));
      }
    }
  }
);
}
