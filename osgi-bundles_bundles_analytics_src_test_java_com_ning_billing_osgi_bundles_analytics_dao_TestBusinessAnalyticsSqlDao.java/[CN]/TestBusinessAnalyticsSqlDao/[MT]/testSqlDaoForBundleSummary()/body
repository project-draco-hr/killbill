{
  final DateTime startDate=new DateTime(2012,6,5,4,3,12,DateTimeZone.UTC);
  final DateTime requestedTimestamp=new DateTime(2012,7,21,10,10,10,DateTimeZone.UTC);
  final BusinessSubscriptionEvent event=BusinessSubscriptionEvent.valueOf("ADD_BASE");
  final BusinessSubscription previousSubscription=null;
  final BusinessSubscription nextSubscription=new BusinessSubscription(null,null,null,Currency.GBP,startDate,SubscriptionState.ACTIVE);
  final BusinessSubscriptionTransitionModelDao businessSubscriptionTransitionModelDao=new BusinessSubscriptionTransitionModelDao(account,accountRecordId,bundle,subscriptionTransition,subscriptionEventRecordId,requestedTimestamp,event,previousSubscription,nextSubscription,auditLog,tenantRecordId,reportGroup);
  final BusinessBundleSummaryModelDao bundleSummaryModelDao=new BusinessBundleSummaryModelDao(account,accountRecordId,bundle,bundleRecordId,3,businessSubscriptionTransitionModelDao,auditLog,tenantRecordId,reportGroup);
  Assert.assertEquals(analyticsSqlDao.getBundleSummariesByAccountRecordId(accountRecordId,tenantRecordId,callContext).size(),0);
  analyticsSqlDao.create(bundleSummaryModelDao.getTableName(),bundleSummaryModelDao,callContext);
  Assert.assertEquals(analyticsSqlDao.getBundleSummariesByAccountRecordId(accountRecordId,tenantRecordId,callContext).size(),1);
  Assert.assertEquals(analyticsSqlDao.getBundleSummariesByAccountRecordId(accountRecordId,tenantRecordId,callContext).get(0),bundleSummaryModelDao);
  analyticsSqlDao.deleteByAccountRecordId(bundleSummaryModelDao.getTableName(),accountRecordId,tenantRecordId,callContext);
  Assert.assertEquals(analyticsSqlDao.getBundleSummariesByAccountRecordId(accountRecordId,tenantRecordId,callContext).size(),0);
}
