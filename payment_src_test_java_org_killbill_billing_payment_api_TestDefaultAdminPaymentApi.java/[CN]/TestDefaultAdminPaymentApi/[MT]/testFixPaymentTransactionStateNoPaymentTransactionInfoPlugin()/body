{
  final Payment payment=paymentApi.createAuthorization(account,account.getPaymentMethodId(),null,BigDecimal.TEN,Currency.EUR,UUID.randomUUID().toString(),UUID.randomUUID().toString(),ImmutableList.<PluginProperty>of(),callContext);
  final PaymentModelDao paymentModelDao=paymentDao.getPayment(payment.getId(),internalCallContext);
  final PaymentTransactionModelDao paymentTransactionModelDao=paymentDao.getPaymentTransaction(payment.getTransactions().get(0).getId(),internalCallContext);
  Assert.assertEquals(paymentModelDao.getStateName(),"AUTH_SUCCESS");
  Assert.assertEquals(paymentModelDao.getLastSuccessStateName(),"AUTH_SUCCESS");
  Assert.assertEquals(paymentTransactionModelDao.getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(paymentTransactionModelDao.getProcessedAmount().compareTo(BigDecimal.TEN),0);
  Assert.assertEquals(paymentTransactionModelDao.getProcessedCurrency(),Currency.EUR);
  Assert.assertEquals(paymentTransactionModelDao.getGatewayErrorCode(),"");
  Assert.assertEquals(paymentTransactionModelDao.getGatewayErrorMsg(),"");
  try {
    adminPaymentApi.fixPaymentTransactionState(payment,Mockito.mock(DefaultPaymentTransaction.class),null,null,"AUTH_ERRORED",ImmutableList.<PluginProperty>of(),callContext);
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_PARAMETER.getCode());
  }
}
