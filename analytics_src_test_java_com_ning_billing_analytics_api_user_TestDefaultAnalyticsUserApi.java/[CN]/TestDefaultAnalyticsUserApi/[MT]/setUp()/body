{
  final IDBI dbi=helper.getDBI();
  accountSqlDao=dbi.onDemand(BusinessAccountSqlDao.class);
  subscriptionTransitionSqlDao=dbi.onDemand(BusinessSubscriptionTransitionSqlDao.class);
  invoiceSqlDao=dbi.onDemand(BusinessInvoiceSqlDao.class);
  invoiceItemSqlDao=dbi.onDemand(BusinessInvoiceItemSqlDao.class);
  accountTagSqlDao=dbi.onDemand(BusinessAccountTagSqlDao.class);
  overdueStatusSqlDao=dbi.onDemand(BusinessOverdueStatusSqlDao.class);
  invoicePaymentSqlDao=dbi.onDemand(BusinessInvoicePaymentSqlDao.class);
  final AnalyticsDao analyticsDao=new DefaultAnalyticsDao(accountSqlDao,subscriptionTransitionSqlDao,invoiceSqlDao,invoiceItemSqlDao,accountTagSqlDao,overdueStatusSqlDao,invoicePaymentSqlDao);
  analyticsUserApi=new DefaultAnalyticsUserApi(analyticsDao,Mockito.mock(BusinessSubscriptionTransitionDao.class),Mockito.mock(BusinessAccountDao.class),Mockito.mock(BusinessInvoiceDao.class),Mockito.mock(BusinessOverdueStatusDao.class),Mockito.mock(BusinessInvoicePaymentDao.class),Mockito.mock(BusinessTagDao.class),Mockito.mock(EntitlementInternalApi.class),Mockito.mock(PaymentInternalApi.class),Mockito.mock(TagInternalApi.class),new InternalCallContextFactory(dbi,clock));
}
