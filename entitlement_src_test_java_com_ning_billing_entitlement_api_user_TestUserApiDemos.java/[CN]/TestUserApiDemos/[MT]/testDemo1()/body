{
  try {
    System.out.println("DEMO 1 START");
    SubscriptionData subscription=createSubscription("Assault-Rifle",BillingPeriod.MONTHLY,"gunclubDiscount");
    final PlanPhase trialPhase=subscription.getCurrentPhase();
    assertEquals(trialPhase.getPhaseType(),PhaseType.TRIAL);
    displayState(subscription.getId(),"STEP 1. CREATED SUBSCRIPTION");
    testListener.pushExpectedEvent(NextEvent.CHANGE);
    subscription.changePlan("Assault-Rifle",BillingPeriod.ANNUAL,"gunclubDiscount",clock.getUTCNow(),callContext);
    assertTrue(testListener.isCompleted(5000));
    displayState(subscription.getId(),"STEP 2. CHANGED PLAN WHILE IN TRIAL");
    testListener.pushExpectedEvent(NextEvent.PHASE);
    Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(31));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    displayState(subscription.getId(),"STEP 3. MOVE TO DISCOUNT PHASE");
    final List<Duration> durationList=new ArrayList<Duration>();
    durationList.add(trialPhase.getDuration());
    final DateTime startDiscountPhase=DefaultClock.addDuration(subscription.getStartDate(),durationList);
    final Duration ctd=getDurationMonth(1);
    final DateTime newChargedThroughDate=DefaultClock.addDuration(startDiscountPhase,ctd);
    billingApi.setChargedThroughDate(subscription.getId(),newChargedThroughDate.toLocalDate(),callContext);
    subscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(subscription.getId(),callContext);
    testListener.setNonExpectedMode();
    testListener.pushExpectedEvent(NextEvent.CHANGE);
    subscription.changePlan("Shotgun",BillingPeriod.ANNUAL,"gunclubDiscount",clock.getUTCNow(),callContext);
    assertFalse(testListener.isCompleted(3000));
    testListener.reset();
    displayState(subscription.getId(),"STEP 4. SET CTD AND CHANGE PLAN EOT (Shotgun)");
    testListener.setNonExpectedMode();
    testListener.pushExpectedEvent(NextEvent.CHANGE);
    subscription.changePlan("Pistol",BillingPeriod.ANNUAL,"gunclubDiscount",clock.getUTCNow(),callContext);
    assertFalse(testListener.isCompleted(3000));
    testListener.reset();
    displayState(subscription.getId(),"STEP 5. CHANGE AGAIN EOT (Pistol)");
    testListener.pushExpectedEvent(NextEvent.CHANGE);
    it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(1));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    Plan currentPlan=subscription.getCurrentPlan();
    assertNotNull(currentPlan);
    assertEquals(currentPlan.getProduct().getName(),"Pistol");
    assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
    assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.ANNUAL);
    PlanPhase currentPhase=subscription.getCurrentPhase();
    assertNotNull(currentPhase);
    assertEquals(currentPhase.getPhaseType(),PhaseType.DISCOUNT);
    displayState(subscription.getId(),"STEP 6. MOVE TO EOT");
    testListener.pushExpectedEvent(NextEvent.PHASE);
    it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(6));
    clock.addDeltaFromReality(it.toDurationMillis());
    assertTrue(testListener.isCompleted(5000));
    subscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(subscription.getId(),callContext);
    currentPlan=subscription.getCurrentPlan();
    assertNotNull(currentPlan);
    assertEquals(currentPlan.getProduct().getName(),"Pistol");
    assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
    assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.ANNUAL);
    currentPhase=subscription.getCurrentPhase();
    assertNotNull(currentPhase);
    assertEquals(currentPhase.getPhaseType(),PhaseType.EVERGREEN);
    displayState(subscription.getId(),"STEP 7.  MOVE TO NEXT PHASE");
    testListener.pushExpectedEvent(NextEvent.CANCEL);
    subscription.cancel(clock.getUTCNow(),callContext);
    displayState(subscription.getId(),"STEP 8.  CANCELLATION");
    assertListenerStatus();
  }
 catch (  EntitlementUserApiException e) {
    Assert.fail(e.getMessage());
  }
}
