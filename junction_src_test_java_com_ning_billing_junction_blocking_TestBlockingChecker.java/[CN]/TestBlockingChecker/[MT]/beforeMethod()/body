{
  super.beforeMethod();
  final UUID accountId=UUID.randomUUID();
  account=Mockito.mock(Account.class);
  Mockito.when(account.getId()).thenReturn(accountId);
  bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getAccountId()).thenReturn(accountId);
  final UUID bundleId=UUID.randomUUID();
  Mockito.when(bundle.getId()).thenReturn(bundleId);
  Mockito.when(bundle.getExternalKey()).thenReturn("key");
  subscription=Mockito.mock(Subscription.class);
  Mockito.when(subscription.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(subscription.getBundleId()).thenReturn(bundleId);
  try {
    Mockito.when(subscriptionUserApi.getBundleFromId(Mockito.<UUID>any(),Mockito.<TenantContext>any())).thenReturn(bundle);
    Mockito.when(subscriptionInternalApi.getBundleFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(bundle);
  }
 catch (  SubscriptionUserApiException e) {
    Assert.fail(e.toString());
  }
  ((MockBlockingStateDao)blockingStateDao).clear();
}
