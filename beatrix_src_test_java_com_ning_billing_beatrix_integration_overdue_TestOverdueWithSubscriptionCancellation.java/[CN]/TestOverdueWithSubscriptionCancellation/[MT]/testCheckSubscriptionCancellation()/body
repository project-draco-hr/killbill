{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  paymentPlugin.makeAllInvoicesFailWithError(true);
  final Subscription baseSubscription=createSubscriptionAndCheckForCompletion(bundle.getId(),productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,6,30),callContext);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(6,NextEvent.CANCEL);
  checkODState("OD1");
  final Subscription cancelledBaseSubscription=entitlementUserApi.getSubscriptionFromId(baseSubscription.getId(),callContext);
  assertTrue(cancelledBaseSubscription.getState() == SubscriptionState.CANCELLED);
}
