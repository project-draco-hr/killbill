{
  final NodeInfoModelDao nodeInfo=nodeInfoDao.getByNodeName(CreatorName.get());
  NodeInfoModelJson nodeInfoJson=mapper.deserializeNodeInfo(nodeInfo.getNodeInfo());
  final Iterable<PluginInfo> rawPluginInfo=pluginInfoApi.getPluginsInfo();
  final List<PluginInfo> pluginInfos=rawPluginInfo.iterator().hasNext() ? ImmutableList.<PluginInfo>copyOf(rawPluginInfo) : ImmutableList.<PluginInfo>of();
  final NodeInfoModelJson updatedNodeInfoJson=new NodeInfoModelJson(CreatorName.get(),nodeInfoJson.getBootTime(),clock.getUTCNow(),nodeInfoJson.getKillbillVersion(),nodeInfoJson.getApiVersion(),nodeInfoJson.getPluginApiVersion(),nodeInfoJson.getCommonVersion(),nodeInfoJson.getPlatformVersion(),ImmutableList.copyOf(Iterables.transform(pluginInfos,new Function<PluginInfo,PluginInfoModelJson>(){
    @Override public PluginInfoModelJson apply(    final PluginInfo input){
      return new PluginInfoModelJson(input);
    }
  }
)));
  final String nodeInfoValue=mapper.serializeNodeInfo(updatedNodeInfoJson);
  return nodeInfoValue;
}
