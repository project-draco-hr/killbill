{
  final DummyNodeInterval root=new DummyNodeInterval();
  final DummyNodeInterval top=createNodeInterval("2014-01-01","2014-02-01");
  root.addNode(top,CALLBACK);
  final DummyNodeInterval firstChildLevel1=createNodeInterval("2014-01-01","2014-01-20");
  final DummyNodeInterval secondChildLevel1=createNodeInterval("2014-01-21","2014-01-31");
  root.addNode(firstChildLevel1,CALLBACK);
  root.addNode(secondChildLevel1,CALLBACK);
  final DummyNodeInterval firstChildLevel2=createNodeInterval("2014-01-21","2014-01-23");
  final DummyNodeInterval secondChildLevel2=createNodeInterval("2014-01-24","2014-01-25");
  final DummyNodeInterval thirdChildLevel2=createNodeInterval("2014-01-26","2014-01-31");
  root.addNode(firstChildLevel2,CALLBACK);
  root.addNode(secondChildLevel2,CALLBACK);
  root.addNode(thirdChildLevel2,CALLBACK);
  final List<NodeInterval> expectedNodes=new ArrayList<NodeInterval>();
  expectedNodes.add(root);
  expectedNodes.add(top);
  expectedNodes.add(firstChildLevel1);
  expectedNodes.add(secondChildLevel1);
  expectedNodes.add(firstChildLevel2);
  expectedNodes.add(secondChildLevel2);
  expectedNodes.add(thirdChildLevel2);
  root.walkTree(new WalkCallback(){
    @Override public void onCurrentNode(    final int depth,    final NodeInterval curNode,    final NodeInterval parent){
      Assert.assertEquals(curNode,expectedNodes.remove(0));
    }
  }
);
  top.removeChild(secondChildLevel1);
  final List<NodeInterval> expectedNodesAfterRemoval=new ArrayList<NodeInterval>();
  expectedNodesAfterRemoval.add(root);
  expectedNodesAfterRemoval.add(top);
  expectedNodesAfterRemoval.add(firstChildLevel1);
  expectedNodesAfterRemoval.add(firstChildLevel2);
  expectedNodesAfterRemoval.add(secondChildLevel2);
  expectedNodesAfterRemoval.add(thirdChildLevel2);
  root.walkTree(new WalkCallback(){
    @Override public void onCurrentNode(    final int depth,    final NodeInterval curNode,    final NodeInterval parent){
      Assert.assertEquals(curNode,expectedNodesAfterRemoval.remove(0));
    }
  }
);
}
