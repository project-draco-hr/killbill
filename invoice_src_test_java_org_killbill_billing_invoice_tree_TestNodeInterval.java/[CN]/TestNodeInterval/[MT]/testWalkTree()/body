{
  final DummyNodeInterval root=new DummyNodeInterval();
  final DummyNodeInterval firstChildLevel0=createNodeInterval("2014-01-01","2014-02-01");
  root.addNode(firstChildLevel0,CALLBACK);
  final DummyNodeInterval secondChildLevel0=createNodeInterval("2014-02-01","2014-03-01");
  root.addNode(secondChildLevel0,CALLBACK);
  final DummyNodeInterval firstChildLevel1=createNodeInterval("2014-01-01","2014-01-07");
  final DummyNodeInterval secondChildLevel1=createNodeInterval("2014-01-08","2014-01-15");
  final DummyNodeInterval thirdChildLevel1=createNodeInterval("2014-01-16","2014-02-01");
  root.addNode(firstChildLevel1,CALLBACK);
  root.addNode(secondChildLevel1,CALLBACK);
  root.addNode(thirdChildLevel1,CALLBACK);
  final DummyNodeInterval firstChildLevel2=createNodeInterval("2014-01-01","2014-01-03");
  final DummyNodeInterval secondChildLevel2=createNodeInterval("2014-01-03","2014-01-05");
  final DummyNodeInterval thirdChildLevel2=createNodeInterval("2014-01-16","2014-01-17");
  root.addNode(firstChildLevel2,CALLBACK);
  root.addNode(secondChildLevel2,CALLBACK);
  root.addNode(thirdChildLevel2,CALLBACK);
  final DummyNodeInterval firstChildLevel3=createNodeInterval("2014-01-01","2014-01-02");
  final DummyNodeInterval secondChildLevel3=createNodeInterval("2014-01-03","2014-01-04");
  root.addNode(firstChildLevel3,CALLBACK);
  root.addNode(secondChildLevel3,CALLBACK);
  final List<NodeInterval> expected=new LinkedList<NodeInterval>();
  expected.add(root);
  expected.add(firstChildLevel0);
  expected.add(firstChildLevel1);
  expected.add(firstChildLevel2);
  expected.add(firstChildLevel3);
  expected.add(secondChildLevel2);
  expected.add(secondChildLevel3);
  expected.add(secondChildLevel1);
  expected.add(thirdChildLevel1);
  expected.add(thirdChildLevel2);
  expected.add(secondChildLevel0);
  final List<NodeInterval> result=new LinkedList<NodeInterval>();
  root.walkTree(new WalkCallback(){
    @Override public void onCurrentNode(    final int depth,    final NodeInterval curNode,    final NodeInterval parent){
      result.add(curNode);
    }
  }
);
  assertEquals(result.size(),expected.size());
  for (int i=0; i < result.size(); i++) {
    if (i == 0) {
      assertTrue(result.get(0).isRoot());
      checkInterval(result.get(0),createNodeInterval("2014-01-01","2014-03-01"));
    }
 else {
      checkInterval(result.get(i),expected.get(i));
    }
  }
}
