{
  final PlanPhase prevPhase;
  final Plan prevPlan;
  final Product prevProduct;
  final PriceList prevPriceList;
  if (prevPhaseName == null) {
    prevPhase=null;
    prevPlan=null;
    prevProduct=null;
    prevPriceList=null;
  }
 else {
    prevPhase=Mockito.mock(PlanPhase.class);
    Mockito.when(prevPhase.getName()).thenReturn(prevPhaseName);
    prevProduct=Mockito.mock(Product.class);
    Mockito.when(prevProduct.getName()).thenReturn("product");
    prevPlan=Mockito.mock(Plan.class);
    Mockito.when(prevPlan.getName()).thenReturn("plan");
    Mockito.when(prevPlan.getProduct()).thenReturn(prevProduct);
    prevPriceList=Mockito.mock(PriceList.class);
    Mockito.when(prevPriceList.getName()).thenReturn("pricelist");
  }
  final PlanPhase nextPhase;
  final Plan nextPlan;
  final Product nextProduct;
  final PriceList nextPriceList;
  if (nextPhaseName == null) {
    nextPhase=null;
    nextPlan=null;
    nextProduct=null;
    nextPriceList=null;
  }
 else {
    nextPhase=Mockito.mock(PlanPhase.class);
    Mockito.when(nextPhase.getName()).thenReturn(nextPhaseName);
    nextProduct=Mockito.mock(Product.class);
    Mockito.when(nextProduct.getName()).thenReturn("product");
    nextPlan=Mockito.mock(Plan.class);
    Mockito.when(nextPlan.getName()).thenReturn("plan");
    Mockito.when(nextPlan.getProduct()).thenReturn(nextProduct);
    nextPriceList=Mockito.mock(PriceList.class);
    Mockito.when(nextPriceList.getName()).thenReturn("pricelist");
  }
  return new SubscriptionBaseTransitionData(UUID.randomUUID(),entitlementId,bundleId,eventType,apiEventType,requestedDate,effectiveDate,null,null,null,prevPlan,prevPhase,prevPriceList,null,null,null,nextPlan,nextPhase,nextPriceList,1L,createdDate,UUID.randomUUID(),true);
}
