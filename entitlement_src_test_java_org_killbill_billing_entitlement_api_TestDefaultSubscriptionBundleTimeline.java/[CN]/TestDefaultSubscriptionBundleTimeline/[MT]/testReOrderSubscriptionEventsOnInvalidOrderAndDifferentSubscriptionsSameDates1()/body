{
  final TestSubscriptionBundleTimeline timeline=new TestSubscriptionBundleTimeline(null,null,null,null,new ArrayList<Entitlement>());
  final List<SubscriptionEvent> events=new ArrayList<SubscriptionEvent>();
  final UUID subscriptionId=UUID.fromString("60b64e0c-cefd-48c3-8de9-c731a9558165");
  final UUID otherSubscriptionId=UUID.fromString("35b3b340-31b2-46ea-b062-e9fc9fab3bc9");
  final DateTime effectiveDate=clock.getUTCNow();
  events.add(timeline.createEvent(subscriptionId,SubscriptionEventType.START_ENTITLEMENT,effectiveDate));
  events.add(timeline.createEvent(subscriptionId,SubscriptionEventType.START_BILLING,effectiveDate));
  events.add(timeline.createEvent(subscriptionId,SubscriptionEventType.STOP_BILLING,effectiveDate));
  events.add(timeline.createEvent(otherSubscriptionId,SubscriptionEventType.STOP_BILLING,effectiveDate));
  events.add(timeline.createEvent(subscriptionId,SubscriptionEventType.STOP_ENTITLEMENT,effectiveDate));
  SubscriptionEventOrdering.INSTANCE.reOrderSubscriptionEventsOnSameDateByType(events);
  Assert.assertEquals(events.get(0).getSubscriptionEventType(),SubscriptionEventType.STOP_BILLING);
  Assert.assertEquals(events.get(0).getEntitlementId(),otherSubscriptionId);
  Assert.assertEquals(events.get(1).getSubscriptionEventType(),SubscriptionEventType.START_ENTITLEMENT);
  Assert.assertEquals(events.get(2).getSubscriptionEventType(),SubscriptionEventType.START_BILLING);
  Assert.assertEquals(events.get(3).getSubscriptionEventType(),SubscriptionEventType.STOP_ENTITLEMENT);
  Assert.assertEquals(events.get(4).getSubscriptionEventType(),SubscriptionEventType.STOP_BILLING);
  Assert.assertEquals(events.get(4).getEntitlementId(),subscriptionId);
}
