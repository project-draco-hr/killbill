{
  final AtomicBoolean threadRunning=new AtomicBoolean(false);
  final AtomicBoolean threadHasRun=new AtomicBoolean(false);
  final Thread t1=new Thread(new Runnable(){
    @Override public void run(){
      threadRunning.set(true);
      try {
        if (shouldFailBecauseOfLockFailure) {
          try {
            pluginOperation.dispatchWithAccountLockAndTimeout(PLUGIN_NAME_PLACEHOLDER,callback);
            Assert.fail();
          }
 catch (          final OperationException e) {
            Assert.assertTrue(e.getCause() instanceof PaymentApiException);
            Assert.assertEquals(((PaymentApiException)e.getCause()).getCode(),ErrorCode.PAYMENT_INTERNAL_ERROR.getCode());
          }
        }
 else {
          try {
            pluginOperation.dispatchWithAccountLockAndTimeout(PLUGIN_NAME_PLACEHOLDER,callback);
          }
 catch (          final OperationException e) {
            Assert.fail(e.getMessage());
          }
        }
      }
  finally {
        threadHasRun.set(true);
      }
    }
  }
);
  t1.start();
  Awaitility.await().untilTrue(threadRunning);
  return threadHasRun;
}
