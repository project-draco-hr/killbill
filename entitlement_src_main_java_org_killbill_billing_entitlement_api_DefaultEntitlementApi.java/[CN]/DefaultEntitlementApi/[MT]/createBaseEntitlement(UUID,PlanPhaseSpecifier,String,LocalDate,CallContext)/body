{
  final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(accountId,callContext);
  try {
    if (entitlementUtils.getFirstActiveSubscriptionIdForKeyOrNull(externalKey,contextWithValidAccountRecordId) != null) {
      throw new EntitlementApiException(new SubscriptionBaseApiException(ErrorCode.SUB_CREATE_ACTIVE_BUNDLE_KEY_EXISTS,externalKey));
    }
    final SubscriptionBaseBundle bundle=subscriptionBaseInternalApi.createBundleForAccount(accountId,externalKey,contextWithValidAccountRecordId);
    final DateTime referenceTime=clock.getUTCNow();
    final DateTime requestedDate=dateHelper.fromLocalDateAndReferenceTime(effectiveDate,referenceTime,contextWithValidAccountRecordId);
    final SubscriptionBase subscription=subscriptionBaseInternalApi.createSubscription(bundle.getId(),planPhaseSpecifier,requestedDate,contextWithValidAccountRecordId);
    return new DefaultEntitlement(subscription.getId(),eventsStreamBuilder,this,blockingStateDao,subscriptionBaseInternalApi,checker,notificationQueueService,entitlementUtils,dateHelper,clock,internalCallContextFactory,callContext);
  }
 catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
}
