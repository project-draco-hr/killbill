{
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.CREATE_SUBSCRIPTION,accountId,null,planPhaseSpecifier,externalKey,overrides,effectiveDate,null,callContext);
  final WithEntitlementPlugin<Entitlement> createBaseEntitlementWithPlugin=new WithEntitlementPlugin<Entitlement>(){
    @Override public Entitlement doCall(    final EntitlementApi entitlementApi) throws EntitlementApiException {
      final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(accountId,callContext);
      try {
        if (entitlementUtils.getFirstActiveSubscriptionIdForKeyOrNull(externalKey,contextWithValidAccountRecordId) != null) {
          throw new EntitlementApiException(new SubscriptionBaseApiException(ErrorCode.SUB_CREATE_ACTIVE_BUNDLE_KEY_EXISTS,externalKey));
        }
        final SubscriptionBaseBundle bundle=subscriptionBaseInternalApi.createBundleForAccount(accountId,externalKey,contextWithValidAccountRecordId);
        final DateTime referenceTime=clock.getUTCNow();
        final DateTime requestedDate=dateHelper.fromLocalDateAndReferenceTime(effectiveDate,referenceTime,contextWithValidAccountRecordId);
        final SubscriptionBase subscription=subscriptionBaseInternalApi.createSubscription(bundle.getId(),planPhaseSpecifier,overrides,requestedDate,contextWithValidAccountRecordId);
        return new DefaultEntitlement(subscription.getId(),eventsStreamBuilder,entitlementApi,blockingStateDao,subscriptionBaseInternalApi,checker,notificationQueueService,entitlementUtils,dateHelper,clock,internalCallContextFactory,callContext);
      }
 catch (      SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
    }
  }
;
  return executeWithPlugin(createBaseEntitlementWithPlugin,this,pluginContext);
}
