{
  final EntitlementSpecifier baseSpecifier=Iterables.tryFind(entitlementSpecifiers,new Predicate<EntitlementSpecifier>(){
    @Override public boolean apply(    final EntitlementSpecifier specifier){
      return specifier.getPlanPhaseSpecifier() != null && ProductCategory.BASE.equals(specifier.getPlanPhaseSpecifier().getProductCategory());
    }
  }
).orNull();
  if (baseSpecifier == null) {
    throw new EntitlementApiException(new IllegalArgumentException(),ErrorCode.SUB_CREATE_NO_BP.getCode(),"Missing Base Subscription.");
  }
  final List<EntitlementSpecifier> entitlementSpecifierList=new ArrayList<EntitlementSpecifier>();
  Iterables.addAll(entitlementSpecifierList,entitlementSpecifiers);
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.CREATE_SUBSCRIPTIONS_WITH_AO,accountId,null,null,externalKey,entitlementSpecifierList,effectiveDate,properties,callContext);
  final WithEntitlementPlugin<Entitlement> createBaseEntitlementWithAddOn=new WithEntitlementPlugin<Entitlement>(){
    @Override public Entitlement doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(accountId,callContext);
      try {
        if (entitlementUtils.getFirstActiveSubscriptionIdForKeyOrNull(externalKey,contextWithValidAccountRecordId) != null) {
          throw new EntitlementApiException(new SubscriptionBaseApiException(ErrorCode.SUB_CREATE_ACTIVE_BUNDLE_KEY_EXISTS,externalKey));
        }
        final SubscriptionBaseBundle bundle=subscriptionBaseInternalApi.createBundleForAccount(accountId,externalKey,contextWithValidAccountRecordId);
        final DateTime referenceTime=clock.getUTCNow();
        final DateTime requestedDate=dateHelper.fromLocalDateAndReferenceTime(updatedPluginContext.getEffectiveDate(),referenceTime,contextWithValidAccountRecordId);
        final SubscriptionBase subscription=subscriptionBaseInternalApi.createBaseSubscriptionWithAddOns(bundle.getId(),entitlementSpecifiers,requestedDate,contextWithValidAccountRecordId);
        return new DefaultEntitlement(subscription.getId(),eventsStreamBuilder,entitlementApi,pluginExecution,blockingStateDao,subscriptionBaseInternalApi,checker,notificationQueueService,entitlementUtils,dateHelper,clock,securityApi,internalCallContextFactory,callContext);
      }
 catch (      final SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
    }
  }
;
  return pluginExecution.executeWithPlugin(createBaseEntitlementWithAddOn,pluginContext);
}
