{
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.TRANSFER_BUNDLE,sourceAccountId,destAccountId,null,null,externalKey,null,effectiveDate,properties,context);
  final WithEntitlementPlugin<UUID> transferWithPlugin=new WithEntitlementPlugin<UUID>(){
    @Override public UUID doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      final boolean cancelImm;
switch (billingPolicy) {
case IMMEDIATE:
        cancelImm=true;
      break;
case END_OF_TERM:
    cancelImm=false;
  break;
default :
throw new RuntimeException("Unexpected billing policy " + billingPolicy);
}
final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(sourceAccountId,context);
try {
final UUID activeSubscriptionIdForKey=entitlementUtils.getFirstActiveSubscriptionIdForKeyOrNull(externalKey,contextWithValidAccountRecordId);
final SubscriptionBase baseSubscription=activeSubscriptionIdForKey != null ? subscriptionBaseInternalApi.getSubscriptionFromId(activeSubscriptionIdForKey,contextWithValidAccountRecordId) : null;
final SubscriptionBaseBundle baseBundle=baseSubscription != null ? subscriptionBaseInternalApi.getBundleFromId(baseSubscription.getBundleId(),contextWithValidAccountRecordId) : null;
if (baseBundle == null || !baseBundle.getAccountId().equals(sourceAccountId)) {
throw new EntitlementApiException(new SubscriptionBaseApiException(ErrorCode.SUB_GET_INVALID_BUNDLE_KEY,externalKey));
}
final DateTime requestedDate=dateHelper.fromLocalDateAndReferenceTime(updatedPluginContext.getEffectiveDate(),baseSubscription.getStartDate(),contextWithValidAccountRecordId);
final SubscriptionBaseBundle newBundle=subscriptionBaseTransferApi.transferBundle(sourceAccountId,destAccountId,externalKey,requestedDate,true,cancelImm,context);
for (final SubscriptionBase subscriptionBase : subscriptionBaseInternalApi.getSubscriptionsForBundle(baseBundle.getId(),null,contextWithValidAccountRecordId)) {
final BlockingState blockingState=new DefaultBlockingState(subscriptionBase.getId(),BlockingStateType.SUBSCRIPTION,DefaultEntitlementApi.ENT_STATE_CANCELLED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,false,requestedDate);
entitlementUtils.setBlockingStateAndPostBlockingTransitionEvent(blockingState,contextWithValidAccountRecordId);
}
return newBundle.getId();
}
 catch (SubscriptionBaseTransferApiException e) {
throw new EntitlementApiException(e);
}
catch (SubscriptionBaseApiException e) {
throw new EntitlementApiException(e);
}
}
}
;
return pluginExecution.executeWithPlugin(transferWithPlugin,pluginContext);
}
