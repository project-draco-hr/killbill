{
  final EntitlementSpecifier entitlementSpecifier=new DefaultEntitlementSpecifier(planPhaseSpecifier,overrides);
  final List<EntitlementSpecifier> entitlementSpecifierList=new ArrayList<EntitlementSpecifier>();
  entitlementSpecifierList.add(entitlementSpecifier);
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.CREATE_SUBSCRIPTION,null,null,bundleId,null,entitlementSpecifierList,effectiveDate,properties,callContext);
  final WithEntitlementPlugin<Entitlement> addEntitlementWithPlugin=new WithEntitlementPlugin<Entitlement>(){
    @Override public Entitlement doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      final EventsStream eventsStreamForBaseSubscription=eventsStreamBuilder.buildForBaseSubscription(bundleId,callContext);
      if (!eventsStreamForBaseSubscription.isEntitlementActive()) {
        throw new EntitlementApiException(ErrorCode.SUB_GET_NO_SUCH_BASE_SUBSCRIPTION,bundleId);
      }
      if (eventsStreamForBaseSubscription.isBlockChange()) {
        throw new EntitlementApiException(new BlockingApiException(ErrorCode.BLOCK_BLOCKED_ACTION,BlockingChecker.ACTION_CHANGE,BlockingChecker.TYPE_SUBSCRIPTION,eventsStreamForBaseSubscription.getEntitlementId().toString()));
      }
      final DateTime requestedDate=dateHelper.fromLocalDateAndReferenceTime(updatedPluginContext.getEffectiveDate(),eventsStreamForBaseSubscription.getSubscriptionBase().getStartDate(),eventsStreamForBaseSubscription.getInternalTenantContext());
      try {
        final InternalCallContext context=internalCallContextFactory.createInternalCallContext(callContext);
        final EntitlementSpecifier specifier=getFirstEntitlementSpecifier(updatedPluginContext.getEntitlementSpecifiers());
        final SubscriptionBase subscription=subscriptionBaseInternalApi.createSubscription(bundleId,specifier.getPlanPhaseSpecifier(),specifier.getOverrides(),requestedDate,context);
        return new DefaultEntitlement(subscription.getId(),eventsStreamBuilder,entitlementApi,pluginExecution,blockingStateDao,subscriptionBaseInternalApi,checker,notificationQueueService,entitlementUtils,dateHelper,clock,securityApi,internalCallContextFactory,callContext);
      }
 catch (      final SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
    }
  }
;
  return pluginExecution.executeWithPlugin(addEntitlementWithPlugin,pluginContext);
}
