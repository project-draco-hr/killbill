{
  final AccountJson input=createAccount(UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString());
  final String accountId=input.getAccountId();
  final InvoiceEmailJson invoiceEmailJsonWithNotifications=new InvoiceEmailJson(accountId,true);
  final InvoiceEmailJson invoiceEmailJsonWithoutNotifications=new InvoiceEmailJson(accountId,false);
  final String baseUri=JaxrsResource.ACCOUNTS_PATH + "/" + accountId+ "/"+ JaxrsResource.EMAIL_NOTIFICATIONS;
  final Response firstResponse=doGet(baseUri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(firstResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final InvoiceEmailJson firstInvoiceEmailJson=mapper.readValue(firstResponse.getResponseBody(),new TypeReference<InvoiceEmailJson>(){
  }
);
  Assert.assertEquals(firstInvoiceEmailJson.getAccountId(),accountId);
  Assert.assertFalse(firstInvoiceEmailJson.isNotifiedForInvoices());
  final String firstEmailString=mapper.writeValueAsString(invoiceEmailJsonWithNotifications);
  final Response secondResponse=doPut(baseUri,firstEmailString,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(secondResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final Response thirdResponse=doGet(baseUri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(thirdResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final InvoiceEmailJson secondInvoiceEmailJson=mapper.readValue(thirdResponse.getResponseBody(),new TypeReference<InvoiceEmailJson>(){
  }
);
  Assert.assertEquals(secondInvoiceEmailJson.getAccountId(),accountId);
  Assert.assertTrue(secondInvoiceEmailJson.isNotifiedForInvoices());
  final String secondEmailString=mapper.writeValueAsString(invoiceEmailJsonWithoutNotifications);
  final Response fourthResponse=doPut(baseUri,secondEmailString,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(fourthResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final Response fifthResponse=doGet(baseUri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(fifthResponse.getStatusCode(),javax.ws.rs.core.Response.Status.OK.getStatusCode());
  final InvoiceEmailJson thirdInvoiceEmailJson=mapper.readValue(fifthResponse.getResponseBody(),new TypeReference<InvoiceEmailJson>(){
  }
);
  Assert.assertEquals(thirdInvoiceEmailJson.getAccountId(),accountId);
  Assert.assertFalse(thirdInvoiceEmailJson.isNotifiedForInvoices());
}
