{
  final CompletionService<Collection<BusinessSubscriptionTransitionModelDao>> completionService=new ExecutorCompletionService<Collection<BusinessSubscriptionTransitionModelDao>>(executor);
  final Account account=getAccount(accountId,context);
  final ReportGroup reportGroup=getReportGroup(account.getId(),context);
  int nbSubscriptions=0;
  final List<SubscriptionBundle> bundles=getSubscriptionBundlesForAccount(account.getId(),context);
  for (  final SubscriptionBundle bundle : bundles) {
    final Collection<Subscription> subscriptions=getSubscriptionsForBundle(bundle.getId(),context);
    nbSubscriptions+=subscriptions.size();
    for (    final Subscription subscription : subscriptions) {
      completionService.submit(new Callable<Collection<BusinessSubscriptionTransitionModelDao>>(){
        @Override public Collection<BusinessSubscriptionTransitionModelDao> call() throws Exception {
          return buildTransitionsForSubscription(account,bundle,subscription,accountRecordId,tenantRecordId,reportGroup,context);
        }
      }
);
    }
  }
  final Collection<BusinessSubscriptionTransitionModelDao> bsts=new LinkedList<BusinessSubscriptionTransitionModelDao>();
  for (int i=0; i < nbSubscriptions; ++i) {
    try {
      bsts.addAll(completionService.take().get());
    }
 catch (    InterruptedException e) {
      throw new AnalyticsRefreshException(e);
    }
catch (    ExecutionException e) {
      throw new AnalyticsRefreshException(e);
    }
  }
  return bsts;
}
