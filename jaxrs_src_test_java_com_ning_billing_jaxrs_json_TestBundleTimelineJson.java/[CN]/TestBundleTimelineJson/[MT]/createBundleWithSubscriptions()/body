{
  final SubscriptionBaseTimeline.ExistingEvent event=Mockito.mock(SubscriptionBaseTimeline.ExistingEvent.class);
  final DateTime effectiveDate=clock.getUTCNow();
  final UUID eventId=UUID.randomUUID();
  final PlanPhaseSpecifier planPhaseSpecifier=new PlanPhaseSpecifier(UUID.randomUUID().toString(),ProductCategory.BASE,BillingPeriod.NO_BILLING_PERIOD,UUID.randomUUID().toString(),PhaseType.EVERGREEN);
  Mockito.when(event.getEffectiveDate()).thenReturn(effectiveDate);
  Mockito.when(event.getEventId()).thenReturn(eventId);
  Mockito.when(event.getSubscriptionTransitionType()).thenReturn(SubscriptionBaseTransitionType.CREATE);
  Mockito.when(event.getPlanPhaseSpecifier()).thenReturn(planPhaseSpecifier);
  final SubscriptionBaseTimeline subscriptionTimeline=Mockito.mock(SubscriptionBaseTimeline.class);
  Mockito.when(subscriptionTimeline.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(subscriptionTimeline.getExistingEvents()).thenReturn(ImmutableList.<SubscriptionBaseTimeline.ExistingEvent>of(event));
  final UUID bundleId=UUID.randomUUID();
  final String externalKey=UUID.randomUUID().toString();
  final EntitlementJsonWithEvents subscription=null;
  return new BundleJsonWithSubscriptions(bundleId.toString(),externalKey,ImmutableList.<EntitlementJsonWithEvents>of(subscription),null);
}
