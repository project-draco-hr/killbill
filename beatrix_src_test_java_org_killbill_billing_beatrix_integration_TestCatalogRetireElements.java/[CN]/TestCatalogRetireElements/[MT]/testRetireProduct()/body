{
  final LocalDate today=new LocalDate(2015,11,5);
  clock.setDay(today);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  final String productName="Pistol";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId(),callContext).size(),1);
  assertEquals(bpEntitlement.getSubscriptionBase().getCurrentPlan().getRecurringBillingPeriod(),BillingPeriod.MONTHLY);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addMonths(1);
  assertListenerStatus();
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addMonths(1);
  assertListenerStatus();
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final LocalDate effectiveDate=new LocalDate(clock.getUTCNow());
  try {
    entitlementApi.createBaseEntitlement(account.getId(),spec,"externalKey2",null,effectiveDate,ImmutableList.<PluginProperty>of(),callContext);
    fail();
  }
 catch (  EntitlementApiException e) {
    assertTrue(e.getLocalizedMessage().startsWith("Could not find any product named 'Pistol'"));
  }
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addMonths(1);
  assertListenerStatus();
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),4);
  for (  Invoice invoice : invoices) {
    assertEquals(invoice.getInvoiceItems().get(0).getPlanName(),"pistol-monthly");
  }
}
