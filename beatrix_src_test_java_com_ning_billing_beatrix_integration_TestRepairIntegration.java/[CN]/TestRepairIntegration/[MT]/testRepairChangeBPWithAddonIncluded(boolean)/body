{
  final DateTime initialDate=new DateTime(2012,4,25,0,3,42,0);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(25));
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(3));
  clock.addDeltaFromReality(it.toDurationMillis());
  final DefaultEntitlement aoEntitlement1=addAOEntitlementAndCheckForCompletion(bpEntitlement.getId(),"Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT);
  final DefaultEntitlement aoEntitlement2=addAOEntitlementAndCheckForCompletion(bpEntitlement.getId(),"Laser-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT);
  final int duration=inTrial ? 3 : 35;
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(duration));
  if (!inTrial) {
    busHandler.pushExpectedEvent(NextEvent.PHASE);
    busHandler.pushExpectedEvent(NextEvent.PHASE);
    busHandler.pushExpectedEvent(NextEvent.PHASE);
    busHandler.pushExpectedEvent(NextEvent.INVOICE);
    busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  }
  clock.addDeltaFromReality(it.toDurationMillis());
  if (!inTrial) {
    assertTrue(busHandler.isCompleted(DELAY));
  }
  final boolean ifRepair=false;
  if (ifRepair) {
    BundleTimeline bundleRepair=repairApi.getBundleTimeline(bpEntitlement.getSubscriptionBase().getBundleId(),callContext);
    sortEventsOnBundle(bundleRepair);
    SubscriptionTimeline bpRepair=getSubscriptionRepair(bpEntitlement.getId(),bundleRepair);
    assertEquals(bpRepair.getExistingEvents().size(),2);
    final SubscriptionTimeline aoRepair=getSubscriptionRepair(aoEntitlement1.getId(),bundleRepair);
    assertEquals(aoRepair.getExistingEvents().size(),2);
    final SubscriptionTimeline aoRepair2=getSubscriptionRepair(aoEntitlement2.getId(),bundleRepair);
    assertEquals(aoRepair2.getExistingEvents().size(),2);
    final DateTime bpChangeDate=clock.getUTCNow().minusDays(1);
    final List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
    des.add(createDeletedEvent(bpRepair.getExistingEvents().get(1).getEventId()));
    final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.TRIAL);
    final NewEvent ne=createNewEvent(SubscriptionBaseTransitionType.CHANGE,bpChangeDate,spec);
    bpRepair=createSubscriptionReapir(bpEntitlement.getId(),des,Collections.singletonList(ne));
    bundleRepair=createBundleRepair(bpEntitlement.getSubscriptionBase().getBundleId(),bundleRepair.getViewId(),Collections.singletonList(bpRepair));
    busHandler.pushExpectedEvent(NextEvent.INVOICE);
    busHandler.pushExpectedEvent(NextEvent.PAYMENT);
    busHandler.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
    repairApi.repairBundle(bundleRepair,false,callContext);
    assertTrue(busHandler.isCompleted(DELAY));
    final SubscriptionData newAoSubscription=(SubscriptionData)aoEntitlement1.getSubscriptionBase();
    assertEquals(newAoSubscription.getState(),SubscriptionState.CANCELLED);
    assertEquals(newAoSubscription.getAllTransitions().size(),2);
    assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
    final SubscriptionData newAoSubscription2=(SubscriptionData)aoEntitlement2.getSubscriptionBase();
    assertEquals(newAoSubscription2.getState(),SubscriptionState.ACTIVE);
    assertEquals(newAoSubscription2.getAllTransitions().size(),2);
    assertEquals(newAoSubscription2.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
    final SubscriptionData newBaseSubscription=(SubscriptionData)bpEntitlement.getSubscriptionBase();
    assertEquals(newBaseSubscription.getState(),SubscriptionState.ACTIVE);
    assertEquals(newBaseSubscription.getAllTransitions().size(),3);
    assertEquals(newBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
    assertListenerStatus();
  }
}
