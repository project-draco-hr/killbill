{
  DateTime initialDate=new DateTime(2012,4,25,0,3,42,0);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  Account account=accountUserApi.createAccount(getAccountData(25),null,null,context);
  assertNotNull(account);
  SubscriptionBundle bundle=entitlementUserApi.createBundleForAccount(account.getId(),"whatever",context);
  String productName="Shotgun";
  BillingPeriod term=BillingPeriod.MONTHLY;
  String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  busHandler.pushExpectedEvent(NextEvent.CREATE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  SubscriptionData baseSubscription=(SubscriptionData)entitlementUserApi.createSubscription(bundle.getId(),new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null),null,context);
  assertNotNull(baseSubscription);
  assertTrue(busHandler.isCompleted(DELAY));
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(3));
  clock.addDeltaFromReality(it.toDurationMillis());
  busHandler.pushExpectedEvent(NextEvent.CREATE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  SubscriptionData aoSubscription=(SubscriptionData)entitlementUserApi.createSubscription(bundle.getId(),new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null),null,context);
  assertTrue(busHandler.isCompleted(DELAY));
  busHandler.pushExpectedEvent(NextEvent.CREATE);
  busHandler.pushExpectedEvent(NextEvent.INVOICE);
  busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  SubscriptionData aoSubscription2=(SubscriptionData)entitlementUserApi.createSubscription(bundle.getId(),new PlanPhaseSpecifier("Laser-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null),null,context);
  assertTrue(busHandler.isCompleted(DELAY));
  int duration=inTrial ? 3 : 35;
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(duration));
  if (!inTrial) {
    busHandler.pushExpectedEvent(NextEvent.PHASE);
    busHandler.pushExpectedEvent(NextEvent.PHASE);
    busHandler.pushExpectedEvent(NextEvent.PHASE);
    busHandler.pushExpectedEvent(NextEvent.INVOICE);
    busHandler.pushExpectedEvent(NextEvent.PAYMENT);
  }
  clock.addDeltaFromReality(it.toDurationMillis());
  if (!inTrial) {
    assertTrue(busHandler.isCompleted(DELAY));
  }
  boolean ifRepair=false;
  if (ifRepair) {
    BundleTimeline bundleRepair=repairApi.getBundleRepair(bundle.getId());
    sortEventsOnBundle(bundleRepair);
    SubscriptionTimeline bpRepair=getSubscriptionRepair(baseSubscription.getId(),bundleRepair);
    assertEquals(bpRepair.getExistingEvents().size(),2);
    SubscriptionTimeline aoRepair=getSubscriptionRepair(aoSubscription.getId(),bundleRepair);
    assertEquals(aoRepair.getExistingEvents().size(),2);
    SubscriptionTimeline aoRepair2=getSubscriptionRepair(aoSubscription2.getId(),bundleRepair);
    assertEquals(aoRepair2.getExistingEvents().size(),2);
    DateTime bpChangeDate=clock.getUTCNow().minusDays(1);
    List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
    des.add(createDeletedEvent(bpRepair.getExistingEvents().get(1).getEventId()));
    PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.TRIAL);
    NewEvent ne=createNewEvent(SubscriptionTransitionType.CHANGE,bpChangeDate,spec);
    bpRepair=createSubscriptionReapir(baseSubscription.getId(),des,Collections.singletonList(ne));
    bundleRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(bpRepair));
    busHandler.pushExpectedEvent(NextEvent.INVOICE);
    busHandler.pushExpectedEvent(NextEvent.PAYMENT);
    busHandler.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
    repairApi.repairBundle(bundleRepair,false,context);
    assertTrue(busHandler.isCompleted(DELAY));
    SubscriptionData newAoSubscription=(SubscriptionData)entitlementUserApi.getSubscriptionFromId(aoSubscription.getId());
    assertEquals(newAoSubscription.getState(),SubscriptionState.CANCELLED);
    assertEquals(newAoSubscription.getAllTransitions().size(),2);
    assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
    SubscriptionData newAoSubscription2=(SubscriptionData)entitlementUserApi.getSubscriptionFromId(aoSubscription2.getId());
    assertEquals(newAoSubscription2.getState(),SubscriptionState.ACTIVE);
    assertEquals(newAoSubscription2.getAllTransitions().size(),2);
    assertEquals(newAoSubscription2.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
    SubscriptionData newBaseSubscription=(SubscriptionData)entitlementUserApi.getSubscriptionFromId(baseSubscription.getId());
    assertEquals(newBaseSubscription.getState(),SubscriptionState.ACTIVE);
    assertEquals(newBaseSubscription.getAllTransitions().size(),3);
    assertEquals(newBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
    assertFailureFromBusHandler();
  }
}
