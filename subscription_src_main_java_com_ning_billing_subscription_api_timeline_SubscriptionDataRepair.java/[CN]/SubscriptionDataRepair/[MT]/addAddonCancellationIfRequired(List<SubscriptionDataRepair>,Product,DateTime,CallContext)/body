{
  final DateTime now=clock.getUTCNow();
  final Iterator<SubscriptionDataRepair> it=addOnSubscriptionInRepair.iterator();
  while (it.hasNext()) {
    final SubscriptionDataRepair cur=it.next();
    if (cur.getState() == SubscriptionState.CANCELLED || cur.getCategory() != ProductCategory.ADD_ON) {
      continue;
    }
    final Plan addonCurrentPlan=cur.getCurrentPlan();
    if (baseProduct == null || addonUtils.isAddonIncluded(baseProduct,addonCurrentPlan) || !addonUtils.isAddonAvailable(baseProduct,addonCurrentPlan)) {
      final SubscriptionEvent cancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(cur.getId()).setActiveVersion(cur.getActiveVersion()).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(now).setFromDisk(true));
      repairDao.cancelSubscription(cur,cancelEvent,internalCallContextFactory.createInternalCallContext(cur.getId(),ObjectType.SUBSCRIPTION,context),0);
      cur.rebuildTransitions(repairDao.getEventsForSubscription(cur.getId(),internalCallContextFactory.createInternalTenantContext(context)),catalogService.getFullCatalog());
    }
  }
}
