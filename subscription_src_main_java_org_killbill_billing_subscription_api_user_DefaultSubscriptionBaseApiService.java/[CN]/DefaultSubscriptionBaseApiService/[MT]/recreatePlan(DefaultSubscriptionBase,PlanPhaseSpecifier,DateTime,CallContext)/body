{
  final EntitlementState currentState=subscription.getState();
  if (currentState != null && currentState != EntitlementState.CANCELLED) {
    throw new SubscriptionBaseApiException(ErrorCode.SUB_RECREATE_BAD_STATE,subscription.getId(),currentState);
  }
  final DateTime now=clock.getUTCNow();
  final DateTime effectiveDate=(requestedDateWithMs != null) ? DefaultClock.truncateMs(requestedDateWithMs) : now;
  validateEffectiveDate(subscription,effectiveDate);
  try {
    final String realPriceList=(spec.getPriceListName() == null) ? PriceListSet.DEFAULT_PRICELIST_NAME : spec.getPriceListName();
    final InternalTenantContext internalCallContext=createTenantContextFromBundleId(subscription.getBundleId(),context);
    final Plan plan=catalogService.getFullCatalog(internalCallContext).findPlan(spec.getProductName(),spec.getBillingPeriod(),realPriceList,effectiveDate);
    final PlanPhase phase=plan.getAllPhases()[0];
    if (phase == null) {
      throw new SubscriptionBaseError(String.format("No initial PlanPhase for Product %s, term %s and set %s does not exist in the catalog",spec.getProductName(),spec.getBillingPeriod().toString(),realPriceList));
    }
    final DateTime processedDate=now;
    createFromSubscription(subscription,plan,spec.getPhaseType(),realPriceList,now,effectiveDate,processedDate,true,context);
    return true;
  }
 catch (  CatalogApiException e) {
    throw new SubscriptionBaseApiException(e);
  }
}
