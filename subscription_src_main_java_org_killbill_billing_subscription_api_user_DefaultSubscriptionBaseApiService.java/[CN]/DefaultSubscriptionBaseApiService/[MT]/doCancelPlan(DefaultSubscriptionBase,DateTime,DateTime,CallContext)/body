{
  validateEffectiveDate(subscription,effectiveDate);
  final List<SubscriptionBaseEvent> cancelEvents=getEventsOnCancelPlan(subscription,now,effectiveDate,now,false,context);
  final InternalCallContext internalCallContext=createCallContextFromBundleId(subscription.getBundleId(),context);
  dao.cancelSubscription(subscription,cancelEvents.get(0),internalCallContext,0);
  subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId(),internalCallContext),catalogService.getFullCatalog());
  if (subscription.getCategory() == ProductCategory.BASE) {
    final Product baseProduct=(subscription.getState() == EntitlementState.CANCELLED) ? null : subscription.getCurrentPlan().getProduct();
    cancelAddOnsIfRequired(baseProduct,subscription.getBundleId(),effectiveDate,context);
  }
  final boolean isImmediate=subscription.getState() == EntitlementState.CANCELLED;
  return isImmediate;
}
