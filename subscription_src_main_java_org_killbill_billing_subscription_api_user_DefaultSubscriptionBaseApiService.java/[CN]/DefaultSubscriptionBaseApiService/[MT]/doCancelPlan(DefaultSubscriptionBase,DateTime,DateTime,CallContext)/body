{
  try {
    validateEffectiveDate(subscription,effectiveDate);
    final List<SubscriptionBaseEvent> cancelEvents=getEventsOnCancelPlan(subscription,now,effectiveDate,now,false,context);
    final InternalCallContext internalCallContext=createCallContextFromBundleId(subscription.getBundleId(),context);
    dao.cancelSubscription(subscription,cancelEvents.get(0),internalCallContext,0);
    final Catalog fullCatalog=catalogService.getFullCatalog(internalCallContext);
    subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId(),internalCallContext),fullCatalog);
    if (subscription.getCategory() == ProductCategory.BASE) {
      final Product baseProduct=(subscription.getState() == EntitlementState.CANCELLED) ? null : subscription.getCurrentPlan().getProduct();
      cancelAddOnsIfRequired(baseProduct,subscription.getBundleId(),effectiveDate,context);
    }
    final boolean isImmediate=subscription.getState() == EntitlementState.CANCELLED;
    return isImmediate;
  }
 catch (  CatalogApiException e) {
    throw new SubscriptionBaseApiException(e);
  }
}
