{
  validateEffectiveDate(subscription,effectiveDate);
  final InternalCallContext internalCallContext=createCallContextFromBundleId(subscription.getBundleId(),context);
  final List<DefaultSubscriptionBase> subscriptionsToBeCancelled=new LinkedList<DefaultSubscriptionBase>();
  final List<SubscriptionBaseEvent> cancelEvents=new LinkedList<SubscriptionBaseEvent>();
  try {
    subscriptionsToBeCancelled.add(subscription);
    cancelEvents.addAll(getEventsOnCancelPlan(subscription,effectiveDate,now,false,internalCallContext));
    if (subscription.getCategory() == ProductCategory.BASE) {
      subscriptionsToBeCancelled.addAll(computeAddOnsToCancel(cancelEvents,null,subscription.getBundleId(),effectiveDate,internalCallContext));
    }
    dao.cancelSubscriptions(subscriptionsToBeCancelled,cancelEvents,internalCallContext);
    final Catalog fullCatalog=catalogService.getFullCatalog(internalCallContext);
    subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId(),internalCallContext),fullCatalog);
    return subscription.getState() == EntitlementState.CANCELLED;
  }
 catch (  final CatalogApiException e) {
    throw new SubscriptionBaseApiException(e);
  }
}
