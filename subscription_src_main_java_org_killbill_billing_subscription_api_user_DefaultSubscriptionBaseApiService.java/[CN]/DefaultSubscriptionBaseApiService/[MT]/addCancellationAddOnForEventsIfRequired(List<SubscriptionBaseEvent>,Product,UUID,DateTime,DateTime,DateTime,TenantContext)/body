{
  final List<DefaultSubscriptionBase> subscriptionsToBeCancelled=new ArrayList<DefaultSubscriptionBase>();
  final InternalTenantContext internalCallContext=createTenantContextFromBundleId(bundleId,context);
  final List<SubscriptionBase> subscriptions=dao.getSubscriptions(bundleId,ImmutableList.<SubscriptionBaseEvent>of(),internalCallContext);
  for (  final SubscriptionBase subscription : subscriptions) {
    final DefaultSubscriptionBase cur=(DefaultSubscriptionBase)subscription;
    if (cur.getState() == EntitlementState.CANCELLED || cur.getCategory() != ProductCategory.ADD_ON) {
      continue;
    }
    final Plan addonCurrentPlan=cur.getCurrentPlan();
    if (baseProduct == null || addonUtils.isAddonIncluded(baseProduct,addonCurrentPlan) || !addonUtils.isAddonAvailable(baseProduct,addonCurrentPlan)) {
      final SubscriptionBaseEvent cancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(cur.getId()).setActiveVersion(cur.getActiveVersion()).setProcessedDate(processedDate).setEffectiveDate(effectiveDate).setRequestedDate(requestedDate).setFromDisk(true));
      subscriptionsToBeCancelled.add(cur);
      events.add(cancelEvent);
    }
  }
  return subscriptionsToBeCancelled;
}
