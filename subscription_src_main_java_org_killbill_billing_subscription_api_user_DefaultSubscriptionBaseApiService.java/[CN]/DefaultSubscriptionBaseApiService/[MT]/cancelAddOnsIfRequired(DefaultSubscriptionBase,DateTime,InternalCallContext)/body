{
  final DateTime now=clock.getUTCNow();
  if (effectiveDate.compareTo(now) > 0) {
    return 0;
  }
  final Product baseProduct=(baseSubscription.getState() == EntitlementState.CANCELLED) ? null : baseSubscription.getCurrentPlan().getProduct();
  final List<SubscriptionBase> subscriptions=dao.getSubscriptions(baseSubscription.getBundleId(),context);
  final List<DefaultSubscriptionBase> subscriptionsToBeCancelled=new LinkedList<DefaultSubscriptionBase>();
  final List<SubscriptionBaseEvent> cancelEvents=new LinkedList<SubscriptionBaseEvent>();
  for (  final SubscriptionBase subscription : subscriptions) {
    final DefaultSubscriptionBase cur=(DefaultSubscriptionBase)subscription;
    if (cur.getState() == EntitlementState.CANCELLED || cur.getCategory() != ProductCategory.ADD_ON) {
      continue;
    }
    final Plan addonCurrentPlan=cur.getCurrentPlan();
    if (baseProduct == null || addonUtils.isAddonIncluded(baseProduct,addonCurrentPlan) || !addonUtils.isAddonAvailable(baseProduct,addonCurrentPlan)) {
      final SubscriptionBaseEvent cancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(cur.getId()).setActiveVersion(cur.getActiveVersion()).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(now).setFromDisk(true));
      subscriptionsToBeCancelled.add(cur);
      cancelEvents.add(cancelEvent);
    }
  }
  dao.cancelSubscriptions(subscriptionsToBeCancelled,cancelEvents,context);
  return subscriptionsToBeCancelled.size();
}
