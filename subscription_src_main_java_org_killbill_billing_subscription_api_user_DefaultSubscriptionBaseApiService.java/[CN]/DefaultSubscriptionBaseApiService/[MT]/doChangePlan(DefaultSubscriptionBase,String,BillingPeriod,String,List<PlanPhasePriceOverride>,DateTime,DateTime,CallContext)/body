{
  final InternalCallContext internalCallContext=createCallContextFromBundleId(subscription.getBundleId(),context);
  final PlanPhasePriceOverridesWithCallContext overridesWithContext=new DefaultPlanPhasePriceOverridesWithCallContext(overrides,context);
  final Plan newPlan=catalogService.getFullCatalog(internalCallContext).findPlan(newProductName,newBillingPeriod,newPriceList,overridesWithContext,effectiveDate,subscription.getStartDate());
  final List<SubscriptionBaseEvent> changeEvents=getEventsOnChangePlan(subscription,newPlan,newPriceList,now,effectiveDate,now,false,internalCallContext);
  dao.changePlan(subscription,changeEvents,internalCallContext);
  subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId(),internalCallContext),catalogService.getFullCatalog(internalCallContext));
  if (subscription.getCategory() == ProductCategory.BASE) {
    final Product baseProduct=(subscription.getState() == EntitlementState.CANCELLED) ? null : subscription.getCurrentPlan().getProduct();
    cancelAddOnsIfRequired(baseProduct,subscription.getBundleId(),effectiveDate,context);
  }
  return effectiveDate;
}
