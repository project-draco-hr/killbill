{
  final List<DefaultSubscriptionBase> subscriptionsToBeCancelled=new LinkedList<DefaultSubscriptionBase>();
  final List<SubscriptionBaseEvent> cancelEvents=new LinkedList<SubscriptionBaseEvent>();
  try {
    for (    final DefaultSubscriptionBase subscription : subscriptions.keySet()) {
      final DateTime effectiveDate=subscriptions.get(subscription);
      validateEffectiveDate(subscription,effectiveDate);
      subscriptionsToBeCancelled.add(subscription);
      cancelEvents.addAll(getEventsOnCancelPlan(subscription,effectiveDate,now,false,internalCallContext));
      if (subscription.getCategory() == ProductCategory.BASE) {
        subscriptionsToBeCancelled.addAll(computeAddOnsToCancel(cancelEvents,null,subscription.getBundleId(),effectiveDate,internalCallContext));
      }
    }
    dao.cancelSubscriptions(subscriptionsToBeCancelled,cancelEvents,internalCallContext);
    boolean allSubscriptionsCancelled=true;
    for (    final DefaultSubscriptionBase subscription : subscriptions.keySet()) {
      final Catalog fullCatalog=catalogService.getFullCatalog(internalCallContext);
      subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId(),internalCallContext),fullCatalog);
      allSubscriptionsCancelled=allSubscriptionsCancelled && (subscription.getState() == EntitlementState.CANCELLED);
    }
    return allSubscriptionsCancelled;
  }
 catch (  final CatalogApiException e) {
    throw new SubscriptionBaseApiException(e);
  }
}
