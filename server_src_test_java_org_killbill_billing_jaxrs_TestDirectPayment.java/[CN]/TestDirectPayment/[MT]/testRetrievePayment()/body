{
  final Account account=createAccountWithDefaultPaymentMethod();
  final DirectTransaction transaction=new DirectTransaction();
  transaction.setAmount(BigDecimal.TEN);
  transaction.setCurrency(account.getCurrency());
  transaction.setExternalKey("foo");
  transaction.setTransactionType("AUTHORIZE");
  final DirectPayment retrievedPaymentJson=killBillClient.createDirectPayment(account.getAccountId(),transaction,createdBy,reason,comment);
  assertEquals(retrievedPaymentJson.getAccountId(),account.getAccountId());
  Assert.assertNotNull(retrievedPaymentJson.getDirectPaymentId());
  Assert.assertNotNull(retrievedPaymentJson.getPaymentNumber());
  assertEquals(retrievedPaymentJson.getAuthAmount().compareTo(BigDecimal.TEN),0);
  assertEquals(retrievedPaymentJson.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(retrievedPaymentJson.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(retrievedPaymentJson.getCurrency(),account.getCurrency());
  assertEquals(retrievedPaymentJson.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(retrievedPaymentJson.getTransactions().size(),1);
  assertEquals(retrievedPaymentJson.getTransactions().get(0).getDirectPaymentId(),retrievedPaymentJson.getDirectPaymentId());
  Assert.assertNotNull(retrievedPaymentJson.getTransactions().get(0).getDirectTransactionId());
  assertEquals(retrievedPaymentJson.getTransactions().get(0).getTransactionType(),"AUTHORIZE");
  assertEquals(retrievedPaymentJson.getTransactions().get(0).getStatus(),"SUCCESS");
  assertEquals(retrievedPaymentJson.getTransactions().get(0).getAmount().compareTo(BigDecimal.TEN),0);
  assertEquals(retrievedPaymentJson.getTransactions().get(0).getExternalKey(),"foo");
}
