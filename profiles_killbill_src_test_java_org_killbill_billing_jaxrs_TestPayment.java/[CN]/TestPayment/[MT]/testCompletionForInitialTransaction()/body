{
  final Account account=createAccountWithDefaultPaymentMethod();
  final UUID paymentMethodId=account.getPaymentMethodId();
  final BigDecimal amount=BigDecimal.TEN;
  final String pending=PaymentPluginStatus.PENDING.toString();
  final ImmutableMap<String,String> pluginProperties=ImmutableMap.<String,String>of(MockPaymentProviderPlugin.PLUGIN_PROPERTY_PAYMENT_PLUGIN_STATUS_OVERRIDE,pending);
  int paymentNb=0;
  for (  final TransactionType transactionType : ImmutableList.<TransactionType>of(TransactionType.AUTHORIZE,TransactionType.PURCHASE,TransactionType.CREDIT)) {
    final BigDecimal authAmount=BigDecimal.ZERO;
    final String paymentExternalKey=UUID.randomUUID().toString();
    final String authTransactionExternalKey=UUID.randomUUID().toString();
    paymentNb++;
    final Payment initialPayment=createVerifyTransaction(account,paymentMethodId,paymentExternalKey,authTransactionExternalKey,transactionType,pending,amount,authAmount,pluginProperties,paymentNb);
    final PaymentTransaction authPaymentTransaction=initialPayment.getTransactions().get(0);
    final PaymentTransaction completeTransactionByPaymentId=new PaymentTransaction();
    completeTransactionByPaymentId.setPaymentId(initialPayment.getPaymentId());
    final Payment completedPaymentByPaymentId=killBillClient.completePayment(completeTransactionByPaymentId,pluginProperties,basicRequestOptions());
    verifyPayment(account,paymentMethodId,completedPaymentByPaymentId,paymentExternalKey,authTransactionExternalKey,transactionType.toString(),pending,amount,authAmount,BigDecimal.ZERO,BigDecimal.ZERO,1,paymentNb);
    final PaymentTransaction completeTransactionByPaymentExternalKey=new PaymentTransaction();
    completeTransactionByPaymentExternalKey.setPaymentExternalKey(initialPayment.getPaymentExternalKey());
    final Payment completedPaymentByExternalKey=killBillClient.completePayment(completeTransactionByPaymentExternalKey,pluginProperties,basicRequestOptions());
    verifyPayment(account,paymentMethodId,completedPaymentByExternalKey,paymentExternalKey,authTransactionExternalKey,transactionType.toString(),pending,amount,authAmount,BigDecimal.ZERO,BigDecimal.ZERO,1,paymentNb);
    final PaymentTransaction completeTransactionWithTypeAndKey=new PaymentTransaction();
    completeTransactionWithTypeAndKey.setPaymentId(initialPayment.getPaymentId());
    completeTransactionWithTypeAndKey.setTransactionExternalKey(authPaymentTransaction.getTransactionExternalKey());
    final Payment completedPaymentByTypeAndKey=killBillClient.completePayment(completeTransactionWithTypeAndKey,pluginProperties,basicRequestOptions());
    verifyPayment(account,paymentMethodId,completedPaymentByTypeAndKey,paymentExternalKey,authTransactionExternalKey,transactionType.toString(),pending,amount,authAmount,BigDecimal.ZERO,BigDecimal.ZERO,1,paymentNb);
    final PaymentTransaction completeTransactionWithTypeAndId=new PaymentTransaction();
    completeTransactionWithTypeAndId.setPaymentId(initialPayment.getPaymentId());
    completeTransactionWithTypeAndId.setTransactionId(authPaymentTransaction.getTransactionId());
    final Payment completedPaymentByTypeAndId=killBillClient.completePayment(completeTransactionWithTypeAndId,pluginProperties,basicRequestOptions());
    verifyPayment(account,paymentMethodId,completedPaymentByTypeAndId,paymentExternalKey,authTransactionExternalKey,transactionType.toString(),pending,amount,authAmount,BigDecimal.ZERO,BigDecimal.ZERO,1,paymentNb);
  }
}
