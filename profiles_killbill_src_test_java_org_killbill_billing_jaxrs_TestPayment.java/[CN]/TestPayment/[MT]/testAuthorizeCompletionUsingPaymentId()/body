{
  final Account account=createAccountWithDefaultPaymentMethod();
  final UUID paymentMethodId=account.getPaymentMethodId();
  final BigDecimal amount=BigDecimal.TEN;
  final String pending=PaymentPluginStatus.PENDING.toString();
  final ImmutableMap<String,String> pendingPluginProperties=ImmutableMap.<String,String>of(MockPaymentProviderPlugin.PLUGIN_PROPERTY_PAYMENT_PLUGIN_STATUS_OVERRIDE,pending);
  final ImmutableMap<String,String> pluginProperties=ImmutableMap.of();
  TransactionType transactionType=TransactionType.AUTHORIZE;
  final String paymentExternalKey=UUID.randomUUID().toString();
  final String authTransactionExternalKey=UUID.randomUUID().toString();
  final Payment initialPayment=createVerifyTransaction(account,paymentMethodId,paymentExternalKey,authTransactionExternalKey,transactionType,pending,amount,BigDecimal.ZERO,pendingPluginProperties,1);
  final PaymentTransaction completeTransactionByPaymentId=new PaymentTransaction();
  completeTransactionByPaymentId.setPaymentId(initialPayment.getPaymentId());
  final Payment completedPaymentByPaymentId=killBillClient.completePayment(completeTransactionByPaymentId,pluginProperties,createdBy,reason,comment);
  verifyPayment(account,paymentMethodId,completedPaymentByPaymentId,paymentExternalKey,authTransactionExternalKey,transactionType.toString(),TransactionStatus.SUCCESS.name(),amount,amount,BigDecimal.ZERO,BigDecimal.ZERO,1,1);
}
