{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  busHandler.pushExpectedEvents(NextEvent.TAG,NextEvent.BLOCK);
  tagUserApi.addTag(account.getId(),ObjectType.ACCOUNT,ControlTagType.OVERDUE_ENFORCEMENT_OFF.getId(),callContext);
  assertListenerStatus();
  paymentPlugin.makeAllInvoicesFailWithError(true);
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  bundle=subscriptionApi.getSubscriptionBundle(baseEntitlement.getBundleId(),callContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,6,30),callContext);
  addDaysAndCheckForCompletion(6);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  busHandler.pushExpectedEvents(NextEvent.TAG,NextEvent.BLOCK);
  tagUserApi.removeTag(account.getId(),ObjectType.ACCOUNT,ControlTagType.OVERDUE_ENFORCEMENT_OFF.getId(),callContext);
  assertListenerStatus();
  checkODState("OD1");
}
