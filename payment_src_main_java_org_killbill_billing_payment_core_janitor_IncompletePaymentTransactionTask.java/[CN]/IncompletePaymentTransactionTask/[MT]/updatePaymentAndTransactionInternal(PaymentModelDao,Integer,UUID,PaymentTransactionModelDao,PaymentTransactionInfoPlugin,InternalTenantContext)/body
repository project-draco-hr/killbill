{
  final CallContext callContext=createCallContext("IncompletePaymentTransactionTask",internalTenantContext);
  final TransactionStatus transactionStatus=computeNewTransactionStatusFromPaymentTransactionInfoPlugin(paymentTransactionInfoPlugin,paymentTransaction.getTransactionStatus());
  final String newPaymentState;
switch (transactionStatus) {
case PENDING:
    newPaymentState=paymentStateMachineHelper.getPendingStateForTransaction(paymentTransaction.getTransactionType());
  break;
case SUCCESS:
newPaymentState=paymentStateMachineHelper.getSuccessfulStateForTransaction(paymentTransaction.getTransactionType());
break;
case PAYMENT_FAILURE:
newPaymentState=paymentStateMachineHelper.getFailureStateForTransaction(paymentTransaction.getTransactionType());
break;
case PLUGIN_FAILURE:
newPaymentState=paymentStateMachineHelper.getErroredStateForTransaction(paymentTransaction.getTransactionType());
break;
case UNKNOWN:
default :
if (transactionStatus != paymentTransaction.getTransactionStatus()) {
log.info("Unable to repair paymentId='{}', paymentTransactionId='{}', currentTransactionStatus='{}', newTransactionStatus='{}'",payment.getId(),paymentTransaction.getId(),paymentTransaction.getTransactionStatus(),transactionStatus);
}
insertNewNotificationForUnresolvedTransactionIfNeeded(paymentTransaction.getId(),attemptNumber,userToken,internalTenantContext.getAccountRecordId(),internalTenantContext.getTenantRecordId());
return false;
}
if (transactionStatus == paymentTransaction.getTransactionStatus()) {
log.debug("Janitor IncompletePaymentTransactionTask repairing payment {}, transaction {}, transitioning transactionStatus from {} -> {}",payment.getId(),paymentTransaction.getId(),paymentTransaction.getTransactionStatus(),transactionStatus);
insertNewNotificationForUnresolvedTransactionIfNeeded(paymentTransaction.getId(),attemptNumber,userToken,internalTenantContext.getAccountRecordId(),internalTenantContext.getTenantRecordId());
return false;
}
final String lastSuccessPaymentState=paymentStateMachineHelper.isSuccessState(newPaymentState) ? newPaymentState : null;
final BigDecimal processedAmount;
if (TransactionStatus.SUCCESS.equals(transactionStatus) || TransactionStatus.PENDING.equals(transactionStatus)) {
if (paymentTransactionInfoPlugin == null || paymentTransactionInfoPlugin.getAmount() == null) {
processedAmount=paymentTransaction.getProcessedAmount();
}
 else {
processedAmount=paymentTransactionInfoPlugin.getAmount();
}
}
 else {
processedAmount=BigDecimal.ZERO;
}
final Currency processedCurrency;
if (paymentTransactionInfoPlugin == null || paymentTransactionInfoPlugin.getCurrency() == null) {
processedCurrency=paymentTransaction.getProcessedCurrency();
}
 else {
processedCurrency=paymentTransactionInfoPlugin.getCurrency();
}
final String gatewayErrorCode=paymentTransactionInfoPlugin != null ? paymentTransactionInfoPlugin.getGatewayErrorCode() : paymentTransaction.getGatewayErrorCode();
final String gatewayError=paymentTransactionInfoPlugin != null ? paymentTransactionInfoPlugin.getGatewayError() : paymentTransaction.getGatewayErrorMsg();
log.info("Repairing paymentId='{}', paymentTransactionId='{}', currentTransactionStatus='{}', newTransactionStatus='{}'",payment.getId(),paymentTransaction.getId(),paymentTransaction.getTransactionStatus(),transactionStatus);
final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(payment.getAccountId(),callContext);
paymentDao.updatePaymentAndTransactionOnCompletion(payment.getAccountId(),payment.getId(),paymentTransaction.getTransactionType(),newPaymentState,lastSuccessPaymentState,paymentTransaction.getId(),transactionStatus,processedAmount,processedCurrency,gatewayErrorCode,gatewayError,internalCallContext);
return true;
}
