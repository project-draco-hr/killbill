{
  final InternalTenantContext internalTenantContext=internalCallContextFactory.createInternalTenantContext(tenantRecordId,accountRecordId);
  doJanitorOperationWithAccountLock(new JanitorIterationCallback(){
    @Override public Void doIteration(){
      final PaymentTransactionModelDao rehydratedPaymentTransaction=paymentDao.getPaymentTransaction(notificationKey.getUuidKey(),internalTenantContext);
      final TenantContext tenantContext=internalCallContextFactory.createTenantContext(internalTenantContext);
      final PaymentModelDao payment=paymentDao.getPayment(rehydratedPaymentTransaction.getPaymentId(),internalTenantContext);
      final PaymentMethodModelDao paymentMethod=paymentDao.getPaymentMethod(payment.getPaymentMethodId(),internalTenantContext);
      final PaymentPluginApi paymentPluginApi=getPaymentPluginApi(payment,paymentMethod.getPluginName());
      final PaymentTransactionInfoPlugin undefinedPaymentTransaction=new DefaultNoOpPaymentInfoPlugin(payment.getId(),rehydratedPaymentTransaction.getId(),rehydratedPaymentTransaction.getTransactionType(),rehydratedPaymentTransaction.getAmount(),rehydratedPaymentTransaction.getCurrency(),rehydratedPaymentTransaction.getCreatedDate(),rehydratedPaymentTransaction.getCreatedDate(),PaymentPluginStatus.UNDEFINED,null);
      PaymentTransactionInfoPlugin paymentTransactionInfoPlugin;
      try {
        final List<PaymentTransactionInfoPlugin> result=paymentPluginApi.getPaymentInfo(payment.getAccountId(),payment.getId(),ImmutableList.<PluginProperty>of(),tenantContext);
        paymentTransactionInfoPlugin=Iterables.tryFind(result,new Predicate<PaymentTransactionInfoPlugin>(){
          @Override public boolean apply(          final PaymentTransactionInfoPlugin input){
            return input.getKbTransactionPaymentId().equals(rehydratedPaymentTransaction.getId());
          }
        }
).or(new Supplier<PaymentTransactionInfoPlugin>(){
          @Override public PaymentTransactionInfoPlugin get(){
            return undefinedPaymentTransaction;
          }
        }
);
      }
 catch (      final Exception e) {
        paymentTransactionInfoPlugin=undefinedPaymentTransaction;
      }
      updatePaymentAndTransactionIfNeeded(payment,notificationKey.getAttemptNumber(),userToken,rehydratedPaymentTransaction,paymentTransactionInfoPlugin,internalTenantContext);
      return null;
    }
  }
,internalTenantContext);
}
