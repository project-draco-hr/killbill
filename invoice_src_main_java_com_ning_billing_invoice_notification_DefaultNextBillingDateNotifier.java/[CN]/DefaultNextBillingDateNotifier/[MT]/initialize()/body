{
  final NotificationConfig notificationConfig=new NotificationConfig(){
    @Override public long getSleepTimeMs(){
      return config.getSleepTimeMs();
    }
    @Override public boolean isNotificationProcessingOff(){
      return config.isNotificationProcessingOff();
    }
  }
;
  final NotificationQueueHandler notificationQueueHandler=new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationKey notificationKey,    final DateTime eventDate,    final Long accountRecordId,    final Long tenantRecordId){
      try {
        if (!(notificationKey instanceof NextBillingDateNotificationKey)) {
          log.error("Invoice service received an unexpected event type {}",notificationKey.getClass().getName());
          return;
        }
        final NextBillingDateNotificationKey key=(NextBillingDateNotificationKey)notificationKey;
        try {
          final Subscription subscription=entitlementUserApi.getSubscriptionFromId(key.getUuidKey(),callContextFactory.createTenantContext(null));
          if (subscription == null) {
            log.warn("Next Billing Date Notification Queue handled spurious notification (key: " + key + ")");
          }
 else {
            processEvent(key.getUuidKey(),eventDate);
          }
        }
 catch (        EntitlementUserApiException e) {
          log.warn("Next Billing Date Notification Queue handled spurious notification (key: " + key + ")",e);
        }
      }
 catch (      IllegalArgumentException e) {
        log.error("The key returned from the NextBillingNotificationQueue is not a valid UUID",e);
      }
    }
  }
;
  nextBillingQueue=notificationQueueService.createNotificationQueue(DefaultInvoiceService.INVOICE_SERVICE_NAME,NEXT_BILLING_DATE_NOTIFIER_QUEUE,notificationQueueHandler,notificationConfig);
}
