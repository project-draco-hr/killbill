{
  final DateTime now=new DateTime(DateTimeZone.UTC);
  final Account account=testHelper.createTestCreditCardAccount();
  final Invoice invoice=testHelper.createTestInvoice(account,now,Currency.USD);
  final BigDecimal amount=new BigDecimal("10.00");
  final UUID subscriptionId=UUID.randomUUID();
  invoice.addInvoiceItem(new RecurringInvoiceItem(invoice.getId(),account.getId(),subscriptionId,"test plan","test phase",now,now.plusMonths(1),amount,new BigDecimal("1.0"),Currency.USD));
  List<Either<PaymentError,PaymentInfo>> results=paymentApi.createPayment(account.getExternalKey(),Arrays.asList(invoice.getId().toString()));
  assertEquals(results.size(),1);
  assertTrue(results.get(0).isRight());
  PaymentInfo paymentInfo=results.get(0).getRight();
  assertNotNull(paymentInfo.getPaymentId());
  assertTrue(paymentInfo.getAmount().compareTo(amount) == 0);
  assertNotNull(paymentInfo.getPaymentNumber());
  assertFalse(paymentInfo.getStatus().equals("Error"));
  PaymentAttempt paymentAttempt=paymentApi.getPaymentAttemptForPaymentId(paymentInfo.getPaymentId());
  assertNotNull(paymentAttempt);
  assertNotNull(paymentAttempt.getPaymentAttemptId());
  assertEquals(paymentAttempt.getInvoiceId(),invoice.getId());
  assertTrue(paymentAttempt.getAmount().compareTo(amount) == 0);
  assertEquals(paymentAttempt.getCurrency(),Currency.USD);
  assertEquals(paymentAttempt.getPaymentId(),paymentInfo.getPaymentId());
  DateTime nowTruncated=now.withMillisOfSecond(0).withSecondOfMinute(0);
  DateTime paymentAttemptDateTruncated=paymentAttempt.getPaymentAttemptDate().withMillisOfSecond(0).withSecondOfMinute(0);
  assertEquals(paymentAttemptDateTruncated.compareTo(nowTruncated),0);
  List<PaymentInfo> paymentInfos=paymentApi.getPaymentInfo(Arrays.asList(invoice.getId().toString()));
  assertNotNull(paymentInfos);
  assertTrue(paymentInfos.size() > 0);
  PaymentInfo paymentInfoFromGet=paymentInfos.get(0);
  assertEquals(paymentInfo.getAmount(),paymentInfoFromGet.getAmount());
  assertEquals(paymentInfo.getRefundAmount(),paymentInfoFromGet.getRefundAmount());
  assertEquals(paymentInfo.getPaymentId(),paymentInfoFromGet.getPaymentId());
  assertEquals(paymentInfo.getPaymentNumber(),paymentInfoFromGet.getPaymentNumber());
  assertEquals(paymentInfo.getStatus(),paymentInfoFromGet.getStatus());
  assertEquals(paymentInfo.getBankIdentificationNumber(),paymentInfoFromGet.getBankIdentificationNumber());
  assertEquals(paymentInfo.getReferenceId(),paymentInfoFromGet.getReferenceId());
  assertEquals(paymentInfo.getPaymentMethodId(),paymentInfoFromGet.getPaymentMethodId());
  assertEquals(paymentInfo.getEffectiveDate(),paymentInfoFromGet.getEffectiveDate());
  List<PaymentAttempt> paymentAttemptsFromGet=paymentApi.getPaymentAttemptsForInvoiceId(invoice.getId().toString());
  assertEquals(paymentAttempt,paymentAttemptsFromGet.get(0));
}
