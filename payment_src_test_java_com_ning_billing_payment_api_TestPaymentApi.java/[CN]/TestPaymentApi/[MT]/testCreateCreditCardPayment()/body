{
  final DateTime now=new DateTime(DateTimeZone.UTC);
  final Account account=testHelper.createTestCreditCardAccount();
  final Invoice invoice=testHelper.createTestInvoice(account,now,Currency.USD);
  final BigDecimal amount=new BigDecimal("10.00");
  final UUID subscriptionId=UUID.randomUUID();
  invoice.add(new DefaultInvoiceItem(invoice.getId(),subscriptionId,now,now.plusMonths(1),"Test",amount,new BigDecimal("1.0"),Currency.USD));
  List<Either<PaymentError,PaymentInfo>> results=paymentApi.createPayment(account.getExternalKey(),Arrays.asList(invoice.getId().toString()));
  assertEquals(results.size(),1);
  assertTrue(results.get(0).isRight());
  PaymentInfo paymentInfo=results.get(0).getRight();
  assertNotNull(paymentInfo.getPaymentId());
  assertTrue(paymentInfo.getAmount().compareTo(amount) == 0);
  assertNotNull(paymentInfo.getPaymentNumber());
  assertFalse(paymentInfo.getStatus().equals("Error"));
  PaymentAttempt paymentAttempt=paymentApi.getPaymentAttemptForPaymentId(paymentInfo.getPaymentId());
  assertNotNull(paymentAttempt);
  assertNotNull(paymentAttempt.getPaymentAttemptId());
  assertEquals(paymentAttempt.getInvoiceId(),invoice.getId());
  assertTrue(paymentAttempt.getAmount().compareTo(amount) == 0);
  assertEquals(paymentAttempt.getCurrency(),Currency.USD);
  assertEquals(paymentAttempt.getPaymentId(),paymentInfo.getPaymentId());
  assertEquals(paymentAttempt.getPaymentAttemptDate().withMillisOfSecond(0).withSecondOfMinute(0),now.withMillisOfSecond(0).withSecondOfMinute(0));
}
