{
  final Account account=testHelper.createTestPayPalAccount();
  paymentApi.createPaymentProviderAccount(account,context);
  String accountKey=account.getExternalKey();
  PaypalPaymentMethodInfo paymentMethod1=new PaypalPaymentMethodInfo.Builder().setDefaultMethod(false).setBaid("12345").setEmail(account.getEmail()).build();
  Either<PaymentErrorEvent,String> paymentMethodIdOrError1=paymentApi.addPaymentMethod(accountKey,paymentMethod1,context);
  assertTrue(paymentMethodIdOrError1.isRight());
  assertNotNull(paymentMethodIdOrError1.getRight());
  PaypalPaymentMethodInfo paymentMethod2=new PaypalPaymentMethodInfo.Builder().setDefaultMethod(true).setBaid("12345").setEmail(account.getEmail()).build();
  Either<PaymentErrorEvent,String> paymentMethodIdOrError2=paymentApi.addPaymentMethod(accountKey,paymentMethod2,context);
  assertTrue(paymentMethodIdOrError2.isRight());
  assertNotNull(paymentMethodIdOrError2.getRight());
  Either<PaymentErrorEvent,List<PaymentMethodInfo>> paymentMethodsOrError=paymentApi.getPaymentMethods(accountKey);
  assertTrue(paymentMethodsOrError.isRight());
  Either<PaymentErrorEvent,Void> errorOrVoid1=paymentApi.deletePaymentMethod(accountKey,paymentMethodIdOrError1.getRight(),context);
  Either<PaymentErrorEvent,Void> errorOrVoid2=paymentApi.deletePaymentMethod(accountKey,paymentMethodIdOrError2.getRight(),context);
  assertTrue(errorOrVoid1.isRight());
  assertTrue(errorOrVoid2.isLeft());
}
