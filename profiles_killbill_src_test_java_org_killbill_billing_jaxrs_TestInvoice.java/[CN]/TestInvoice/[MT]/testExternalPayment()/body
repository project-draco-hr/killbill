{
  final Account accountJson=createAccountNoPMBundleAndSubscriptionAndWaitForFirstInvoice();
  final List<InvoicePayment> noPaymentsFromJson=killBillClient.getPaymentsForAccount(accountJson.getAccountId());
  assertEquals(noPaymentsFromJson.size(),1);
  final UUID initialPaymentId=noPaymentsFromJson.get(0).getPaymentId();
  final List<Invoice> invoices=killBillClient.getInvoicesForAccount(accountJson.getAccountId());
  assertEquals(invoices.size(),2);
  final UUID invoiceId=invoices.get(1).getInvoiceId();
  final InvoicePayment invoicePayment=new InvoicePayment();
  invoicePayment.setPurchasedAmount(BigDecimal.TEN);
  invoicePayment.setAccountId(accountJson.getAccountId());
  invoicePayment.setTargetInvoiceId(invoiceId);
  killBillClient.createInvoicePayment(invoicePayment,true,createdBy,reason,comment);
  final List<InvoicePayment> paymentsFromJson=killBillClient.getPaymentsForAccount(accountJson.getAccountId());
  assertEquals(paymentsFromJson.size(),2);
  Payment secondPayment=null;
  for (  final Payment cur : paymentsFromJson) {
    if (!cur.getPaymentId().equals(initialPaymentId)) {
      secondPayment=cur;
      break;
    }
  }
  assertNotNull(secondPayment);
  final UUID paymentMethodId=secondPayment.getPaymentMethodId();
  final PaymentMethod paymentMethodJson=killBillClient.getPaymentMethod(paymentMethodId);
  assertEquals(paymentMethodJson.getPaymentMethodId(),paymentMethodId);
  assertEquals(paymentMethodJson.getAccountId(),accountJson.getAccountId());
  assertEquals(paymentMethodJson.getPluginName(),ExternalPaymentProviderPlugin.PLUGIN_NAME);
  assertNull(paymentMethodJson.getPluginInfo());
}
