{
  final DateTime initialDate=new DateTime(2012,4,25,0,3,42,0);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final Account accountJson=createAccountWithPMBundleAndSubscriptionAndWaitForFirstInvoice();
  final List<Invoice> invoices=killBillClient.getInvoicesForAccount(accountJson.getAccountId(),true,false,AuditLevel.FULL);
  assertEquals(invoices.size(),2);
  for (  final Invoice invoiceJson : invoices) {
    Assert.assertEquals(invoiceJson.getAuditLogs().size(),1);
    final AuditLog auditLogJson=invoiceJson.getAuditLogs().get(0);
    Assert.assertEquals(auditLogJson.getChangeType(),"INSERT");
    Assert.assertEquals(auditLogJson.getChangedBy(),"SubscriptionBaseTransition");
    Assert.assertFalse(auditLogJson.getChangeDate().isBefore(initialDate));
    Assert.assertNotNull(auditLogJson.getUserToken());
    Assert.assertNull(auditLogJson.getReasonCode());
    Assert.assertNull(auditLogJson.getComments());
  }
  final Invoice invoiceJson=invoices.get(0);
  assertTrue(killBillClient.getInvoice(invoiceJson.getInvoiceId(),Boolean.FALSE).getItems().isEmpty());
  assertTrue(killBillClient.getInvoice(invoiceJson.getInvoiceNumber(),Boolean.FALSE).getItems().isEmpty());
  assertEquals(killBillClient.getInvoice(invoiceJson.getInvoiceId(),Boolean.TRUE).getItems().size(),invoiceJson.getItems().size());
  assertEquals(killBillClient.getInvoice(invoiceJson.getInvoiceNumber(),Boolean.TRUE).getItems().size(),invoiceJson.getItems().size());
  final Invoice firstInvoice=killBillClient.getInvoice(invoiceJson.getInvoiceId());
  assertEquals(firstInvoice,invoiceJson);
  final Invoice firstInvoiceByNumberJson=killBillClient.getInvoice(invoiceJson.getInvoiceNumber());
  assertEquals(firstInvoiceByNumberJson,invoiceJson);
  final Invoice dryRunInvoice=killBillClient.createDryRunInvoice(accountJson.getAccountId(),null,true,null,createdBy,reason,comment);
  assertEquals(dryRunInvoice.getBalance(),new BigDecimal("249.95"));
  assertEquals(dryRunInvoice.getTargetDate(),new LocalDate(2012,6,25));
  assertEquals(dryRunInvoice.getItems().size(),1);
  assertEquals(dryRunInvoice.getItems().get(0).getStartDate(),new LocalDate(2012,6,25));
  assertEquals(dryRunInvoice.getItems().get(0).getEndDate(),new LocalDate(2012,7,25));
  assertEquals(dryRunInvoice.getItems().get(0).getAmount(),new BigDecimal("249.95"));
  final LocalDate futureDate=dryRunInvoice.getTargetDate();
  killBillClient.createInvoice(accountJson.getAccountId(),futureDate,createdBy,reason,comment);
  final List<Invoice> newInvoiceList=killBillClient.getInvoicesForAccount(accountJson.getAccountId());
  assertEquals(newInvoiceList.size(),3);
}
