{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
      final InvoicePaymentSqlDao transactional=entitySqlDaoWrapperFactory.become(InvoicePaymentSqlDao.class);
      if (invoicePayment.getPaymentId() != null) {
        final List<InvoicePaymentModelDao> invoicePayments=transactional.getInvoicePayments(invoicePayment.getPaymentId().toString(),context);
        final InvoicePaymentModelDao existingAttempt=Iterables.tryFind(invoicePayments,new Predicate<InvoicePaymentModelDao>(){
          @Override public boolean apply(          final InvoicePaymentModelDao input){
            return input.getType() == InvoicePaymentType.ATTEMPT;
          }
        }
).orNull();
        if (existingAttempt == null) {
          transactional.create(invoicePayment,context);
        }
 else         if (!existingAttempt.getSuccess() && invoicePayment.getSuccess()) {
          transactional.updateAttempt(existingAttempt.getRecordId(),invoicePayment.getPaymentDate().toDate(),invoicePayment.getAmount(),invoicePayment.getCurrency(),invoicePayment.getProcessedCurrency(),context);
        }
      }
      final InvoiceSqlDao invoiceSqlDao=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
      final InvoiceModelDao invoice=invoiceSqlDao.getById(invoicePayment.getInvoiceId().toString(),context);
      final UUID accountId=invoice == null ? null : invoice.getAccountId();
      notifyBusOfInvoicePayment(entitySqlDaoWrapperFactory,invoicePayment,accountId,context.getUserToken(),context);
      return null;
    }
  }
);
}
