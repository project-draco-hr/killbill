{
  return transactionalSqlDao.execute(InvoiceApiException.class,new EntitySqlDaoTransactionWrapper<InvoicePaymentModelDao>(){
    @Override public InvoicePaymentModelDao inTransaction(    final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
      final InvoicePaymentSqlDao transactional=entitySqlDaoWrapperFactory.become(InvoicePaymentSqlDao.class);
      final List<InvoicePaymentModelDao> invoicePayments=transactional.getByPaymentId(paymentId.toString(),context);
      final InvoicePaymentModelDao invoicePayment=Iterables.tryFind(invoicePayments,new Predicate<InvoicePaymentModelDao>(){
        @Override public boolean apply(        final InvoicePaymentModelDao input){
          return input.getType() == InvoicePaymentType.ATTEMPT;
        }
      }
).orNull();
      if (invoicePayment == null) {
        throw new InvoiceApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT,paymentId);
      }
      Preconditions.checkArgument(invoicePayment.getCurrency() == currency,String.format("Invoice payment currency %s doesn't match chargeback currency %s",invoicePayment.getCurrency(),currency));
      final UUID invoicePaymentId=invoicePayment.getId();
      final BigDecimal maxChargedBackAmount=invoiceDaoHelper.getRemainingAmountPaidFromTransaction(invoicePaymentId,entitySqlDaoWrapperFactory,context);
      final BigDecimal requestedChargedBackAmount=(amount == null) ? maxChargedBackAmount : amount;
      if (requestedChargedBackAmount.compareTo(BigDecimal.ZERO) <= 0) {
        throw new InvoiceApiException(ErrorCode.CHARGE_BACK_AMOUNT_IS_NEGATIVE);
      }
      if (requestedChargedBackAmount.compareTo(maxChargedBackAmount) > 0) {
        throw new InvoiceApiException(ErrorCode.CHARGE_BACK_AMOUNT_TOO_HIGH,requestedChargedBackAmount,maxChargedBackAmount);
      }
      final InvoicePaymentModelDao payment=entitySqlDaoWrapperFactory.become(InvoicePaymentSqlDao.class).getById(invoicePaymentId.toString(),context);
      if (payment == null) {
        throw new InvoiceApiException(ErrorCode.INVOICE_PAYMENT_NOT_FOUND,invoicePaymentId.toString());
      }
      final InvoicePaymentModelDao chargeBack=new InvoicePaymentModelDao(UUIDs.randomUUID(),context.getCreatedDate(),InvoicePaymentType.CHARGED_BACK,payment.getInvoiceId(),payment.getPaymentId(),context.getCreatedDate(),requestedChargedBackAmount.negate(),payment.getCurrency(),payment.getProcessedCurrency(),null,payment.getId(),true);
      transactional.create(chargeBack,context);
      final UUID accountId=transactional.getAccountIdFromInvoicePaymentId(chargeBack.getId().toString(),context);
      cbaDao.addCBAComplexityFromTransaction(payment.getInvoiceId(),entitySqlDaoWrapperFactory,context);
      notifyBusOfInvoicePayment(entitySqlDaoWrapperFactory,chargeBack,accountId,context.getUserToken(),context);
      return chargeBack;
    }
  }
);
}
