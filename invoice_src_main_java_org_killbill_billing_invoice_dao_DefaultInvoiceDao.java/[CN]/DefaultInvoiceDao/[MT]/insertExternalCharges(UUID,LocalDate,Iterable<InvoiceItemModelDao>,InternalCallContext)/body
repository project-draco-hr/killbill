{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<List<InvoiceItemModelDao>>(){
    @Override public List<InvoiceItemModelDao> inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final InvoiceSqlDao transInvoiceDao=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
      final InvoiceItemSqlDao transInvoiceItemDao=entitySqlDaoWrapperFactory.become(InvoiceItemSqlDao.class);
      final Map<Currency,InvoiceModelDao> newInvoicesForExternalCharges=new HashMap<Currency,InvoiceModelDao>();
      final List<InvoiceItemModelDao> createdExternalCharges=new LinkedList<InvoiceItemModelDao>();
      final Collection<UUID> changedInvoices=new HashSet<UUID>();
      for (      final InvoiceItemModelDao charge : charges) {
        UUID invoiceIdForExternalCharge=charge.getInvoiceId();
        if (invoiceIdForExternalCharge == null) {
          final Currency currency=charge.getCurrency();
          if (newInvoicesForExternalCharges.get(currency) == null) {
            final InvoiceModelDao newInvoiceForExternalCharge=new InvoiceModelDao(accountId,effectiveDate,effectiveDate,currency);
            transInvoiceDao.create(newInvoiceForExternalCharge,context);
            newInvoicesForExternalCharges.put(currency,newInvoiceForExternalCharge);
          }
          invoiceIdForExternalCharge=newInvoicesForExternalCharges.get(currency).getId();
        }
        final InvoiceItemModelDao externalCharge=new InvoiceItemModelDao(context.getCreatedDate(),InvoiceItemType.EXTERNAL_CHARGE,invoiceIdForExternalCharge,accountId,charge.getBundleId(),null,charge.getDescription(),null,null,null,Objects.firstNonNull(charge.getStartDate(),effectiveDate),charge.getEndDate(),charge.getAmount(),null,charge.getCurrency(),null);
        transInvoiceItemDao.create(externalCharge,context);
        createdExternalCharges.add(externalCharge);
        changedInvoices.add(invoiceIdForExternalCharge);
      }
      cbaDao.doCBAComplexity(accountId,entitySqlDaoWrapperFactory,context);
      for (      final UUID invoiceId : changedInvoices) {
        notifyBusOfInvoiceAdjustment(entitySqlDaoWrapperFactory,invoiceId,accountId,context.getUserToken(),context);
      }
      return createdExternalCharges;
    }
  }
);
}
