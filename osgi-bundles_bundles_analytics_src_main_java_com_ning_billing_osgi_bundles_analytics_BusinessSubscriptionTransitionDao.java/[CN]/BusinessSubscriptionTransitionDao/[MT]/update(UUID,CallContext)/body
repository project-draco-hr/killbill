{
  final SubscriptionBundle bundle=getSubscriptionBundle(bundleId,context);
  final Collection<Subscription> subscriptions=getSubscriptionsForBundle(bundleId,context);
  final Account account=getAccount(bundle.getAccountId(),context);
  final Currency currency=account.getCurrency();
  sqlDao.inTransaction(new Transaction<Void,BusinessSubscriptionTransitionSqlDao>(){
    @Override public Void inTransaction(    final BusinessSubscriptionTransitionSqlDao transactional,    final TransactionStatus status) throws Exception {
      transactional.deleteTransitionsForBundle(bundleId.toString(),context);
      final ArrayList<BusinessSubscriptionTransitionModelDao> transitions=new ArrayList<BusinessSubscriptionTransitionModelDao>();
      for (      final Subscription subscription : subscriptions) {
        for (        final EffectiveSubscriptionInternalEvent event : entitlementApi.getAllTransitions(subscription,context)) {
          final BusinessSubscriptionEvent businessEvent=getBusinessSubscriptionFromEvent(event);
          if (businessEvent == null) {
            continue;
          }
          final BusinessSubscription prevSubscription=createPreviousBusinessSubscription(event,businessEvent,transitions,currency);
          final BusinessSubscription nextSubscription=createNextBusinessSubscription(event,businessEvent,currency);
          final BusinessSubscriptionTransitionModelDao transition=new BusinessSubscriptionTransitionModelDao(event.getTotalOrdering(),bundleId,bundle.getExternalKey(),bundle.getAccountId(),account.getExternalKey(),subscription.getId(),event.getRequestedTransitionTime(),businessEvent,prevSubscription,nextSubscription);
          transactional.createTransition(transition,context);
          transitions.add(transition);
          if (SubscriptionTransitionType.CANCEL.equals(event.getTransitionType())) {
            final BusinessSubscriptionTransitionModelDao systemCancelTransition=new BusinessSubscriptionTransitionModelDao(event.getTotalOrdering(),bundleId,bundle.getExternalKey(),bundle.getAccountId(),account.getExternalKey(),subscription.getId(),event.getEffectiveTransitionTime(),new BusinessSubscriptionEvent(BusinessSubscriptionEvent.EventType.SYSTEM_CANCEL,businessEvent.getCategory()),prevSubscription,nextSubscription);
            transactional.createTransition(systemCancelTransition,context);
            transitions.add(systemCancelTransition);
          }
        }
      }
      return null;
    }
  }
);
}
