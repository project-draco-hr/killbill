{
  final TenantContext tenantContext=context.createContext(request);
  final DateTime fromTimestamp;
  if (fromTimestampString != null) {
    fromTimestamp=DATE_TIME_FORMATTER.parseDateTime(fromTimestampString);
  }
 else {
    fromTimestamp=clock.getUTCNow().minusMonths(3);
  }
  final DateTime toTimestamp;
  if (toTimestampString != null) {
    toTimestamp=DATE_TIME_FORMATTER.parseDateTime(toTimestampString);
  }
 else {
    toTimestamp=clock.getUTCNow();
  }
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      if (categories != null && categories.size() > 0) {
        if (Strings.isNullOrEmpty(timeAggregationModeString)) {
          meterApi.getUsage(output,source,categories,fromTimestamp,toTimestamp,tenantContext);
        }
 else {
          final TimeAggregationMode timeAggregationMode=TimeAggregationMode.valueOf(timeAggregationModeString);
          meterApi.getUsage(output,timeAggregationMode,source,categories,fromTimestamp,toTimestamp,tenantContext);
        }
      }
 else {
        final Map<String,Collection<String>> metricsPerCategory=retrieveMetricsPerCategory(categoriesAndMetrics);
        if (Strings.isNullOrEmpty(timeAggregationModeString)) {
          meterApi.getUsage(output,source,metricsPerCategory,fromTimestamp,toTimestamp,tenantContext);
        }
 else {
          final TimeAggregationMode timeAggregationMode=TimeAggregationMode.valueOf(timeAggregationModeString);
          meterApi.getUsage(output,timeAggregationMode,source,metricsPerCategory,fromTimestamp,toTimestamp,tenantContext);
        }
      }
    }
  }
;
}
