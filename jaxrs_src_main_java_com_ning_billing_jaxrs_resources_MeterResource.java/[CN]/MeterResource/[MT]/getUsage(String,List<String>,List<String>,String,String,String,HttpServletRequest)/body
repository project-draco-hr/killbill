{
  final DateTime fromTimestamp=DATE_TIME_FORMATTER.parseDateTime(fromTimestampString);
  final DateTime toTimestamp=DATE_TIME_FORMATTER.parseDateTime(toTimestampString);
  final TenantContext tenantContext=context.createContext(request);
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      if (categories != null) {
        if (Strings.isNullOrEmpty(timeAggregationModeString)) {
          meterApi.getUsage(output,source,categories,fromTimestamp,toTimestamp,tenantContext);
        }
 else {
          final TimeAggregationMode timeAggregationMode=TimeAggregationMode.valueOf(timeAggregationModeString);
          meterApi.getUsage(output,timeAggregationMode,source,categories,fromTimestamp,toTimestamp,tenantContext);
        }
      }
 else {
        final Map<String,Collection<String>> metricsPerCategory=retrieveMetricsPerCategory(categoriesAndMetrics);
        if (Strings.isNullOrEmpty(timeAggregationModeString)) {
          meterApi.getUsage(output,source,metricsPerCategory,fromTimestamp,toTimestamp,tenantContext);
        }
 else {
          final TimeAggregationMode timeAggregationMode=TimeAggregationMode.valueOf(timeAggregationModeString);
          meterApi.getUsage(output,timeAggregationMode,source,metricsPerCategory,fromTimestamp,toTimestamp,tenantContext);
        }
      }
    }
  }
;
}
