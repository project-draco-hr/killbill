{
  super(id,createdDate,updatedDate);
  this.accountId=accountId;
  this.paymentMethodId=paymentMethodId;
  this.paymentNumber=paymentNumber;
  this.externalKey=externalKey;
  this.transactions=transactions;
  this.authAmount=getAmountForType(transactions,TransactionType.AUTHORIZE);
  this.captureAmount=getAmountForType(transactions,TransactionType.CAPTURE);
  this.purchasedAmount=getAmountForType(transactions,TransactionType.PURCHASE);
  this.creditAmount=getAmountForType(transactions,TransactionType.CREDIT);
  this.refundAmount=getAmountForType(transactions,TransactionType.REFUND);
  this.isVoided=Iterables.filter(transactions,new Predicate<PaymentTransaction>(){
    @Override public boolean apply(    final PaymentTransaction input){
      return input.getTransactionType() == TransactionType.VOID && TransactionStatus.SUCCESS.equals(input.getTransactionStatus());
    }
  }
).iterator().hasNext();
  this.currency=(transactions != null && !transactions.isEmpty()) ? transactions.get(0).getCurrency() : null;
}
