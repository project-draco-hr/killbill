{
  try {
    accountSqlDao.inTransaction(new Transaction<Void,AccountSqlDao>(){
      @Override public Void inTransaction(      final AccountSqlDao transactional,      final TransactionStatus status) throws EntityPersistenceException, Bus.EventBusException {
        final String accountId=account.getId().toString();
        final Account currentAccount=transactional.getById(accountId);
        if (currentAccount == null) {
          throw new EntityPersistenceException(ErrorCode.ACCOUNT_DOES_NOT_EXIST_FOR_ID,accountId);
        }
        final String currentKey=currentAccount.getExternalKey();
        if (!currentKey.equals(account.getExternalKey())) {
          throw new EntityPersistenceException(ErrorCode.ACCOUNT_CANNOT_CHANGE_EXTERNAL_KEY,currentKey);
        }
        transactional.update(account,context);
        final Long recordId=accountSqlDao.getRecordId(account.getId().toString());
        final EntityHistory<Account> history=new EntityHistory<Account>(account.getId(),recordId,account,ChangeType.INSERT);
        accountSqlDao.insertHistoryFromTransaction(history,context);
        final Long historyRecordId=accountSqlDao.getHistoryRecordId(recordId);
        final EntityAudit audit=new EntityAudit(TableName.ACCOUNT_HISTORY,historyRecordId,ChangeType.INSERT);
        accountSqlDao.insertAuditFromTransaction(audit,context);
        final AccountChangeEvent changeEvent=new DefaultAccountChangeEvent(account.getId(),context.getUserToken(),currentAccount,account);
        if (changeEvent.hasChanges()) {
          try {
            eventBus.postFromTransaction(changeEvent,transactional);
          }
 catch (          EventBusException e) {
            log.warn("Failed to post account change event for account " + account.getId(),e);
          }
        }
        return null;
      }
    }
);
  }
 catch (  RuntimeException re) {
    if (re.getCause() instanceof EntityPersistenceException) {
      throw (EntityPersistenceException)re.getCause();
    }
 else {
      throw re;
    }
  }
}
