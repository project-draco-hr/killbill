{
  final String key=account.getExternalKey();
  try {
    accountSqlDao.inTransaction(new Transaction<Void,AccountSqlDao>(){
      @Override public Void inTransaction(      final AccountSqlDao transactionalDao,      final TransactionStatus status) throws AccountApiException, Bus.EventBusException {
        Account currentAccount=transactionalDao.getAccountByKey(key);
        if (currentAccount != null) {
          throw new AccountApiException(ErrorCode.ACCOUNT_ALREADY_EXISTS,key);
        }
        transactionalDao.create(account,context);
        UUID historyId=UUID.randomUUID();
        accountSqlDao.insertAccountHistoryFromTransaction(account,historyId.toString(),ChangeType.INSERT,context);
        AuditSqlDao auditDao=accountSqlDao.become(AuditSqlDao.class);
        auditDao.insertAuditFromTransaction("account_history",historyId.toString(),ChangeType.INSERT,context);
        saveTagsFromWithinTransaction(account,transactionalDao,context);
        saveCustomFieldsFromWithinTransaction(account,transactionalDao,context);
        AccountCreationEvent creationEvent=new DefaultAccountCreationEvent(account,context.getUserToken());
        try {
          eventBus.postFromTransaction(creationEvent,transactionalDao);
        }
 catch (        EventBusException e) {
          log.warn("Failed to post account creation event for account " + account.getId(),e);
        }
        return null;
      }
    }
);
  }
 catch (  RuntimeException re) {
    if (re.getCause() instanceof EntityPersistenceException) {
      throw (EntityPersistenceException)re.getCause();
    }
 else     if (re.getCause() instanceof DataTruncation) {
      throw new EntityPersistenceException(ErrorCode.DATA_TRUNCATION,re.getCause().getMessage());
    }
 else {
      throw re;
    }
  }
}
