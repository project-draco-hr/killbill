{
  final List<AccountEmail> existingEmails=accountEmailSqlDao.getByAccountId(accountId.toString());
  final List<AccountEmail> updatedEmails=new ArrayList<AccountEmail>();
  Iterator<AccountEmail> existingEmailIterator=existingEmails.iterator();
  while (existingEmailIterator.hasNext()) {
    AccountEmail existingEmail=existingEmailIterator.next();
    Iterator<AccountEmail> newEmailIterator=emails.iterator();
    while (newEmailIterator.hasNext()) {
      AccountEmail newEmail=newEmailIterator.next();
      if (newEmail.getId().equals(existingEmail.getId())) {
        if (!newEmail.equals(existingEmail)) {
          updatedEmails.add(newEmail);
        }
        newEmailIterator.remove();
        existingEmailIterator.remove();
      }
    }
  }
  accountEmailSqlDao.inTransaction(new Transaction<Void,AccountEmailSqlDao>(){
    @Override public Void inTransaction(    AccountEmailSqlDao dao,    TransactionStatus transactionStatus) throws Exception {
      dao.create(emails,context);
      dao.update(updatedEmails,context);
      dao.delete(existingEmails,context);
      List<String> insertHistoryIdList=getIdList(emails.size());
      List<String> updateHistoryIdList=getIdList(updatedEmails.size());
      List<String> deleteHistoryIdList=getIdList(existingEmails.size());
      dao.insertAccountEmailHistoryFromTransaction(insertHistoryIdList,emails,ChangeType.INSERT,context);
      dao.insertAccountEmailHistoryFromTransaction(updateHistoryIdList,updatedEmails,ChangeType.UPDATE,context);
      dao.insertAccountEmailHistoryFromTransaction(deleteHistoryIdList,existingEmails,ChangeType.DELETE,context);
      AuditSqlDao auditSqlDao=dao.become(AuditSqlDao.class);
      auditSqlDao.insertAuditFromTransaction(ACCOUNT_EMAIL_HISTORY_TABLE,insertHistoryIdList,ChangeType.INSERT,context);
      auditSqlDao.insertAuditFromTransaction(ACCOUNT_EMAIL_HISTORY_TABLE,updateHistoryIdList,ChangeType.UPDATE,context);
      auditSqlDao.insertAuditFromTransaction(ACCOUNT_EMAIL_HISTORY_TABLE,deleteHistoryIdList,ChangeType.DELETE,context);
      return null;
    }
  }
);
}
