{
  try {
    transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
      @Override public Void inTransaction(      final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws EntityPersistenceException, InternalBus.EventBusException {
        final AccountSqlDao transactional=entitySqlDaoWrapperFactory.become(AccountSqlDao.class);
        final Account currentAccount=transactional.getById(accountId.toString(),context);
        if (currentAccount == null) {
          throw new EntityPersistenceException(ErrorCode.ACCOUNT_DOES_NOT_EXIST_FOR_ID,accountId);
        }
        final String thePaymentMethodId=paymentMethodId != null ? paymentMethodId.toString() : null;
        transactional.updatePaymentMethod(accountId.toString(),thePaymentMethodId,context);
        final Account account=transactional.getById(accountId.toString(),context);
        final AccountChangeInternalEvent changeEvent=new DefaultAccountChangeEvent(accountId,context.getUserToken(),currentAccount,account,context.getAccountRecordId(),context.getTenantRecordId());
        if (changeEvent.hasChanges()) {
          try {
            eventBus.postFromTransaction(changeEvent,transactional,context);
          }
 catch (          final EventBusException e) {
            log.warn("Failed to post account change event for account " + accountId,e);
          }
        }
        return null;
      }
    }
);
  }
 catch (  final RuntimeException re) {
    if (re.getCause() instanceof EntityPersistenceException) {
      throw (EntityPersistenceException)re.getCause();
    }
 else {
      throw re;
    }
  }
}
