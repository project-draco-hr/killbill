{
  final String key=account.getExternalKey();
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws AccountApiException, InternalBus.EventBusException {
      final AccountSqlDao transactionalDao=entitySqlDaoWrapperFactory.become(AccountSqlDao.class);
      final Account currentAccount=transactionalDao.getAccountByKey(key,context);
      if (currentAccount != null) {
        throw new AccountApiException(ErrorCode.ACCOUNT_ALREADY_EXISTS,key);
      }
      transactionalDao.create(account,context);
      final Long recordId=accountSqlDao.getRecordId(account.getId().toString(),context);
      final InternalCallContext rehydratedContext=internalCallContextFactory.createInternalCallContext(recordId,context);
      final AccountCreationInternalEvent creationEvent=new DefaultAccountCreationEvent(account,rehydratedContext.getUserToken(),context.getAccountRecordId(),context.getTenantRecordId());
      try {
        eventBus.postFromTransaction(creationEvent,entitySqlDaoWrapperFactory,rehydratedContext);
      }
 catch (      final EventBusException e) {
        log.warn("Failed to post account creation event for account " + account.getId(),e);
      }
      return null;
    }
  }
);
}
