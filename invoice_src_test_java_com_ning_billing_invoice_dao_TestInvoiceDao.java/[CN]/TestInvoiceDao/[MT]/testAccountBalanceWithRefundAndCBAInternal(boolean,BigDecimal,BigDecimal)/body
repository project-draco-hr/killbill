{
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final DateTime targetDate1=new DateTime(2011,10,6,0,0,0,0);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCNow(),targetDate1,Currency.USD);
  invoiceDao.create(invoice1,invoice1.getTargetDate().getDayOfMonth(),context);
  final DateTime startDate=new DateTime(2011,3,1,0,0,0,0);
  final DateTime endDate=startDate.plusMonths(1);
  final BigDecimal amount1=new BigDecimal("5.0");
  final BigDecimal rate1=new BigDecimal("20.0");
  final BigDecimal rate2=new BigDecimal("10.0");
  final FixedPriceInvoiceItem item1=new FixedPriceInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase A",startDate,endDate,amount1,Currency.USD);
  invoiceItemSqlDao.create(item1,context);
  BigDecimal balance=invoiceDao.getAccountBalance(accountId);
  assertEquals(balance.compareTo(new BigDecimal("5.00")),0);
  final RecurringInvoiceItem item2=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase B",startDate,endDate,rate1,rate1,Currency.USD);
  invoiceItemSqlDao.create(item2,context);
  balance=invoiceDao.getAccountBalance(accountId);
  assertEquals(balance.compareTo(new BigDecimal("25.00")),0);
  final UUID paymentId=UUID.randomUUID();
  final BigDecimal payment1=amount1.add(rate1);
  final InvoicePayment payment=new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,paymentId,invoice1.getId(),new DateTime(),payment1,Currency.USD);
  invoicePaymentDao.create(payment,context);
  balance=invoiceDao.getAccountBalance(accountId);
  assertEquals(balance.compareTo(new BigDecimal("0.00")),0);
  final RepairAdjInvoiceItem item2Repair=new RepairAdjInvoiceItem(invoice1.getId(),accountId,startDate,endDate,rate1.negate(),Currency.USD,item2.getId());
  final RecurringInvoiceItem item2Replace=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase B",startDate,endDate,rate2,rate2,Currency.USD);
  invoiceItemSqlDao.create(item2Repair,context);
  invoiceItemSqlDao.create(item2Replace,context);
  balance=invoiceDao.getAccountBalance(accountId);
  assertEquals(balance.compareTo(new BigDecimal("-10.00")),0);
  final CreditBalanceAdjInvoiceItem cbaItem=new CreditBalanceAdjInvoiceItem(invoice1.getId(),accountId,new DateTime(),balance.negate(),Currency.USD);
  invoiceItemSqlDao.create(cbaItem,context);
  balance=invoiceDao.getAccountBalance(accountId);
  assertEquals(balance.compareTo(new BigDecimal("-10.00")),0);
  BigDecimal cba=invoiceDao.getAccountCBA(accountId);
  assertEquals(cba.compareTo(new BigDecimal("10.00")),0);
  invoiceDao.createRefund(paymentId,refundAmount,withAdjustment,UUID.randomUUID(),context);
  balance=invoiceDao.getAccountBalance(accountId);
  assertEquals(balance.compareTo(expectedFinalBalance),0);
  cba=invoiceDao.getAccountCBA(accountId);
  final BigDecimal expectedFinalCBA=(expectedFinalBalance.compareTo(BigDecimal.ZERO) < 0) ? expectedFinalBalance.negate() : BigDecimal.ZERO;
  assertEquals(cba.compareTo(expectedFinalCBA),0);
}
