{
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate targetDate1=new LocalDate(2011,10,6);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate1,Currency.USD);
  invoiceDao.create(invoice1,invoice1.getTargetDate().getDayOfMonth(),true,internalCallContext);
  final LocalDate startDate=new LocalDate(2011,3,1);
  final LocalDate endDate=startDate.plusMonths(1);
  final BigDecimal amount1=new BigDecimal("5.0");
  final BigDecimal rate1=new BigDecimal("20.0");
  final BigDecimal rate2=new BigDecimal("10.0");
  final FixedPriceInvoiceItem item1=new FixedPriceInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase A",startDate,amount1,Currency.USD);
  invoiceItemSqlDao.create(item1,internalCallContext);
  BigDecimal balance=invoiceDao.getAccountBalance(accountId,internalCallContext);
  assertEquals(balance.compareTo(new BigDecimal("5.00")),0);
  final RecurringInvoiceItem item2=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase B",startDate,endDate,rate1,rate1,Currency.USD);
  invoiceItemSqlDao.create(item2,internalCallContext);
  balance=invoiceDao.getAccountBalance(accountId,internalCallContext);
  assertEquals(balance.compareTo(new BigDecimal("25.00")),0);
  final UUID paymentId=UUID.randomUUID();
  final BigDecimal payment1=amount1.add(rate1);
  final InvoicePayment payment=new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,paymentId,invoice1.getId(),new DateTime(),payment1,Currency.USD);
  invoicePaymentDao.create(payment,internalCallContext);
  balance=invoiceDao.getAccountBalance(accountId,internalCallContext);
  assertEquals(balance.compareTo(new BigDecimal("0.00")),0);
  final RepairAdjInvoiceItem item2Repair=new RepairAdjInvoiceItem(invoice1.getId(),accountId,startDate,endDate,rate1.negate(),Currency.USD,item2.getId());
  final RecurringInvoiceItem item2Replace=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase B",startDate,endDate,rate2,rate2,Currency.USD);
  invoiceItemSqlDao.create(item2Repair,internalCallContext);
  invoiceItemSqlDao.create(item2Replace,internalCallContext);
  balance=invoiceDao.getAccountBalance(accountId,internalCallContext);
  assertEquals(balance.compareTo(new BigDecimal("-10.00")),0);
  final CreditBalanceAdjInvoiceItem cbaItem=new CreditBalanceAdjInvoiceItem(invoice1.getId(),accountId,new LocalDate(),balance.negate(),Currency.USD);
  invoiceItemSqlDao.create(cbaItem,internalCallContext);
  balance=invoiceDao.getAccountBalance(accountId,internalCallContext);
  assertEquals(balance.compareTo(new BigDecimal("-10.00")),0);
  BigDecimal cba=invoiceDao.getAccountCBA(accountId,internalCallContext);
  assertEquals(cba.compareTo(new BigDecimal("10.00")),0);
  invoiceDao.createRefund(paymentId,refundAmount,withAdjustment,ImmutableMap.<UUID,BigDecimal>of(),UUID.randomUUID(),internalCallContext);
  balance=invoiceDao.getAccountBalance(accountId,internalCallContext);
  assertEquals(balance.compareTo(expectedFinalBalance),0);
  cba=invoiceDao.getAccountCBA(accountId,internalCallContext);
  assertEquals(cba.compareTo(new BigDecimal("10.00")),0);
}
