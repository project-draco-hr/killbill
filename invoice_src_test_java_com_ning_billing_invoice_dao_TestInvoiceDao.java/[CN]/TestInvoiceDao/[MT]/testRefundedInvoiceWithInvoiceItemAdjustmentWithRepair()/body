{
  final UUID accountId=UUID.randomUUID();
  final UUID subscriptionId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate startDate=new LocalDate(2010,1,1);
  ((ClockMock)clock).setDay(startDate);
  final LocalDate recuringStartDate=clock.getUTCNow().plusDays(30).toLocalDate();
  final LocalDate recuringEndDate=clock.getUTCNow().plusDays(30).toLocalDate();
  final LocalDate targetDate=recuringStartDate.plusDays(1);
  final Invoice invoice=new DefaultInvoice(accountId,targetDate,targetDate,Currency.USD);
  final UUID invoiceId=invoice.getId();
  final InvoiceItem invoiceItem=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,"test-plan","test-phase-rec",recuringStartDate,recuringEndDate,new BigDecimal("239.00"),new BigDecimal("239.00"),Currency.USD);
  invoice.addInvoiceItem(invoiceItem);
  invoiceDao.create(invoice,invoice.getTargetDate().getDayOfMonth(),true,context);
  ((ClockMock)clock).addDays(1);
  final BigDecimal paymentAmount=new BigDecimal("239.00");
  final UUID paymentId=UUID.randomUUID();
  invoiceDao.notifyOfPayment(new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,paymentId,invoiceId,clock.getUTCNow(),paymentAmount,Currency.USD),context);
  Map<UUID,BigDecimal> invoiceItemMap=new HashMap<UUID,BigDecimal>();
  invoiceItemMap.put(invoiceItem.getId(),new BigDecimal("239.00"));
  invoiceDao.createRefund(paymentId,paymentAmount,true,invoiceItemMap,UUID.randomUUID(),context);
  final Invoice savedInvoice=invoiceDao.getById(invoiceId);
  assertNotNull(savedInvoice);
  assertEquals(savedInvoice.getInvoiceItems().size(),2);
  final List<Invoice> invoices=new ArrayList<Invoice>();
  invoices.add(savedInvoice);
  final BillingEventSet events=new MockBillingEventSet();
  final Subscription subscription=getZombieSubscription();
  final Plan plan=Mockito.mock(Plan.class);
  Mockito.when(plan.getName()).thenReturn("plan");
  final PlanPhase phase1=Mockito.mock(PlanPhase.class);
  Mockito.when(phase1.getName()).thenReturn("plan-phase1");
  final PlanPhase phase2=Mockito.mock(PlanPhase.class);
  Mockito.when(phase2.getName()).thenReturn("plan-phase2");
  final BillingEvent event1=createMockBillingEvent(null,subscription,recuringStartDate.toDateTimeAtStartOfDay(),plan,phase1,null,TEN,Currency.USD,BillingPeriod.MONTHLY,1,BillingModeType.IN_ADVANCE,"new-event",1L,SubscriptionTransitionType.CREATE);
  events.add(event1);
  Invoice newInvoice=generator.generateInvoice(UUID.randomUUID(),events,invoices,targetDate,DateTimeZone.UTC,Currency.USD);
  invoiceDao.create(newInvoice,newInvoice.getTargetDate().getDayOfMonth(),true,context);
  final Invoice firstInvoice=invoiceDao.getById(invoiceId);
  assertNotNull(firstInvoice);
  assertEquals(firstInvoice.getInvoiceItems().size(),2);
}
