{
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final DateTime targetDate1=new DateTime(2011,10,6,0,0,0,0);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCNow(),targetDate1,Currency.USD);
  invoiceDao.create(invoice1,invoice1.getTargetDate().getDayOfMonth(),context);
  final DateTime startDate=new DateTime(2011,3,1,0,0,0,0);
  final DateTime endDate=startDate.plusMonths(1);
  final BigDecimal rate1=new BigDecimal("17.0");
  final BigDecimal rate2=new BigDecimal("42.0");
  final RecurringInvoiceItem item1=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase A",startDate,endDate,rate1,rate1,Currency.USD);
  invoiceItemSqlDao.create(item1,context);
  final RecurringInvoiceItem item2=new RecurringInvoiceItem(invoice1.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase B",startDate,endDate,rate2,rate2,Currency.USD);
  invoiceItemSqlDao.create(item2,context);
  DateTime upToDate;
  Collection<Invoice> invoices;
  upToDate=new DateTime(2011,1,1,0,0,0,0);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate);
  assertEquals(invoices.size(),0);
  upToDate=new DateTime(2012,1,1,0,0,0,0);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate);
  assertEquals(invoices.size(),1);
  final DateTime targetDate2=new DateTime(2011,7,1,0,0,0,0);
  final Invoice invoice2=new DefaultInvoice(accountId,clock.getUTCNow(),targetDate2,Currency.USD);
  invoiceDao.create(invoice2,invoice2.getTargetDate().getDayOfMonth(),context);
  final DateTime startDate2=new DateTime(2011,6,1,0,0,0,0);
  final DateTime endDate2=startDate2.plusMonths(3);
  final BigDecimal rate3=new BigDecimal("21.0");
  final RecurringInvoiceItem item3=new RecurringInvoiceItem(invoice2.getId(),accountId,bundleId,UUID.randomUUID(),"test plan","test phase C",startDate2,endDate2,rate3,rate3,Currency.USD);
  invoiceItemSqlDao.create(item3,context);
  upToDate=new DateTime(2011,1,1,0,0,0,0);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate);
  assertEquals(invoices.size(),0);
  upToDate=new DateTime(2012,1,1,0,0,0,0);
  invoices=invoiceDao.getUnpaidInvoicesByAccountId(accountId,upToDate);
  assertEquals(invoices.size(),2);
}
