{
  final UUID accountId=UUID.randomUUID();
  final Invoice invoice=new DefaultInvoice(accountId,clock.getUTCToday(),clock.getUTCToday(),Currency.USD);
  final UUID invoiceId=invoice.getId();
  final UUID subscriptionId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate startDate=new LocalDate(2010,1,1);
  final LocalDate endDate=new LocalDate(2010,4,1);
  final InvoiceItem invoiceItem=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,"test plan","test phase",startDate,endDate,new BigDecimal("21.00"),new BigDecimal("7.00"),Currency.USD);
  invoice.addInvoiceItem(invoiceItem);
  invoiceUtil.createInvoice(invoice,true,internalCallContext);
  final InvoiceModelDao savedInvoice=invoiceDao.getById(invoiceId,internalCallContext);
  assertNotNull(savedInvoice);
  assertEquals(InvoiceModelDaoHelper.getBalance(savedInvoice).compareTo(new BigDecimal("21.00")),0);
  assertEquals(savedInvoice.getInvoiceItems().size(),1);
  final BigDecimal paymentAmount=new BigDecimal("11.00");
  final UUID paymentId=UUID.randomUUID();
  final DefaultInvoicePayment defaultInvoicePayment=new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,paymentId,invoiceId,clock.getUTCNow().plusDays(12),paymentAmount,Currency.USD);
  invoiceDao.notifyOfPayment(new InvoicePaymentModelDao(defaultInvoicePayment),internalCallContext);
  final InvoiceModelDao retrievedInvoice=invoiceDao.getById(invoiceId,internalCallContext);
  assertNotNull(retrievedInvoice);
  assertEquals(retrievedInvoice.getInvoiceItems().size(),1);
  assertEquals(InvoiceModelDaoHelper.getBalance(retrievedInvoice).compareTo(new BigDecimal("10.00")),0);
}
