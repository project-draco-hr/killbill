{
  final UUID accountId=account.getId();
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),clock.getUTCToday(),Currency.USD);
  final InvoiceItem fixedItem1=new FixedPriceInvoiceItem(invoice1.getId(),invoice1.getAccountId(),null,null,UUID.randomUUID().toString(),UUID.randomUUID().toString(),clock.getUTCToday(),BigDecimal.TEN,Currency.USD);
  final RepairAdjInvoiceItem repairAdjInvoiceItem=new RepairAdjInvoiceItem(fixedItem1.getInvoiceId(),fixedItem1.getAccountId(),fixedItem1.getStartDate(),fixedItem1.getEndDate(),fixedItem1.getAmount().negate(),fixedItem1.getCurrency(),fixedItem1.getId());
  final CreditBalanceAdjInvoiceItem creditBalanceAdjInvoiceItem1=new CreditBalanceAdjInvoiceItem(fixedItem1.getInvoiceId(),fixedItem1.getAccountId(),fixedItem1.getStartDate(),fixedItem1.getAmount(),fixedItem1.getCurrency());
  final UUID paymentId=UUID.randomUUID();
  final DefaultInvoicePayment defaultInvoicePayment=new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,paymentId,invoice1.getId(),clock.getUTCNow().plusDays(12),new BigDecimal("10.0"),Currency.USD);
  invoiceDao.notifyOfPayment(new InvoicePaymentModelDao(defaultInvoicePayment),context);
  invoiceUtil.createInvoice(invoice1,true,context);
  invoiceUtil.createInvoiceItem(fixedItem1,context);
  invoiceUtil.createInvoiceItem(repairAdjInvoiceItem,context);
  invoiceUtil.createInvoiceItem(creditBalanceAdjInvoiceItem1,context);
  final DefaultInvoice invoice2=new DefaultInvoice(accountId,clock.getUTCToday(),clock.getUTCToday(),Currency.USD);
  final InvoiceItem fixedItem2=new FixedPriceInvoiceItem(invoice2.getId(),invoice1.getAccountId(),null,null,UUID.randomUUID().toString(),UUID.randomUUID().toString(),clock.getUTCToday(),new BigDecimal("5"),Currency.USD);
  final CreditBalanceAdjInvoiceItem creditBalanceAdjInvoiceItem2=new CreditBalanceAdjInvoiceItem(fixedItem2.getInvoiceId(),fixedItem2.getAccountId(),fixedItem2.getStartDate(),fixedItem2.getAmount().negate(),fixedItem2.getCurrency());
  invoiceUtil.createInvoice(invoice2,true,context);
  invoiceUtil.createInvoiceItem(fixedItem2,context);
  invoiceUtil.createInvoiceItem(creditBalanceAdjInvoiceItem2,context);
  Assert.assertEquals(invoiceDao.getAccountCBA(accountId,context).doubleValue(),5.00);
  invoiceUtil.verifyInvoice(invoice1.getId(),0.00,10.00);
  invoiceUtil.verifyInvoice(invoice2.getId(),0.00,-5.00);
  invoiceDao.createRefund(paymentId,new BigDecimal("10.0"),false,ImmutableMap.<UUID,BigDecimal>of(),UUID.randomUUID(),context);
  Assert.assertEquals(invoiceDao.getAccountCBA(accountId,context).doubleValue(),0.00);
  invoiceUtil.verifyInvoice(invoice1.getId(),5.00,5.00);
  invoiceUtil.verifyInvoice(invoice2.getId(),0.00,-5.00);
}
