{
  final UUID accountId=UUID.randomUUID();
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),clock.getUTCToday(),Currency.USD);
  final InvoiceItem fixedItem1=new FixedPriceInvoiceItem(invoice1.getId(),invoice1.getAccountId(),null,null,UUID.randomUUID().toString(),UUID.randomUUID().toString(),clock.getUTCToday(),BigDecimal.TEN,Currency.USD);
  final RepairAdjInvoiceItem repairAdjInvoiceItem=new RepairAdjInvoiceItem(fixedItem1.getInvoiceId(),fixedItem1.getAccountId(),fixedItem1.getStartDate(),fixedItem1.getEndDate(),fixedItem1.getAmount().negate(),fixedItem1.getCurrency(),fixedItem1.getId());
  final CreditBalanceAdjInvoiceItem creditBalanceAdjInvoiceItem1=new CreditBalanceAdjInvoiceItem(fixedItem1.getInvoiceId(),fixedItem1.getAccountId(),fixedItem1.getStartDate(),fixedItem1.getAmount(),fixedItem1.getCurrency());
  invoiceDao.create(invoice1,invoice1.getTargetDate().getDayOfMonth(),true,context);
  invoiceItemSqlDao.create(fixedItem1,context);
  invoiceItemSqlDao.create(repairAdjInvoiceItem,context);
  invoiceItemSqlDao.create(creditBalanceAdjInvoiceItem1,context);
  Assert.assertEquals(invoiceDao.getAccountCBA(accountId).doubleValue(),10.00);
  verifyInvoice(invoice1.getId(),10.00,10.00);
  invoiceDao.deleteCBA(accountId,invoice1.getId(),creditBalanceAdjInvoiceItem1.getId(),context);
  Assert.assertEquals(invoiceDao.getAccountCBA(accountId).doubleValue(),0.00);
  verifyInvoice(invoice1.getId(),0.00,0.00);
}
