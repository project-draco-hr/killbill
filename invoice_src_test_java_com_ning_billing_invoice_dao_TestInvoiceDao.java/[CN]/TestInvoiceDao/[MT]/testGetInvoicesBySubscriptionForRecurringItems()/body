{
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final UUID subscriptionId1=UUID.randomUUID();
  final BigDecimal rate1=new BigDecimal("17.0");
  final UUID subscriptionId2=UUID.randomUUID();
  final BigDecimal rate2=new BigDecimal("42.0");
  final UUID subscriptionId3=UUID.randomUUID();
  final BigDecimal rate3=new BigDecimal("3.0");
  final UUID subscriptionId4=UUID.randomUUID();
  final BigDecimal rate4=new BigDecimal("12.0");
  final LocalDate targetDate=new LocalDate(2011,5,23);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate,Currency.USD);
  createInvoice(invoice1,true,internalCallContext);
  final UUID invoiceId1=invoice1.getId();
  LocalDate startDate=new LocalDate(2011,3,1);
  LocalDate endDate=startDate.plusMonths(1);
  final RecurringInvoiceItem item1=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId1,"test plan","test A",startDate,endDate,rate1,rate1,Currency.USD);
  createInvoiceItem(item1,internalCallContext);
  final RecurringInvoiceItem item2=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId2,"test plan","test B",startDate,endDate,rate2,rate2,Currency.USD);
  createInvoiceItem(item2,internalCallContext);
  final RecurringInvoiceItem item3=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId3,"test plan","test C",startDate,endDate,rate3,rate3,Currency.USD);
  createInvoiceItem(item3,internalCallContext);
  final RecurringInvoiceItem item4=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId4,"test plan","test D",startDate,endDate,rate4,rate4,Currency.USD);
  createInvoiceItem(item4,internalCallContext);
  final DefaultInvoice invoice2=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate,Currency.USD);
  createInvoice(invoice2,true,internalCallContext);
  final UUID invoiceId2=invoice2.getId();
  startDate=endDate;
  endDate=startDate.plusMonths(1);
  final RecurringInvoiceItem item5=new RecurringInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId1,"test plan","test phase A",startDate,endDate,rate1,rate1,Currency.USD);
  createInvoiceItem(item5,internalCallContext);
  final RecurringInvoiceItem item6=new RecurringInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId2,"test plan","test phase B",startDate,endDate,rate2,rate2,Currency.USD);
  createInvoiceItem(item6,internalCallContext);
  final RecurringInvoiceItem item7=new RecurringInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId3,"test plan","test phase C",startDate,endDate,rate3,rate3,Currency.USD);
  createInvoiceItem(item7,internalCallContext);
  final List<InvoiceModelDao> items1=invoiceDao.getInvoicesBySubscription(subscriptionId1,internalCallContext);
  assertEquals(items1.size(),2);
  final List<InvoiceModelDao> items2=invoiceDao.getInvoicesBySubscription(subscriptionId2,internalCallContext);
  assertEquals(items2.size(),2);
  final List<InvoiceModelDao> items3=invoiceDao.getInvoicesBySubscription(subscriptionId3,internalCallContext);
  assertEquals(items3.size(),2);
  final List<InvoiceModelDao> items4=invoiceDao.getInvoicesBySubscription(subscriptionId4,internalCallContext);
  assertEquals(items4.size(),1);
}
