{
  final Subscription subscription=getZombieSubscription();
  final Plan plan=Mockito.mock(Plan.class);
  Mockito.when(plan.getName()).thenReturn("plan");
  final PlanPhase phase1=Mockito.mock(PlanPhase.class);
  Mockito.when(phase1.getName()).thenReturn("plan-phase1");
  final DateTime targetDate1=clock.getUTCNow();
  final Currency currency=Currency.USD;
  final BillingEvent event1=createMockBillingEvent(null,subscription,targetDate1,plan,phase1,null,TEN,currency,BillingPeriod.MONTHLY,31,BillingModeType.IN_ADVANCE,"testEvent1",1L,SubscriptionTransitionType.CHANGE);
  final BillingEventSet events=new MockBillingEventSet();
  events.add(event1);
  final Invoice invoice=generator.generateInvoice(UUID.randomUUID(),events,null,new LocalDate(targetDate1),DateTimeZone.UTC,Currency.USD);
  invoiceDao.create(invoice,invoice.getTargetDate().getDayOfMonth(),true,internalCallContext);
  invoiceDao.setWrittenOff(invoice.getId(),internalCallContext);
  final TagDao tagDao=new AuditedTagDao(dbi,tagEventBuilder,bus);
  final Map<String,Tag> tags=tagDao.loadEntities(invoice.getId(),ObjectType.INVOICE,internalCallContext);
  assertEquals(tags.size(),1);
  assertEquals(tags.values().iterator().next().getTagDefinitionId(),ControlTagType.WRITTEN_OFF.getId());
}
