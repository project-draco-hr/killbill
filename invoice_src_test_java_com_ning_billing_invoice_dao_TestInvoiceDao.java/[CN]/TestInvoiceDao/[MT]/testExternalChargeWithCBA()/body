{
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate targetDate1=new LocalDate(2011,10,6);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate1,Currency.USD);
  invoiceDao.create(invoice1,invoice1.getTargetDate().getDayOfMonth(),true,context);
  final CreditBalanceAdjInvoiceItem cbaItem=new CreditBalanceAdjInvoiceItem(invoice1.getId(),accountId,new LocalDate(),new BigDecimal("20.0"),Currency.USD);
  invoiceItemSqlDao.create(cbaItem,context);
  final InvoiceItem charge=invoiceDao.insertExternalCharge(accountId,null,bundleId,"bla",new BigDecimal("15.0"),clock.getUTCNow().toLocalDate(),Currency.USD,context);
  final Invoice newInvoice=invoiceDao.getById(charge.getInvoiceId());
  List<InvoiceItem> items=newInvoice.getInvoiceItems();
  assertEquals(items.size(),2);
  for (  InvoiceItem cur : items) {
    if (!cur.getId().equals(charge.getId())) {
      assertEquals(cur.getInvoiceItemType(),InvoiceItemType.CBA_ADJ);
      assertTrue(cur.getAmount().compareTo(new BigDecimal("-15.00")) == 0);
      break;
    }
  }
}
