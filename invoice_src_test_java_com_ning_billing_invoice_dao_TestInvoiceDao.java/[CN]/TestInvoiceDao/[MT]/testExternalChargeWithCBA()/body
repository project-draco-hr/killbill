{
  final UUID accountId=account.getId();
  final UUID bundleId=UUID.randomUUID();
  invoiceDao.insertCredit(accountId,null,new BigDecimal("20.0"),new LocalDate(),Currency.USD,context);
  final InvoiceItemModelDao charge=invoiceDao.insertExternalCharge(accountId,null,bundleId,"bla",new BigDecimal("15.0"),clock.getUTCNow().toLocalDate(),Currency.USD,context);
  final InvoiceModelDao newInvoice=invoiceDao.getById(charge.getInvoiceId(),context);
  final List<InvoiceItemModelDao> items=newInvoice.getInvoiceItems();
  assertEquals(items.size(),2);
  for (  final InvoiceItemModelDao cur : items) {
    if (!cur.getId().equals(charge.getId())) {
      assertEquals(cur.getType(),InvoiceItemType.CBA_ADJ);
      assertTrue(cur.getAmount().compareTo(new BigDecimal("-15.00")) == 0);
      break;
    }
  }
}
