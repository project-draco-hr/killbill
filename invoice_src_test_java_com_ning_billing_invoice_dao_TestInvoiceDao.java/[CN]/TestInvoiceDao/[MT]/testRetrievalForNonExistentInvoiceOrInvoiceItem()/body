{
  try {
    invoiceDao.getById(UUID.randomUUID(),internalCallContext);
    Assert.fail();
  }
 catch (  TransactionFailedException e) {
    Assert.assertTrue(e.getCause() instanceof InvoiceApiException);
    Assert.assertEquals(((InvoiceApiException)e.getCause()).getCode(),ErrorCode.INVOICE_NOT_FOUND.getCode());
  }
  try {
    invoiceDao.getByNumber(null,internalCallContext);
    Assert.fail();
  }
 catch (  InvoiceApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.INVOICE_INVALID_NUMBER.getCode());
  }
  try {
    invoiceDao.getByNumber(Integer.MIN_VALUE,internalCallContext);
    Assert.fail();
  }
 catch (  InvoiceApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.INVOICE_NUMBER_NOT_FOUND.getCode());
  }
  try {
    invoiceDao.getChargebackById(UUID.randomUUID(),internalCallContext);
    Assert.fail();
  }
 catch (  InvoiceApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.CHARGE_BACK_DOES_NOT_EXIST.getCode());
  }
  try {
    invoiceDao.getExternalChargeById(UUID.randomUUID(),internalCallContext);
    Assert.fail();
  }
 catch (  InvoiceApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.INVOICE_ITEM_NOT_FOUND.getCode());
  }
  try {
    invoiceDao.getCreditById(UUID.randomUUID(),internalCallContext);
    Assert.fail();
  }
 catch (  InvoiceApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.INVOICE_ITEM_NOT_FOUND.getCode());
  }
}
