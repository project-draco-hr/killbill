{
  final UUID accountId=UUID.randomUUID();
  final LocalDate targetDate1=new LocalDate(2011,10,6);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate1,Currency.USD);
  invoiceDao.create(invoice1,invoice1.getTargetDate().getDayOfMonth(),context);
  final LocalDate targetDate2=new LocalDate(2011,12,6);
  final Invoice invoice2=new DefaultInvoice(accountId,clock.getUTCToday(),targetDate2,Currency.USD);
  invoiceDao.create(invoice2,invoice2.getTargetDate().getDayOfMonth(),context);
  List<Invoice> invoices;
  invoices=invoiceDao.getInvoicesByAccount(accountId,new LocalDate(2011,1,1));
  assertEquals(invoices.size(),2);
  invoices=invoiceDao.getInvoicesByAccount(accountId,new LocalDate(2011,10,6));
  assertEquals(invoices.size(),2);
  invoices=invoiceDao.getInvoicesByAccount(accountId,new LocalDate(2011,10,11));
  assertEquals(invoices.size(),1);
  invoices=invoiceDao.getInvoicesByAccount(accountId,new LocalDate(2011,12,6));
  assertEquals(invoices.size(),1);
  invoices=invoiceDao.getInvoicesByAccount(accountId,new LocalDate(2012,1,1));
  assertEquals(invoices.size(),0);
}
