{
  final UUID accountId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final UUID subscriptionId1=UUID.randomUUID();
  final BigDecimal rate1=new BigDecimal("17.0");
  final UUID subscriptionId2=UUID.randomUUID();
  final BigDecimal rate2=new BigDecimal("42.0");
  final UUID subscriptionId3=UUID.randomUUID();
  final BigDecimal rate3=new BigDecimal("3.0");
  final UUID subscriptionId4=UUID.randomUUID();
  final BigDecimal rate4=new BigDecimal("12.0");
  final DateTime targetDate=new DateTime(2011,5,23,0,0,0,0);
  final Invoice invoice1=new DefaultInvoice(accountId,clock.getUTCNow(),targetDate,Currency.USD);
  invoiceDao.create(invoice1,context);
  final UUID invoiceId1=invoice1.getId();
  DateTime startDate=new DateTime(2011,3,1,0,0,0,0);
  DateTime endDate=startDate.plusMonths(1);
  final RecurringInvoiceItem recurringItem1=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId1,"test plan","test A",startDate,endDate,rate1,rate1,Currency.USD);
  invoiceItemSqlDao.create(recurringItem1,context);
  final RecurringInvoiceItem recurringItem2=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId2,"test plan","test B",startDate,endDate,rate2,rate2,Currency.USD);
  invoiceItemSqlDao.create(recurringItem2,context);
  final RecurringInvoiceItem recurringItem3=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId3,"test plan","test C",startDate,endDate,rate3,rate3,Currency.USD);
  invoiceItemSqlDao.create(recurringItem3,context);
  final RecurringInvoiceItem recurringItem4=new RecurringInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId4,"test plan","test D",startDate,endDate,rate4,rate4,Currency.USD);
  invoiceItemSqlDao.create(recurringItem4,context);
  final FixedPriceInvoiceItem fixedItem1=new FixedPriceInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId1,"test plan","test A",startDate,endDate,rate1,Currency.USD);
  invoiceItemSqlDao.create(fixedItem1,context);
  final FixedPriceInvoiceItem fixedItem2=new FixedPriceInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId2,"test plan","test B",startDate,endDate,rate2,Currency.USD);
  invoiceItemSqlDao.create(fixedItem2,context);
  final FixedPriceInvoiceItem fixedItem3=new FixedPriceInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId3,"test plan","test C",startDate,endDate,rate3,Currency.USD);
  invoiceItemSqlDao.create(fixedItem3,context);
  final FixedPriceInvoiceItem fixedItem4=new FixedPriceInvoiceItem(invoiceId1,accountId,bundleId,subscriptionId4,"test plan","test D",startDate,endDate,rate4,Currency.USD);
  invoiceItemSqlDao.create(fixedItem4,context);
  final DefaultInvoice invoice2=new DefaultInvoice(accountId,clock.getUTCNow(),targetDate,Currency.USD);
  invoiceDao.create(invoice2,context);
  final UUID invoiceId2=invoice2.getId();
  startDate=endDate;
  endDate=startDate.plusMonths(1);
  final RecurringInvoiceItem recurringItem5=new RecurringInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId1,"test plan","test phase A",startDate,endDate,rate1,rate1,Currency.USD);
  invoiceItemSqlDao.create(recurringItem5,context);
  final RecurringInvoiceItem recurringItem6=new RecurringInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId2,"test plan","test phase B",startDate,endDate,rate2,rate2,Currency.USD);
  invoiceItemSqlDao.create(recurringItem6,context);
  final RecurringInvoiceItem recurringItem7=new RecurringInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId3,"test plan","test phase C",startDate,endDate,rate3,rate3,Currency.USD);
  invoiceItemSqlDao.create(recurringItem7,context);
  final FixedPriceInvoiceItem fixedItem5=new FixedPriceInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId1,"test plan","test phase A",startDate,endDate,rate1,Currency.USD);
  invoiceItemSqlDao.create(fixedItem5,context);
  final FixedPriceInvoiceItem fixedItem6=new FixedPriceInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId2,"test plan","test phase B",startDate,endDate,rate2,Currency.USD);
  invoiceItemSqlDao.create(fixedItem6,context);
  final FixedPriceInvoiceItem fixedItem7=new FixedPriceInvoiceItem(invoiceId2,accountId,bundleId,subscriptionId3,"test plan","test phase C",startDate,endDate,rate3,Currency.USD);
  invoiceItemSqlDao.create(fixedItem7,context);
  final List<Invoice> items1=invoiceDao.getInvoicesBySubscription(subscriptionId1);
  assertEquals(items1.size(),4);
  final List<Invoice> items2=invoiceDao.getInvoicesBySubscription(subscriptionId2);
  assertEquals(items2.size(),4);
  final List<Invoice> items3=invoiceDao.getInvoicesBySubscription(subscriptionId3);
  assertEquals(items3.size(),4);
  final List<Invoice> items4=invoiceDao.getInvoicesBySubscription(subscriptionId4);
  assertEquals(items4.size(),2);
}
