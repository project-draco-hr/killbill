{
  final Currency currency=Currency.USD;
  final DateTime targetDate1=clock.getUTCNow().plusMonths(1);
  final DateTime targetDate2=clock.getUTCNow().plusMonths(2);
  final Subscription subscription=getZombieSubscription();
  final Plan plan=Mockito.mock(Plan.class);
  Mockito.when(plan.getName()).thenReturn("plan");
  final PlanPhase phase1=Mockito.mock(PlanPhase.class);
  Mockito.when(phase1.getName()).thenReturn("plan-phase1");
  final PlanPhase phase2=Mockito.mock(PlanPhase.class);
  Mockito.when(phase2.getName()).thenReturn("plan-phase2");
  final BillingEventSet events=new MockBillingEventSet();
  final List<Invoice> invoices=new ArrayList<Invoice>();
  final BillingEvent event1=createMockBillingEvent(null,subscription,targetDate1,plan,phase1,null,TEN,currency,BillingPeriod.MONTHLY,31,BillingModeType.IN_ADVANCE,"testEvent1",1L,SubscriptionTransitionType.CHANGE);
  events.add(event1);
  Invoice invoice1=generator.generateInvoice(UUID.randomUUID(),events,invoices,new LocalDate(targetDate1),DateTimeZone.UTC,Currency.USD);
  invoices.add(invoice1);
  invoiceDao.create(invoice1,invoice1.getTargetDate().getDayOfMonth(),true,internalCallContext);
  invoice1=invoiceDao.getById(invoice1.getId(),internalCallContext);
  assertNotNull(invoice1.getInvoiceNumber());
  final BillingEvent event2=createMockBillingEvent(null,subscription,targetDate1,plan,phase2,null,TWENTY,currency,BillingPeriod.MONTHLY,31,BillingModeType.IN_ADVANCE,"testEvent2",2L,SubscriptionTransitionType.CHANGE);
  events.add(event2);
  Invoice invoice2=generator.generateInvoice(UUID.randomUUID(),events,invoices,new LocalDate(targetDate2),DateTimeZone.UTC,Currency.USD);
  invoiceDao.create(invoice2,invoice2.getTargetDate().getDayOfMonth(),true,internalCallContext);
  invoice2=invoiceDao.getById(invoice2.getId(),internalCallContext);
  assertNotNull(invoice2.getInvoiceNumber());
}
