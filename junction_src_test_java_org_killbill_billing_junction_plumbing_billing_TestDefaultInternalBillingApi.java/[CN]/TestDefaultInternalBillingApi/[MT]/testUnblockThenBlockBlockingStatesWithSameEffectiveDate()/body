{
  final LocalDate initialDate=new LocalDate(2013,8,7);
  clock.setDay(initialDate);
  final Account account=createAccount(getAccountData(7));
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final Entitlement entitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,account.getExternalKey(),null,initialDate,ImmutableList.<PluginProperty>of(),callContext);
  final SubscriptionBase subscription=subscriptionInternalApi.getSubscriptionFromId(entitlement.getId(),internalCallContext);
  assertListenerStatus();
  final DateTime block1Date=clock.getUTCNow();
  testListener.pushExpectedEvents(NextEvent.BLOCK);
  final DefaultBlockingState state1=new DefaultBlockingState(account.getId(),BlockingStateType.ACCOUNT,DefaultEntitlementApi.ENT_STATE_BLOCKED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,true,block1Date);
  blockingInternalApi.setBlockingState(state1,internalCallContext);
  clock.addDays(1);
  final DateTime block2Date=clock.getUTCNow();
  testListener.pushExpectedEvents(NextEvent.BLOCK,NextEvent.BLOCK);
  final DefaultBlockingState state2=new DefaultBlockingState(account.getId(),BlockingStateType.ACCOUNT,DefaultEntitlementApi.ENT_STATE_CLEAR,EntitlementService.ENTITLEMENT_SERVICE_NAME,false,false,false,block2Date);
  blockingInternalApi.setBlockingState(state2,internalCallContext);
  final DefaultBlockingState state3=new DefaultBlockingState(account.getId(),BlockingStateType.ACCOUNT,DefaultEntitlementApi.ENT_STATE_BLOCKED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,true,block2Date);
  blockingInternalApi.setBlockingState(state3,internalCallContext);
  assertListenerStatus();
  clock.addDays(3);
  assertListenerStatus();
  final List<BillingEvent> events=ImmutableList.<BillingEvent>copyOf(billingInternalApi.getBillingEventsForAccountAndUpdateAccountBCD(account.getId(),null,internalCallContext));
  Assert.assertEquals(events.size(),2);
  Assert.assertEquals(events.get(0).getTransitionType(),SubscriptionBaseTransitionType.CREATE);
  Assert.assertEquals(events.get(0).getEffectiveDate(),subscription.getStartDate());
  Assert.assertEquals(events.get(1).getTransitionType(),SubscriptionBaseTransitionType.START_BILLING_DISABLED);
  Assert.assertEquals(events.get(1).getEffectiveDate(),block1Date);
}
