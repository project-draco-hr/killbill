{
  final LocalDate initialDate=new LocalDate(2013,8,7);
  clock.setDay(initialDate);
  final Account account=createAccount(getAccountData(7));
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.ANNUAL,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final Entitlement baseEntitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,account.getExternalKey(),null,initialDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  testListener.pushExpectedEvents(NextEvent.PHASE);
  clock.setDay(new LocalDate(2013,9,7));
  assertListenerStatus();
  final LocalDate pauseDate=new LocalDate(2013,9,17);
  entitlementApi.pause(baseEntitlement.getBundleId(),pauseDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  final LocalDate resumeDate=new LocalDate(2013,12,24);
  entitlementApi.resume(baseEntitlement.getBundleId(),resumeDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  testListener.pushExpectedEvents(NextEvent.PAUSE,NextEvent.BLOCK);
  clock.setDay(pauseDate);
  assertListenerStatus();
  final Entitlement baseEntitlementPaused=entitlementApi.getEntitlementForId(baseEntitlement.getId(),callContext);
  assertEquals(baseEntitlementPaused.getState(),EntitlementState.BLOCKED);
  testListener.pushExpectedEvents(NextEvent.RESUME,NextEvent.BLOCK);
  clock.setDay(resumeDate);
  assertListenerStatus();
  final Entitlement baseEntitlementUnpaused=entitlementApi.getEntitlementForId(baseEntitlement.getId(),callContext);
  assertEquals(baseEntitlementUnpaused.getState(),EntitlementState.ACTIVE);
}
