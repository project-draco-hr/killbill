{
  final LocalDate initialDate=new LocalDate(2013,8,7);
  clock.setDay(initialDate);
  final Account account=accountApi.createAccount(getAccountData(7),callContext);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.ANNUAL,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final Entitlement baseEntitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,account.getExternalKey(),null,initialDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  clock.addDays(5);
  testListener.pushExpectedEvents(NextEvent.BLOCK);
  entitlementApi.block(baseEntitlement.getBundleId(),"BLOCK","foo",new LocalDate(clock.getUTCNow()),true,true,true,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  List<Entitlement> bundleEntitlements=entitlementApi.getAllEntitlementsForBundle(baseEntitlement.getBundleId(),callContext);
  assertEquals(bundleEntitlements.size(),1);
  assertEquals(bundleEntitlements.get(0).getState(),EntitlementState.BLOCKED);
  final BlockingState blockingState=blockingInternalApi.getBlockingStateForService(baseEntitlement.getBundleId(),BlockingStateType.SUBSCRIPTION_BUNDLE,"foo",internalCallContext);
  assertTrue(blockingState.isBlockBilling());
  assertTrue(blockingState.isBlockChange());
  assertTrue(blockingState.isBlockEntitlement());
  clock.addDays(1);
  testListener.pushExpectedEvents(NextEvent.BLOCK);
  entitlementApi.unblock(baseEntitlement.getBundleId(),"UNBLOCK","bar",new LocalDate(clock.getUTCNow()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  bundleEntitlements=entitlementApi.getAllEntitlementsForBundle(baseEntitlement.getBundleId(),callContext);
  assertEquals(bundleEntitlements.size(),1);
  assertEquals(bundleEntitlements.get(0).getState(),EntitlementState.BLOCKED);
  testListener.pushExpectedEvents(NextEvent.BLOCK);
  entitlementApi.unblock(baseEntitlement.getBundleId(),"UNBLOCK","foo",new LocalDate(clock.getUTCNow()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  bundleEntitlements=entitlementApi.getAllEntitlementsForBundle(baseEntitlement.getBundleId(),callContext);
  assertEquals(bundleEntitlements.size(),1);
  assertEquals(bundleEntitlements.get(0).getState(),EntitlementState.ACTIVE);
  blockingInternalApi.getBlockingStateForService(baseEntitlement.getBundleId(),BlockingStateType.SUBSCRIPTION_BUNDLE,"foo",internalCallContext);
  clock.addDays(1);
  testListener.pushExpectedEvents(NextEvent.BLOCK);
  entitlementApi.block(baseEntitlement.getBundleId(),"BLOCK","foo",new LocalDate(clock.getUTCNow()),true,true,true,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  bundleEntitlements=entitlementApi.getAllEntitlementsForBundle(baseEntitlement.getBundleId(),callContext);
  assertEquals(bundleEntitlements.size(),1);
  assertEquals(bundleEntitlements.get(0).getState(),EntitlementState.BLOCKED);
  testListener.pushExpectedEvents(NextEvent.BLOCK);
  entitlementApi.unblock(baseEntitlement.getBundleId(),"UNBLOCK","foo",new LocalDate(clock.getUTCNow()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  bundleEntitlements=entitlementApi.getAllEntitlementsForBundle(baseEntitlement.getBundleId(),callContext);
  assertEquals(bundleEntitlements.size(),1);
  assertEquals(bundleEntitlements.get(0).getState(),EntitlementState.ACTIVE);
}
