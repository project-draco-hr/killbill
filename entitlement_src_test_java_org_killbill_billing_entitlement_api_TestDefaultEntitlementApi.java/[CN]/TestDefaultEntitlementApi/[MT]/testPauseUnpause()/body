{
  final LocalDate initialDate=new LocalDate(2013,8,7);
  clock.setDay(initialDate);
  final Account account=createAccount(getAccountData(7));
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.ANNUAL,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final Entitlement baseEntitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,account.getExternalKey(),null,initialDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  clock.addDays(1);
  final LocalDate effectiveDateSpec1=new LocalDate(clock.getUTCNow(),account.getTimeZone());
  final PlanPhaseSpecifier spec1=new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  final Entitlement telescopicEntitlement=entitlementApi.addEntitlement(baseEntitlement.getBundleId(),spec1,null,effectiveDateSpec1,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  clock.addDays(5);
  testListener.pushExpectedEvents(NextEvent.PAUSE,NextEvent.BLOCK);
  entitlementApi.pause(baseEntitlement.getBundleId(),new LocalDate(clock.getUTCNow()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  final Entitlement baseEntitlement2=entitlementApi.getEntitlementForId(baseEntitlement.getId(),callContext);
  assertEquals(baseEntitlement2.getState(),EntitlementState.BLOCKED);
  final Entitlement telescopicEntitlement2=entitlementApi.getEntitlementForId(telescopicEntitlement.getId(),callContext);
  assertEquals(telescopicEntitlement2.getState(),EntitlementState.BLOCKED);
  final List<Entitlement> bundleEntitlements2=entitlementApi.getAllEntitlementsForBundle(telescopicEntitlement2.getBundleId(),callContext);
  assertEquals(bundleEntitlements2.size(),2);
  for (  final Entitlement cur : bundleEntitlements2) {
    assertEquals(cur.getState(),EntitlementState.BLOCKED);
  }
  try {
    final PlanPhaseSpecifier spec3=new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
    final Entitlement telescopicEntitlement3=entitlementApi.addEntitlement(baseEntitlement.getBundleId(),spec1,null,effectiveDateSpec1,ImmutableList.<PluginProperty>of(),callContext);
  }
 catch (  EntitlementApiException e) {
    assertEquals(e.getCode(),ErrorCode.SUB_GET_NO_SUCH_BASE_SUBSCRIPTION.getCode());
  }
  clock.addDays(3);
  testListener.pushExpectedEvents(NextEvent.RESUME,NextEvent.BLOCK);
  entitlementApi.resume(baseEntitlement.getBundleId(),new LocalDate(clock.getUTCNow()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  testListener.pushExpectedEvents(NextEvent.RESUME);
  entitlementApi.resume(baseEntitlement.getBundleId(),new LocalDate(clock.getUTCNow()),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  final Entitlement baseEntitlement3=entitlementApi.getEntitlementForId(baseEntitlement.getId(),callContext);
  assertEquals(baseEntitlement3.getState(),EntitlementState.ACTIVE);
  final Entitlement telescopicEntitlement3=entitlementApi.getEntitlementForId(telescopicEntitlement.getId(),callContext);
  assertEquals(telescopicEntitlement3.getState(),EntitlementState.ACTIVE);
  final List<Entitlement> bundleEntitlements3=entitlementApi.getAllEntitlementsForBundle(telescopicEntitlement2.getBundleId(),callContext);
  assertEquals(bundleEntitlements3.size(),2);
  for (  Entitlement cur : bundleEntitlements3) {
    assertEquals(cur.getState(),EntitlementState.ACTIVE);
  }
}
