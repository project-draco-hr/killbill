{
  final Map<String,Tag> tags=tagUserApi.getTags(id,getObjectType());
  final Collection<UUID> tagIdList=(tags.size() == 0) ? Collections.<UUID>emptyList() : Collections2.transform(tags.values(),new Function<Tag,UUID>(){
    @Override public UUID apply(    final Tag input){
      return input.getTagDefinitionId();
    }
  }
);
  final AtomicReference<TagDefinitionApiException> theException=new AtomicReference<TagDefinitionApiException>();
  final List<TagDefinition> tagDefinitionList=tagUserApi.getTagDefinitions(tagIdList);
  final List<TagJson> result=ImmutableList.<TagJson>copyOf(Collections2.transform(tagIdList,new Function<UUID,TagJson>(){
    @Override public TagJson apply(    UUID input){
      try {
        final TagDefinition tagDefinition=findTagDefinitionFromId(tagDefinitionList,input);
        return new TagJson(input.toString(),tagDefinition.getName(),null);
      }
 catch (      TagDefinitionApiException e) {
        theException.set(e);
        return null;
      }
    }
  }
));
  if (theException.get() != null) {
    throw theException.get();
  }
  return Response.status(Response.Status.OK).entity(result).build();
}
