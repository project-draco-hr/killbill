{
  isProcessingEvents=true;
  curActiveThreads=0;
  final PersistentBus thePersistentBus=this;
  final CountDownLatch doneInitialization=new CountDownLatch(NB_BUS_THREADS);
  for (int i=0; i < NB_BUS_THREADS; i++) {
    executor.execute(new Runnable(){
      @Override public void run(){
        log.info(String.format("PersistentBus thread %s [%d] started",Thread.currentThread().getName(),Thread.currentThread().getId()));
synchronized (thePersistentBus) {
          curActiveThreads++;
        }
        doneInitialization.countDown();
        try {
          while (true) {
synchronized (thePersistentBus) {
              if (!isProcessingEvents) {
                thePersistentBus.notify();
                break;
              }
            }
            try {
              doProcessEvents();
            }
 catch (            Exception e) {
              log.error(String.format("PersistentBus thread  %s  [%d] got an exception..",Thread.currentThread().getName(),Thread.currentThread().getId()),e);
            }
            sleepALittle();
          }
        }
 catch (        InterruptedException e) {
          log.info(Thread.currentThread().getName() + " got interrupted, exting...");
        }
catch (        Throwable e) {
          log.error(Thread.currentThread().getName() + " got an exception exiting...",e);
          e.printStackTrace();
        }
 finally {
          log.info(String.format("PersistentBus thread %s [%d] exited",Thread.currentThread().getName(),Thread.currentThread().getId()));
synchronized (thePersistentBus) {
            curActiveThreads--;
          }
        }
      }
      private void sleepALittle() throws InterruptedException {
        Thread.sleep(SLEEP_TIME_MS);
      }
    }
);
  }
  try {
    doneInitialization.await(TIMEOUT_MSEC,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    log.warn("PersistentBus start sequence got interrupted...");
  }
}
