{
  final NotificationQueueHandler notificationQueueHandler=new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationKey notificationKey,    final DateTime eventDate,    final Long accountRecordId,    final Long tenantRecordId){
      try {
        if (!(notificationKey instanceof OverdueCheckNotificationKey)) {
          log.error("Overdue service received Unexpected notificationKey {}",notificationKey.getClass().getName());
          return;
        }
        final OverdueCheckNotificationKey key=(OverdueCheckNotificationKey)notificationKey;
        listener.handleNextOverdueCheck(key,accountRecordId,tenantRecordId);
      }
 catch (      IllegalArgumentException e) {
        log.error("The key returned from the NextBillingNotificationQueue is not a valid UUID",e);
      }
    }
  }
;
  try {
    overdueQueue=notificationQueueService.createNotificationQueue(DefaultOverdueService.OVERDUE_SERVICE_NAME,OVERDUE_CHECK_NOTIFIER_QUEUE,notificationQueueHandler);
  }
 catch (  NotificationQueueAlreadyExists e) {
    throw new RuntimeException(e);
  }
}
