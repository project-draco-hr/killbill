{
  new StringTemplateGroup(new InputStreamReader(entityStream));
  final StringTemplateGroup kombucha=new StringTemplateGroup(new InputStreamReader(kombuchaStream));
  Assert.assertEquals(kombucha.getInstanceOf("isIsTimeForKombucha").toString(),"select hour(current_timestamp()) = 17 as is_time;");
  Assert.assertEquals(kombucha.getInstanceOf("getById").toString(),"select\n" + "  t.record_id\n" + ", t.id\n"+ ", t.tea\n"+ ", t.mushroom\n"+ ", t.sugar\n"+ ", t.account_record_id\n"+ ", t.tenant_record_id\n"+ "from kombucha t\n"+ "where t.id = :id\n"+ "and t.tenant_record_id = :tenantRecordId\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("getByRecordId").toString(),"select\n" + "  t.record_id\n" + ", t.id\n"+ ", t.tea\n"+ ", t.mushroom\n"+ ", t.sugar\n"+ ", t.account_record_id\n"+ ", t.tenant_record_id\n"+ "from kombucha t\n"+ "where t.record_id = :recordId\n"+ "and t.tenant_record_id = :tenantRecordId\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("getRecordId").toString(),"select\n" + "  t.record_id\n" + "from kombucha t\n"+ "where t.id = :id\n"+ "and t.tenant_record_id = :tenantRecordId\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("getHistoryRecordId").toString(),"select\n" + "  max(t.record_id)\n" + "from kombucha_history t\n"+ "where t.target_record_id = :targetRecordId\n"+ "and t.tenant_record_id = :tenantRecordId\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("getAll").toString(),"select\n" + "  t.record_id\n" + ", t.id\n"+ ", t.tea\n"+ ", t.mushroom\n"+ ", t.sugar\n"+ ", t.account_record_id\n"+ ", t.tenant_record_id\n"+ "from kombucha t\n"+ "where t.tenant_record_id = :tenantRecordId\n"+ "order by t.record_id ASC\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("get",ImmutableMap.<String,String>of("orderBy","record_id","offset","3","rowCount","12")).toString(),"select\n" + "  t.record_id\n" + ", t.id\n"+ ", t.tea\n"+ ", t.mushroom\n"+ ", t.sugar\n"+ ", t.account_record_id\n"+ ", t.tenant_record_id\n"+ "from kombucha t\n"+ "where t.tenant_record_id = :tenantRecordId\n"+ "order by t.record_id\n"+ "limit :offset, :rowCount\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("test").toString(),"select\n" + "  t.record_id\n" + ", t.id\n"+ ", t.tea\n"+ ", t.mushroom\n"+ ", t.sugar\n"+ ", t.account_record_id\n"+ ", t.tenant_record_id\n"+ "from kombucha t\n"+ "where t.tenant_record_id = :tenantRecordId\n"+ "limit 1\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("addHistoryFromTransaction").toString(),"insert into kombucha_history (\n" + "  id\n" + ", target_record_id\n"+ ", change_type\n"+ ", tea\n"+ ", mushroom\n"+ ", sugar\n"+ ", account_record_id\n"+ ", tenant_record_id\n"+ ")\n"+ "values (\n"+ "  :id\n"+ ", :targetRecordId\n"+ ", :changeType\n"+ ",   :tea\n"+ ", :mushroom\n"+ ", :sugar\n"+ ", :accountRecordId\n"+ ", :tenantRecordId\n"+ ")\n"+ ";");
  Assert.assertEquals(kombucha.getInstanceOf("insertAuditFromTransaction").toString(),"insert into audit_log (\n" + "id\n" + ", table_name\n"+ ", target_record_id\n"+ ", change_type\n"+ ", created_by\n"+ ", reason_code\n"+ ", comments\n"+ ", user_token\n"+ ", created_date\n"+ ", account_record_id\n"+ ", tenant_record_id\n"+ ")\n"+ "values (\n"+ "  :id\n"+ ", :tableName\n"+ ", :targetRecordId\n"+ ", :changeType\n"+ ", :createdBy\n"+ ", :reasonCode\n"+ ", :comments\n"+ ", :userToken\n"+ ", :createdDate\n"+ ", :accountRecordId\n"+ ", :tenantRecordId\n"+ ")\n"+ ";");
}
