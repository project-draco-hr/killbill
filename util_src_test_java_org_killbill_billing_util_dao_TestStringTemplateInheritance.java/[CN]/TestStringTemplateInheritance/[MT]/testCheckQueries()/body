{
  new StringTemplateGroup(new InputStreamReader(entityStream));
  final StringTemplateGroup kombucha=new StringTemplateGroup(new InputStreamReader(kombuchaStream));
  Assert.assertEquals(kombucha.getInstanceOf("isIsTimeForKombucha").toString(),"select hour(current_timestamp()) = 17 as is_time;");
  assertPattern(kombucha.getInstanceOf("getById").toString(),"select\r?\n" + "  t.record_id\r?\n" + ", t.id\r?\n"+ ", t.tea\r?\n"+ ", t.mushroom\r?\n"+ ", t.sugar\r?\n"+ ", t.account_record_id\r?\n"+ ", t.tenant_record_id\r?\n"+ "from kombucha t\r?\n"+ "where t.id = :id\r?\n"+ "and t.tenant_record_id = :tenantRecordId\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("getByRecordId").toString(),"select\r?\n" + "  t.record_id\r?\n" + ", t.id\r?\n"+ ", t.tea\r?\n"+ ", t.mushroom\r?\n"+ ", t.sugar\r?\n"+ ", t.account_record_id\r?\n"+ ", t.tenant_record_id\r?\n"+ "from kombucha t\r?\n"+ "where t.record_id = :recordId\r?\n"+ "and t.tenant_record_id = :tenantRecordId\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("getRecordId").toString(),"select\r?\n" + "  t.record_id\r?\n" + "from kombucha t\r?\n"+ "where t.id = :id\r?\n"+ "and t.tenant_record_id = :tenantRecordId\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("getHistoryRecordId").toString(),"select\r?\n" + "  max\\(t.record_id\\)\r?\n" + "from kombucha_history t\r?\n"+ "where t.target_record_id = :targetRecordId\r?\n"+ "and t.tenant_record_id = :tenantRecordId\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("getAll").toString(),"select\r?\n" + "  t.record_id\r?\n" + ", t.id\r?\n"+ ", t.tea\r?\n"+ ", t.mushroom\r?\n"+ ", t.sugar\r?\n"+ ", t.account_record_id\r?\n"+ ", t.tenant_record_id\r?\n"+ "from kombucha t\r?\n"+ "where t.tenant_record_id = :tenantRecordId\r?\n"+ "order by t.record_id ASC\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("get",ImmutableMap.<String,String>of("orderBy","record_id","offset","3","rowCount","12")).toString(),"select\r?\n" + "  t.record_id\r?\n" + ", t.id\r?\n"+ ", t.tea\r?\n"+ ", t.mushroom\r?\n"+ ", t.sugar\r?\n"+ ", t.account_record_id\r?\n"+ ", t.tenant_record_id\r?\n"+ "from kombucha t\r?\n"+ "where t.tenant_record_id = :tenantRecordId\r?\n"+ "order by t.record_id\r?\n"+ "limit :offset, :rowCount\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("test").toString(),"select\r?\n" + "  t.record_id\r?\n" + ", t.id\r?\n"+ ", t.tea\r?\n"+ ", t.mushroom\r?\n"+ ", t.sugar\r?\n"+ ", t.account_record_id\r?\n"+ ", t.tenant_record_id\r?\n"+ "from kombucha t\r?\n"+ "where t.tenant_record_id = :tenantRecordId\r?\n"+ "limit 1\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("addHistoryFromTransaction").toString(),"insert into kombucha_history \\(\r?\n" + "  id\r?\n" + ", target_record_id\r?\n"+ ", change_type\r?\n"+ ", tea\r?\n"+ ", mushroom\r?\n"+ ", sugar\r?\n"+ ", account_record_id\r?\n"+ ", tenant_record_id\r?\n"+ "\\)\r?\n"+ "values \\(\r?\n"+ "  :id\r?\n"+ ", :targetRecordId\r?\n"+ ", :changeType\r?\n"+ ",   :tea\r?\n"+ ", :mushroom\r?\n"+ ", :sugar\r?\n"+ ", :accountRecordId\r?\n"+ ", :tenantRecordId\r?\n"+ "\\)\r?\n"+ ";");
  assertPattern(kombucha.getInstanceOf("insertAuditFromTransaction").toString(),"insert into audit_log \\(\r?\n" + "id\r?\n" + ", table_name\r?\n"+ ", target_record_id\r?\n"+ ", change_type\r?\n"+ ", created_by\r?\n"+ ", reason_code\r?\n"+ ", comments\r?\n"+ ", user_token\r?\n"+ ", created_date\r?\n"+ ", account_record_id\r?\n"+ ", tenant_record_id\r?\n"+ "\\)\r?\n"+ "values \\(\r?\n"+ "  :id\r?\n"+ ", :tableName\r?\n"+ ", :targetRecordId\r?\n"+ ", :changeType\r?\n"+ ", :createdBy\r?\n"+ ", :reasonCode\r?\n"+ ", :comments\r?\n"+ ", :userToken\r?\n"+ ", :createdDate\r?\n"+ ", :accountRecordId\r?\n"+ ", :tenantRecordId\r?\n"+ "\\)\r?\n"+ ";");
}
