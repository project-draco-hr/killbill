{
  final UUID newAccountId=UUID.randomUUID();
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  final Subscription baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
  clock.addDays(3);
  final String aoProduct1="Telescopic-Scope";
  final BillingPeriod aoTerm1=BillingPeriod.MONTHLY;
  final SubscriptionData aoSubscription1=testUtil.createSubscription(bundle,aoProduct1,aoTerm1,basePriceList);
  assertEquals(aoSubscription1.getState(),SubscriptionState.ACTIVE);
  clock.addDays(25);
  final String aoProduct2="Laser-Scope";
  final BillingPeriod aoTerm2=BillingPeriod.MONTHLY;
  final SubscriptionData aoSubscription2=testUtil.createSubscription(bundle,aoProduct2,aoTerm2,basePriceList);
  assertEquals(aoSubscription2.getState(),SubscriptionState.ACTIVE);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  clock.addDays(5);
  assertTrue(testListener.isCompleted(3000));
  final DateTime ctd=baseSubscription.getStartDate().plusDays(30).plusMonths(1);
  subscriptionInternalApi.setChargedThroughDate(baseSubscription.getId(),ctd,internalCallContext);
  final DateTime transferRequestedDate=clock.getUTCNow();
  testListener.pushExpectedEvent(NextEvent.TRANSFER);
  transferApi.transferBundle(bundle.getAccountId(),newAccountId,bundle.getExternalKey(),transferRequestedDate,true,false,callContext);
  assertTrue(testListener.isCompleted(3000));
  final SubscriptionBundle newBundle=subscriptionApi.getBundleForAccountAndKey(newAccountId,bundle.getExternalKey(),callContext);
  final List<Subscription> subscriptions=subscriptionApi.getSubscriptionsForBundle(newBundle.getId(),callContext);
  assertEquals(subscriptions.size(),3);
  boolean foundBP=false;
  boolean foundAO1=false;
  boolean foundAO2=false;
  for (  final Subscription cur : subscriptions) {
    final Plan curPlan=cur.getCurrentPlan();
    final Product curProduct=curPlan.getProduct();
    if (curProduct.getName().equals(baseProduct)) {
      foundBP=true;
      assertTrue(((SubscriptionData)cur).getAlignStartDate().compareTo(((SubscriptionData)baseSubscription).getAlignStartDate()) == 0);
      assertNull(((SubscriptionData)cur).getPendingTransition());
    }
 else     if (curProduct.getName().equals(aoProduct1)) {
      foundAO1=true;
      assertTrue(((SubscriptionData)cur).getAlignStartDate().compareTo((aoSubscription1).getAlignStartDate()) == 0);
      assertNull(((SubscriptionData)cur).getPendingTransition());
    }
 else     if (curProduct.getName().equals(aoProduct2)) {
      foundAO2=true;
      assertTrue(((SubscriptionData)cur).getAlignStartDate().compareTo((aoSubscription2).getAlignStartDate()) == 0);
      assertNotNull(((SubscriptionData)cur).getPendingTransition());
    }
 else {
      Assert.fail("Unexpected product " + curProduct.getName());
    }
  }
  assertTrue(foundBP);
  assertTrue(foundAO1);
  assertTrue(foundAO2);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  testListener.pushExpectedEvent(NextEvent.CANCEL);
  testListener.pushExpectedEvent(NextEvent.CANCEL);
  testListener.pushExpectedEvent(NextEvent.CANCEL);
  clock.addMonths(1);
  assertTrue(testListener.isCompleted(3000));
  final UUID finalNewAccountId=UUID.randomUUID();
  final DateTime newTransferRequestedDate=clock.getUTCNow();
  testListener.pushExpectedEvent(NextEvent.TRANSFER);
  transferApi.transferBundle(newBundle.getAccountId(),finalNewAccountId,newBundle.getExternalKey(),newTransferRequestedDate,true,false,callContext);
  assertTrue(testListener.isCompleted(3000));
}
