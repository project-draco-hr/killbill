{
  final UUID newAccountId=UUID.randomUUID();
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  final SubscriptionBase baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  clock.addDays(40);
  assertTrue(testListener.isCompleted(3000));
  final DateTime ctd=baseSubscription.getStartDate().plusDays(30).plusMonths(1);
  subscriptionInternalApi.setChargedThroughDate(baseSubscription.getId(),ctd,internalCallContext);
  final DateTime transferRequestedDate=clock.getUTCNow();
  testListener.pushExpectedEvent(NextEvent.TRANSFER);
  transferApi.transferBundle(bundle.getAccountId(),newAccountId,bundle.getExternalKey(),transferRequestedDate,false,false,callContext);
  assertTrue(testListener.isCompleted(3000));
  final SubscriptionBase oldBaseSubscription=subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  assertNotNull(oldBaseSubscription.getFutureEndDate());
  assertTrue(oldBaseSubscription.getFutureEndDate().compareTo(ctd) == 0);
  final List<SubscriptionBaseBundle> bundlesForAccountAndKey=subscriptionInternalApi.getBundlesForAccountAndKey(newAccountId,bundle.getExternalKey(),internalCallContext);
  assertEquals(bundlesForAccountAndKey.size(),1);
  final SubscriptionBaseBundle newBundle=bundlesForAccountAndKey.get(0);
  final List<SubscriptionBase> subscriptions=subscriptionInternalApi.getSubscriptionsForBundle(newBundle.getId(),internalCallContext);
  assertEquals(subscriptions.size(),1);
  final SubscriptionBase newBaseSubscription=subscriptions.get(0);
  assertTrue(((DefaultSubscriptionBase)newBaseSubscription).getAlignStartDate().compareTo(((DefaultSubscriptionBase)baseSubscription).getAlignStartDate()) == 0);
  assertEquals(subscriptionInternalApi.getAllTransitions(newBaseSubscription,internalCallContext).size(),1);
  Plan newPlan=newBaseSubscription.getCurrentPlan();
  assertEquals(newPlan.getProduct().getName(),baseProduct);
  assertEquals(newBaseSubscription.getCurrentPhase().getPhaseType(),PhaseType.EVERGREEN);
  clock.addDays(5);
  final String newBaseProduct1="Assault-Rifle";
  final BillingPeriod newBaseTerm1=BillingPeriod.ANNUAL;
  final DateTime changeDate1=clock.getUTCNow();
  newBaseSubscription.changePlan(newBaseProduct1,newBaseTerm1,basePriceList,callContext);
  newPlan=newBaseSubscription.getCurrentPlan();
  assertEquals(newPlan.getProduct().getName(),newBaseProduct1);
  assertEquals(newBaseSubscription.getCurrentPhase().getPhaseType(),PhaseType.EVERGREEN);
  clock.addDays(2);
  final DateTime newCtd=newBaseSubscription.getStartDate().plusYears(1);
  subscriptionInternalApi.setChargedThroughDate(newBaseSubscription.getId(),newCtd,internalCallContext);
  final SubscriptionBase newBaseSubscriptionWithCtd=subscriptionInternalApi.getSubscriptionFromId(newBaseSubscription.getId(),internalCallContext);
  final String newBaseProduct2="Pistol";
  final BillingPeriod newBaseTerm2=BillingPeriod.ANNUAL;
  final DateTime changeDate2=clock.getUTCNow();
  newBaseSubscriptionWithCtd.changePlan(newBaseProduct2,newBaseTerm2,basePriceList,callContext);
  newPlan=newBaseSubscriptionWithCtd.getCurrentPlan();
  assertEquals(newPlan.getProduct().getName(),newBaseProduct1);
  assertEquals(newBaseSubscriptionWithCtd.getCurrentPhase().getPhaseType(),PhaseType.EVERGREEN);
  assertNotNull(((DefaultSubscriptionBase)newBaseSubscriptionWithCtd).getPendingTransition());
  assertEquals(((DefaultSubscriptionBase)newBaseSubscriptionWithCtd).getPendingTransition().getEffectiveTransitionTime(),newCtd);
}
