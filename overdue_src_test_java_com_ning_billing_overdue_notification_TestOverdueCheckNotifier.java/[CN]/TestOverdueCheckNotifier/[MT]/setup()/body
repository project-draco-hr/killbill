{
  final Injector g=Guice.createInjector(Stage.PRODUCTION,new MockInvoiceModule(),new MockPaymentModule(),new BusModule(),new DefaultOverdueModule(){
    @Override protected void configure(){
      super.configure();
      bind(Clock.class).to(ClockMock.class).asEagerSingleton();
      bind(CallContextFactory.class).to(DefaultCallContextFactory.class).asEagerSingleton();
      bind(NotificationQueueService.class).to(DefaultNotificationQueueService.class).asEagerSingleton();
      final InvoiceConfig invoiceConfig=new ConfigurationObjectFactory(System.getProperties()).build(InvoiceConfig.class);
      bind(InvoiceConfig.class).toInstance(invoiceConfig);
      final CatalogConfig catalogConfig=new ConfigurationObjectFactory(System.getProperties()).build(CatalogConfig.class);
      bind(CatalogConfig.class).toInstance(catalogConfig);
      bind(CatalogService.class).to(DefaultCatalogService.class).asEagerSingleton();
      final MysqlTestingHelper helper=KillbillTestSuiteWithEmbeddedDB.getMysqlTestingHelper();
      bind(MysqlTestingHelper.class).toInstance(helper);
      final IDBI dbi=helper.getDBI();
      bind(IDBI.class).toInstance(dbi);
      bind(TagDao.class).to(AuditedTagDao.class).asEagerSingleton();
      bind(CustomFieldDao.class).to(AuditedCustomFieldDao.class).asEagerSingleton();
      bind(GlobalLocker.class).to(MySqlGlobalLocker.class).asEagerSingleton();
      install(new MockJunctionModule());
      install(new EmailModule());
      install(new TemplateModule());
      final AccountInternalApi accountApi=Mockito.mock(AccountInternalApi.class);
      bind(AccountInternalApi.class).toInstance(accountApi);
      final EntitlementInternalApi entitlementApi=Mockito.mock(EntitlementInternalApi.class);
      bind(EntitlementInternalApi.class).toInstance(entitlementApi);
    }
  }
);
  clock=g.getInstance(Clock.class);
  eventBus=g.getInstance(Bus.class);
  notificationQueueService=g.getInstance(NotificationQueueService.class);
  final OverdueProperties properties=g.getInstance(OverdueProperties.class);
  final Account account=Mockito.mock(Account.class);
  final AccountInternalApi accountApi=g.getInstance(AccountInternalApi.class);
  Mockito.when(accountApi.getAccountById(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(account);
  final Subscription subscription=Mockito.mock(Subscription.class);
  final EntitlementInternalApi entitlementApi=g.getInstance(EntitlementInternalApi.class);
  Mockito.when(entitlementApi.getSubscriptionFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  listener=new OverdueListenerMock();
  notifier=new DefaultOverdueCheckNotifier(notificationQueueService,properties,listener);
  eventBus.start();
  notifier.initialize();
  notifier.start();
}
