{
  final String stateNameBlock="stateBlock";
  final String stateNameUnBlock="stateUnBlock";
  final String service="SVC_BLOC_TYPES";
  final boolean blockChange=false;
  final boolean blockEntitlement=true;
  final boolean blockBilling=false;
  final Account account=accountApi.createAccount(getAccountData(7),callContext);
  final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(account.getId(),callContext);
  testListener.pushExpectedEvent(NextEvent.BLOCK);
  final BlockingState state1=new DefaultBlockingState(account.getId(),BlockingStateType.ACCOUNT,stateNameBlock,service,blockChange,blockEntitlement,blockBilling,clock.getUTCNow());
  blockingInternalApi.setBlockingState(state1,internalCallContext);
  assertListenerStatus();
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.ANNUAL,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  testListener.pushExpectedEvent(NextEvent.CREATE);
  Entitlement baseEntitlement=entitlementApi.createBaseEntitlement(account.getId(),spec,account.getExternalKey(),null,clock.getUTCToday(),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  assertEquals(baseEntitlement.getState(),EntitlementState.BLOCKED);
  clock.addDays(1);
  testListener.pushExpectedEvent(NextEvent.BLOCK);
  entitlementApi.block(baseEntitlement.getBundleId(),stateNameBlock,service,clock.getUTCToday(),blockBilling,blockEntitlement,blockChange,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  baseEntitlement=entitlementApi.getEntitlementForId(baseEntitlement.getId(),callContext);
  assertEquals(baseEntitlement.getState(),EntitlementState.BLOCKED);
  clock.addDays(1);
  testListener.pushExpectedEvent(NextEvent.BLOCK);
  final BlockingState state2=new DefaultBlockingState(account.getId(),BlockingStateType.ACCOUNT,stateNameUnBlock,service,false,false,false,clock.getUTCNow());
  blockingInternalApi.setBlockingState(state2,internalCallContext);
  assertListenerStatus();
  baseEntitlement=entitlementApi.getEntitlementForId(baseEntitlement.getId(),callContext);
  assertEquals(baseEntitlement.getState(),EntitlementState.BLOCKED);
  clock.addDays(1);
  testListener.pushExpectedEvent(NextEvent.BLOCK);
  entitlementApi.unblock(baseEntitlement.getBundleId(),stateNameUnBlock,service,clock.getUTCToday(),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  baseEntitlement=entitlementApi.getEntitlementForId(baseEntitlement.getId(),callContext);
  assertEquals(baseEntitlement.getState(),EntitlementState.ACTIVE);
  final List<BlockingState> blockingAll=blockingInternalApi.getBlockingAllForAccount(internalCallContext);
  final List<BlockingState> history=ImmutableList.<BlockingState>copyOf(Collections2.<BlockingState>filter(blockingAll,new Predicate<BlockingState>(){
    @Override public boolean apply(    final BlockingState input){
      return input.getService().equals(service);
    }
  }
));
  Assert.assertEquals(history.size(),4);
}
