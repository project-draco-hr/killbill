{
  final BillingEvent trial=createRealEvent(new LocalDate(2012,5,1).toDateTimeAtStartOfDay(DateTimeZone.UTC),subscription1,SubscriptionBaseTransitionType.CREATE);
  final BillingEvent phase=createRealEvent(new LocalDate(2012,5,31).toDateTimeAtStartOfDay(DateTimeZone.UTC),subscription1,SubscriptionBaseTransitionType.PHASE);
  final BillingEvent upgrade=createRealEvent(new LocalDate(2012,7,25).toDateTimeAtStartOfDay(DateTimeZone.UTC),subscription1,SubscriptionBaseTransitionType.CHANGE);
  final SortedSet<BillingEvent> billingEvents=new TreeSet<BillingEvent>();
  billingEvents.add(trial);
  billingEvents.add(phase);
  billingEvents.add(upgrade);
  final BlockingState blockingState1=new DefaultBlockingState(bundleId1,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,false,false,new LocalDate(2012,7,5).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  final BlockingState blockingState2=new DefaultBlockingState(bundleId1,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,new LocalDate(2012,7,15).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  final BlockingState blockingState3=new DefaultBlockingState(bundleId1,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,new LocalDate(2012,7,24).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  final BlockingState blockingState4=new DefaultBlockingState(bundleId1,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,new LocalDate(2012,7,25).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  blockingStateDao.setBlockingStatesAndPostBlockingTransitionEvent(ImmutableMap.<BlockingState,Optional<UUID>>of(blockingState1,Optional.<UUID>absent(),blockingState2,Optional.<UUID>absent(),blockingState3,Optional.<UUID>absent(),blockingState4,Optional.<UUID>absent()),internalCallContext);
  blockingCalculator.insertBlockingEvents(billingEvents,new HashSet<UUID>(),internalCallContext);
  assertEquals(billingEvents.size(),5);
  final List<BillingEvent> events=new ArrayList<BillingEvent>(billingEvents);
  assertEquals(events.get(0).getEffectiveDate(),new LocalDate(2012,5,1).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  assertEquals(events.get(0).getTransitionType(),SubscriptionBaseTransitionType.CREATE);
  assertEquals(events.get(1).getEffectiveDate(),new LocalDate(2012,5,31).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  assertEquals(events.get(1).getTransitionType(),SubscriptionBaseTransitionType.PHASE);
  assertEquals(events.get(2).getEffectiveDate(),new LocalDate(2012,7,15).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  assertEquals(events.get(2).getTransitionType(),SubscriptionBaseTransitionType.START_BILLING_DISABLED);
  assertEquals(events.get(3).getEffectiveDate(),new LocalDate(2012,7,25).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  assertEquals(events.get(3).getTransitionType(),SubscriptionBaseTransitionType.END_BILLING_DISABLED);
  assertEquals(events.get(4).getEffectiveDate(),new LocalDate(2012,7,25).toDateTimeAtStartOfDay(DateTimeZone.UTC));
  assertEquals(events.get(4).getTransitionType(),SubscriptionBaseTransitionType.CHANGE);
}
