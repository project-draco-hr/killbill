{
  final String analyticsDdl=IOUtils.toString(BusinessSubscriptionTransitionDao.class.getResourceAsStream("/com/ning/billing/analytics/ddl.sql"));
  final String accountDdl=IOUtils.toString(BusinessSubscriptionTransitionDao.class.getResourceAsStream("/com/ning/billing/account/ddl.sql"));
  final String entitlementDdl=IOUtils.toString(BusinessSubscriptionTransitionDao.class.getResourceAsStream("/com/ning/billing/entitlement/ddl.sql"));
  helper.startMysql();
  helper.initDb(analyticsDdl);
  helper.initDb(accountDdl);
  helper.initDb(entitlementDdl);
  final MockAccount account=new MockAccount(UUID.randomUUID(),ACCOUNT_KEY,Currency.USD);
  final IAccount storedAccount=accountApi.createAccount(account);
  final ISubscriptionBundle bundle=entitlementApi.createBundleForAccount(storedAccount,KEY);
  Assert.assertNotNull(bundle);
  Assert.assertEquals(bundle.getKey(),KEY);
  final IProduct product=new MockProduct("platinium","subscription",ProductCategory.BASE);
  final IPlan plan=new MockPlan("platinum-monthly",product);
  final IPlanPhase phase=new MockPhase(PhaseType.EVERGREEN,plan,MockDuration.UNLIMITED(),25.95);
  final UUID subscriptionId=UUID.randomUUID();
  final DateTime effectiveTransitionTime=new DateTime(DateTimeZone.UTC);
  final DateTime requestedTransitionTime=new DateTime(DateTimeZone.UTC);
  final String priceList="something";
  transition=new SubscriptionTransition(UUID.randomUUID(),subscriptionId,bundle.getId(),IEntitlementEvent.EventType.API_USER,ApiEventType.CREATE,requestedTransitionTime,effectiveTransitionTime,null,null,null,null,ISubscription.SubscriptionState.ACTIVE,plan,phase,priceList);
  expectedTransition=new BusinessSubscriptionTransition(KEY,ACCOUNT_KEY,requestedTransitionTime,BusinessSubscriptionEvent.subscriptionCreated(plan),null,new BusinessSubscription(priceList,plan,phase,null,effectiveTransitionTime,ISubscription.SubscriptionState.ACTIVE,subscriptionId,bundle.getId()));
}
