{
  Assert.assertEquals(service.getName(),"analytics-service");
  Assert.assertNull(accountSqlDao.getAccountByKey(ACCOUNT_KEY,internalCallContext));
  bus.post(accountCreationNotification,internalCallContext);
  waitALittle(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return (accountSqlDao.getAccountByKey(ACCOUNT_KEY,internalCallContext) != null);
    }
  }
);
  bus.post(transition,internalCallContext);
  waitALittle(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return (subscriptionTransitionSqlDao.getTransitionsForAccount(ACCOUNT_KEY,internalCallContext).size() == 1);
    }
  }
);
  bus.post(invoiceCreationNotification,internalCallContext);
  waitALittle(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return (accountSqlDao.getAccountByKey(ACCOUNT_KEY,internalCallContext).getTotalInvoiceBalance().compareTo(INVOICE_AMOUNT) == 0);
    }
  }
);
  bus.post(paymentInfoNotification,internalCallContext);
}
