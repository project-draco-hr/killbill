{
  final DefaultInvoice invoice=new DefaultInvoice(account.getId(),clock.getUTCToday(),clock.getUTCToday(),ACCOUNT_CURRENCY);
  final FixedPriceInvoiceItem invoiceItem=new FixedPriceInvoiceItem(UUID.randomUUID(),invoice.getId(),account.getId(),UUID.randomUUID(),UUID.randomUUID(),"somePlan","somePhase",clock.getUTCToday(),INVOICE_AMOUNT,ACCOUNT_CURRENCY);
  invoice.addInvoiceItem(invoiceItem);
  invoiceDao.create(invoice,invoice.getTargetDate().getDayOfMonth(),true,context);
  final List<Invoice> invoices=invoiceDao.getInvoicesByAccount(account.getId());
  Assert.assertEquals(invoices.size(),1);
  Assert.assertEquals(invoices.get(0).getInvoiceItems().size(),1);
  invoiceCreationNotification=new DefaultInvoiceCreationEvent(invoice.getId(),account.getId(),INVOICE_AMOUNT,ACCOUNT_CURRENCY,null);
  paymentInfoNotification=new DefaultPaymentInfoEvent(account.getId(),invoices.get(0).getId(),null,invoices.get(0).getBalance(),-1,PaymentStatus.UNKNOWN,null,null,null,clock.getUTCNow());
  final PaymentModelDao paymentInfo=new PaymentModelDao(account.getId(),invoice.getId(),account.getPaymentMethodId(),BigDecimal.ONE,Currency.USD,clock.getUTCNow(),PaymentStatus.SUCCESS);
  final PaymentAttemptModelDao paymentAttempt=new PaymentAttemptModelDao(account.getId(),invoice.getId(),paymentInfo.getId(),clock.getUTCNow(),BigDecimal.ONE);
  paymentDao.insertPaymentWithAttempt(paymentInfo,paymentAttempt,context);
  Assert.assertEquals(paymentDao.getPaymentsForAccount(account.getId()).size(),1);
}
