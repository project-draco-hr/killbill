{
  final DefaultInvoice invoice=new DefaultInvoice(account.getId(),clock.getUTCNow(),clock.getUTCNow(),ACCOUNT_CURRENCY);
  final FixedPriceInvoiceItem invoiceItem=new FixedPriceInvoiceItem(UUID.randomUUID(),invoice.getId(),account.getId(),UUID.randomUUID(),UUID.randomUUID(),"somePlan","somePhase",clock.getUTCNow(),clock.getUTCNow().plusDays(1),INVOICE_AMOUNT,ACCOUNT_CURRENCY,context.getUserName(),clock.getUTCNow());
  invoice.addInvoiceItem(invoiceItem);
  invoiceDao.create(invoice,context);
  List<Invoice> invoices=invoiceDao.getInvoicesByAccount(account.getId());
  Assert.assertEquals(invoices.size(),1);
  Assert.assertEquals(invoices.get(0).getInvoiceItems().size(),1);
  invoiceCreationNotification=new DefaultInvoiceCreationEvent(invoice.getId(),account.getId(),INVOICE_AMOUNT,ACCOUNT_CURRENCY,clock.getUTCNow(),null);
  paymentInfoNotification=new DefaultPaymentInfoEvent.Builder().setPaymentId(UUID.randomUUID().toString()).setPaymentMethod(PAYMENT_METHOD).setCardCountry(CARD_COUNTRY).build();
  final PaymentAttempt paymentAttempt=new PaymentAttempt(UUID.randomUUID(),invoice.getId(),account.getId(),BigDecimal.TEN,ACCOUNT_CURRENCY,clock.getUTCNow(),clock.getUTCNow(),paymentInfoNotification.getPaymentId(),1);
  paymentDao.createPaymentAttempt(paymentAttempt,context);
  paymentDao.savePaymentInfo(paymentInfoNotification,context);
  Assert.assertEquals(paymentDao.getPaymentInfo(Arrays.asList(invoice.getId().toString())).size(),1);
}
