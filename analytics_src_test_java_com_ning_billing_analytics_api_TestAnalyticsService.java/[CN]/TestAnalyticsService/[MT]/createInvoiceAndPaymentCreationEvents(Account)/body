{
  final DefaultInvoice invoice=new DefaultInvoice(account.getId(),clock.getUTCToday(),clock.getUTCToday(),ACCOUNT_CURRENCY);
  final FixedPriceInvoiceItem invoiceItem=new FixedPriceInvoiceItem(invoice.getId(),account.getId(),UUID.randomUUID(),UUID.randomUUID(),"somePlan","somePhase",clock.getUTCToday(),INVOICE_AMOUNT,ACCOUNT_CURRENCY);
  invoice.addInvoiceItem(invoiceItem);
  final InvoiceModelDao invoiceModelDao=new InvoiceModelDao(invoice);
  final List<InvoiceItemModelDao> invoiceItemModelDaos=ImmutableList.<InvoiceItemModelDao>copyOf(Collections2.transform(invoice.getInvoiceItems(),new Function<InvoiceItem,InvoiceItemModelDao>(){
    @Override public InvoiceItemModelDao apply(    final InvoiceItem input){
      return new InvoiceItemModelDao(input);
    }
  }
));
  final List<InvoicePaymentModelDao> invoicePaymentModelDaos=ImmutableList.<InvoicePaymentModelDao>copyOf(Collections2.transform(invoice.getPayments(),new Function<InvoicePayment,InvoicePaymentModelDao>(){
    @Override public InvoicePaymentModelDao apply(    final InvoicePayment input){
      return new InvoicePaymentModelDao(input);
    }
  }
));
  invoiceDao.createInvoice(invoiceModelDao,invoiceItemModelDaos,invoicePaymentModelDaos,true,ImmutableMap.<UUID,DateTime>of(),internalCallContext);
  final List<InvoiceModelDao> invoices=invoiceDao.getInvoicesByAccount(account.getId(),internalCallContext);
  Assert.assertEquals(invoices.size(),1);
  Assert.assertEquals(invoices.get(0).getInvoiceItems().size(),1);
  invoiceCreationNotification=new DefaultInvoiceCreationEvent(invoice.getId(),account.getId(),INVOICE_AMOUNT,ACCOUNT_CURRENCY,null,1L,1L);
  paymentInfoNotification=new DefaultPaymentInfoEvent(account.getId(),invoices.get(0).getId(),null,InvoiceModelDaoHelper.getBalance(invoices.get(0)),-1,PaymentStatus.UNKNOWN,null,clock.getUTCNow(),1L,1L);
  final PaymentModelDao paymentInfo=new PaymentModelDao(account.getId(),invoice.getId(),account.getPaymentMethodId(),BigDecimal.ONE,Currency.USD,clock.getUTCNow(),PaymentStatus.SUCCESS);
  final PaymentAttemptModelDao paymentAttempt=new PaymentAttemptModelDao(account.getId(),invoice.getId(),paymentInfo.getId(),clock.getUTCNow(),BigDecimal.ONE);
  paymentDao.insertPaymentWithAttempt(paymentInfo,paymentAttempt,internalCallContext);
  Assert.assertEquals(paymentDao.getPaymentsForAccount(account.getId(),internalCallContext).size(),1);
}
