{
  final DateTime now=new DateTime(DateTimeZone.UTC);
  final Account account=testHelper.createTestCreditCardAccount();
  final Invoice invoice=testHelper.createTestInvoice(account,now,Currency.USD);
  final BigDecimal amount=new BigDecimal("10.00");
  final UUID subscriptionId=UUID.randomUUID();
  invoice.addInvoiceItem(new RecurringInvoiceItem(invoice.getId(),subscriptionId,"test plan","test phase",now,now.plusMonths(1),amount,new BigDecimal("1.0"),Currency.USD));
  mockPaymentProviderPlugin.makeNextInvoiceFail();
  List<Either<PaymentError,PaymentInfo>> results=paymentApi.createPayment(account.getExternalKey(),Arrays.asList(invoice.getId().toString()));
  assertEquals(results.size(),1);
  assertTrue(results.get(0).isLeft());
  List<Notification> pendingNotifications=mockNotificationQueue.getPendingEvents();
  assertEquals(pendingNotifications.size(),1);
  Notification notification=pendingNotifications.get(0);
  PaymentAttempt paymentAttempt=paymentApi.getPaymentAttemptForInvoiceId(invoice.getId().toString());
  assertNotNull(paymentAttempt);
  assertEquals(notification.getNotificationKey(),paymentAttempt.getPaymentAttemptId().toString());
  assertEquals(paymentAttempt.getRetryCount(),new Integer(1));
  DateTime expectedRetryDate=paymentAttempt.getPaymentAttemptDate().plusDays(paymentConfig.getPaymentRetryDays().get(0));
  assertEquals(notification.getEffectiveDate(),expectedRetryDate);
  assertEquals(paymentAttempt.getNextRetryDate(),expectedRetryDate);
}
