{
  final Account account=testHelper.createTestCreditCardAccount();
  final Invoice invoice=testHelper.createTestInvoice(account,clock.getUTCNow(),Currency.USD);
  final BigDecimal amount=new BigDecimal("10.00");
  final UUID subscriptionId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final DateTime startDate=clock.getUTCNow();
  final DateTime endDate=startDate.plusMonths(1);
  invoice.addInvoiceItem(new MockRecurringInvoiceItem(invoice.getId(),account.getId(),subscriptionId,bundleId,"test plan","test phase",startDate,endDate,amount,new BigDecimal("1.0"),Currency.USD));
  mockPaymentProviderPlugin.makeNextInvoiceFail();
  boolean failed=false;
  try {
    paymentApi.createPayment(account.getExternalKey(),invoice.getId(),context);
  }
 catch (  PaymentApiException e) {
    failed=true;
  }
  assertTrue(failed);
  List<Notification> pendingNotifications=mockNotificationQueue.getPendingEvents();
  assertEquals(pendingNotifications.size(),1);
  Notification notification=pendingNotifications.get(0);
}
