{
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  final UUID bundleId=UUID.randomUUID();
  Mockito.when(bundle.getId()).thenReturn(bundleId);
  final UUID accountId=UUID.randomUUID();
  final Account account=Mockito.mock(Account.class);
  Mockito.when(account.getId()).thenReturn(accountId);
  Mockito.when(account.getTimeZone()).thenReturn(DateTimeZone.UTC);
  Mockito.when(accountInternalApi.getAccountById(Mockito.eq(account.getId()),Mockito.<InternalTenantContext>any())).thenReturn(account);
  Mockito.when(bundle.getAccountId()).thenReturn(accountId);
  final Invoice invoice=Mockito.mock(Invoice.class);
  Mockito.when(invoice.getInvoiceDate()).thenReturn(dateOfLastUnPaidInvoice);
  Mockito.when(invoice.getBalance()).thenReturn(BigDecimal.TEN);
  Mockito.when(invoice.getId()).thenReturn(UUID.randomUUID());
  final InvoiceItem item=Mockito.mock(InvoiceItem.class);
  Mockito.when(item.getBundleId()).thenReturn(bundleId);
  final List<InvoiceItem> items=new ArrayList<InvoiceItem>();
  items.add(item);
  Mockito.when(invoice.getInvoiceItems()).thenReturn(items);
  final List<Invoice> invoices=new ArrayList<Invoice>();
  invoices.add(invoice);
  Mockito.when(invoiceInternalApi.getUnpaidInvoicesByAccountId(Mockito.<UUID>any(),Mockito.<LocalDate>any(),Mockito.<InternalTenantContext>any())).thenReturn(invoices);
  final SubscriptionBase base=Mockito.mock(SubscriptionBase.class);
  Mockito.when(base.getCurrentPlan()).thenReturn(MockPlan.createBicycleNoTrialEvergreen1USD());
  Mockito.when(base.getCurrentPriceList()).thenReturn(new MockPriceList());
  Mockito.when(base.getCurrentPhase()).thenReturn(MockPlan.createBicycleNoTrialEvergreen1USD().getFinalPhase());
  Mockito.when(subscriptionInternalApi.getBaseSubscription(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(base);
  return bundle;
}
