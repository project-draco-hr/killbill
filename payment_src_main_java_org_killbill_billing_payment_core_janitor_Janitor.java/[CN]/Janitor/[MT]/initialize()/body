{
  janitorQueue=notificationQueueService.createNotificationQueue(DefaultPaymentService.SERVICE_NAME,QUEUE_NAME,new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationEvent notificationKey,    final DateTime eventDateTime,    final UUID userToken,    final Long accountRecordId,    final Long tenantRecordId){
      if (!(notificationKey instanceof JanitorNotificationKey)) {
        log.error("Janitor service received an unexpected event className='{}",notificationKey.getClass());
        return;
      }
      final JanitorNotificationKey janitorKey=(JanitorNotificationKey)notificationKey;
      if (janitorKey.getTaskName().equals(incompletePaymentTransactionTask.getClass().toString())) {
        incompletePaymentTransactionTask.processNotification(janitorKey,userToken,accountRecordId,tenantRecordId);
      }
    }
  }
);
  this.incompletePaymentAttemptTask=new IncompletePaymentAttemptTask(internalCallContextFactory,paymentConfig,paymentDao,clock,paymentStateMachineHelper,retrySMHelper,accountInternalApi,pluginControlledPaymentAutomatonRunner,pluginRegistry,locker);
  this.incompletePaymentTransactionTask=new IncompletePaymentTransactionTask(internalCallContextFactory,paymentConfig,paymentDao,clock,paymentStateMachineHelper,retrySMHelper,accountInternalApi,pluginRegistry,locker);
  incompletePaymentTransactionTask.attachJanitorQueue(janitorQueue);
  incompletePaymentAttemptTask.attachJanitorQueue(janitorQueue);
}
