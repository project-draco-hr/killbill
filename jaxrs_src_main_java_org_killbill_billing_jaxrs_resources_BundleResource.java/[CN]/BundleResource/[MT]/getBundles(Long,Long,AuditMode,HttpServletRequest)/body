{
  final TenantContext tenantContext=context.createContext(request);
  final Pagination<SubscriptionBundle> bundles=subscriptionApi.getSubscriptionBundles(offset,limit,tenantContext);
  final URI nextPageUri=uriBuilder.nextPage(BundleResource.class,"getBundles",bundles.getNextOffset(),limit,ImmutableMap.<String,String>of(QUERY_AUDIT,auditMode.getLevel().toString()));
  final AtomicReference<Map<UUID,AccountAuditLogs>> accountsAuditLogs=new AtomicReference<Map<UUID,AccountAuditLogs>>(new HashMap<UUID,AccountAuditLogs>());
  return buildStreamingPaginationResponse(bundles,new Function<SubscriptionBundle,BundleJson>(){
    @Override public BundleJson apply(    final SubscriptionBundle bundle){
      if (accountsAuditLogs.get().get(bundle.getAccountId()) == null) {
        accountsAuditLogs.get().put(bundle.getAccountId(),auditUserApi.getAccountAuditLogs(bundle.getAccountId(),auditMode.getLevel(),tenantContext));
      }
      try {
        return new BundleJson(bundle,null,accountsAuditLogs.get().get(bundle.getAccountId()));
      }
 catch (      final CatalogApiException unused) {
        throw new RuntimeException(unused);
      }
    }
  }
,nextPageUri);
}
