{
  super(toAuditLogJson(accountAuditLogs == null ? null : accountAuditLogs.getAuditLogsForSubscription(subscription.getId())));
  this.startDate=subscription.getEffectiveStartDate();
  final SubscriptionEvent firstEvent=subscription.getSubscriptionEvents().isEmpty() ? null : subscription.getSubscriptionEvents().get(0);
  if (subscription.getLastActiveProduct() == null) {
    this.productName=firstEvent == null ? null : firstEvent.getNextProduct().getName();
  }
 else {
    this.productName=subscription.getLastActiveProduct().getName();
  }
  if (subscription.getLastActiveProductCategory() == null) {
    this.productCategory=firstEvent == null ? null : firstEvent.getNextProduct().getCategory().name();
  }
 else {
    this.productCategory=subscription.getLastActiveProductCategory().name();
  }
  if (subscription.getLastActivePlan() == null) {
    this.billingPeriod=firstEvent == null ? null : firstEvent.getNextPlan().getRecurringBillingPeriod().name();
  }
 else {
    this.billingPeriod=subscription.getLastActivePlan().getRecurringBillingPeriod().toString();
  }
  if (subscription.getLastActivePhase() == null) {
    this.phaseType=firstEvent == null ? null : firstEvent.getNextPhase().getPhaseType().name();
  }
 else {
    this.phaseType=subscription.getLastActivePhase().getPhaseType().toString();
  }
  if (subscription.getLastActivePriceList() == null) {
    this.priceList=firstEvent == null ? null : firstEvent.getNextPriceList().getName();
  }
 else {
    this.priceList=subscription.getLastActivePriceList().getName();
  }
  this.state=subscription.getState().name();
  this.sourceType=subscription.getSourceType().name();
  this.cancelledDate=subscription.getEffectiveEndDate();
  this.chargedThroughDate=subscription.getChargedThroughDate();
  this.billingStartDate=subscription.getBillingStartDate();
  this.billingEndDate=subscription.getBillingEndDate();
  this.accountId=subscription.getAccountId().toString();
  this.bundleId=subscription.getBundleId().toString();
  this.subscriptionId=subscription.getId().toString();
  this.externalKey=subscription.getExternalKey();
  this.events=new LinkedList<EventSubscriptionJson>();
  for (  final SubscriptionEvent subscriptionEvent : subscription.getSubscriptionEvents()) {
    this.events.add(new EventSubscriptionJson(subscriptionEvent,accountAuditLogs));
  }
  this.priceOverrides=new ArrayList<PhasePriceOverrideJson>();
  if (currency != null) {
    final Plan plan=subscription.getLastActivePlan();
    if (plan != null) {
      for (      final PlanPhase cur : plan.getAllPhases()) {
        final BigDecimal fixedPrice=cur.getFixed() != null ? cur.getFixed().getPrice().getPrice(currency) : null;
        final BigDecimal recurringPrice=cur.getRecurring() != null ? cur.getRecurring().getRecurringPrice().getPrice(currency) : null;
        final PhasePriceOverrideJson phase=new PhasePriceOverrideJson(cur.getName(),cur.getPhaseType().toString(),fixedPrice,recurringPrice);
        priceOverrides.add(phase);
      }
    }
  }
}
