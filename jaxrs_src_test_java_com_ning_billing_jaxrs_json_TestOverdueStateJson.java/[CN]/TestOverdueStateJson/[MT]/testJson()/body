{
  final String name=UUID.randomUUID().toString();
  final String externalMessage=UUID.randomUUID().toString();
  final int daysBetweenPaymentRetries=12;
  final boolean disableEntitlementAndChangesBlocked=true;
  final boolean blockChanges=false;
  final boolean clearState=true;
  final int reevaluationIntervalDays=100;
  final OverdueStateJson overdueStateJson=new OverdueStateJson(name,externalMessage,daysBetweenPaymentRetries,disableEntitlementAndChangesBlocked,blockChanges,clearState,reevaluationIntervalDays);
  Assert.assertEquals(overdueStateJson.getName(),name);
  Assert.assertEquals(overdueStateJson.getExternalMessage(),externalMessage);
  Assert.assertEquals(overdueStateJson.getDaysBetweenPaymentRetries(),(Integer)daysBetweenPaymentRetries);
  Assert.assertEquals(overdueStateJson.isDisableEntitlementAndChangesBlocked(),(Boolean)disableEntitlementAndChangesBlocked);
  Assert.assertEquals(overdueStateJson.isBlockChanges(),(Boolean)blockChanges);
  Assert.assertEquals(overdueStateJson.isClearState(),(Boolean)clearState);
  Assert.assertEquals(overdueStateJson.getReevaluationIntervalDays(),(Integer)reevaluationIntervalDays);
  final String asJson=mapper.writeValueAsString(overdueStateJson);
  final OverdueStateJson fromJson=mapper.readValue(asJson,OverdueStateJson.class);
  Assert.assertEquals(fromJson,overdueStateJson);
}
