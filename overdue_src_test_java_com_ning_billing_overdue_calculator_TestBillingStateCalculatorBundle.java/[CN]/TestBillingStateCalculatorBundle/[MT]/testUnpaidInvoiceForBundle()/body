{
  final UUID thisBundleId=new UUID(0L,0L);
  final UUID thatBundleId=new UUID(0L,1L);
  now=new LocalDate();
  final List<Invoice> invoices=new ArrayList<Invoice>(5);
  invoices.add(createInvoice(now,BigDecimal.ZERO,createInvoiceItems(new UUID[]{thisBundleId,thatBundleId})));
  invoices.add(createInvoice(now.plusDays(1),BigDecimal.TEN,createInvoiceItems(new UUID[]{thatBundleId})));
  invoices.add(createInvoice(now.plusDays(2),new BigDecimal("100.00"),createInvoiceItems(new UUID[]{thatBundleId,thisBundleId,thatBundleId})));
  invoices.add(createInvoice(now.plusDays(3),new BigDecimal("1000.00"),createInvoiceItems(new UUID[]{thisBundleId})));
  invoices.add(createInvoice(now.plusDays(4),new BigDecimal("10000.00"),createInvoiceItems(new UUID[]{thatBundleId,thisBundleId})));
  final Clock clock=new ClockMock();
  final InvoiceUserApi invoiceApi=Mockito.mock(InvoiceUserApi.class);
  final EntitlementUserApi entitlementApi=Mockito.mock(EntitlementUserApi.class);
  Mockito.when(invoiceApi.getUnpaidInvoicesByAccountId(Mockito.<UUID>any(),Mockito.<LocalDate>any(),Mockito.<TenantContext>any())).thenReturn(Collections2.filter(invoices,new Predicate<Invoice>(){
    @Override public boolean apply(    @Nullable final Invoice invoice){
      return invoice != null && BigDecimal.ZERO.compareTo(invoice.getBalance()) < 0;
    }
  }
));
  final BillingStateCalculatorBundle calc=new BillingStateCalculatorBundle(entitlementApi,invoiceApi,accountApi,clock);
  final SortedSet<Invoice> resultinvoices=calc.unpaidInvoicesForBundle(thisBundleId,new UUID(0L,0L),DateTimeZone.UTC,internalCallContext);
  Assert.assertEquals(resultinvoices.size(),3);
  Assert.assertEquals(new BigDecimal("100.0").compareTo(resultinvoices.first().getBalance()),0);
  Assert.assertEquals(new BigDecimal("10000.0").compareTo(resultinvoices.last().getBalance()),0);
}
