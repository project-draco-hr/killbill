{
  UUID thisBundleId=new UUID(0L,0L);
  UUID thatBundleId=new UUID(0L,1L);
  now=new DateTime();
  List<Invoice> invoices=new ArrayList<Invoice>(5);
  invoices.add(createInvoice(now.minusDays(5),BigDecimal.ZERO,createInvoiceItems(new UUID[]{thisBundleId,thatBundleId})));
  invoices.add(createInvoice(now.minusDays(4),BigDecimal.TEN,createInvoiceItems(new UUID[]{thatBundleId})));
  invoices.add(createInvoice(now.minusDays(3),new BigDecimal("100.00"),createInvoiceItems(new UUID[]{thatBundleId,thisBundleId,thatBundleId})));
  invoices.add(createInvoice(now.minusDays(2),new BigDecimal("1000.00"),createInvoiceItems(new UUID[]{thisBundleId})));
  invoices.add(createInvoice(now.minusDays(1),new BigDecimal("10000.00"),createInvoiceItems(new UUID[]{thatBundleId,thisBundleId})));
  Clock clock=new ClockMock();
  InvoiceUserApi invoiceApi=BrainDeadProxyFactory.createBrainDeadProxyFor(InvoiceUserApi.class);
  ((ZombieControl)invoiceApi).addResult("getUnpaidInvoicesByAccountId",invoices);
  SubscriptionBundle bundle=BrainDeadProxyFactory.createBrainDeadProxyFor(SubscriptionBundle.class);
  ((ZombieControl)bundle).addResult("getId",thisBundleId);
  ((ZombieControl)bundle).addResult("getAccountId",UUID.randomUUID());
  EntitlementOverdueApi entitlementApi=BrainDeadProxyFactory.createBrainDeadProxyFor(EntitlementOverdueApi.class);
  Subscription subscription=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class);
  ((ZombieControl)entitlementApi).addResult("getBaseSubscription",subscription);
  Plan plan=MockPlan.createBicycleNoTrialEvergreen1USD();
  PriceList pricelist=new MockPriceList();
  ((ZombieControl)subscription).addResult("getCurrentPlan",plan);
  ((ZombieControl)subscription).addResult("getCurrentPriceList",pricelist);
  ((ZombieControl)subscription).addResult("getCurrentPhase",plan.getFinalPhase());
  BillingStateCalculatorBundle calc=new BillingStateCalculatorBundle(entitlementApi,invoiceApi,clock);
  BillingStateBundle state=calc.calculateBillingState(bundle);
  Assert.assertEquals(state.getNumberOfUnpaidInvoices(),4);
  Assert.assertEquals(state.getBalanceOfUnpaidInvoices().intValue(),11100);
  Assert.assertEquals(state.getDateOfEarliestUnpaidInvoice().compareTo(now.minusDays(5)),0);
  Assert.assertEquals(state.getResponseForLastFailedPayment(),PaymentResponse.INSUFFICIENT_FUNDS);
  Assert.assertEquals(state.getTags().length,0);
  Assert.assertEquals(state.getBasePlanBillingPeriod(),plan.getBillingPeriod());
  Assert.assertEquals(state.getBasePlanPhaseType(),plan.getFinalPhase().getPhaseType());
  Assert.assertEquals(state.getBasePlanPriceList(),pricelist);
  Assert.assertEquals(state.getBasePlanProduct(),plan.getProduct());
}
