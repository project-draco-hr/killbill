{
  final UUID thisBundleId=new UUID(0L,0L);
  final UUID thatBundleId=new UUID(0L,1L);
  now=new LocalDate();
  final List<Invoice> invoices=new ArrayList<Invoice>(5);
  invoices.add(createInvoice(now.minusDays(5),BigDecimal.ZERO,createInvoiceItems(new UUID[]{thisBundleId,thatBundleId})));
  invoices.add(createInvoice(now.minusDays(4),BigDecimal.TEN,createInvoiceItems(new UUID[]{thatBundleId})));
  invoices.add(createInvoice(now.minusDays(3),new BigDecimal("100.00"),createInvoiceItems(new UUID[]{thatBundleId,thisBundleId,thatBundleId})));
  invoices.add(createInvoice(now.minusDays(2),new BigDecimal("1000.00"),createInvoiceItems(new UUID[]{thisBundleId})));
  invoices.add(createInvoice(now.minusDays(1),new BigDecimal("10000.00"),createInvoiceItems(new UUID[]{thatBundleId,thisBundleId})));
  Mockito.when(invoiceApi.getUnpaidInvoicesByAccountId(Mockito.<UUID>any(),Mockito.<LocalDate>any(),Mockito.<InternalTenantContext>any())).thenReturn(invoices);
  final SubscriptionBaseBundle bundle=Mockito.mock(SubscriptionBaseBundle.class);
  Mockito.when(bundle.getId()).thenReturn(thisBundleId);
  Mockito.when(bundle.getAccountId()).thenReturn(UUID.randomUUID());
  final SubscriptionBase subscription=Mockito.mock(SubscriptionBase.class);
  Mockito.when(subscriptionApi.getBaseSubscription(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  final Plan plan=MockPlan.createBicycleNoTrialEvergreen1USD();
  final PriceList pricelist=new MockPriceList();
  Mockito.when(subscription.getCurrentPlan()).thenReturn(plan);
  Mockito.when(subscription.getCurrentPriceList()).thenReturn(pricelist);
  Mockito.when(subscription.getCurrentPhase()).thenReturn(plan.getFinalPhase());
}
