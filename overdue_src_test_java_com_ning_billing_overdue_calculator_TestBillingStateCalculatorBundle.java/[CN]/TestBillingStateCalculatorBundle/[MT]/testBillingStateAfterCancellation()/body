{
  Mockito.when(invoiceApi.getUnpaidInvoicesByAccountId(Mockito.<UUID>any(),Mockito.<LocalDate>any(),Mockito.<InternalTenantContext>any())).thenReturn(ImmutableList.<Invoice>of());
  final UUID bundleId=UUID.randomUUID();
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getId()).thenReturn(bundleId);
  final EntitlementInternalApi entitlementApi=Mockito.mock(EntitlementInternalApi.class);
  final Subscription subscription=Mockito.mock(Subscription.class);
  Mockito.when(entitlementApi.getBaseSubscription(Mockito.eq(bundleId),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  final BillingStateCalculatorBundle calc=new BillingStateCalculatorBundle(entitlementApi,invoiceApi,accountApi,clock);
  final BillingStateBundle billingStateBundle=calc.calculateBillingState(bundle,internalCallContext);
  Assert.assertNull(billingStateBundle.getBasePlanBillingPeriod());
  Assert.assertNull(billingStateBundle.getBasePlanPhaseType());
  Assert.assertNull(billingStateBundle.getBasePlanPriceList());
  Assert.assertNull(billingStateBundle.getBasePlanProduct());
}
