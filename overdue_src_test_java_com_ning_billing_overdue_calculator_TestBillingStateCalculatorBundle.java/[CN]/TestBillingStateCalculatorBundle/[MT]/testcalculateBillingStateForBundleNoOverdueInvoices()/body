{
  final UUID thisBundleId=new UUID(0L,0L);
  final UUID thatBundleId=new UUID(0L,1L);
  now=new DateTime();
  final List<Invoice> invoices=new ArrayList<Invoice>(5);
  final Clock clock=new ClockMock();
  final InvoiceUserApi invoiceApi=BrainDeadProxyFactory.createBrainDeadProxyFor(InvoiceUserApi.class);
  ((ZombieControl)invoiceApi).addResult("getUnpaidInvoicesByAccountId",invoices);
  final SubscriptionBundle bundle=BrainDeadProxyFactory.createBrainDeadProxyFor(SubscriptionBundle.class);
  ((ZombieControl)bundle).addResult("getId",thisBundleId);
  ((ZombieControl)bundle).addResult("getAccountId",UUID.randomUUID());
  final EntitlementUserApi entitlementApi=BrainDeadProxyFactory.createBrainDeadProxyFor(EntitlementUserApi.class);
  final Subscription subscription=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class);
  ((ZombieControl)entitlementApi).addResult("getBaseSubscription",subscription);
  final Plan plan=MockPlan.createBicycleNoTrialEvergreen1USD();
  final PriceList pricelist=new MockPriceList();
  ((ZombieControl)subscription).addResult("getCurrentPlan",plan);
  ((ZombieControl)subscription).addResult("getCurrentPriceList",pricelist);
  ((ZombieControl)subscription).addResult("getCurrentPhase",plan.getFinalPhase());
  final BillingStateCalculatorBundle calc=new BillingStateCalculatorBundle(entitlementApi,invoiceApi,clock);
  final BillingStateBundle state=calc.calculateBillingState(bundle);
  Assert.assertEquals(state.getNumberOfUnpaidInvoices(),0);
  Assert.assertEquals(state.getBalanceOfUnpaidInvoices().intValue(),0);
  Assert.assertEquals(state.getDateOfEarliestUnpaidInvoice(),null);
  Assert.assertEquals(state.getResponseForLastFailedPayment(),PaymentResponse.INSUFFICIENT_FUNDS);
  Assert.assertEquals(state.getTags().length,0);
  Assert.assertEquals(state.getBasePlanBillingPeriod(),plan.getBillingPeriod());
  Assert.assertEquals(state.getBasePlanPhaseType(),plan.getFinalPhase().getPhaseType());
  Assert.assertEquals(state.getBasePlanPriceList(),pricelist);
  Assert.assertEquals(state.getBasePlanProduct(),plan.getProduct());
}
