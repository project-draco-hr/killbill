{
  final Account account=Mockito.mock(Account.class);
  final PaymentMethodPlugin paymentMethodPlugin=Mockito.mock(PaymentMethodPlugin.class);
  final Iterable<PluginProperty> properties=ImmutableList.<PluginProperty>of();
  final String paymentMethodExternalKey=UUID.randomUUID().toString();
  final UUID paymentMethodId1=paymentMethodProcessor.addPaymentMethod(paymentMethodExternalKey,"__EXTERNAL_PAYMENT__",account,false,paymentMethodPlugin,properties,callContext,internalCallContext);
  final PaymentMethod paymentMethod1=paymentMethodProcessor.getPaymentMethodById(paymentMethodId1,false,false,properties,callContext,internalCallContext);
  Assert.assertEquals(paymentMethod1.getExternalKey(),paymentMethodExternalKey);
  final UUID paymentMethodId2=paymentMethodProcessor.addPaymentMethod(null,"__EXTERNAL_PAYMENT__",account,false,paymentMethodPlugin,properties,callContext,internalCallContext);
  final PaymentMethod paymentMethod2=paymentMethodProcessor.getPaymentMethodById(paymentMethodId2,false,false,properties,callContext,internalCallContext);
  Assert.assertEquals(paymentMethod2.getExternalKey(),"unknown");
  final UUID paymentMethodId3=paymentMethodProcessor.addPaymentMethod(null,"__EXTERNAL_PAYMENT__",account,false,paymentMethodPlugin,properties,callContext,internalCallContext);
  final PaymentMethod paymentMethod3=paymentMethodProcessor.getPaymentMethodById(paymentMethodId3,false,false,properties,callContext,internalCallContext);
  Assert.assertNotEquals(paymentMethod3.getExternalKey(),"unknown");
}
