{
  log.info("Starting testENT_REPAIR_SUB_RECREATE_NOT_EMPTY");
  test.withException(new TestWithExceptionCallback(){
    @Override public void doTest() throws EntitlementRepairException {
      testListener.pushExpectedEvent(NextEvent.PHASE);
      Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(40));
      clock.addDeltaFromReality(it.toDurationMillis());
      assertTrue(testListener.isCompleted(5000));
      BundleTimeline bundleRepair=repairApi.getBundleRepair(bundle.getId());
      sortEventsOnBundle(bundleRepair);
      PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.EVERGREEN);
      NewEvent ne=createNewEvent(SubscriptionTransitionType.CREATE,baseSubscription.getStartDate().plusDays(10),spec);
      List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
      des.add(createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(1).getEventId()));
      SubscriptionTimeline sRepair=createSubscriptionRepair(baseSubscription.getId(),des,Collections.singletonList(ne));
      BundleTimeline bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(sRepair));
      repairApi.repairBundle(bRepair,true,context);
    }
  }
,ErrorCode.ENT_REPAIR_SUB_RECREATE_NOT_EMPTY);
}
