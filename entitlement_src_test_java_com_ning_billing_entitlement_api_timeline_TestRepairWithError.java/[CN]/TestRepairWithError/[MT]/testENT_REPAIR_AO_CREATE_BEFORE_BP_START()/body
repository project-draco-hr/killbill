{
  test.withException(new TestWithExceptionCallback(){
    @Override public void doTest() throws EntitlementRepairException, EntitlementUserApiException {
      Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(4));
      clock.addDeltaFromReality(it.toDurationMillis());
      final SubscriptionData aoSubscription=createSubscription("Telescopic-Scope",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME);
      it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(4));
      clock.addDeltaFromReality(it.toDurationMillis());
      final BundleTimeline bundleRepair=repairApi.getBundleTimeline(bundle.getId(),callContext);
      sortEventsOnBundle(bundleRepair);
      final SubscriptionTimeline bpRepair=getSubscriptionRepair(baseSubscription.getId(),bundleRepair);
      assertEquals(bpRepair.getExistingEvents().size(),2);
      final SubscriptionTimeline aoRepair=getSubscriptionRepair(aoSubscription.getId(),bundleRepair);
      assertEquals(aoRepair.getExistingEvents().size(),2);
      final List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
      des.add(createDeletedEvent(aoRepair.getExistingEvents().get(0).getEventId()));
      des.add(createDeletedEvent(aoRepair.getExistingEvents().get(1).getEventId()));
      final DateTime aoRecreateDate=aoSubscription.getStartDate().minusDays(5);
      final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.DISCOUNT);
      final NewEvent ne=createNewEvent(SubscriptionTransitionType.CREATE,aoRecreateDate,spec);
      final SubscriptionTimeline saoRepair=createSubscriptionRepair(aoSubscription.getId(),des,Collections.singletonList(ne));
      final BundleTimeline bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(saoRepair));
      final boolean dryRun=true;
      repairApi.repairBundle(bRepair,dryRun,callContext);
    }
  }
,ErrorCode.ENT_REPAIR_AO_CREATE_BEFORE_BP_START);
}
