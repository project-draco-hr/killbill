{
  final String someUUID=UUID.randomUUID().toString();
  final UUID bundleId=UUID.randomUUID();
  final String externalKey=UUID.randomUUID().toString();
  final List<AuditLogJson> auditLogs=createAuditLogsJson(clock.getUTCNow());
  SubscriptionReadEventJson event=new SubscriptionReadEventJson(someUUID,BillingPeriod.NO_BILLING_PERIOD.toString(),new LocalDate(),new LocalDate(),"product","priceList","eventType","phase",null);
  final EntitlementJsonWithEvents subscription=new EntitlementJsonWithEvents(someUUID,someUUID,someUUID,externalKey,ImmutableList.<SubscriptionReadEventJson>of(event),null,null,auditLogs);
  final BundleJsonWithSubscriptions bundleJsonWithSubscriptions=new BundleJsonWithSubscriptions(bundleId.toString(),externalKey,ImmutableList.<EntitlementJsonWithEvents>of(subscription),auditLogs);
  Assert.assertEquals(bundleJsonWithSubscriptions.getBundleId(),bundleId.toString());
  Assert.assertEquals(bundleJsonWithSubscriptions.getExternalKey(),externalKey);
  Assert.assertEquals(bundleJsonWithSubscriptions.getSubscriptions().size(),1);
  Assert.assertEquals(bundleJsonWithSubscriptions.getAuditLogs(),auditLogs);
  final String asJson=mapper.writeValueAsString(bundleJsonWithSubscriptions);
  final BundleJsonWithSubscriptions fromJson=mapper.readValue(asJson,BundleJsonWithSubscriptions.class);
  Assert.assertEquals(fromJson,bundleJsonWithSubscriptions);
}
