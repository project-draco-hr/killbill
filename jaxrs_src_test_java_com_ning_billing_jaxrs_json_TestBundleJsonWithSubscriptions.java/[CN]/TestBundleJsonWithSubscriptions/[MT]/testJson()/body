{
  final SubscriptionTimeline.ExistingEvent event=Mockito.mock(SubscriptionTimeline.ExistingEvent.class);
  final DateTime effectiveDate=new DateTime(DateTimeZone.UTC);
  final UUID eventId=UUID.randomUUID();
  final PlanPhaseSpecifier planPhaseSpecifier=new PlanPhaseSpecifier(UUID.randomUUID().toString(),ProductCategory.BASE,BillingPeriod.NO_BILLING_PERIOD,UUID.randomUUID().toString(),PhaseType.EVERGREEN);
  Mockito.when(event.getEffectiveDate()).thenReturn(effectiveDate);
  Mockito.when(event.getEventId()).thenReturn(eventId);
  Mockito.when(event.getSubscriptionTransitionType()).thenReturn(SubscriptionTransitionType.CREATE);
  Mockito.when(event.getPlanPhaseSpecifier()).thenReturn(planPhaseSpecifier);
  final SubscriptionTimeline subscriptionTimeline=Mockito.mock(SubscriptionTimeline.class);
  Mockito.when(subscriptionTimeline.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(subscriptionTimeline.getExistingEvents()).thenReturn(ImmutableList.<SubscriptionTimeline.ExistingEvent>of(event));
  final UUID bundleId=UUID.randomUUID();
  final String externalKey=UUID.randomUUID().toString();
  final SubscriptionJsonWithEvents subscription=new SubscriptionJsonWithEvents(bundleId,subscriptionTimeline);
  final BundleJsonWithSubscriptions bundleJsonWithSubscriptions=new BundleJsonWithSubscriptions(bundleId.toString(),externalKey,ImmutableList.<SubscriptionJsonWithEvents>of(subscription));
  Assert.assertEquals(bundleJsonWithSubscriptions.getBundleId(),bundleId.toString());
  Assert.assertEquals(bundleJsonWithSubscriptions.getExternalKey(),externalKey);
  Assert.assertEquals(bundleJsonWithSubscriptions.getSubscriptions().size(),1);
  final String asJson=mapper.writeValueAsString(bundleJsonWithSubscriptions);
  Assert.assertEquals(asJson,"{\"bundleId\":\"" + bundleJsonWithSubscriptions.getBundleId() + "\","+ "\"externalKey\":\""+ bundleJsonWithSubscriptions.getExternalKey()+ "\","+ "\"subscriptions\":[{\"events\":[{\"eventId\":\""+ event.getEventId().toString()+ "\","+ "\"billingPeriod\":\""+ event.getPlanPhaseSpecifier().getBillingPeriod().toString()+ "\","+ "\"product\":\""+ event.getPlanPhaseSpecifier().getProductName()+ "\","+ "\"priceList\":\""+ event.getPlanPhaseSpecifier().getPriceListName()+ "\","+ "\"eventType\":\""+ event.getSubscriptionTransitionType().toString()+ "\","+ "\"phase\":\""+ event.getPlanPhaseSpecifier().getPhaseType()+ "\","+ "\"requestedDate\":null,"+ "\"effectiveDate\":\""+ DefaultClock.toUTCDateTime(event.getEffectiveDate()).toDateTimeISO().toString()+ "\"}],"+ "\"subscriptionId\":\""+ subscriptionTimeline.getId().toString()+ "\",\"deletedEvents\":null,\"newEvents\":null}]}");
  final BundleJsonWithSubscriptions fromJson=mapper.readValue(asJson,BundleJsonWithSubscriptions.class);
  Assert.assertEquals(fromJson,bundleJsonWithSubscriptions);
}
