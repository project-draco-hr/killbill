{
  final SubscriptionBaseTimeline.ExistingEvent event=Mockito.mock(SubscriptionBaseTimeline.ExistingEvent.class);
  final DateTime effectiveDate=DefaultClock.toUTCDateTime(new DateTime(DateTimeZone.UTC));
  final UUID eventId=UUID.randomUUID();
  final PlanPhaseSpecifier planPhaseSpecifier=new PlanPhaseSpecifier(UUID.randomUUID().toString(),ProductCategory.BASE,BillingPeriod.NO_BILLING_PERIOD,UUID.randomUUID().toString(),PhaseType.EVERGREEN);
  Mockito.when(event.getEffectiveDate()).thenReturn(effectiveDate);
  Mockito.when(event.getEventId()).thenReturn(eventId);
  Mockito.when(event.getSubscriptionTransitionType()).thenReturn(SubscriptionBaseTransitionType.CREATE);
  Mockito.when(event.getPlanPhaseSpecifier()).thenReturn(planPhaseSpecifier);
  final SubscriptionBaseTimeline subscriptionTimeline=Mockito.mock(SubscriptionBaseTimeline.class);
  Mockito.when(subscriptionTimeline.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(subscriptionTimeline.getExistingEvents()).thenReturn(ImmutableList.<SubscriptionBaseTimeline.ExistingEvent>of(event));
  final BundleBaseTimeline bundleBaseTimeline=Mockito.mock(BundleBaseTimeline.class);
  final UUID bundleId=UUID.randomUUID();
  final String externalKey=UUID.randomUUID().toString();
  Mockito.when(bundleBaseTimeline.getId()).thenReturn(bundleId);
  Mockito.when(bundleBaseTimeline.getExternalKey()).thenReturn(externalKey);
  Mockito.when(bundleBaseTimeline.getSubscriptions()).thenReturn(ImmutableList.<SubscriptionBaseTimeline>of(subscriptionTimeline));
  final BundleJsonWithSubscriptions bundleJsonWithSubscriptions=null;
  Assert.assertEquals(bundleJsonWithSubscriptions.getBundleId(),bundleId.toString());
  Assert.assertEquals(bundleJsonWithSubscriptions.getExternalKey(),externalKey);
  Assert.assertEquals(bundleJsonWithSubscriptions.getSubscriptions().size(),1);
  final EntitlementJsonWithEvents events=bundleJsonWithSubscriptions.getSubscriptions().get(0);
  Assert.assertNull(events.getDeletedEvents());
  Assert.assertNull(events.getNewEvents());
  Assert.assertEquals(events.getEvents().size(),1);
  Assert.assertEquals(events.getEvents().get(0).getEffectiveDate(),DefaultClock.toUTCDateTime(effectiveDate));
  Assert.assertEquals(events.getEvents().get(0).getEventId(),eventId.toString());
  Assert.assertNull(bundleJsonWithSubscriptions.getAuditLogs());
}
