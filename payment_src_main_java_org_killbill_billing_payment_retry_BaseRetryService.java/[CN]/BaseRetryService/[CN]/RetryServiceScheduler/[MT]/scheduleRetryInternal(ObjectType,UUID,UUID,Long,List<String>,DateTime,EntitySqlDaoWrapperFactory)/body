{
  final InternalCallContext context=createCallContextFromPaymentId(objectType,objectId,tenantRecordId);
  try {
    final NotificationQueue retryQueue=notificationQueueService.getNotificationQueue(DefaultPaymentService.SERVICE_NAME,getQueueName());
    final NotificationEvent key=new PaymentRetryNotificationKey(attemptId,paymentControlPluginNames);
    if (retryQueue != null) {
      log.debug("Scheduling retry timeOfRetry={}, key={}",timeOfRetry,key);
      if (transactionalDao == null) {
        retryQueue.recordFutureNotification(timeOfRetry,key,context.getUserToken(),context.getAccountRecordId(),context.getTenantRecordId());
      }
 else {
        retryQueue.recordFutureNotificationFromTransaction(transactionalDao.getHandle().getConnection(),timeOfRetry,key,context.getUserToken(),context.getAccountRecordId(),context.getTenantRecordId());
      }
    }
  }
 catch (  final NoSuchNotificationQueue e) {
    log.error(String.format("Failed to retrieve notification queue %s:%s",DefaultPaymentService.SERVICE_NAME,getQueueName()));
    return false;
  }
catch (  final IOException e) {
    log.error(String.format("Failed to serialize notificationQueue event for objectId %s",objectId));
    return false;
  }
  return true;
}
