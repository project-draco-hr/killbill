{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final SubscriptionSqlDao transactional=entitySqlDaoWrapperFactory.become(SubscriptionSqlDao.class);
      transactional.create(new SubscriptionModelDao(subscription),context);
      final SubscriptionEventSqlDao eventsDaoFromSameTransaction=entitySqlDaoWrapperFactory.become(SubscriptionEventSqlDao.class);
      for (      final SubscriptionEvent cur : initialEvents) {
        eventsDaoFromSameTransaction.create(new SubscriptionEventModelDao(cur),context);
        final boolean isBusEvent=cur.getEffectiveDate().compareTo(clock.getUTCNow()) <= 0 && (cur.getType() == EventType.API_USER);
        recordBusOrFutureNotificationFromTransaction(subscription,cur,entitySqlDaoWrapperFactory,isBusEvent,0,context);
      }
      if (initialEvents.size() > 0) {
        notifyBusOfRequestedChange(entitySqlDaoWrapperFactory,subscription,initialEvents.get(initialEvents.size() - 1),context);
      }
      return null;
    }
  }
);
}
