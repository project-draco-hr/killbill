{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final SubscriptionEventSqlDao transactional=entitySqlDaoWrapperFactory.become(SubscriptionEventSqlDao.class);
      final UUID subscriptionId=subscription.getId();
      final List<SubscriptionBaseEvent> changeEventsTweakedWithMigrateBilling=reinsertFutureMigrateBillingEventOnChangeFromTransaction(subscriptionId,changeEvents,entitySqlDaoWrapperFactory,context);
      cancelFutureEventsFromTransaction(subscriptionId,entitySqlDaoWrapperFactory,context);
      for (      final SubscriptionBaseEvent cur : changeEventsTweakedWithMigrateBilling) {
        transactional.create(new SubscriptionEventModelDao(cur),context);
        final boolean isBusEvent=cur.getEffectiveDate().compareTo(clock.getUTCNow()) <= 0 && (cur.getType() == EventType.API_USER);
        recordBusOrFutureNotificationFromTransaction(subscription,cur,entitySqlDaoWrapperFactory,isBusEvent,0,context);
      }
      final SubscriptionBaseEvent finalEvent=changeEventsTweakedWithMigrateBilling.get(changeEvents.size() - 1);
      notifyBusOfRequestedChange(entitySqlDaoWrapperFactory,subscription,finalEvent,context);
      return null;
    }
  }
);
}
