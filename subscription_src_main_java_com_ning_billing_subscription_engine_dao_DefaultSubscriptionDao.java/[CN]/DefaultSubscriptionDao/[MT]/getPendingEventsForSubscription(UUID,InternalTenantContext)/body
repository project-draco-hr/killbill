{
  final Date now=clock.getUTCNow().toDate();
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<List<SubscriptionEvent>>(){
    @Override public List<SubscriptionEvent> inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final List<SubscriptionEventModelDao> eventModels=entitySqlDaoWrapperFactory.become(SubscriptionEventSqlDao.class).getFutureActiveEventForSubscription(subscriptionId.toString(),now,context);
      final List<SubscriptionEvent> events=new ArrayList<SubscriptionEvent>(Collections2.transform(eventModels,new Function<SubscriptionEventModelDao,SubscriptionEvent>(){
        @Override public SubscriptionEvent apply(        @Nullable final SubscriptionEventModelDao input){
          return SubscriptionEventModelDao.toSubscriptionEvent(input);
        }
      }
));
      return events;
    }
  }
);
}
