{
  Response response=doGet(JaxrsResource.TAG_DEFINITIONS_PATH,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  String baseJson=response.getResponseBody();
  List<TagDefinitionJson> objFromJson=mapper.readValue(baseJson,new TypeReference<List<TagDefinitionJson>>(){
  }
);
  final int sizeSystemTag=(objFromJson == null || objFromJson.size() == 0) ? 0 : objFromJson.size();
  final TagDefinitionJson inputBlue=new TagDefinitionJson(null,"blue","relaxing color");
  baseJson=mapper.writeValueAsString(inputBlue);
  response=doPost(JaxrsResource.TAG_DEFINITIONS_PATH,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  final TagDefinitionJson inputRed=new TagDefinitionJson(null,"red","hot color");
  baseJson=mapper.writeValueAsString(inputRed);
  response=doPost(JaxrsResource.TAG_DEFINITIONS_PATH,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  final TagDefinitionJson inputYellow=new TagDefinitionJson(null,"yellow","vibrant color");
  baseJson=mapper.writeValueAsString(inputYellow);
  response=doPost(JaxrsResource.TAG_DEFINITIONS_PATH,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  final TagDefinitionJson inputGreen=new TagDefinitionJson(null,"green","super relaxing color");
  baseJson=mapper.writeValueAsString(inputGreen);
  response=doPost(JaxrsResource.TAG_DEFINITIONS_PATH,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  response=doGet(JaxrsResource.TAG_DEFINITIONS_PATH,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  objFromJson=mapper.readValue(baseJson,new TypeReference<List<TagDefinitionJson>>(){
  }
);
  assertNotNull(objFromJson);
  assertEquals(objFromJson.size(),4 + sizeSystemTag);
  final String uri=JaxrsResource.TAG_DEFINITIONS_PATH + "/" + objFromJson.get(0).getId();
  response=doDelete(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.NO_CONTENT.getStatusCode());
  response=doGet(JaxrsResource.TAG_DEFINITIONS_PATH,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  objFromJson=mapper.readValue(baseJson,new TypeReference<List<TagDefinitionJson>>(){
  }
);
  assertNotNull(objFromJson);
  assertEquals(objFromJson.size(),3 + sizeSystemTag);
}
