{
  final LocalDate initialDate=new LocalDate(2015,10,1);
  clock.setDay(initialDate);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  final PlanPhaseSpecifier baseSpec=new PlanPhaseSpecifier("Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final PlanPhaseSpecifier addOnSpec1=new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final PlanPhaseSpecifier addOnSpec2=new PlanPhaseSpecifier("Laser-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null);
  final String externalKey="baseExternalKey";
  EntitlementSpecifier baseEntitlementSpecifier=new DefaultEntitlementSpecifier(baseSpec,null);
  EntitlementSpecifier addOnEntitlementSpecifier1=new DefaultEntitlementSpecifier(addOnSpec1,null);
  EntitlementSpecifier addOnEntitlementSpecifier2=new DefaultEntitlementSpecifier(addOnSpec2,null);
  final List<EntitlementSpecifier> specifierList=new ArrayList<EntitlementSpecifier>();
  specifierList.add(baseEntitlementSpecifier);
  specifierList.add(addOnEntitlementSpecifier1);
  specifierList.add(addOnEntitlementSpecifier2);
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.CREATE,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT);
  final Entitlement entitlement=entitlementApi.createBaseEntitlementWithAddOns(account.getId(),externalKey,specifierList,initialDate,ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  checkNoMoreInvoiceToGenerate(account);
  assertNotNull(entitlement);
  final List<Entitlement> allEntitlementsForBundle=entitlementApi.getAllEntitlementsForBundle(entitlement.getBundleId(),callContext);
  assertTrue(allEntitlementsForBundle.size() == 3);
  final Entitlement baseEntitlement=allEntitlementsForBundle.get(0);
  final Entitlement addOnEntitlement1=allEntitlementsForBundle.get(1);
  final Entitlement addOnEntitlement2=allEntitlementsForBundle.get(2);
  assertEquals(baseEntitlement.getLastActiveProduct().getName(),"Shotgun");
  assertEquals(baseEntitlement.getLastActiveProductCategory(),ProductCategory.BASE);
  assertEquals(addOnEntitlement1.getLastActiveProduct().getName(),"Telescopic-Scope");
  assertEquals(addOnEntitlement1.getLastActiveProductCategory(),ProductCategory.ADD_ON);
  assertEquals(addOnEntitlement2.getLastActiveProduct().getName(),"Laser-Scope");
  assertEquals(addOnEntitlement2.getLastActiveProductCategory(),ProductCategory.ADD_ON);
  final List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertTrue(invoices.size() == 1);
  assertTrue(invoices.get(0).getInvoiceItems().size() == 3);
  final ImmutableList<ExpectedInvoiceItemCheck> toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(initialDate,new LocalDate(2015,10,31),InvoiceItemType.RECURRING,new BigDecimal("387.05")),new ExpectedInvoiceItemCheck(initialDate,new LocalDate(2015,10,31),InvoiceItemType.RECURRING,new BigDecimal("967.69")),new ExpectedInvoiceItemCheck(initialDate,null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
}
