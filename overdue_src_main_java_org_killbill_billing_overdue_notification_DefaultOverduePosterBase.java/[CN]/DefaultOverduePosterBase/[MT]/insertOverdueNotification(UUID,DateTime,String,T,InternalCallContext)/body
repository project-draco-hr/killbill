{
  try {
    final NotificationQueue overdueQueue=notificationQueueService.getNotificationQueue(DefaultOverdueService.OVERDUE_SERVICE_NAME,overdueQueueName);
    transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
      @Override public Void inTransaction(      final EntitySqlDaoWrapperFactory entitySqlDaoWrapperFactory) throws Exception {
        final Class<T> clazz=(Class<T>)notificationKey.getClass();
        final Collection<NotificationEventWithMetadata<T>> futureNotifications=getFutureNotificationsForAccountInTransaction(entitySqlDaoWrapperFactory,overdueQueue,clazz,context);
        final boolean shouldInsertNewNotification=cleanupFutureNotificationsFormTransaction(entitySqlDaoWrapperFactory,futureNotifications,futureNotificationTime,overdueQueue);
        if (shouldInsertNewNotification) {
          log.debug("Queuing overdue check notification. Account id: {}, timestamp: {}",accountId.toString(),futureNotificationTime.toString());
          overdueQueue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory.getHandle().getConnection(),futureNotificationTime,notificationKey,context.getUserToken(),context.getAccountRecordId(),context.getTenantRecordId());
        }
 else {
          log.debug("Skipping queuing overdue check notification. Account id: {}, timestamp: {}",accountId.toString(),futureNotificationTime.toString());
        }
        return null;
      }
    }
);
  }
 catch (  final NoSuchNotificationQueue e) {
    log.error("Attempting to put items on a non-existent queue (DefaultOverdueCheck).",e);
  }
}
