{
  this.timelineCoder=new DefaultTimelineCoder();
  this.dbi=new DBI(DBI_URL,DBI_USER,DBI_PASSWORD);
  this.defaultTimelineDAO=new DefaultTimelineDao(dbi);
  this.timelineDAO=new CachingTimelineDao(defaultTimelineDAO);
  log.info("DBI initialized");
  final List<String> hostNames=new ArrayList<String>(HOST_ID_COUNT);
  for (int i=0; i < HOST_ID_COUNT; i++) {
    final String hostName=String.format("host-%d",i + 1);
    hostNames.add(hostName);
    defaultTimelineDAO.getOrAddSource(hostName,internalCallContext);
  }
  hosts=timelineDAO.getSources(internalCallContext);
  hostIds=new ArrayList<Integer>(hosts.keySet());
  Collections.sort(hostIds);
  log.info("%d hosts created",hostIds.size());
  final List<String> categoryNames=new ArrayList<String>(EVENT_CATEGORY_COUNT);
  for (int i=0; i < EVENT_CATEGORY_COUNT; i++) {
    final String category=String.format("category-%d",i);
    categoryNames.add(category);
    defaultTimelineDAO.getOrAddEventCategory(category,internalCallContext);
  }
  eventCategories=timelineDAO.getEventCategories(internalCallContext);
  eventCategoryIds=new ArrayList<Integer>(eventCategories.keySet());
  Collections.sort(eventCategoryIds);
  log.info("%d event categories created",eventCategoryIds.size());
  final List<CategoryRecordIdAndMetric> categoriesAndSampleKinds=new ArrayList<CategoryRecordIdAndMetric>();
  for (  final int eventCategoryId : eventCategoryIds) {
    for (int i=0; i < AVERAGE_SAMPLE_KINDS_PER_CATEGORY; i++) {
      final String sampleKind=String.format("%s-sample-kind-%d",eventCategories.get(eventCategoryId),i + 1);
      categoriesAndSampleKinds.add(new CategoryRecordIdAndMetric(eventCategoryId,sampleKind));
      defaultTimelineDAO.getOrAddMetric(eventCategoryId,sampleKind,internalCallContext);
    }
  }
  sampleKindsBiMap=timelineDAO.getMetrics(internalCallContext);
  categorySampleKindIds=new HashMap<Integer,List<Integer>>();
  int sampleKindIdCounter=0;
  for (  final Map.Entry<Integer,CategoryRecordIdAndMetric> entry : sampleKindsBiMap.entrySet()) {
    final int categoryId=entry.getValue().getEventCategoryId();
    List<Integer> sampleKindIds=categorySampleKindIds.get(categoryId);
    if (sampleKindIds == null) {
      sampleKindIds=new ArrayList<Integer>();
      categorySampleKindIds.put(categoryId,sampleKindIds);
    }
    final int sampleKindId=entry.getKey();
    sampleKindIds.add(sampleKindId);
    sampleKindIdCounter++;
  }
  log.info("%d sampleKindIds created",sampleKindIdCounter);
  categoriesForHostId=new HashMap<Integer,List<Integer>>();
  int categoryCounter=0;
  for (  final int hostId : hostIds) {
    final List<Integer> categories=new ArrayList<Integer>();
    categoriesForHostId.put(hostId,categories);
    for (int i=0; i < AVERAGE_CATEGORIES_PER_HOST; i++) {
      final int categoryId=eventCategoryIds.get(categoryCounter);
      categories.add(categoryId);
      categoryCounter=(categoryCounter + 1) % EVENT_CATEGORY_COUNT;
    }
  }
  log.info("Finished creating hosts, categories and sample kinds");
}
