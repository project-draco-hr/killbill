{
  DateTime startDate=clock.getUTCNow();
  Subscription baseSubscription=createSubscription("Shotgun",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,startDate);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  clock.setDeltaFromReality(getDurationDay(35),0);
  assertTrue(testListener.isCompleted(5000));
  DateTime newChargedThroughDate=baseSubscription.getStartDate().plusDays(30).plusMonths(1);
  billingApi.setChargedThroughDate(baseSubscription.getId(),newChargedThroughDate,context);
  baseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId());
  DateTime requestedChange=clock.getUTCNow();
  baseSubscription.changePlan("Pistol",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,requestedChange,context);
  Plan currentPlan=baseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),"Shotgun");
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  DateTime repairTime=clock.getUTCNow().minusDays(1);
  BundleRepair bundleRepair=repairApi.getBundleRepair(bundle.getId());
  sortEventsOnBundle(bundleRepair);
  PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.EVERGREEN);
  NewEvent ne=createNewEvent(SubscriptionTransitionType.CHANGE,repairTime,spec);
  List<DeletedEvent> des=new LinkedList<SubscriptionRepair.DeletedEvent>();
  des.add(createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(2).getEventId()));
  SubscriptionRepair sRepair=createSubscriptionReapir(baseSubscription.getId(),des,Collections.singletonList(ne));
  BundleRepair bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(sRepair));
  boolean dryRun=false;
  repairApi.repairBundle(bRepair,dryRun,context);
  baseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId());
  assertEquals(((SubscriptionData)baseSubscription).getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  assertEquals(baseSubscription.getBundleId(),bundle.getId());
  assertEquals(baseSubscription.getStartDate(),baseSubscription.getStartDate());
  currentPlan=baseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),"Assault-Rifle");
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  PlanPhase currentPhase=baseSubscription.getCurrentPhase();
  assertNotNull(currentPhase);
  assertEquals(currentPhase.getPhaseType(),PhaseType.EVERGREEN);
}
