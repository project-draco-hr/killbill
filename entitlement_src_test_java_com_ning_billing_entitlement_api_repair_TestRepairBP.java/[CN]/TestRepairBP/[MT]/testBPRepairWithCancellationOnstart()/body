{
  String baseProduct="Shotgun";
  DateTime startDate=clock.getUTCNow();
  Subscription baseSubscription=createSubscription(baseProduct,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,startDate);
  Duration durationShift=getDurationDay(10);
  clock.setDeltaFromReality(durationShift,0);
  BundleRepair bundleRepair=repairApi.getBundleRepair(bundle.getId());
  sortEventsOnBundle(bundleRepair);
  List<DeletedEvent> des=new LinkedList<SubscriptionRepair.DeletedEvent>();
  des.add(createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(1).getEventId()));
  NewEvent ne=createNewEvent(SubscriptionTransitionType.CANCEL,baseSubscription.getStartDate(),null);
  SubscriptionRepair sRepair=createSubscriptionReapir(baseSubscription.getId(),des,Collections.singletonList(ne));
  BundleRepair bRepair=createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(sRepair));
  boolean dryRun=true;
  BundleRepair dryRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  sortEventsOnBundle(dryRunBundleRepair);
  List<SubscriptionRepair> subscriptionRepair=dryRunBundleRepair.getSubscriptions();
  assertEquals(subscriptionRepair.size(),1);
  SubscriptionRepair cur=subscriptionRepair.get(0);
  int index=0;
  List<ExistingEvent> events=subscriptionRepair.get(0).getExistingEvents();
  assertEquals(events.size(),2);
  List<ExistingEvent> expected=new LinkedList<SubscriptionRepair.ExistingEvent>();
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.CREATE,baseProduct,PhaseType.TRIAL,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.NO_BILLING_PERIOD,baseSubscription.getStartDate()));
  expected.add(createExistingEventForAssertion(SubscriptionTransitionType.CANCEL,baseProduct,PhaseType.TRIAL,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.NO_BILLING_PERIOD,baseSubscription.getStartDate()));
  for (  ExistingEvent e : expected) {
    validateExistingEventForAssertion(e,events.get(index++));
  }
  SubscriptionData dryRunBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId());
  assertEquals(dryRunBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  assertEquals(dryRunBaseSubscription.getBundleId(),bundle.getId());
  assertEquals(dryRunBaseSubscription.getStartDate(),baseSubscription.getStartDate());
  Plan currentPlan=dryRunBaseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),baseProduct);
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  PlanPhase currentPhase=dryRunBaseSubscription.getCurrentPhase();
  assertNotNull(currentPhase);
  assertEquals(currentPhase.getPhaseType(),PhaseType.TRIAL);
  dryRun=false;
  BundleRepair realRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,context);
  subscriptionRepair=realRunBundleRepair.getSubscriptions();
  assertEquals(subscriptionRepair.size(),1);
  cur=subscriptionRepair.get(0);
  assertEquals(cur.getId(),baseSubscription.getId());
  index=0;
  for (  ExistingEvent e : expected) {
    validateExistingEventForAssertion(e,events.get(index++));
  }
  SubscriptionData realRunBaseSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(baseSubscription.getId());
  assertEquals(realRunBaseSubscription.getAllTransitions().size(),2);
  assertEquals(realRunBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  assertEquals(realRunBaseSubscription.getBundleId(),bundle.getId());
  assertEquals(realRunBaseSubscription.getStartDate(),startDate);
  assertEquals(realRunBaseSubscription.getState(),SubscriptionState.CANCELLED);
}
