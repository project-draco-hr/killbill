{
  final int size=events.size();
  for (int i=0; i < size; i++) {
    final SubscriptionEvent cur=events.get(i);
    final SubscriptionEvent next=(i < (size - 1)) ? events.get(i + 1) : null;
    final boolean shouldSwap=(next != null && shouldSwap(cur,next,true));
    final boolean shouldReverseSort=(next == null || shouldSwap);
    int currentIndex=i;
    if (shouldSwap) {
      Collections.swap(events,i,i + 1);
    }
    if (shouldReverseSort) {
      while (currentIndex >= 1) {
        final SubscriptionEvent revCur=events.get(currentIndex);
        final SubscriptionEvent other=events.get(currentIndex - 1);
        if (shouldSwap(revCur,other,false)) {
          Collections.swap(events,currentIndex,currentIndex - 1);
        }
        if (revCur.getEffectiveDate().compareTo(other.getEffectiveDate()) != 0) {
          break;
        }
        currentIndex--;
      }
    }
  }
}
