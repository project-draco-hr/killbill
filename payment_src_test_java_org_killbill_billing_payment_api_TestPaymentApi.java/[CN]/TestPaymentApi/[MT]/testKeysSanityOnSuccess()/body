{
  final String authKey=UUID.randomUUID().toString();
  final Payment authorization=createPayment(TransactionType.AUTHORIZE,null,null,authKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
  assertNotNull(authorization);
  Assert.assertEquals(authorization.getTransactions().size(),1);
  Assert.assertEquals(authorization.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  try {
    createPayment(TransactionType.CAPTURE,authorization.getId(),null,authKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  try {
    createPayment(TransactionType.AUTHORIZE,null,authorization.getExternalKey(),null,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_OPERATION.getCode());
  }
  try {
    createPayment(TransactionType.AUTHORIZE,null,authorization.getExternalKey(),UUID.randomUUID().toString(),BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_OPERATION.getCode());
  }
  try {
    createPayment(TransactionType.AUTHORIZE,null,null,authKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  final Account account1=testHelper.createTestAccount("bobo2@gmail.com",true);
  try {
    createPayment(account1,TransactionType.AUTHORIZE,null,authorization.getExternalKey(),UUID.randomUUID().toString(),BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  try {
    createPayment(account1,TransactionType.AUTHORIZE,null,authorization.getExternalKey(),UUID.randomUUID().toString(),BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  try {
    createPayment(account1,TransactionType.AUTHORIZE,null,null,authKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  final String captureKey=UUID.randomUUID().toString();
  final Payment capturedPayment=createPayment(TransactionType.CAPTURE,authorization.getId(),null,captureKey,BigDecimal.ONE,PaymentPluginStatus.PROCESSED);
  Assert.assertEquals(capturedPayment.getTransactions().size(),2);
  Assert.assertEquals(capturedPayment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(capturedPayment.getTransactions().get(1).getTransactionStatus(),TransactionStatus.SUCCESS);
  try {
    createPayment(TransactionType.CAPTURE,authorization.getId(),null,captureKey,BigDecimal.ONE,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  try {
    createPayment(TransactionType.AUTHORIZE,null,null,captureKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  try {
    createPayment(account1,TransactionType.AUTHORIZE,null,null,captureKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  final String captureKey2=UUID.randomUUID().toString();
  final Payment capturedPayment2=createPayment(TransactionType.CAPTURE,authorization.getId(),null,captureKey2,BigDecimal.ONE,PaymentPluginStatus.PROCESSED);
  Assert.assertEquals(capturedPayment2.getTransactions().size(),3);
  Assert.assertEquals(capturedPayment2.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(capturedPayment2.getTransactions().get(1).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(capturedPayment2.getTransactions().get(2).getTransactionStatus(),TransactionStatus.SUCCESS);
  final String refundKey=UUID.randomUUID().toString();
  final Payment refundedPayment=createPayment(TransactionType.REFUND,authorization.getId(),null,refundKey,BigDecimal.ONE,PaymentPluginStatus.PROCESSED);
  Assert.assertEquals(refundedPayment.getTransactions().size(),4);
  Assert.assertEquals(refundedPayment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(refundedPayment.getTransactions().get(1).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(refundedPayment.getTransactions().get(2).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(refundedPayment.getTransactions().get(3).getTransactionStatus(),TransactionStatus.SUCCESS);
  final String auth2Key=UUID.randomUUID().toString();
  final Payment authorization2=createPayment(TransactionType.AUTHORIZE,null,null,auth2Key,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
  assertNotNull(authorization2);
  Assert.assertEquals(authorization2.getTransactions().size(),1);
  Assert.assertEquals(authorization2.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  try {
    createPayment(TransactionType.CAPTURE,authorization2.getId(),null,captureKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
  final String capture2Key=UUID.randomUUID().toString();
  final Payment capture2=createPayment(TransactionType.CAPTURE,authorization2.getId(),null,capture2Key,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
  Assert.assertEquals(capture2.getTransactions().size(),2);
  Assert.assertEquals(capture2.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(capture2.getTransactions().get(1).getTransactionStatus(),TransactionStatus.SUCCESS);
  try {
    createPayment(TransactionType.REFUND,authorization2.getId(),null,refundKey,BigDecimal.TEN,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_ACTIVE_TRANSACTION_KEY_EXISTS.getCode());
  }
}
