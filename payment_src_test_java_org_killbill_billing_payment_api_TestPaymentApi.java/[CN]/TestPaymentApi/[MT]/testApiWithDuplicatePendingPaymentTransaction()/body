{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  for (  final TransactionType transactionType : ImmutableList.<TransactionType>of(TransactionType.AUTHORIZE,TransactionType.PURCHASE,TransactionType.CREDIT)) {
    final String payment1ExternalKey=UUID.randomUUID().toString();
    final String payment1TransactionExternalKey=UUID.randomUUID().toString();
    final String payment2ExternalKey=UUID.randomUUID().toString();
    final String payment2TransactionExternalKey=UUID.randomUUID().toString();
    final String payment3TransactionExternalKey=UUID.randomUUID().toString();
    final Payment pendingPayment1=createPayment(transactionType,null,payment1ExternalKey,payment1TransactionExternalKey,requestedAmount,PaymentPluginStatus.PENDING);
    Assert.assertNotNull(pendingPayment1);
    Assert.assertEquals(pendingPayment1.getExternalKey(),payment1ExternalKey);
    Assert.assertEquals(pendingPayment1.getTransactions().size(),1);
    Assert.assertEquals(pendingPayment1.getTransactions().get(0).getAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment1.getTransactions().get(0).getProcessedAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment1.getTransactions().get(0).getCurrency(),account.getCurrency());
    Assert.assertEquals(pendingPayment1.getTransactions().get(0).getExternalKey(),payment1TransactionExternalKey);
    Assert.assertEquals(pendingPayment1.getTransactions().get(0).getTransactionStatus(),TransactionStatus.PENDING);
    final Payment pendingPayment2=createPayment(transactionType,null,payment1ExternalKey,payment2TransactionExternalKey,requestedAmount,PaymentPluginStatus.PENDING);
    Assert.assertNotNull(pendingPayment2);
    Assert.assertEquals(pendingPayment2.getId(),pendingPayment1.getId());
    Assert.assertEquals(pendingPayment2.getExternalKey(),payment1ExternalKey);
    Assert.assertEquals(pendingPayment2.getTransactions().size(),2);
    Assert.assertEquals(pendingPayment2.getTransactions().get(0).getAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment2.getTransactions().get(0).getProcessedAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment2.getTransactions().get(0).getCurrency(),account.getCurrency());
    Assert.assertEquals(pendingPayment2.getTransactions().get(0).getExternalKey(),payment1TransactionExternalKey);
    Assert.assertEquals(pendingPayment2.getTransactions().get(0).getTransactionStatus(),TransactionStatus.PENDING);
    Assert.assertEquals(pendingPayment2.getTransactions().get(1).getAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment2.getTransactions().get(1).getProcessedAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment2.getTransactions().get(1).getCurrency(),account.getCurrency());
    Assert.assertEquals(pendingPayment2.getTransactions().get(1).getExternalKey(),payment2TransactionExternalKey);
    Assert.assertEquals(pendingPayment2.getTransactions().get(1).getTransactionStatus(),TransactionStatus.PENDING);
    try {
      createPayment(transactionType,null,payment2ExternalKey,payment1TransactionExternalKey,requestedAmount,PaymentPluginStatus.PENDING);
      Assert.fail();
    }
 catch (    final PaymentApiException e) {
      Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_PARAMETER.getCode());
    }
    try {
      createPayment(transactionType,null,payment2ExternalKey,payment2TransactionExternalKey,requestedAmount,PaymentPluginStatus.PENDING);
      Assert.fail();
    }
 catch (    final PaymentApiException e) {
      Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_PARAMETER.getCode());
    }
    final Payment pendingPayment3=createPayment(transactionType,null,payment2ExternalKey,payment3TransactionExternalKey,requestedAmount,PaymentPluginStatus.PENDING);
    Assert.assertNotNull(pendingPayment3);
    Assert.assertNotEquals(pendingPayment3.getId(),pendingPayment1.getId());
    Assert.assertEquals(pendingPayment3.getExternalKey(),payment2ExternalKey);
    Assert.assertEquals(pendingPayment3.getTransactions().size(),1);
    Assert.assertEquals(pendingPayment3.getTransactions().get(0).getAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment3.getTransactions().get(0).getProcessedAmount().compareTo(requestedAmount),0);
    Assert.assertEquals(pendingPayment3.getTransactions().get(0).getCurrency(),account.getCurrency());
    Assert.assertEquals(pendingPayment3.getTransactions().get(0).getExternalKey(),payment3TransactionExternalKey);
    Assert.assertEquals(pendingPayment3.getTransactions().get(0).getTransactionStatus(),TransactionStatus.PENDING);
  }
}
