{
  final String paymentExternalKey=UUID.randomUUID().toString();
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final Payment authorization=createPayment(TransactionType.AUTHORIZE,null,paymentExternalKey,UUID.randomUUID().toString(),requestedAmount,PaymentPluginStatus.PROCESSED);
  assertNotNull(authorization);
  Assert.assertEquals(authorization.getTransactions().size(),1);
  Assert.assertEquals(authorization.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  final String paymentTransactionExternalKey=UUID.randomUUID().toString();
  final Payment pendingPayment=createPayment(TransactionType.CAPTURE,authorization.getId(),paymentExternalKey,paymentTransactionExternalKey,requestedAmount,PaymentPluginStatus.UNDEFINED);
  Assert.assertEquals(pendingPayment.getTransactions().size(),2);
  Assert.assertEquals(pendingPayment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(pendingPayment.getTransactions().get(1).getTransactionStatus(),TransactionStatus.UNKNOWN);
  try {
    createPayment(TransactionType.CAPTURE,authorization.getId(),paymentExternalKey,paymentTransactionExternalKey,requestedAmount,PaymentPluginStatus.PROCESSED);
    Assert.fail();
  }
 catch (  final PaymentApiException e) {
    Assert.assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_OPERATION.getCode());
  }
}
