{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final String paymentExternalKey="hgh3";
  final String transactionExternalKey="hgh3sss";
  mockPaymentProviderPlugin.makeNextPaymentFailWithCancellation();
  final Payment payment=paymentApi.createPurchase(account,account.getPaymentMethodId(),null,requestedAmount,Currency.AED,paymentExternalKey,transactionExternalKey,ImmutableList.<PluginProperty>of(),callContext);
  assertEquals(payment.getExternalKey(),paymentExternalKey);
  assertEquals(payment.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment.getAccountId(),account.getId());
  assertEquals(payment.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getPurchasedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getCurrency(),Currency.AED);
  assertEquals(payment.getTransactions().size(),1);
  assertEquals(payment.getTransactions().get(0).getExternalKey(),transactionExternalKey);
  assertEquals(payment.getTransactions().get(0).getPaymentId(),payment.getId());
  assertEquals(payment.getTransactions().get(0).getAmount().compareTo(requestedAmount),0);
  assertEquals(payment.getTransactions().get(0).getCurrency(),Currency.AED);
  assertEquals(payment.getTransactions().get(0).getProcessedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getTransactions().get(0).getProcessedCurrency(),Currency.AED);
  assertEquals(payment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.PLUGIN_FAILURE);
  assertEquals(payment.getTransactions().get(0).getTransactionType(),TransactionType.PURCHASE);
  assertNotNull(payment.getTransactions().get(0).getGatewayErrorMsg());
  assertNotNull(payment.getTransactions().get(0).getGatewayErrorCode());
  final Payment payment2=paymentApi.createPurchase(account,account.getPaymentMethodId(),null,requestedAmount,Currency.AED,paymentExternalKey,transactionExternalKey,ImmutableList.<PluginProperty>of(),callContext);
  assertEquals(payment2.getExternalKey(),paymentExternalKey);
  assertEquals(payment2.getTransactions().get(0).getExternalKey(),transactionExternalKey);
  assertEquals(payment2.getTransactions().get(0).getTransactionStatus(),TransactionStatus.PLUGIN_FAILURE);
  assertEquals(payment2.getTransactions().get(0).getTransactionType(),TransactionType.PURCHASE);
  assertEquals(payment2.getTransactions().get(1).getExternalKey(),transactionExternalKey);
  assertEquals(payment2.getTransactions().get(1).getTransactionStatus(),TransactionStatus.SUCCESS);
  assertEquals(payment2.getTransactions().get(1).getTransactionType(),TransactionType.PURCHASE);
}
