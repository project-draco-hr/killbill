{
  final DefaultPaymentApi paymentApi=(DefaultPaymentApi)this.paymentApi;
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final Currency currency=Currency.AED;
  final String paymentExternalKey=UUID.randomUUID().toString();
  final String purchaseTransactionExternalKey=UUID.randomUUID().toString();
  final String chargebackTransactionExternalKey=UUID.randomUUID().toString();
  final ImmutableList<PluginProperty> properties=ImmutableList.<PluginProperty>of();
  final Payment payment=paymentApi.createPurchase(account,account.getPaymentMethodId(),null,requestedAmount,currency,paymentExternalKey,purchaseTransactionExternalKey,properties,callContext);
  assertEquals(payment.getExternalKey(),paymentExternalKey);
  assertEquals(payment.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment.getAccountId(),account.getId());
  assertEquals(payment.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getPurchasedAmount().compareTo(requestedAmount),0);
  assertEquals(payment.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getCurrency(),currency);
  assertEquals(payment.getTransactions().size(),1);
  assertEquals(payment.getTransactions().get(0).getExternalKey(),purchaseTransactionExternalKey);
  assertEquals(payment.getTransactions().get(0).getPaymentId(),payment.getId());
  assertEquals(payment.getTransactions().get(0).getAmount().compareTo(requestedAmount),0);
  assertEquals(payment.getTransactions().get(0).getCurrency(),currency);
  assertEquals(payment.getTransactions().get(0).getProcessedAmount().compareTo(requestedAmount),0);
  assertEquals(payment.getTransactions().get(0).getProcessedCurrency(),currency);
  assertEquals(payment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  assertEquals(payment.getTransactions().get(0).getTransactionType(),TransactionType.PURCHASE);
  assertEquals(payment.getTransactions().get(0).getGatewayErrorMsg(),"");
  assertEquals(payment.getTransactions().get(0).getGatewayErrorCode(),"");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getStateName(),"PURCHASE_SUCCESS");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getLastSuccessStateName(),"PURCHASE_SUCCESS");
  final Payment payment2=paymentApi.createChargeback(account,payment.getId(),requestedAmount,currency,chargebackTransactionExternalKey,callContext);
  assertEquals(payment2.getExternalKey(),paymentExternalKey);
  assertEquals(payment2.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment2.getAccountId(),account.getId());
  assertEquals(payment2.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment2.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment2.getPurchasedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment2.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment2.getCurrency(),currency);
  assertEquals(payment2.getTransactions().size(),2);
  assertEquals(payment2.getTransactions().get(1).getExternalKey(),chargebackTransactionExternalKey);
  assertEquals(payment2.getTransactions().get(1).getPaymentId(),payment.getId());
  assertEquals(payment2.getTransactions().get(1).getAmount().compareTo(requestedAmount),0);
  assertEquals(payment2.getTransactions().get(1).getCurrency(),currency);
  assertEquals(payment2.getTransactions().get(1).getProcessedAmount().compareTo(requestedAmount),0);
  assertEquals(payment2.getTransactions().get(1).getProcessedCurrency(),currency);
  assertEquals(payment2.getTransactions().get(1).getTransactionStatus(),TransactionStatus.SUCCESS);
  assertEquals(payment2.getTransactions().get(1).getTransactionType(),TransactionType.CHARGEBACK);
  assertNull(payment2.getTransactions().get(1).getGatewayErrorMsg());
  assertNull(payment2.getTransactions().get(1).getGatewayErrorCode());
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getStateName(),"CHARGEBACK_SUCCESS");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getLastSuccessStateName(),"CHARGEBACK_SUCCESS");
  try {
    paymentApi.createRefund(account,payment.getId(),requestedAmount,currency,UUID.randomUUID().toString(),properties,callContext);
    Assert.fail("Refunds are no longer permitted after a chargeback");
  }
 catch (  final PaymentApiException e) {
    assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_OPERATION.getCode());
  }
  final Payment payment3=paymentApi.createChargebackReversal(account,payment.getId(),chargebackTransactionExternalKey,callContext);
  assertEquals(payment3.getExternalKey(),paymentExternalKey);
  assertEquals(payment3.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment3.getAccountId(),account.getId());
  assertEquals(payment3.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment3.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment3.getPurchasedAmount().compareTo(requestedAmount),0);
  assertEquals(payment3.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment3.getCurrency(),currency);
  assertEquals(payment3.getTransactions().size(),3);
  assertEquals(payment3.getTransactions().get(2).getExternalKey(),chargebackTransactionExternalKey);
  assertEquals(payment3.getTransactions().get(2).getPaymentId(),payment.getId());
  assertNull(payment3.getTransactions().get(2).getAmount());
  assertNull(payment3.getTransactions().get(2).getCurrency());
  assertEquals(payment3.getTransactions().get(2).getProcessedAmount().compareTo(BigDecimal.ZERO),0);
  assertNull(payment3.getTransactions().get(2).getProcessedCurrency());
  assertEquals(payment3.getTransactions().get(2).getTransactionStatus(),TransactionStatus.PAYMENT_FAILURE);
  assertEquals(payment3.getTransactions().get(2).getTransactionType(),TransactionType.CHARGEBACK);
  assertNull(payment3.getTransactions().get(2).getGatewayErrorMsg());
  assertNull(payment3.getTransactions().get(2).getGatewayErrorCode());
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getStateName(),"CHARGEBACK_FAILED");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getLastSuccessStateName(),"CHARGEBACK_FAILED");
  final BigDecimal refundAmount=BigDecimal.ONE;
  final String refundTransactionExternalKey=UUID.randomUUID().toString();
  final Payment payment4=paymentApi.createRefund(account,payment.getId(),refundAmount,currency,refundTransactionExternalKey,properties,callContext);
  assertEquals(payment4.getExternalKey(),paymentExternalKey);
  assertEquals(payment4.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment4.getAccountId(),account.getId());
  assertEquals(payment4.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment4.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment4.getPurchasedAmount().compareTo(requestedAmount),0);
  assertEquals(payment4.getRefundedAmount().compareTo(refundAmount),0);
  assertEquals(payment4.getCurrency(),currency);
  assertEquals(payment4.getTransactions().size(),4);
  assertEquals(payment4.getTransactions().get(3).getExternalKey(),refundTransactionExternalKey);
  assertEquals(payment4.getTransactions().get(3).getPaymentId(),payment.getId());
  assertEquals(payment4.getTransactions().get(3).getAmount().compareTo(refundAmount),0);
  assertEquals(payment4.getTransactions().get(3).getCurrency(),currency);
  assertEquals(payment4.getTransactions().get(3).getProcessedAmount().compareTo(refundAmount),0);
  assertEquals(payment4.getTransactions().get(3).getProcessedCurrency(),currency);
  assertEquals(payment4.getTransactions().get(3).getTransactionStatus(),TransactionStatus.SUCCESS);
  assertEquals(payment4.getTransactions().get(3).getTransactionType(),TransactionType.REFUND);
  assertEquals(payment4.getTransactions().get(3).getGatewayErrorMsg(),"");
  assertEquals(payment4.getTransactions().get(3).getGatewayErrorCode(),"");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getStateName(),"REFUND_SUCCESS");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getLastSuccessStateName(),"REFUND_SUCCESS");
  final BigDecimal secondChargebackAmount=requestedAmount.add(refundAmount.negate());
  final Payment payment5=paymentApi.createChargeback(account,payment.getId(),secondChargebackAmount,currency,chargebackTransactionExternalKey,callContext);
  assertEquals(payment5.getExternalKey(),paymentExternalKey);
  assertEquals(payment5.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment5.getAccountId(),account.getId());
  assertEquals(payment5.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment5.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment5.getPurchasedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment5.getRefundedAmount().compareTo(refundAmount),0);
  assertEquals(payment5.getCurrency(),currency);
  assertEquals(payment5.getTransactions().size(),5);
  assertEquals(payment5.getTransactions().get(4).getExternalKey(),chargebackTransactionExternalKey);
  assertEquals(payment5.getTransactions().get(4).getPaymentId(),payment.getId());
  assertEquals(payment5.getTransactions().get(4).getAmount().compareTo(secondChargebackAmount),0);
  assertEquals(payment5.getTransactions().get(4).getCurrency(),currency);
  assertEquals(payment5.getTransactions().get(4).getProcessedAmount().compareTo(secondChargebackAmount),0);
  assertEquals(payment5.getTransactions().get(4).getProcessedCurrency(),currency);
  assertEquals(payment5.getTransactions().get(4).getTransactionStatus(),TransactionStatus.SUCCESS);
  assertEquals(payment5.getTransactions().get(4).getTransactionType(),TransactionType.CHARGEBACK);
  assertNull(payment5.getTransactions().get(4).getGatewayErrorMsg());
  assertNull(payment5.getTransactions().get(4).getGatewayErrorCode());
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getStateName(),"CHARGEBACK_SUCCESS");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getLastSuccessStateName(),"CHARGEBACK_SUCCESS");
  try {
    paymentApi.createRefund(account,payment.getId(),refundAmount,currency,UUID.randomUUID().toString(),properties,callContext);
    Assert.fail("Refunds are no longer permitted after a chargeback");
  }
 catch (  final PaymentApiException e) {
    assertEquals(e.getCode(),ErrorCode.PAYMENT_INVALID_OPERATION.getCode());
  }
  final Payment payment6=paymentApi.createChargebackReversal(account,payment.getId(),chargebackTransactionExternalKey,callContext);
  assertEquals(payment6.getExternalKey(),paymentExternalKey);
  assertEquals(payment6.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment6.getAccountId(),account.getId());
  assertEquals(payment6.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment6.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment6.getPurchasedAmount().compareTo(requestedAmount),0);
  assertEquals(payment6.getRefundedAmount().compareTo(refundAmount),0);
  assertEquals(payment6.getCurrency(),currency);
  assertEquals(payment6.getTransactions().size(),6);
  assertEquals(payment6.getTransactions().get(5).getExternalKey(),chargebackTransactionExternalKey);
  assertEquals(payment6.getTransactions().get(5).getPaymentId(),payment.getId());
  assertNull(payment6.getTransactions().get(5).getAmount());
  assertNull(payment6.getTransactions().get(5).getCurrency());
  assertEquals(payment6.getTransactions().get(5).getProcessedAmount().compareTo(BigDecimal.ZERO),0);
  assertNull(payment6.getTransactions().get(5).getProcessedCurrency());
  assertEquals(payment6.getTransactions().get(5).getTransactionStatus(),TransactionStatus.PAYMENT_FAILURE);
  assertEquals(payment6.getTransactions().get(5).getTransactionType(),TransactionType.CHARGEBACK);
  assertNull(payment6.getTransactions().get(5).getGatewayErrorMsg());
  assertNull(payment6.getTransactions().get(5).getGatewayErrorCode());
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getStateName(),"CHARGEBACK_FAILED");
  assertEquals(paymentDao.getPayment(payment.getId(),internalCallContext).getLastSuccessStateName(),"CHARGEBACK_FAILED");
}
