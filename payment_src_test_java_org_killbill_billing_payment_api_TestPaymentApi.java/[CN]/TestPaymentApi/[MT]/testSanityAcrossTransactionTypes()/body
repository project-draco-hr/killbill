{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final String paymentExternalKey="ahhhhhhhh";
  final String transactionExternalKey="okkkkkkk";
  final Payment pendingPayment=createPayment(TransactionType.AUTHORIZE,null,paymentExternalKey,transactionExternalKey,requestedAmount,PaymentPluginStatus.PENDING);
  assertNotNull(pendingPayment);
  Assert.assertEquals(pendingPayment.getExternalKey(),paymentExternalKey);
  Assert.assertEquals(pendingPayment.getTransactions().size(),1);
  Assert.assertEquals(pendingPayment.getTransactions().get(0).getAmount().compareTo(requestedAmount),0);
  Assert.assertEquals(pendingPayment.getTransactions().get(0).getProcessedAmount().compareTo(requestedAmount),0);
  Assert.assertEquals(pendingPayment.getTransactions().get(0).getCurrency(),account.getCurrency());
  Assert.assertEquals(pendingPayment.getTransactions().get(0).getExternalKey(),transactionExternalKey);
  Assert.assertEquals(pendingPayment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.PENDING);
  try {
    createPayment(TransactionType.PURCHASE,null,paymentExternalKey,transactionExternalKey,requestedAmount,PaymentPluginStatus.PENDING);
    Assert.fail("PURCHASE transaction with same key should have failed");
  }
 catch (  final PaymentApiException expected) {
    Assert.assertEquals(expected.getCode(),ErrorCode.PAYMENT_INVALID_OPERATION.getCode());
  }
}
