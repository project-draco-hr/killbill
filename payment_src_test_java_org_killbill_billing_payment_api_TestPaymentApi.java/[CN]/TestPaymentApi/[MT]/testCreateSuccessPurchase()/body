{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final String paymentExternalKey="bwwrr";
  final String transactionExternalKey="krapaut";
  final DirectPayment payment=paymentApi.createPurchase(account,account.getPaymentMethodId(),null,requestedAmount,Currency.AED,paymentExternalKey,transactionExternalKey,ImmutableList.<PluginProperty>of(),callContext);
  assertEquals(payment.getExternalKey(),paymentExternalKey);
  assertEquals(payment.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment.getAccountId(),account.getId());
  assertEquals(payment.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getPurchasedAmount().compareTo(requestedAmount),0);
  assertEquals(payment.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment.getCurrency(),Currency.AED);
  assertEquals(payment.getTransactions().size(),1);
  assertEquals(payment.getTransactions().get(0).getExternalKey(),transactionExternalKey);
  assertEquals(payment.getTransactions().get(0).getDirectPaymentId(),payment.getId());
  assertEquals(payment.getTransactions().get(0).getAmount().compareTo(requestedAmount),0);
  assertEquals(payment.getTransactions().get(0).getCurrency(),Currency.AED);
  assertEquals(payment.getTransactions().get(0).getProcessedAmount().compareTo(requestedAmount),0);
  assertEquals(payment.getTransactions().get(0).getProcessedCurrency(),Currency.AED);
  assertEquals(payment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  assertEquals(payment.getTransactions().get(0).getTransactionType(),TransactionType.PURCHASE);
  assertNull(payment.getTransactions().get(0).getGatewayErrorMsg());
  assertNull(payment.getTransactions().get(0).getGatewayErrorCode());
}
