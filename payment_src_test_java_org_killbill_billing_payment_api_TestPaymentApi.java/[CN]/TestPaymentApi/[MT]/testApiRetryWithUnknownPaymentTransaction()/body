{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final String paymentExternalKey=UUID.randomUUID().toString();
  final String paymentTransactionExternalKey=UUID.randomUUID().toString();
  final Payment badPayment=paymentApi.createAuthorization(account,account.getPaymentMethodId(),null,requestedAmount,account.getCurrency(),paymentExternalKey,paymentTransactionExternalKey,ImmutableList.<PluginProperty>of(),callContext);
  final String paymentStateName=paymentSMHelper.getErroredStateForTransaction(TransactionType.AUTHORIZE).toString();
  paymentDao.updatePaymentAndTransactionOnCompletion(account.getId(),badPayment.getId(),TransactionType.AUTHORIZE,paymentStateName,paymentStateName,badPayment.getTransactions().get(0).getId(),TransactionStatus.UNKNOWN,requestedAmount,account.getCurrency(),"eroor 64","bad something happened",internalCallContext);
  final Payment payment=paymentApi.createAuthorization(account,account.getPaymentMethodId(),null,requestedAmount,account.getCurrency(),paymentExternalKey,paymentTransactionExternalKey,ImmutableList.<PluginProperty>of(),callContext);
  Assert.assertEquals(payment.getId(),badPayment.getId());
  Assert.assertEquals(payment.getExternalKey(),paymentExternalKey);
  Assert.assertEquals(payment.getExternalKey(),paymentExternalKey);
  Assert.assertEquals(payment.getTransactions().size(),1);
  Assert.assertEquals(payment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
  Assert.assertEquals(payment.getTransactions().get(0).getExternalKey(),paymentTransactionExternalKey);
}
