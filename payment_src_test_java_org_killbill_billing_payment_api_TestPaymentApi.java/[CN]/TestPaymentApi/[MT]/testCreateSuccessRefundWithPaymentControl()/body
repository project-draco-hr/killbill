{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final UUID subscriptionId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate now=clock.getUTCToday();
  final Invoice invoice=testHelper.createTestInvoice(account,now,Currency.USD);
  final String paymentExternalKey=invoice.getId().toString();
  final String transactionExternalKey="sacrebleu";
  final String transactionExternalKey2="maisenfin";
  final InvoiceItem invoiceItem=new MockRecurringInvoiceItem(invoice.getId(),account.getId(),subscriptionId,bundleId,"test plan","test phase",null,now,now.plusMonths(1),requestedAmount,new BigDecimal("1.0"),Currency.USD);
  invoice.addInvoiceItem(invoiceItem);
  final Payment payment=paymentApi.createPurchaseWithPaymentControl(account,account.getPaymentMethodId(),null,requestedAmount,Currency.USD,paymentExternalKey,transactionExternalKey,createPropertiesForInvoice(invoice),INVOICE_PAYMENT,callContext);
  final List<PluginProperty> refundProperties=ImmutableList.<PluginProperty>of();
  final Payment payment2=paymentApi.createRefundWithPaymentControl(account,payment.getId(),requestedAmount,Currency.USD,transactionExternalKey2,refundProperties,INVOICE_PAYMENT,callContext);
  assertEquals(payment2.getTransactions().size(),2);
  assertEquals(payment2.getExternalKey(),paymentExternalKey);
  assertEquals(payment2.getPaymentMethodId(),account.getPaymentMethodId());
  assertEquals(payment2.getAccountId(),account.getId());
  assertEquals(payment2.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment2.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  assertEquals(payment2.getPurchasedAmount().compareTo(requestedAmount),0);
  assertEquals(payment2.getRefundedAmount().compareTo(requestedAmount),0);
  assertEquals(payment2.getCurrency(),Currency.USD);
}
