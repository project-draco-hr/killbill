{
  eventsDao.inTransaction(new Transaction<Void,EntitlementEventSqlDao>(){
    @Override public Void inTransaction(    final EntitlementEventSqlDao transactional,    final TransactionStatus status) throws Exception {
      final UUID subscriptionId=subscription.getId();
      final EntitlementEvent prevEvent=getLastStoredEventForSubscription(subscriptionId);
      cancelNextCancelEventFromTransaction(subscriptionId,transactional,context);
      cancelNextChangeEventFromTransaction(subscriptionId,transactional,context);
      cancelNextPhaseEventFromTransaction(subscriptionId,transactional,context);
      transactional.insertEvent(cancelEvent,context);
      final String cancelEventId=cancelEvent.getId().toString();
      final Long recordId=transactional.getRecordId(cancelEventId);
      final EntityAudit audit=new EntityAudit(TableName.SUBSCRIPTION_EVENTS,recordId,ChangeType.INSERT);
      transactional.insertAuditFromTransaction(audit,context);
      recordFutureNotificationFromTransaction(transactional,subscription,prevEvent,cancelEvent,new EntitlementNotificationKey(cancelEvent.getId(),seqId));
      return null;
    }
  }
);
}
