{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final EntitlementEventSqlDao transactional=entitySqlDaoWrapperFactory.become(EntitlementEventSqlDao.class);
      final UUID subscriptionId=subscription.getId();
      EntitlementEvent cancelledEvent=null;
      final Date now=clock.getUTCNow().toDate();
      final List<EntitlementEvent> events=transactional.getFutureActiveEventForSubscription(subscriptionId.toString(),now,context);
      for (      final EntitlementEvent cur : events) {
        if (cur.getType() == EventType.API_USER && ((ApiEvent)cur).getEventType() == ApiEventType.CANCEL) {
          if (cancelledEvent != null) {
            throw new EntitlementError(String.format("Found multiple cancel active events for subscriptions %s",subscriptionId.toString()));
          }
          cancelledEvent=cur;
        }
      }
      if (cancelledEvent != null) {
        final String cancelledEventId=cancelledEvent.getId().toString();
        transactional.unactiveEvent(cancelledEventId,context);
        for (        final EntitlementEvent cur : uncancelEvents) {
          transactional.insertEvent(cur,context);
          recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,cur.getEffectiveDate(),new EntitlementNotificationKey(cur.getId()),context);
        }
        notifyBusOfRequestedChange(entitySqlDaoWrapperFactory,subscription,uncancelEvents.get(uncancelEvents.size() - 1),context);
      }
      return null;
    }
  }
);
}
