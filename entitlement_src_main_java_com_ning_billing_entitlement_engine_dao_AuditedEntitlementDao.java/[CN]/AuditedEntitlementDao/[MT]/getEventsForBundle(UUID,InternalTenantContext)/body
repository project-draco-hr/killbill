{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Map<UUID,List<EntitlementEvent>>>(){
    @Override public Map<UUID,List<EntitlementEvent>> inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final SubscriptionSqlDao transactional=entitySqlDaoWrapperFactory.become(SubscriptionSqlDao.class);
      final List<Subscription> subscriptions=transactional.getSubscriptionsFromBundleId(bundleId.toString(),context);
      if (subscriptions.size() == 0) {
        return Collections.emptyMap();
      }
      final EntitlementEventSqlDao eventsDaoFromSameTransaction=entitySqlDaoWrapperFactory.become(EntitlementEventSqlDao.class);
      final Map<UUID,List<EntitlementEvent>> result=new HashMap<UUID,List<EntitlementEvent>>();
      for (      final Subscription cur : subscriptions) {
        final List<EntitlementEvent> events=eventsDaoFromSameTransaction.getEventsForSubscription(cur.getId().toString(),context);
        result.put(cur.getId(),events);
      }
      return result;
    }
  }
);
}
