{
  AccountJson accountJson=createAccount("xil","shdxilhkkl","xil@yahoo.com");
  BundleJson bundleJson=createBundle(accountJson.getAcountId(),"99999");
  String productName="Shotgun";
  BillingPeriod term=BillingPeriod.MONTHLY;
  SubscriptionJson subscriptionJson=createSubscription(bundleJson.getBundleId(),productName,ProductCategory.BASE.toString(),term.toString());
  String newProductName="Assault-Rifle";
  SubscriptionJson newInput=new SubscriptionJson(subscriptionJson.getSubscriptionId(),subscriptionJson.getBundleId(),newProductName,subscriptionJson.getProductCategory(),subscriptionJson.getBillingPeriod(),subscriptionJson.getPriceList(),null,null,null);
  String baseJson=mapper.writeValueAsString(newInput);
  String uri=BaseJaxrsResource.SUBSCRIPTIONS_PATH + "/" + subscriptionJson.getSubscriptionId().toString();
  Response response=doPut(uri,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  SubscriptionJson objFromJson=mapper.readValue(baseJson,SubscriptionJson.class);
  Assert.assertTrue(objFromJson.equals(newInput));
  clock.setDeltaFromReality(new Duration(){
    @Override public TimeUnit getUnit(){
      return TimeUnit.MONTHS;
    }
    @Override public int getNumber(){
      return 1;
    }
    @Override public DateTime addToDateTime(    DateTime dateTime){
      return null;
    }
  }
,1000);
  Thread.sleep(5000);
  uri=BaseJaxrsResource.SUBSCRIPTIONS_PATH + "/" + subscriptionJson.getSubscriptionId().toString();
  response=doDelete(uri,DEFAULT_EMPTY_QUERY,10000);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  uri=BaseJaxrsResource.SUBSCRIPTIONS_PATH + "/" + subscriptionJson.getSubscriptionId().toString()+ "/uncancel";
  response=doPut(uri,baseJson,DEFAULT_EMPTY_QUERY,10000);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
}
