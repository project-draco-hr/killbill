{
  final DateTime initialDate=new DateTime(2012,4,25,0,3,42,0);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final AccountJson accountJson=createAccountWithDefaultPaymentMethod("xil","shdxilhkkl","xil@yahoo.com");
  final BundleJsonNoSubscriptions bundleJson=createBundle(accountJson.getAccountId(),"99999");
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final SubscriptionJsonNoEvents subscriptionJson=createSubscription(bundleJson.getBundleId(),productName,ProductCategory.BASE.toString(),term.toString(),true);
  Assert.assertNotNull(subscriptionJson.getChargedThroughDate());
  Assert.assertEquals(subscriptionJson.getChargedThroughDate().toString(),"2012-04-25T00:00:00.000Z");
  String uri=JaxrsResource.SUBSCRIPTIONS_PATH + "/" + subscriptionJson.getSubscriptionId().toString();
  Response response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  String baseJson=response.getResponseBody();
  SubscriptionJsonNoEvents objFromJson=mapper.readValue(baseJson,SubscriptionJsonNoEvents.class);
  Assert.assertTrue(objFromJson.equals(subscriptionJson));
  final String newProductName="Assault-Rifle";
  final SubscriptionJsonNoEvents newInput=new SubscriptionJsonNoEvents(subscriptionJson.getSubscriptionId(),subscriptionJson.getBundleId(),null,newProductName,subscriptionJson.getProductCategory(),subscriptionJson.getBillingPeriod(),subscriptionJson.getPriceList(),null,null);
  baseJson=mapper.writeValueAsString(newInput);
  final Map<String,String> queryParams=getQueryParamsForCallCompletion(CALL_COMPLETION_TIMEOUT_SEC);
  response=doPut(uri,baseJson,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  objFromJson=mapper.readValue(baseJson,SubscriptionJsonNoEvents.class);
  assertTrue(objFromJson.equalsNoSubscriptionIdNoStartDateNoCTD(newInput));
  final Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(31));
  clock.addDeltaFromReality(it.toDurationMillis());
  crappyWaitForLackOfProperSynchonization();
  uri=JaxrsResource.SUBSCRIPTIONS_PATH + "/" + subscriptionJson.getSubscriptionId().toString();
  response=doDelete(uri,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  uri=JaxrsResource.SUBSCRIPTIONS_PATH + "/" + subscriptionJson.getSubscriptionId().toString();
  response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  objFromJson=mapper.readValue(baseJson,SubscriptionJsonNoEvents.class);
  assertNotNull(objFromJson.getCancelledDate());
  assertTrue(objFromJson.getCancelledDate().compareTo(clock.getUTCNow()) > 0);
  uri=JaxrsResource.SUBSCRIPTIONS_PATH + "/" + subscriptionJson.getSubscriptionId().toString()+ "/uncancel";
  response=doPut(uri,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
}
