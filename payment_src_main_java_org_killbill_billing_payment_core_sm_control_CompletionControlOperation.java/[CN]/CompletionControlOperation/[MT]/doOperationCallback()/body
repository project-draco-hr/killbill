{
  final List<String> controlPluginNameList=paymentStateControlContext.getPaymentControlPluginNames();
  final String controlPluginNames=JOINER.join(controlPluginNameList);
  return dispatchWithAccountLockAndTimeout(controlPluginNames,new DispatcherCallback<PluginDispatcherReturnType<OperationResult>,OperationException>(){
    @Override public PluginDispatcherReturnType<OperationResult> doOperation() throws OperationException {
      final PaymentTransactionModelDao transaction=paymentStateContext.getPaymentTransactionModelDao();
      final PaymentControlContext updatedPaymentControlContext=new DefaultPaymentControlContext(paymentStateContext.getAccount(),paymentStateContext.getPaymentMethodId(),paymentStateControlContext.getAttemptId(),transaction.getPaymentId(),paymentStateContext.getPaymentExternalKey(),transaction.getId(),paymentStateContext.getPaymentTransactionExternalKey(),PaymentApiType.PAYMENT_TRANSACTION,paymentStateContext.getTransactionType(),null,transaction.getAmount(),transaction.getCurrency(),transaction.getProcessedAmount(),transaction.getProcessedCurrency(),paymentStateControlContext.isApiPayment(),paymentStateContext.getCallContext());
      executePluginOnSuccessCalls(paymentStateControlContext.getPaymentControlPluginNames(),updatedPaymentControlContext);
      return PluginDispatcher.createPluginDispatcherReturnType(OperationResult.SUCCESS);
    }
  }
);
}
