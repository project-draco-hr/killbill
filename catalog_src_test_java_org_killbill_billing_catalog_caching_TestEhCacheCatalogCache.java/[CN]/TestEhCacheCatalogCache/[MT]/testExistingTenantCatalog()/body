{
  catalogCache.loadDefaultCatalog(Resources.getResource("SpyCarBasic.xml").toExternalForm());
  final InputStream inputCatalog=UriAccessor.accessUri(new URI(Resources.getResource("SpyCarAdvanced.xml").toExternalForm()));
  final String catalogXML=CharStreams.toString(new InputStreamReader(inputCatalog,"UTF-8"));
  final InternalTenantContext tenantContext=Mockito.mock(InternalTenantContext.class);
  Mockito.when(tenantContext.getTenantRecordId()).thenReturn(156L);
  Mockito.when(tenantInternalApi.getTenantCatalogs(Mockito.any(InternalTenantContext.class))).thenReturn(ImmutableList.<String>of(catalogXML));
  VersionedCatalog result=catalogCache.getCatalog(tenantContext);
  Assert.assertNotNull(result);
  final DefaultProduct[] products=result.getProducts(clock.getUTCNow());
  Assert.assertEquals(products.length,6);
  Mockito.when(tenantInternalApi.getTenantCatalogs(tenantContext)).thenThrow(RuntimeException.class);
  VersionedCatalog result2=catalogCache.getCatalog(tenantContext);
  Assert.assertNotNull(result2);
  final DefaultProduct[] products2=result.getProducts(clock.getUTCNow());
  Assert.assertEquals(products2.length,6);
}
