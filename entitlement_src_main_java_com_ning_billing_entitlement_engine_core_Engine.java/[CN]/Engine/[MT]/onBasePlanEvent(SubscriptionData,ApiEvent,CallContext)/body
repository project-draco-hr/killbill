{
  final DateTime now=clock.getUTCNow();
  final Product baseProduct=(baseSubscription.getState() == SubscriptionState.CANCELLED) ? null : baseSubscription.getCurrentPlan().getProduct();
  final List<Subscription> subscriptions=dao.getSubscriptions(subscriptionFactory,baseSubscription.getBundleId());
  final Map<UUID,EntitlementEvent> addOnCancellationEvents=new HashMap<UUID,EntitlementEvent>();
  final Map<UUID,SubscriptionData> addOnCancellationSubscriptions=new HashMap<UUID,SubscriptionData>();
  final Iterator<Subscription> it=subscriptions.iterator();
  while (it.hasNext()) {
    final SubscriptionData cur=(SubscriptionData)it.next();
    if (cur.getState() == SubscriptionState.CANCELLED || cur.getCategory() != ProductCategory.ADD_ON) {
      continue;
    }
    final Plan addonCurrentPlan=cur.getCurrentPlan();
    if (baseProduct == null || addonUtils.isAddonIncluded(baseProduct,addonCurrentPlan) || !addonUtils.isAddonAvailable(baseProduct,addonCurrentPlan)) {
      final EntitlementEvent cancelEvent=new ApiEventCancel(new ApiEventBuilder().setSubscriptionId(cur.getId()).setActiveVersion(cur.getActiveVersion()).setProcessedDate(now).setEffectiveDate(event.getEffectiveDate()).setRequestedDate(now).setUserToken(context.getUserToken()).setFromDisk(true));
      addOnCancellationEvents.put(cur.getId(),cancelEvent);
      addOnCancellationSubscriptions.put(cur.getId(),cur);
    }
  }
  final int addOnSize=addOnCancellationEvents.size();
  int cancelSeq=addOnSize - 1;
  for (  final UUID key : addOnCancellationEvents.keySet()) {
    dao.cancelSubscription(addOnCancellationSubscriptions.get(key),addOnCancellationEvents.get(key),context,cancelSeq);
    cancelSeq--;
  }
  return addOnSize;
}
