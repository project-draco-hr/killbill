{
  try {
    subscriptionEventQueue=notificationQueueService.createNotificationQueue(ENTITLEMENT_SERVICE_NAME,NOTIFICATION_QUEUE_NAME,new NotificationQueueHandler(){
      @Override public void handleReadyNotification(      final String inputKey,      final DateTime eventDateTime){
        EntitlementNotificationKey key=new EntitlementNotificationKey(inputKey);
        final EntitlementEvent event=dao.getEventById(key.getEventId());
        if (event == null) {
          log.warn("Failed to extract event for notification key {}",inputKey);
          return;
        }
        final UUID userToken=(event.getType() == EventType.API_USER) ? ((ApiEvent)event).getUserToken() : null;
        final CallContext context=factory.createCallContext("SubscriptionEventQueue",CallOrigin.INTERNAL,UserType.SYSTEM,userToken);
        processEventReady(event,key.getSeqId(),context);
      }
    }
,new NotificationConfig(){
      @Override public boolean isNotificationProcessingOff(){
        return config.isNotificationProcessingOff();
      }
      @Override public long getNotificationSleepTimeMs(){
        return config.getNotificationSleepTimeMs();
      }
      @Override public int getDaoMaxReadyEvents(){
        return config.getDaoMaxReadyEvents();
      }
      @Override public long getDaoClaimTimeMs(){
        return config.getDaoClaimTimeMs();
      }
    }
);
  }
 catch (  NotificationQueueAlreadyExists e) {
    throw new RuntimeException(e);
  }
}
