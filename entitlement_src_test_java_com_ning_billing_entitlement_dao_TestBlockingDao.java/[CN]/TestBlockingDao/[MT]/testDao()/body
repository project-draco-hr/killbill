{
  final UUID uuid=UUID.randomUUID();
  final String overdueStateName="WayPassedItMan";
  final String service="TEST";
  final boolean blockChange=true;
  final boolean blockEntitlement=false;
  final boolean blockBilling=false;
  clock.setDay(new LocalDate(2012,4,1));
  final BlockingState state1=new DefaultBlockingState(uuid,BlockingStateType.ACCOUNT,overdueStateName,service,blockChange,blockEntitlement,blockBilling,clock.getUTCNow());
  blockingStateDao.setBlockingState(state1,clock,internalCallContext);
  clock.addDays(1);
  final String overdueStateName2="NoReallyThisCantGoOn";
  final BlockingState state2=new DefaultBlockingState(uuid,BlockingStateType.ACCOUNT,overdueStateName2,service,blockChange,blockEntitlement,blockBilling,clock.getUTCNow());
  blockingStateDao.setBlockingState(state2,clock,internalCallContext);
  final SubscriptionBaseBundle bundle=Mockito.mock(SubscriptionBaseBundle.class);
  Mockito.when(bundle.getId()).thenReturn(uuid);
  Assert.assertEquals(blockingStateDao.getBlockingStateForService(uuid,service,internalCallContext).getStateName(),state2.getStateName());
  final List<BlockingState> states=blockingStateDao.getBlockingHistoryForService(uuid,service,internalCallContext);
  Assert.assertEquals(states.size(),2);
  Assert.assertEquals(states.get(0).getStateName(),overdueStateName);
  Assert.assertEquals(states.get(1).getStateName(),overdueStateName2);
}
