{
  final LocalDate startDate=new LocalDate("2012-10-26");
  final LocalDate endDate=new LocalDate("2012-11-26");
  clock.setTime(new DateTime(2012,10,26,1,12,23,DateTimeZone.UTC));
  final InvoiceItemModelDao item=new InvoiceItemModelDao(UUID.randomUUID(),clock.getUTCNow(),InvoiceItemType.RECURRING,UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID(),"planName","phaseName",startDate,endDate,new BigDecimal("23.9"),new BigDecimal("23.9"),Currency.EUR,null);
  final InvoiceNotifier invoiceNotifier=new NullInvoiceNotifier();
  final InvoiceDispatcher dispatcher=new InvoiceDispatcher(generator,accountInternalApi,billingApi,entitlementInternalApi,invoiceDao,invoiceNotifier,locker,busService.getBus(),clock);
  final DateTime expectedBefore=clock.getUTCNow();
  final Map<UUID,DateTime> result=dispatcher.createNextFutureNotificationDate(Collections.singletonList(item),DateTimeZone.forID("Pacific/Pitcairn"));
  final DateTime expectedAfter=clock.getUTCNow();
  Assert.assertEquals(result.size(),1);
  final DateTime receivedDate=result.get(item.getSubscriptionId());
  final LocalDate receivedTargetDate=new LocalDate(receivedDate,DateTimeZone.forID("Pacific/Pitcairn"));
  Assert.assertEquals(receivedTargetDate,endDate);
  Assert.assertTrue(receivedDate.compareTo(new DateTime(2012,11,26,9,12,23,DateTimeZone.UTC)) >= 0);
  Assert.assertTrue(receivedDate.compareTo(new DateTime(2012,11,26,9,13,0,DateTimeZone.UTC)) <= 0);
}
