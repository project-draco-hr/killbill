{
  final UUID accountId=UUID.randomUUID();
  final UUID subscriptionId=UUID.randomUUID();
  final AccountUserApi accountUserApi=Mockito.mock(AccountUserApi.class);
  final Account account=Mockito.mock(Account.class);
  Mockito.when(accountUserApi.getAccountById(accountId)).thenReturn(account);
  Mockito.when(account.getCurrency()).thenReturn(Currency.USD);
  Mockito.when(account.getId()).thenReturn(accountId);
  Mockito.when(account.isNotifiedForInvoices()).thenReturn(true);
  Mockito.when(account.getBillCycleDay()).thenReturn(new MockBillCycleDay(30));
  final Subscription subscription=Mockito.mock(Subscription.class);
  Mockito.when(subscription.getId()).thenReturn(subscriptionId);
  Mockito.when(subscription.getBundleId()).thenReturn(new UUID(0L,0L));
  final BillingEventSet events=new MockBillingEventSet();
  final Plan plan=MockPlan.createBicycleNoTrialEvergreen1USD();
  final PlanPhase planPhase=MockPlanPhase.create1USDMonthlyEvergreen();
  final DateTime effectiveDate=new DateTime().minusDays(1);
  final Currency currency=Currency.USD;
  final BigDecimal fixedPrice=null;
  events.add(createMockBillingEvent(account,subscription,effectiveDate,plan,planPhase,fixedPrice,BigDecimal.ONE,currency,BillingPeriod.MONTHLY,1,BillingModeType.IN_ADVANCE,"",1L,SubscriptionTransitionType.CREATE));
  Mockito.when(billingApi.getBillingEventsForAccountAndUpdateAccountBCD(accountId)).thenReturn(events);
  final DateTime target=new DateTime();
  final InvoiceNotifier invoiceNotifier=new NullInvoiceNotifier();
  final InvoiceDispatcher dispatcher=new InvoiceDispatcher(generator,accountUserApi,billingApi,invoiceDao,invoiceNotifier,locker,busService.getBus(),clock);
  Invoice invoice=dispatcher.processAccount(accountId,target,true,context);
  Assert.assertNotNull(invoice);
  List<Invoice> invoices=invoiceDao.getInvoicesByAccount(accountId);
  Assert.assertEquals(invoices.size(),0);
  invoice=dispatcher.processAccount(accountId,target,true,context);
  Assert.assertNotNull(invoice);
  invoices=invoiceDao.getInvoicesByAccount(accountId);
  Assert.assertEquals(invoices.size(),0);
  invoice=dispatcher.processAccount(accountId,target,false,context);
  Assert.assertNotNull(invoice);
  invoices=invoiceDao.getInvoicesByAccount(accountId);
  Assert.assertEquals(invoices.size(),1);
}
