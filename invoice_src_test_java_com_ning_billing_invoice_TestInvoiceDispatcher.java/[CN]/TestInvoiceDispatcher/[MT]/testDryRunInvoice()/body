{
  final UUID accountId=account.getId();
  final BillingEventSet events=new MockBillingEventSet();
  final Plan plan=MockPlan.createBicycleNoTrialEvergreen1USD();
  final PlanPhase planPhase=MockPlanPhase.create1USDMonthlyEvergreen();
  final DateTime effectiveDate=new DateTime().minusDays(1);
  final Currency currency=Currency.USD;
  final BigDecimal fixedPrice=null;
  events.add(invoiceUtil.createMockBillingEvent(account,subscription,effectiveDate,plan,planPhase,fixedPrice,BigDecimal.ONE,currency,BillingPeriod.MONTHLY,1,BillingModeType.IN_ADVANCE,"",1L,SubscriptionTransitionType.CREATE));
  Mockito.when(billingApi.getBillingEventsForAccountAndUpdateAccountBCD(Mockito.<UUID>any(),Mockito.<InternalCallContext>any())).thenReturn(events);
  final DateTime target=new DateTime();
  final InvoiceNotifier invoiceNotifier=new NullInvoiceNotifier();
  final InvoiceDispatcher dispatcher=new InvoiceDispatcher(generator,accountApi,billingApi,entitlementApi,invoiceDao,invoiceNotifier,locker,busService.getBus(),clock);
  Invoice invoice=dispatcher.processAccount(accountId,target,true,internalCallContext);
  Assert.assertNotNull(invoice);
  final InternalTenantContext internalTenantContext=internalCallContextFactory.createInternalTenantContext(callContext);
  List<InvoiceModelDao> invoices=invoiceDao.getInvoicesByAccount(accountId,internalTenantContext);
  Assert.assertEquals(invoices.size(),0);
  invoice=dispatcher.processAccount(accountId,target,true,internalCallContext);
  Assert.assertNotNull(invoice);
  invoices=invoiceDao.getInvoicesByAccount(accountId,internalTenantContext);
  Assert.assertEquals(invoices.size(),0);
  invoice=dispatcher.processAccount(accountId,target,false,internalCallContext);
  Assert.assertNotNull(invoice);
  invoices=invoiceDao.getInvoicesByAccount(accountId,internalTenantContext);
  Assert.assertEquals(invoices.size(),1);
}
