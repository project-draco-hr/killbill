{
  final BillingEventSet events=new MockBillingEventSet();
  final MockPlan bicycleTrialEvergreen1USD=MockPlan.createBicycleTrialEvergreen1USD();
  events.add(createMockBillingEvent(account,subscription,new DateTime("2012-05-01T00:03:42.000Z"),bicycleTrialEvergreen1USD,new MockPlanPhase(bicycleTrialEvergreen1USD,PhaseType.TRIAL),BigDecimal.ZERO,null,account.getCurrency(),BillingPeriod.NO_BILLING_PERIOD,31,31,BillingModeType.IN_ADVANCE,"CREATE",1L,SubscriptionTransitionType.CREATE));
  events.add(createMockBillingEvent(account,subscription,new DateTime("2012-05-31T00:03:42.000Z"),bicycleTrialEvergreen1USD,new MockPlanPhase(bicycleTrialEvergreen1USD,PhaseType.EVERGREEN),null,new BigDecimal("249.95"),account.getCurrency(),BillingPeriod.MONTHLY,31,31,BillingModeType.IN_ADVANCE,"PHASE",2L,SubscriptionTransitionType.PHASE));
  events.add(createMockBillingEvent(account,subscription,new DateTime("2012-07-15T00:00:00.000Z"),bicycleTrialEvergreen1USD,new MockPlanPhase(bicycleTrialEvergreen1USD,PhaseType.EVERGREEN),null,null,account.getCurrency(),BillingPeriod.NO_BILLING_PERIOD,31,31,BillingModeType.IN_ADVANCE,"",0L,SubscriptionTransitionType.START_BILLING_DISABLED));
  events.add(createMockBillingEvent(account,subscription,new DateTime("2012-07-25T00:00:00.000Z"),bicycleTrialEvergreen1USD,new MockPlanPhase(bicycleTrialEvergreen1USD,PhaseType.EVERGREEN),null,new BigDecimal("249.95"),account.getCurrency(),BillingPeriod.MONTHLY,31,31,BillingModeType.IN_ADVANCE,"",1L,SubscriptionTransitionType.END_BILLING_DISABLED));
  final MockPlan jetTrialEvergreen1000USD=MockPlan.createJetTrialEvergreen1000USD();
  events.add(createMockBillingEvent(account,subscription,new DateTime("2012-07-25T00:04:00.000Z"),jetTrialEvergreen1000USD,new MockPlanPhase(jetTrialEvergreen1000USD,PhaseType.EVERGREEN),null,new BigDecimal("1000"),account.getCurrency(),BillingPeriod.MONTHLY,31,31,BillingModeType.IN_ADVANCE,"CHANGE",3L,SubscriptionTransitionType.CHANGE));
  Mockito.when(billingApi.getBillingEventsForAccountAndUpdateAccountBCD(account.getId(),internalCallContext)).thenReturn(events);
  final InvoiceNotifier invoiceNotifier=new NullInvoiceNotifier();
  final InvoiceDispatcher dispatcher=new InvoiceDispatcher(generator,accountUserApi,billingApi,invoiceDao,invoiceNotifier,locker,busService.getBus(),clock,internalCallContextFactory);
  final Invoice invoice=dispatcher.processAccount(account.getId(),new DateTime("2012-07-30T00:00:00.000Z"),false,callContext);
  Assert.assertNotNull(invoice);
  final List<InvoiceItem> invoiceItems=invoice.getInvoiceItems();
  Assert.assertEquals(invoiceItems.size(),4);
  Assert.assertEquals(invoiceItems.get(0).getInvoiceItemType(),InvoiceItemType.FIXED);
  Assert.assertEquals(invoiceItems.get(0).getStartDate(),new LocalDate("2012-05-01"));
  Assert.assertNull(invoiceItems.get(0).getEndDate());
  Assert.assertEquals(invoiceItems.get(0).getAmount(),BigDecimal.ZERO);
  Assert.assertNull(invoiceItems.get(0).getRate());
  Assert.assertEquals(invoiceItems.get(1).getInvoiceItemType(),InvoiceItemType.RECURRING);
  Assert.assertEquals(invoiceItems.get(1).getStartDate(),new LocalDate("2012-05-31"));
  Assert.assertEquals(invoiceItems.get(1).getEndDate(),new LocalDate("2012-06-30"));
  Assert.assertEquals(invoiceItems.get(1).getAmount(),new BigDecimal("249.95"));
  Assert.assertEquals(invoiceItems.get(1).getRate(),new BigDecimal("249.95"));
  Assert.assertEquals(invoiceItems.get(2).getInvoiceItemType(),InvoiceItemType.RECURRING);
  Assert.assertEquals(invoiceItems.get(2).getStartDate(),new LocalDate("2012-06-30"));
  Assert.assertEquals(invoiceItems.get(2).getEndDate(),new LocalDate("2012-07-15"));
  Assert.assertEquals(invoiceItems.get(2).getAmount(),new BigDecimal("124.98"));
  Assert.assertEquals(invoiceItems.get(2).getRate(),new BigDecimal("249.95"));
  Assert.assertEquals(invoiceItems.get(3).getInvoiceItemType(),InvoiceItemType.RECURRING);
  Assert.assertEquals(invoiceItems.get(3).getStartDate(),new LocalDate("2012-07-25"));
  Assert.assertEquals(invoiceItems.get(3).getEndDate(),new LocalDate("2012-07-31"));
  Assert.assertEquals(invoiceItems.get(3).getAmount(),new BigDecimal("193.50"));
  Assert.assertEquals(invoiceItems.get(3).getRate(),new BigDecimal("1000"));
  for (  final InvoiceItem item : invoiceItems) {
    Assert.assertEquals(item.getAccountId(),account.getId());
    Assert.assertEquals(item.getBundleId(),subscription.getBundleId());
    Assert.assertEquals(item.getCurrency(),account.getCurrency());
    Assert.assertEquals(item.getInvoiceId(),invoice.getId());
    Assert.assertNull(item.getLinkedItemId());
    Assert.assertEquals(item.getSubscriptionId(),subscription.getId());
  }
}
