{
  final List<Payment> accountPayments=paymentApi.getAccountPayments(account.getId(),tenantContext);
  final Map<UUID,Payment> payments=new HashMap<UUID,Payment>();
  for (  final Payment payment : accountPayments) {
    payments.put(payment.getId(),payment);
  }
  final Collection<UUID> paymentPaymentsId=Collections2.transform(accountPayments,new Function<Payment,UUID>(){
    @Override public UUID apply(    @Nullable final Payment input){
      if (input == null) {
        return null;
      }
 else {
        return input.getId();
      }
    }
  }
);
  final Collection<UUID> analyticsPaymentsId=Collections2.transform(analyticsDao.getInvoicePaymentsForAccountByKey(account.getExternalKey(),internalCallContext),new Function<BusinessInvoicePaymentModelDao,UUID>(){
    @Override public UUID apply(    @Nullable final BusinessInvoicePaymentModelDao input){
      if (input == null) {
        return null;
      }
 else {
        return input.getPaymentId();
      }
    }
  }
);
  final Set<UUID> paymentsId=new HashSet<UUID>();
  paymentsId.addAll(paymentPaymentsId);
  paymentsId.addAll(analyticsPaymentsId);
  for (  final UUID paymentId : paymentsId) {
    final Payment paymentInfo=payments.get(paymentId);
    bipDao.invoicePaymentPosted(paymentInfo.getAccountId(),paymentInfo.getId(),paymentInfo.getExtFirstPaymentIdRef(),paymentInfo.getExtSecondPaymentIdRef(),paymentInfo.getPaymentStatus().toString(),internalCallContext);
  }
}
