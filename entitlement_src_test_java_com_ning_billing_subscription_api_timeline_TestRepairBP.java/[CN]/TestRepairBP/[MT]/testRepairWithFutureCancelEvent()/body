{
  final DateTime startDate=clock.getUTCNow();
  Subscription baseSubscription=testUtil.createSubscription(bundle,"Shotgun",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,startDate);
  testListener.pushExpectedEvent(NextEvent.PHASE);
  final Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(35));
  clock.addDeltaFromReality(it.toDurationMillis());
  assertTrue(testListener.isCompleted(5000));
  final DateTime newChargedThroughDate=baseSubscription.getStartDate().plusDays(30).plusMonths(1);
  subscriptionInternalApi.setChargedThroughDate(baseSubscription.getId(),newChargedThroughDate,internalCallContext);
  baseSubscription=entitlementApi.getSubscriptionFromId(baseSubscription.getId(),callContext);
  final DateTime requestedChange=clock.getUTCNow();
  baseSubscription.changePlan("Pistol",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,requestedChange,callContext);
  Plan currentPlan=baseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),"Shotgun");
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  final DateTime repairTime=clock.getUTCNow().minusDays(1);
  final BundleTimeline bundleRepair=repairApi.getBundleTimeline(bundle.getId(),callContext);
  testUtil.sortEventsOnBundle(bundleRepair);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.EVERGREEN);
  final NewEvent ne=testUtil.createNewEvent(SubscriptionTransitionType.CHANGE,repairTime,spec);
  final List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
  des.add(testUtil.createDeletedEvent(bundleRepair.getSubscriptions().get(0).getExistingEvents().get(2).getEventId()));
  final SubscriptionTimeline sRepair=testUtil.createSubscriptionRepair(baseSubscription.getId(),des,Collections.singletonList(ne));
  final BundleTimeline bRepair=testUtil.createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(sRepair));
  final boolean dryRun=false;
  testListener.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
  repairApi.repairBundle(bRepair,dryRun,callContext);
  assertTrue(testListener.isCompleted(5000));
  baseSubscription=entitlementApi.getSubscriptionFromId(baseSubscription.getId(),callContext);
  assertEquals(((SubscriptionData)baseSubscription).getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  assertEquals(baseSubscription.getBundleId(),bundle.getId());
  assertEquals(baseSubscription.getStartDate(),baseSubscription.getStartDate());
  currentPlan=baseSubscription.getCurrentPlan();
  assertNotNull(currentPlan);
  assertEquals(currentPlan.getProduct().getName(),"Assault-Rifle");
  assertEquals(currentPlan.getProduct().getCategory(),ProductCategory.BASE);
  assertEquals(currentPlan.getBillingPeriod(),BillingPeriod.MONTHLY);
  final PlanPhase currentPhase=baseSubscription.getCurrentPhase();
  assertNotNull(currentPhase);
  assertEquals(currentPhase.getPhaseType(),PhaseType.EVERGREEN);
  assertListenerStatus();
}
