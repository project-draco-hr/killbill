{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  paymentPlugin.makeAllInvoicesFailWithError(true);
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,BillingPeriod.ANNUAL,NextEvent.CREATE,NextEvent.INVOICE);
  bundle=subscriptionApi.getSubscriptionBundle(baseEntitlement.getBundleId(),callContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2013,5,31),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2013,5,31),callContext);
  addDaysAndCheckForCompletion(8,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(8,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(8,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(6,NextEvent.BLOCK);
  checkODState("OD1");
  addDaysAndCheckForCompletion(2,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR);
  checkODState("OD1");
  addDaysAndCheckForCompletion(8,NextEvent.BLOCK,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR,NextEvent.TAG);
  checkODState("OD2");
  addDaysAndCheckForCompletion(8,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR);
  checkODState("OD2");
  addDaysAndCheckForCompletion(2,NextEvent.BLOCK);
  checkODState("OD3");
  allowPaymentsAndResetOverdueToClearByPayingAllUnpaidInvoices(false);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2013,5,31),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,10),new LocalDate(2012,7,20),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-65.75")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2013,5,31),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-1998.86")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,20),new LocalDate(2012,7,20),InvoiceItemType.CBA_ADJ,new BigDecimal("2064.61")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2013,5,31),callContext);
  addDaysAndCheckForCompletion(11);
  checkChangePlanWithOverdueState(baseEntitlement,false,false);
  invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,8,31),InvoiceItemType.RECURRING,new BigDecimal("599.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,7,31),InvoiceItemType.CBA_ADJ,new BigDecimal("-599.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,8,31),callContext);
  assertEquals(invoiceUserApi.getAccountBalance(account.getId(),callContext).compareTo(new BigDecimal("-1464.66")),0);
}
