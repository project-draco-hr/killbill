{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  paymentPlugin.makeAllInvoicesFailWithError(true);
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  bundle=subscriptionApi.getSubscriptionBundle(baseEntitlement.getBundleId(),callContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,6,30),callContext);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(15,NextEvent.PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(20,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,7,31),callContext);
  checkODState("OD1");
  checkChangePlanWithOverdueState(baseEntitlement,true,true);
  final Invoice firstNonZeroInvoice=invoiceUserApi.getUnpaidInvoicesByAccountId(account.getId(),clock.getUTCToday(),callContext).iterator().next();
  fullyAdjustInvoiceItemAndCheckForCompletion(account,firstNonZeroInvoice,1,NextEvent.BLOCK,NextEvent.INVOICE_ADJUSTMENT);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,5,31),InvoiceItemType.ITEM_ADJ,new BigDecimal("-249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,7,31),callContext);
  addDaysAndCheckForCompletion(5);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(10,NextEvent.PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(15,NextEvent.BLOCK,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  checkODState("OD1");
  checkChangePlanWithOverdueState(baseEntitlement,true,true);
  invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,8,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  final List<Invoice> invoicesToAdjust=getUnpaidInvoicesOrderFromRecent();
  for (int i=0; i < invoicesToAdjust.size(); i++) {
    if (i == invoicesToAdjust.size() - 1) {
      fullyAdjustInvoiceAndCheckForCompletion(account,invoicesToAdjust.get(i),NextEvent.BLOCK,NextEvent.INVOICE_ADJUSTMENT);
    }
 else {
      fullyAdjustInvoiceAndCheckForCompletion(account,invoicesToAdjust.get(i),NextEvent.INVOICE_ADJUSTMENT);
    }
  }
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
}
