{
  int nbTotalDays=Days.daysBetween(startDate,endDate).getDays();
  final boolean prorated=!(newStartDate.compareTo(startDate) == 0 && newEndDate.compareTo(endDate) == 0);
  final BigDecimal positiveAmount=prorated ? InvoiceDateUtils.calculateProrationBetweenDates(newStartDate,newEndDate,nbTotalDays).multiply(amount) : amount;
  if (action == ItemAction.ADD) {
    return new RecurringInvoiceItem(id,createdDate,invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,newStartDate,newEndDate,KillBillMoney.of(positiveAmount,currency),rate,currency);
  }
 else {
    final BigDecimal maxAvailableAmountAfterAdj=amount.subtract(adjustedAmount);
    final BigDecimal maxAvailableAmountForRepair=maxAvailableAmountAfterAdj.subtract(currentRepairedAmount);
    final BigDecimal positiveAmountForRepair=positiveAmount.compareTo(maxAvailableAmountForRepair) <= 0 ? positiveAmount : maxAvailableAmountForRepair;
    return positiveAmountForRepair.compareTo(BigDecimal.ZERO) > 0 ? new RepairAdjInvoiceItem(invoiceId,accountId,newStartDate,newEndDate,KillBillMoney.of(positiveAmountForRepair.negate(),currency),currency,linkedId) : null;
  }
}
