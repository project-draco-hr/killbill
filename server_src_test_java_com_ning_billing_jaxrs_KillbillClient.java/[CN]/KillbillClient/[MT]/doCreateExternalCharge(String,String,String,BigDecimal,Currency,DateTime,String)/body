{
  final Map<String,String> queryParams=new HashMap<String,String>();
  if (requestedDate != null) {
    queryParams.put(JaxrsResource.QUERY_REQUESTED_DT,requestedDate.toDateTimeISO().toString());
  }
  final InvoiceItemJson externalCharge=new InvoiceItemJson(null,invoiceId,null,accountId,bundleId,null,null,null,null,null,null,null,amount,currency,null);
  final String externalChargeJson=mapper.writeValueAsString(externalCharge);
  final Response response=doPost(uri,externalChargeJson,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  final String location=response.getHeader("Location");
  Assert.assertNotNull(location);
  final Map<String,String> queryParamsForInvoice=new HashMap<String,String>();
  queryParamsForInvoice.put(JaxrsResource.QUERY_ACCOUNT_ID,accountId);
  queryParamsForInvoice.put(JaxrsResource.QUERY_INVOICE_WITH_ITEMS,"true");
  final Response invoiceResponse=doGetWithUrl(location,queryParamsForInvoice,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(invoiceResponse.getStatusCode(),Status.OK.getStatusCode());
  final String invoicesBaseJson=invoiceResponse.getResponseBody();
  final InvoiceJson invoice=mapper.readValue(invoicesBaseJson,new TypeReference<InvoiceJson>(){
  }
);
  assertNotNull(invoice);
  return invoice;
}
