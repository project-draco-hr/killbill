{
  final String uri=JaxrsResource.PAYMENTS_PATH + "/" + paymentId+ "/"+ JaxrsResource.REFUNDS;
  final List<InvoiceItemJsonSimple> adjustments=new ArrayList<InvoiceItemJsonSimple>();
  for (  final String itemId : itemAdjustments.keySet()) {
    adjustments.add(new InvoiceItemJsonSimple(itemId,null,null,null,null,null,null,null,null,null,null,itemAdjustments.get(itemId),null,null));
  }
  final RefundJson refundJson=new RefundJson(null,paymentId,amount,DEFAULT_CURRENCY,adjusted,null,null,adjustments,null);
  final String baseJson=mapper.writeValueAsString(refundJson);
  final Response response=doPost(uri,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  final String locationCC=response.getHeader("Location");
  Assert.assertNotNull(locationCC);
  final Response retrievedResponse=doGetWithUrl(locationCC,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(retrievedResponse.getStatusCode(),Status.OK.getStatusCode());
  final String retrievedBaseJson=retrievedResponse.getResponseBody();
  final RefundJson retrievedRefundJson=mapper.readValue(retrievedBaseJson,RefundJson.class);
  assertNotNull(retrievedRefundJson);
  if (retrievedRefundJson.getAdjustments() != null) {
    final Set<String> allLinkedItemIds=new HashSet<String>(Collections2.transform(retrievedRefundJson.getAdjustments(),new Function<InvoiceItemJsonSimple,String>(){
      @Override public String apply(      @Nullable final InvoiceItemJsonSimple input){
        if (input != null) {
          return input.getLinkedInvoiceItemId();
        }
 else {
          return null;
        }
      }
    }
));
    assertEquals(allLinkedItemIds,itemAdjustments.keySet());
  }
  return retrievedRefundJson;
}
