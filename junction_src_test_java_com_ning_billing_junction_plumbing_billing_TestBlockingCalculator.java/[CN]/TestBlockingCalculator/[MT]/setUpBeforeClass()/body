{
  clock=new ClockMock();
  final Injector i=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      blockingApi=Mockito.mock(BlockingApi.class);
      account=Mockito.mock(Account.class);
      subscription1=Mockito.mock(Subscription.class);
      subscription2=Mockito.mock(Subscription.class);
      subscription3=Mockito.mock(Subscription.class);
      subscription4=Mockito.mock(Subscription.class);
      Mockito.when(account.getId()).thenReturn(UUID.randomUUID());
      Mockito.when(subscription1.getBundleId()).thenReturn(bundleId1);
      Mockito.when(subscription2.getBundleId()).thenReturn(bundleId1);
      Mockito.when(subscription3.getBundleId()).thenReturn(bundleId1);
      Mockito.when(subscription4.getBundleId()).thenReturn(bundleId2);
      Mockito.when(subscription1.getId()).thenReturn(UUID.randomUUID());
      Mockito.when(subscription2.getId()).thenReturn(UUID.randomUUID());
      Mockito.when(subscription3.getId()).thenReturn(UUID.randomUUID());
      Mockito.when(subscription4.getId()).thenReturn(UUID.randomUUID());
      bind(BlockingStateDao.class).toInstance(Mockito.mock(BlockingStateDao.class));
      bind(BlockingApi.class).toInstance(blockingApi);
    }
  }
);
  odc=i.getInstance(BlockingCalculator.class);
}
