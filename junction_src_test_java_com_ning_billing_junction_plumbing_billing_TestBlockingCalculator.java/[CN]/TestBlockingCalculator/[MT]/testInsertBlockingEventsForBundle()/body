{
  final DateTime now=clock.getUTCNow();
  final BillingEvent A=createRealEvent(now.minusDays(1).minusHours(1),subscription1);
  final BillingEvent B=createRealEvent(now.minusDays(1),subscription2);
  final BillingEvent C=createRealEvent(now.plusDays(1),subscription2);
  final BillingEvent D=createRealEvent(now.plusDays(3),subscription3);
  final SortedSet<BillingEvent> billingEvents=new TreeSet<BillingEvent>();
  billingEvents.add(A);
  billingEvents.add(B);
  billingEvents.add(C);
  billingEvents.add(D);
  final List<BlockingState> blockingStates=new ArrayList<BlockingState>();
  blockingStates.add(new DefaultBlockingState(UUID.randomUUID(),bundleId1,DISABLED_BUNDLE,"test",true,true,true,now,null));
  blockingStates.add(new DefaultBlockingState(UUID.randomUUID(),bundleId1,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2),null));
  setBlockingStates(bundleId1,blockingStates);
  blockingCalculator.insertBlockingEvents(billingEvents,internalCallContext);
  assertEquals(billingEvents.size(),7);
  final SortedSet<BillingEvent> s1Events=blockingCalculator.filter(billingEvents,subscription1);
  final Iterator<BillingEvent> it1=s1Events.iterator();
  assertEquals(it1.next(),A);
  assertEquals(it1.next().getTransitionType(),SubscriptionBaseTransitionType.START_BILLING_DISABLED);
  assertEquals(it1.next().getTransitionType(),SubscriptionBaseTransitionType.END_BILLING_DISABLED);
  final SortedSet<BillingEvent> s2Events=blockingCalculator.filter(billingEvents,subscription2);
  final Iterator<BillingEvent> it2=s2Events.iterator();
  assertEquals(it2.next(),B);
  assertEquals(it2.next().getTransitionType(),SubscriptionBaseTransitionType.START_BILLING_DISABLED);
  assertEquals(it2.next().getTransitionType(),SubscriptionBaseTransitionType.END_BILLING_DISABLED);
  final SortedSet<BillingEvent> s3Events=blockingCalculator.filter(billingEvents,subscription3);
  final Iterator<BillingEvent> it3=s3Events.iterator();
  assertEquals(it3.next(),D);
}
