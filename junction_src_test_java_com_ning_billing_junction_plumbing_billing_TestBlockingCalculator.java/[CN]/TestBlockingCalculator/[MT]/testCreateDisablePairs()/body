{
  List<BlockingState> blockingEvents;
  final UUID ovdId=UUID.randomUUID();
  final UUID ovdId2=UUID.randomUUID();
  final DateTime now=clock.getUTCNow();
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1)));
  List<DisabledDuration> pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNull(pairs.get(0).getEnd());
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2)));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2)));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(3)));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(3));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(3)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(4)));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(4));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId2,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId2,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(3)));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertEquals(pairs.get(0).getEnd(),now.plusDays(3));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId2,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId2,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(3)));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertEquals(pairs.get(0).getEnd(),now.plusDays(3));
}
