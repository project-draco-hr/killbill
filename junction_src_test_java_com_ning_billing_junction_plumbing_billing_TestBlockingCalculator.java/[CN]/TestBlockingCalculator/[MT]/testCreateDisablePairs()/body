{
  SortedSet<BlockingState> blockingEvents;
  final UUID ovdId=UUID.randomUUID();
  final DateTime now=clock.getUTCNow();
  blockingEvents=new TreeSet<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(1)));
  List<DisabledDuration> pairs=odc.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNull(pairs.get(0).getEnd());
  blockingEvents=new TreeSet<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now.plusDays(2)));
  pairs=odc.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  blockingEvents=new TreeSet<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now.plusDays(2)));
  pairs=odc.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  blockingEvents=new TreeSet<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now.plusDays(3)));
  pairs=odc.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(3));
  blockingEvents=new TreeSet<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(1)));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(2)));
  blockingEvents.add(new DefaultBlockingState(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",true,true,true,now.plusDays(3)));
  blockingEvents.add(new DefaultBlockingState(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,"test",false,false,false,now.plusDays(4)));
  pairs=odc.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(4));
}
