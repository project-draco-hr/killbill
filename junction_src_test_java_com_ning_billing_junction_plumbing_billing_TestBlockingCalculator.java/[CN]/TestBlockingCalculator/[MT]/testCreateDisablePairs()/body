{
  List<BlockingState> blockingEvents;
  final UUID ovdId=UUID.randomUUID();
  final DateTime now=clock.getUTCNow();
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now,null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1),null));
  List<DisabledDuration> pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNull(pairs.get(0).getEnd());
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now,null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1),null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2),null));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now,null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1),null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2),null));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now,null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1),null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(2),null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(3),null));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(3));
  blockingEvents=new ArrayList<BlockingState>();
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now,null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1),null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(2),null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(3),null));
  blockingEvents.add(new DefaultBlockingState(UUID.randomUUID(),ovdId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(4),null));
  pairs=blockingCalculator.createBlockingDurations(blockingEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(4));
}
