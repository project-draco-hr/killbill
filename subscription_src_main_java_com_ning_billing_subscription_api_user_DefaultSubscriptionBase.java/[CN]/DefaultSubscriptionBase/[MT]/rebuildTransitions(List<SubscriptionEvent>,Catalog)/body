{
  if (inputEvents == null) {
    return;
  }
  this.events=inputEvents;
  UUID nextUserToken=null;
  UUID nextEventId=null;
  DateTime nextCreatedDate=null;
  SubscriptionState nextState=null;
  String nextPlanName=null;
  String nextPhaseName=null;
  String nextPriceListName=null;
  UUID prevEventId=null;
  DateTime prevCreatedDate=null;
  SubscriptionState previousState=null;
  PriceList previousPriceList=null;
  Plan previousPlan=null;
  PlanPhase previousPhase=null;
  transitions=new LinkedList<SubscriptionBaseTransition>();
  for (  final SubscriptionEvent cur : inputEvents) {
    if (!cur.isActive() || cur.getActiveVersion() < activeVersion) {
      continue;
    }
    ApiEventType apiEventType=null;
    boolean isFromDisk=true;
    nextEventId=cur.getId();
    nextCreatedDate=cur.getCreatedDate();
switch (cur.getType()) {
case PHASE:
      final PhaseEvent phaseEV=(PhaseEvent)cur;
    nextPhaseName=phaseEV.getPhase();
  break;
case API_USER:
final ApiEvent userEV=(ApiEvent)cur;
apiEventType=userEV.getEventType();
isFromDisk=userEV.isFromDisk();
switch (apiEventType) {
case TRANSFER:
case MIGRATE_BILLING:
case MIGRATE_ENTITLEMENT:
case CREATE:
case RE_CREATE:
prevEventId=null;
prevCreatedDate=null;
previousState=null;
previousPlan=null;
previousPhase=null;
previousPriceList=null;
nextState=SubscriptionState.ACTIVE;
nextPlanName=userEV.getEventPlan();
nextPhaseName=userEV.getEventPlanPhase();
nextPriceListName=userEV.getPriceList();
break;
case CHANGE:
nextPlanName=userEV.getEventPlan();
nextPhaseName=userEV.getEventPlanPhase();
nextPriceListName=userEV.getPriceList();
break;
case CANCEL:
nextState=SubscriptionState.CANCELLED;
nextPlanName=null;
nextPhaseName=null;
break;
case UNCANCEL:
default :
throw new SubscriptionBaseError(String.format("Unexpected UserEvent type = %s",userEV.getEventType().toString()));
}
break;
default :
throw new SubscriptionBaseError(String.format("Unexpected Event type = %s",cur.getType()));
}
Plan nextPlan=null;
PlanPhase nextPhase=null;
PriceList nextPriceList=null;
try {
nextPlan=(nextPlanName != null) ? catalog.findPlan(nextPlanName,cur.getRequestedDate(),getAlignStartDate()) : null;
nextPhase=(nextPhaseName != null) ? catalog.findPhase(nextPhaseName,cur.getRequestedDate(),getAlignStartDate()) : null;
nextPriceList=(nextPriceListName != null) ? catalog.findPriceList(nextPriceListName,cur.getRequestedDate()) : null;
}
 catch (CatalogApiException e) {
log.error(String.format("Failed to build transition for subscription %s",id),e);
}
final SubscriptionBaseTransitionData transition=new SubscriptionBaseTransitionData(cur.getId(),id,bundleId,cur.getType(),apiEventType,cur.getRequestedDate(),cur.getEffectiveDate(),prevEventId,prevCreatedDate,previousState,previousPlan,previousPhase,previousPriceList,nextEventId,nextCreatedDate,nextState,nextPlan,nextPhase,nextPriceList,cur.getTotalOrdering(),nextUserToken,isFromDisk);
transitions.add(transition);
previousState=nextState;
previousPlan=nextPlan;
previousPhase=nextPhase;
previousPriceList=nextPriceList;
prevEventId=nextEventId;
prevCreatedDate=nextCreatedDate;
}
}
