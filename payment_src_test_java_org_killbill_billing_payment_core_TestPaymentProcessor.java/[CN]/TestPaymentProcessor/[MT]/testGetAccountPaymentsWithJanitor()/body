{
  final String paymentExternalKey=UUID.randomUUID().toString();
  final Iterable<PluginProperty> pluginPropertiesToDriveTransationToUnknown=ImmutableList.<PluginProperty>of(new PluginProperty(MockPaymentProviderPlugin.PLUGIN_PROPERTY_PAYMENT_PLUGIN_STATUS_OVERRIDE,PaymentPluginStatus.UNDEFINED,false));
  final String authorizationKey=UUID.randomUUID().toString();
  final Payment authorization=paymentProcessor.createAuthorization(true,null,account,null,null,TEN,CURRENCY,paymentExternalKey,authorizationKey,SHOULD_LOCK_ACCOUNT,pluginPropertiesToDriveTransationToUnknown,callContext,internalCallContext);
  verifyPayment(authorization,paymentExternalKey,ZERO,ZERO,ZERO,1);
  final UUID paymentId=authorization.getId();
  verifyPaymentTransaction(authorization.getTransactions().get(0),authorizationKey,TransactionType.AUTHORIZE,TEN,paymentId);
  paymentBusListener.verify(0,0,1,account.getId(),paymentId,ZERO,TransactionStatus.UNKNOWN);
  mockPaymentProviderPlugin.overridePaymentPluginStatus(paymentId,authorization.getTransactions().get(0).getId(),PaymentPluginStatus.PROCESSED);
  final List<Payment> payments=paymentProcessor.getAccountPayments(account.getId(),true,callContext,internalCallContext);
  Assert.assertEquals(payments.size(),1);
  verifyPayment(payments.get(0),paymentExternalKey,TEN,ZERO,ZERO,1);
  verifyPaymentTransaction(payments.get(0).getTransactions().get(0),authorizationKey,TransactionType.AUTHORIZE,TEN,paymentId);
  paymentBusListener.verify(1,0,1,account.getId(),paymentId,TEN,TransactionStatus.SUCCESS);
}
