{
  final String paymentExternalKey=UUID.randomUUID().toString();
  final Iterable<PluginProperty> pluginPropertiesToDriveTransationToPending=ImmutableList.<PluginProperty>of(new PluginProperty(MockPaymentProviderPlugin.PLUGIN_PROPERTY_PAYMENT_PLUGIN_STATUS_OVERRIDE,PaymentPluginStatus.PENDING,false));
  final String authorizationKey=UUID.randomUUID().toString();
  final Payment authorization=paymentProcessor.createAuthorization(true,null,account,null,null,TEN,CURRENCY,paymentExternalKey,authorizationKey,SHOULD_LOCK_ACCOUNT,pluginPropertiesToDriveTransationToPending,callContext,internalCallContext);
  verifyPayment(authorization,paymentExternalKey,ZERO,ZERO,ZERO,1);
  final UUID paymentId=authorization.getId();
  verifyPaymentTransaction(authorization.getTransactions().get(0),authorizationKey,TransactionType.AUTHORIZE,TEN,paymentId);
  paymentBusListener.verify(1,account.getId(),paymentId,TEN,TransactionStatus.PENDING);
  final Payment authorizationPost3DS=paymentProcessor.createAuthorization(true,null,account,null,paymentId,TEN,CURRENCY,paymentExternalKey,authorizationKey,SHOULD_LOCK_ACCOUNT,PLUGIN_PROPERTIES,callContext,internalCallContext);
  verifyPayment(authorizationPost3DS,paymentExternalKey,TEN,ZERO,ZERO,1);
  verifyPaymentTransaction(authorizationPost3DS.getTransactions().get(0),authorizationKey,TransactionType.AUTHORIZE,TEN,paymentId);
  paymentBusListener.verify(2,account.getId(),paymentId,TEN,TransactionStatus.SUCCESS);
  final String capture1Key=UUID.randomUUID().toString();
  final Payment partialCapture1=paymentProcessor.createCapture(true,null,account,paymentId,FIVE,CURRENCY,capture1Key,SHOULD_LOCK_ACCOUNT,PLUGIN_PROPERTIES,callContext,internalCallContext);
  verifyPayment(partialCapture1,paymentExternalKey,TEN,FIVE,ZERO,2);
  verifyPaymentTransaction(partialCapture1.getTransactions().get(1),capture1Key,TransactionType.CAPTURE,FIVE,paymentId);
  paymentBusListener.verify(3,account.getId(),paymentId,FIVE,TransactionStatus.SUCCESS);
  final String capture2Key=UUID.randomUUID().toString();
  final Payment partialCapture2=paymentProcessor.createCapture(true,null,account,paymentId,FIVE,CURRENCY,capture2Key,SHOULD_LOCK_ACCOUNT,PLUGIN_PROPERTIES,callContext,internalCallContext);
  verifyPayment(partialCapture2,paymentExternalKey,TEN,TEN,ZERO,3);
  verifyPaymentTransaction(partialCapture2.getTransactions().get(2),capture2Key,TransactionType.CAPTURE,FIVE,paymentId);
  paymentBusListener.verify(4,account.getId(),paymentId,FIVE,TransactionStatus.SUCCESS);
  final String refund1Key=UUID.randomUUID().toString();
  final Payment partialRefund1=paymentProcessor.createRefund(true,null,account,paymentId,FIVE,CURRENCY,refund1Key,SHOULD_LOCK_ACCOUNT,PLUGIN_PROPERTIES,callContext,internalCallContext);
  verifyPayment(partialRefund1,paymentExternalKey,TEN,TEN,FIVE,4);
  verifyPaymentTransaction(partialRefund1.getTransactions().get(3),refund1Key,TransactionType.REFUND,FIVE,paymentId);
  paymentBusListener.verify(5,account.getId(),paymentId,FIVE,TransactionStatus.SUCCESS);
  final String refund2Key=UUID.randomUUID().toString();
  final Payment partialRefund2=paymentProcessor.createRefund(true,null,account,paymentId,FIVE,CURRENCY,refund2Key,SHOULD_LOCK_ACCOUNT,PLUGIN_PROPERTIES,callContext,internalCallContext);
  verifyPayment(partialRefund2,paymentExternalKey,TEN,TEN,TEN,5);
  verifyPaymentTransaction(partialRefund2.getTransactions().get(4),refund2Key,TransactionType.REFUND,FIVE,paymentId);
  paymentBusListener.verify(6,account.getId(),paymentId,FIVE,TransactionStatus.SUCCESS);
}
