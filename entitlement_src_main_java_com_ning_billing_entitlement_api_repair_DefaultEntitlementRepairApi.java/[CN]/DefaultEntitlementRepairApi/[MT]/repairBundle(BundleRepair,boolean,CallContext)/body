{
  try {
    SubscriptionBundle bundle=dao.getSubscriptionBundleFromId(input.getBundleId());
    if (bundle == null) {
      throw new EntitlementRepairException(ErrorCode.ENT_REPAIR_UNKNOWN_BUNDLE,input.getBundleId());
    }
    final List<Subscription> subscriptions=dao.getSubscriptions(factory,input.getBundleId());
    if (subscriptions.size() == 0) {
      throw new EntitlementRepairException(ErrorCode.ENT_REPAIR_UNKNOWN_BUNDLE,input.getBundleId());
    }
    final String viewId=getViewId(((SubscriptionBundleData)bundle).getLastSysUpdateTime(),subscriptions);
    if (!viewId.equals(input.getViewId())) {
      throw new EntitlementRepairException(ErrorCode.ENT_REPAIR_VIEW_CHANGED,input.getBundleId(),input.getViewId(),viewId);
    }
    DateTime firstDeletedBPEventTime=null;
    DateTime lastRemainingBPEventTime=null;
    SubscriptionDataRepair baseSubscriptionRepair=null;
    List<SubscriptionDataRepair> addOnSubscriptionInRepair=new LinkedList<SubscriptionDataRepair>();
    List<SubscriptionDataRepair> inRepair=new LinkedList<SubscriptionDataRepair>();
    for (    Subscription cur : subscriptions) {
      SubscriptionRepair curRepair=findAndCreateSubscriptionRepair(cur.getId(),input.getSubscriptions());
      if (curRepair != null) {
        SubscriptionDataRepair curData=((SubscriptionDataRepair)cur);
        List<EntitlementEvent> remaining=getRemainingEventsAndValidateDeletedEvents(curData,firstDeletedBPEventTime,curRepair.getDeletedEvents());
        if (cur.getCategory() == ProductCategory.BASE) {
          int bpTransitionSize=((SubscriptionData)cur).getAllTransitions().size();
          lastRemainingBPEventTime=(remaining.size() > 0) ? curData.getAllTransitions().get(remaining.size() - 1).getEffectiveTransitionTime() : null;
          firstDeletedBPEventTime=(remaining.size() < bpTransitionSize) ? curData.getAllTransitions().get(remaining.size()).getEffectiveTransitionTime() : null;
        }
        if (curRepair.getNewEvents() != null && curRepair.getNewEvents().size() > 0) {
          Collections.sort(curRepair.getNewEvents(),new Comparator<NewEvent>(){
            @Override public int compare(            NewEvent o1,            NewEvent o2){
              return o1.getRequestedDate().compareTo(o2.getRequestedDate());
            }
          }
);
          DateTime lastRemainingEventTime=(remaining.size() == 0) ? null : curData.getAllTransitions().get(remaining.size() - 1).getEffectiveTransitionTime();
          validateFirstNewEvent(curData,curRepair.getNewEvents().get(0),lastRemainingBPEventTime,lastRemainingEventTime);
        }
        SubscriptionDataRepair sRepair=createSubscriptionDataRepair(curData,remaining);
        repairDao.initializeRepair(curData.getId(),remaining);
        inRepair.add(sRepair);
        if (sRepair.getCategory() == ProductCategory.ADD_ON) {
          addOnSubscriptionInRepair.add(sRepair);
        }
 else         if (sRepair.getCategory() == ProductCategory.BASE) {
          baseSubscriptionRepair=sRepair;
        }
      }
    }
    if (input.getSubscriptions().size() != inRepair.size()) {
      for (      SubscriptionRepair cur : input.getSubscriptions()) {
        boolean found=false;
        for (        Subscription s : subscriptions) {
          if (s.getId().equals(cur.getId())) {
            found=true;
            break;
          }
        }
        if (!found) {
          throw new EntitlementRepairException(ErrorCode.ENT_REPAIR_UNKNOWN_SUBSCRIPTION,cur.getId());
        }
      }
    }
    TreeSet<NewEvent> newEventSet=new TreeSet<SubscriptionRepair.NewEvent>(new Comparator<NewEvent>(){
      @Override public int compare(      NewEvent o1,      NewEvent o2){
        return o1.getRequestedDate().compareTo(o2.getRequestedDate());
      }
    }
);
    for (    SubscriptionRepair cur : input.getSubscriptions()) {
      for (      NewEvent e : cur.getNewEvents()) {
        newEventSet.add(new DefaultNewEvent(cur.getId(),e.getPlanPhaseSpecifier(),e.getRequestedDate(),e.getSubscriptionTransitionType()));
      }
    }
    Iterator<NewEvent> it=newEventSet.iterator();
    while (it.hasNext()) {
      DefaultNewEvent cur=(DefaultNewEvent)it.next();
      SubscriptionDataRepair curDataRepair=findSubscriptionDataRepair(cur.getSubscriptionId(),inRepair);
      if (curDataRepair == null) {
        throw new EntitlementRepairException(ErrorCode.ENT_REPAIR_UNKNOWN_SUBSCRIPTION,cur.getSubscriptionId());
      }
      curDataRepair.addNewRepairEvent(cur,baseSubscriptionRepair,addOnSubscriptionInRepair,context);
    }
    if (dryRun) {
      final List<SubscriptionRepair> repairs=createGetSubscriptionRepairList(subscriptions,convertDataRepair(inRepair));
      return createGetBundleRepair(input.getBundleId(),input.getViewId(),repairs);
    }
 else {
      return null;
    }
  }
  finally {
    repairDao.cleanup();
  }
}
