{
  final String definitionName=UUID.randomUUID().toString().substring(0,5);
  final String description=UUID.randomUUID().toString().substring(0,5);
  final UUID objectId=UUID.randomUUID();
  final ObjectType objectType=ObjectType.INVOICE_ITEM;
  eventsListener.pushExpectedEvent(NextEvent.TAG_DEFINITION);
  final TagDefinitionModelDao createdTagDefinition=tagDefinitionDao.create(definitionName,description,internalCallContext);
  Assert.assertEquals(createdTagDefinition.getName(),definitionName);
  Assert.assertEquals(createdTagDefinition.getDescription(),description);
  assertListenerStatus();
  eventsListener.pushExpectedEvent(NextEvent.TAG);
  final Tag tag=new DescriptiveTag(createdTagDefinition.getId(),objectType,objectId,internalCallContext.getCreatedDate());
  tagDao.create(new TagModelDao(tag),internalCallContext);
  assertListenerStatus();
  final List<TagModelDao> foundTags=tagDao.getTagsForObject(objectId,objectType,internalCallContext);
  Assert.assertEquals(foundTags.size(),1);
  Assert.assertEquals(foundTags.get(0).getTagDefinitionId(),createdTagDefinition.getId());
  final List<TagModelDao> foundTagsForAccount=tagDao.getTagsForAccount(internalCallContext);
  Assert.assertEquals(foundTagsForAccount.size(),1);
  Assert.assertEquals(foundTagsForAccount.get(0).getTagDefinitionId(),createdTagDefinition.getId());
  eventsListener.pushExpectedEvent(NextEvent.TAG);
  tagDao.deleteTag(objectId,objectType,createdTagDefinition.getId(),internalCallContext);
  assertListenerStatus();
  Assert.assertEquals(tagDao.getTagsForObject(objectId,objectType,internalCallContext).size(),0);
  Assert.assertEquals(tagDao.getTagsForAccount(internalCallContext).size(),0);
}
