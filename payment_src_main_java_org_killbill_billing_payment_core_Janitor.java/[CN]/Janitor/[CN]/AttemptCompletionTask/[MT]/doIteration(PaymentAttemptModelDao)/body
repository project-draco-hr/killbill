{
  final InternalTenantContext tenantContext=internalCallContextFactory.createInternalTenantContext(attempt.getAccountId(),attempt.getId(),ObjectType.PAYMENT_ATTEMPT);
  final UUID tenantId=nonEntityDao.retrieveIdFromObject(tenantContext.getTenantRecordId(),ObjectType.TENANT);
  final CallContext callContext=new DefaultCallContext(tenantId,"AttemptCompletionJanitorTask",CallOrigin.INTERNAL,UserType.SYSTEM,UUID.randomUUID(),clock);
  final InternalCallContext internalCallContext=internalCallContextFactory.createInternalCallContext(attempt.getAccountId(),callContext);
  final List<PaymentTransactionModelDao> transactions=paymentDao.getPaymentTransactionsByExternalKey(attempt.getTransactionExternalKey(),tenantContext);
  final PaymentTransactionModelDao transaction=Iterables.tryFind(transactions,new Predicate<PaymentTransactionModelDao>(){
    @Override public boolean apply(    final PaymentTransactionModelDao input){
      return input.getAttemptId().equals(attempt.getId()) && input.getTransactionStatus() == TransactionStatus.SUCCESS;
    }
  }
).orNull();
  if (transaction == null) {
    log.info("Janitor AttemptCompletionTask moving attempt " + attempt.getId() + " -> ABORTED");
    paymentDao.updatePaymentAttempt(attempt.getId(),attempt.getTransactionId(),"ABORTED",internalCallContext);
    return;
  }
  try {
    log.info("Janitor AttemptCompletionTask completing attempt " + attempt.getId() + " -> SUCCESS");
    final Account account=accountInternalApi.getAccountById(attempt.getAccountId(),tenantContext);
    final boolean isApiPayment=true;
    final RetryablePaymentStateContext paymentStateContext=new RetryablePaymentStateContext(attempt.getPluginName(),isApiPayment,transaction.getPaymentId(),attempt.getPaymentExternalKey(),transaction.getTransactionExternalKey(),transaction.getTransactionType(),account,attempt.getPaymentMethodId(),transaction.getAmount(),transaction.getCurrency(),PluginPropertySerializer.deserialize(attempt.getPluginProperties()),internalCallContext,callContext);
    paymentStateContext.setAttemptId(attempt.getId());
    paymentStateContext.setPaymentTransactionModelDao(transaction);
    pluginControlledPaymentAutomatonRunner.completeRun(paymentStateContext);
  }
 catch (  AccountApiException e) {
    log.warn("Janitor AttemptCompletionTask failed to complete payment attempt " + attempt.getId(),e);
  }
catch (  PluginPropertySerializerException e) {
    log.warn("Janitor AttemptCompletionTask failed to complete payment attempt " + attempt.getId(),e);
  }
catch (  PaymentApiException e) {
    log.warn("Janitor AttemptCompletionTask failed to complete payment attempt " + attempt.getId(),e);
  }
}
