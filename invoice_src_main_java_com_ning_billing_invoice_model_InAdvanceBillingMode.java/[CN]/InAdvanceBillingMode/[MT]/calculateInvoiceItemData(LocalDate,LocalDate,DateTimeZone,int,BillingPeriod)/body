{
  final List<RecurringInvoiceItemData> results=new ArrayList<RecurringInvoiceItemData>();
  if (targetDate.isBefore(startDate)) {
    throw new InvalidDateSequenceException();
  }
  final LocalDate firstBillingCycleDate=calculateBillingCycleDateOnOrAfter(startDate,accountTimeZone,billingCycleDay);
  if (firstBillingCycleDate.isAfter(startDate)) {
    final BigDecimal leadingProRationPeriods=calculateProRationBeforeFirstBillingPeriod(startDate,firstBillingCycleDate,billingPeriod);
    if (leadingProRationPeriods != null && leadingProRationPeriods.compareTo(BigDecimal.ZERO) > 0) {
      results.add(new RecurringInvoiceItemData(startDate,firstBillingCycleDate,leadingProRationPeriods));
    }
  }
  final LocalDate effectiveEndDate=calculateEffectiveEndDate(firstBillingCycleDate,targetDate,billingPeriod);
  final LocalDate lastBillingCycleDate=calculateLastBillingCycleDateBefore(effectiveEndDate,firstBillingCycleDate,billingCycleDay,billingPeriod);
  final int numberOfWholeBillingPeriods=calculateNumberOfWholeBillingPeriods(firstBillingCycleDate,lastBillingCycleDate,billingPeriod);
  final int numberOfMonthsPerBillingPeriod=billingPeriod.getNumberOfMonths();
  for (int i=0; i < numberOfWholeBillingPeriods; i++) {
    results.add(new RecurringInvoiceItemData(firstBillingCycleDate.plusMonths(i * numberOfMonthsPerBillingPeriod),firstBillingCycleDate.plusMonths((i + 1) * numberOfMonthsPerBillingPeriod),BigDecimal.ONE));
  }
  if (effectiveEndDate.isAfter(lastBillingCycleDate)) {
    final BigDecimal trailingProRationPeriods=calculateProRationAfterLastBillingCycleDate(effectiveEndDate,lastBillingCycleDate,billingPeriod);
    if (trailingProRationPeriods.compareTo(BigDecimal.ZERO) > 0) {
      results.add(new RecurringInvoiceItemData(lastBillingCycleDate,effectiveEndDate,trailingProRationPeriods));
    }
  }
  return results;
}
