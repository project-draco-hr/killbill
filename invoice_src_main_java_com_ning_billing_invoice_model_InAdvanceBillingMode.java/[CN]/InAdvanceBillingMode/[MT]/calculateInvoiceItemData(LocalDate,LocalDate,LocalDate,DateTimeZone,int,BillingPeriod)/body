{
  if (endDate == null) {
    return calculateInvoiceItemData(startDate,targetDate,accountTimeZone,billingCycleDayLocal,billingPeriod);
  }
  if (endDate.isBefore(startDate)) {
    throw new InvalidDateSequenceException();
  }
  if (targetDate.isBefore(startDate)) {
    throw new InvalidDateSequenceException();
  }
  final List<RecurringInvoiceItemData> results=new ArrayList<RecurringInvoiceItemData>();
  final LocalDate firstBillingCycleDate=calculateBillingCycleDateOnOrAfter(startDate,accountTimeZone,billingCycleDayLocal);
  if (firstBillingCycleDate.isAfter(startDate)) {
    final BigDecimal leadingProRationPeriods=calculateProRationBeforeFirstBillingPeriod(startDate,firstBillingCycleDate,billingPeriod);
    if (leadingProRationPeriods != null && leadingProRationPeriods.compareTo(BigDecimal.ZERO) > 0) {
      results.add(new RecurringInvoiceItemData(startDate,firstBillingCycleDate,leadingProRationPeriods));
    }
  }
  final LocalDate effectiveEndDate=calculateEffectiveEndDate(firstBillingCycleDate,targetDate,endDate,billingPeriod);
  final LocalDate lastBillingCycleDate=calculateLastBillingCycleDateBefore(effectiveEndDate,firstBillingCycleDate,billingCycleDayLocal,billingPeriod);
  final int numberOfWholeBillingPeriods=calculateNumberOfWholeBillingPeriods(firstBillingCycleDate,lastBillingCycleDate,billingPeriod);
  final int numberOfMonthsPerBillingPeriod=billingPeriod.getNumberOfMonths();
  for (int i=0; i < numberOfWholeBillingPeriods; i++) {
    final LocalDate servicePeriodStartDate;
    if (i == 0) {
      servicePeriodStartDate=startDate;
    }
 else {
      servicePeriodStartDate=firstBillingCycleDate.plusMonths(i * numberOfMonthsPerBillingPeriod);
    }
    results.add(new RecurringInvoiceItemData(servicePeriodStartDate,firstBillingCycleDate.plusMonths((i + 1) * numberOfMonthsPerBillingPeriod),BigDecimal.ONE));
  }
  if (effectiveEndDate.isAfter(lastBillingCycleDate)) {
    final BigDecimal trailingProRationPeriods=calculateProRationAfterLastBillingCycleDate(effectiveEndDate,lastBillingCycleDate,billingPeriod);
    if (trailingProRationPeriods.compareTo(BigDecimal.ZERO) > 0) {
      results.add(new RecurringInvoiceItemData(lastBillingCycleDate,effectiveEndDate,trailingProRationPeriods));
    }
  }
  return results;
}
