{
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DefaultSubscriptionBase baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(4));
  clock.addDeltaFromReality(it.toDurationMillis());
  final DefaultSubscriptionBase aoSubscription=testUtil.createSubscription(bundle,"Telescopic-Scope",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME);
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(3));
  clock.addDeltaFromReality(it.toDurationMillis());
  final BundleBaseTimeline bundleRepair=repairApi.getBundleTimeline(bundle.getId(),callContext);
  testUtil.sortEventsOnBundle(bundleRepair);
  final SubscriptionBaseTimeline bpRepair=testUtil.getSubscriptionRepair(baseSubscription.getId(),bundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),2);
  SubscriptionBaseTimeline aoRepair=testUtil.getSubscriptionRepair(aoSubscription.getId(),bundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  final List<DeletedEvent> des=new LinkedList<SubscriptionBaseTimeline.DeletedEvent>();
  des.add(testUtil.createDeletedEvent(aoRepair.getExistingEvents().get(0).getEventId()));
  des.add(testUtil.createDeletedEvent(aoRepair.getExistingEvents().get(1).getEventId()));
  final DateTime aoRecreateDate=aoSubscription.getStartDate().plusDays(1);
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.DISCOUNT);
  final NewEvent ne=testUtil.createNewEvent(SubscriptionBaseTransitionType.CREATE,aoRecreateDate,spec);
  final SubscriptionBaseTimeline saoRepair=testUtil.createSubscriptionRepair(aoSubscription.getId(),des,Collections.singletonList(ne));
  final BundleBaseTimeline bRepair=testUtil.createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(saoRepair));
  boolean dryRun=true;
  final BundleBaseTimeline dryRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,callContext);
  aoRepair=testUtil.getSubscriptionRepair(aoSubscription.getId(),dryRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  final List<ExistingEvent> expected=new LinkedList<SubscriptionBaseTimeline.ExistingEvent>();
  expected.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.CREATE,"Telescopic-Scope",PhaseType.DISCOUNT,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,aoRecreateDate));
  expected.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.PHASE,"Telescopic-Scope",PhaseType.EVERGREEN,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,baseSubscription.getStartDate().plusMonths(1)));
  int index=0;
  for (  final ExistingEvent e : expected) {
    testUtil.validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  DefaultSubscriptionBase newAoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
  assertEquals(newAoSubscription.getState(),EntitlementState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  assertEquals(newAoSubscription.getStartDate(),aoSubscription.getStartDate());
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  dryRun=false;
  testListener.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
  final BundleBaseTimeline realRunBundleRepair=repairApi.repairBundle(bRepair,dryRun,callContext);
  assertListenerStatus();
  aoRepair=testUtil.getSubscriptionRepair(aoSubscription.getId(),realRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  index=0;
  for (  final ExistingEvent e : expected) {
    testUtil.validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  newAoSubscription=(DefaultSubscriptionBase)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
  assertEquals(newAoSubscription.getState(),EntitlementState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  assertEquals(newAoSubscription.getStartDate(),aoRecreateDate);
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
}
