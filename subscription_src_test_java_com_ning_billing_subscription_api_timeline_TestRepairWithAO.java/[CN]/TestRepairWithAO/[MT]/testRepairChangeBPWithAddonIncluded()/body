{
  final String baseProduct="Shotgun";
  final BillingPeriod baseTerm=BillingPeriod.MONTHLY;
  final String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
  final SubscriptionData baseSubscription=testUtil.createSubscription(bundle,baseProduct,baseTerm,basePriceList);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(4));
  clock.addDeltaFromReality(it.toDurationMillis());
  final SubscriptionData aoSubscription=testUtil.createSubscription(bundle,"Telescopic-Scope",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME);
  final SubscriptionData aoSubscription2=testUtil.createSubscription(bundle,"Laser-Scope",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME);
  it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(3));
  clock.addDeltaFromReality(it.toDurationMillis());
  BundleTimeline bundleRepair=repairApi.getBundleTimeline(bundle.getId(),callContext);
  testUtil.sortEventsOnBundle(bundleRepair);
  SubscriptionTimeline bpRepair=testUtil.getSubscriptionRepair(baseSubscription.getId(),bundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),2);
  SubscriptionTimeline aoRepair=testUtil.getSubscriptionRepair(aoSubscription.getId(),bundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  SubscriptionTimeline aoRepair2=testUtil.getSubscriptionRepair(aoSubscription2.getId(),bundleRepair);
  assertEquals(aoRepair2.getExistingEvents().size(),2);
  final DateTime bpChangeDate=clock.getUTCNow().minusDays(1);
  final List<DeletedEvent> des=new LinkedList<SubscriptionTimeline.DeletedEvent>();
  des.add(testUtil.createDeletedEvent(bpRepair.getExistingEvents().get(1).getEventId()));
  final PlanPhaseSpecifier spec=new PlanPhaseSpecifier("Assault-Rifle",ProductCategory.BASE,BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,PhaseType.TRIAL);
  final NewEvent ne=testUtil.createNewEvent(SubscriptionBaseTransitionType.CHANGE,bpChangeDate,spec);
  bpRepair=testUtil.createSubscriptionRepair(baseSubscription.getId(),des,Collections.singletonList(ne));
  bundleRepair=testUtil.createBundleRepair(bundle.getId(),bundleRepair.getViewId(),Collections.singletonList(bpRepair));
  boolean dryRun=true;
  final BundleTimeline dryRunBundleRepair=repairApi.repairBundle(bundleRepair,dryRun,callContext);
  aoRepair=testUtil.getSubscriptionRepair(aoSubscription.getId(),dryRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  aoRepair2=testUtil.getSubscriptionRepair(aoSubscription2.getId(),dryRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  bpRepair=testUtil.getSubscriptionRepair(baseSubscription.getId(),dryRunBundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),3);
  final List<ExistingEvent> expectedAO=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  expectedAO.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.CREATE,"Telescopic-Scope",PhaseType.DISCOUNT,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,aoSubscription.getStartDate()));
  expectedAO.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.CANCEL,"Telescopic-Scope",PhaseType.DISCOUNT,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,bpChangeDate));
  int index=0;
  for (  final ExistingEvent e : expectedAO) {
    testUtil.validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  final List<ExistingEvent> expectedAO2=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  expectedAO2.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.CREATE,"Laser-Scope",PhaseType.DISCOUNT,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,aoSubscription2.getStartDate()));
  expectedAO2.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.PHASE,"Laser-Scope",PhaseType.EVERGREEN,ProductCategory.ADD_ON,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,aoSubscription2.getStartDate().plusMonths(1)));
  index=0;
  for (  final ExistingEvent e : expectedAO2) {
    testUtil.validateExistingEventForAssertion(e,aoRepair2.getExistingEvents().get(index++));
  }
  final List<ExistingEvent> expectedBP=new LinkedList<SubscriptionTimeline.ExistingEvent>();
  expectedBP.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.CREATE,"Shotgun",PhaseType.TRIAL,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.NO_BILLING_PERIOD,baseSubscription.getStartDate()));
  expectedBP.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.CHANGE,"Assault-Rifle",PhaseType.TRIAL,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.NO_BILLING_PERIOD,bpChangeDate));
  expectedBP.add(testUtil.createExistingEventForAssertion(SubscriptionBaseTransitionType.PHASE,"Assault-Rifle",PhaseType.EVERGREEN,ProductCategory.BASE,PriceListSet.DEFAULT_PRICELIST_NAME,BillingPeriod.MONTHLY,baseSubscription.getStartDate().plusDays(30)));
  index=0;
  for (  final ExistingEvent e : expectedBP) {
    testUtil.validateExistingEventForAssertion(e,bpRepair.getExistingEvents().get(index++));
  }
  SubscriptionData newAoSubscription=(SubscriptionData)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
  assertEquals(newAoSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  SubscriptionData newAoSubscription2=(SubscriptionData)subscriptionInternalApi.getSubscriptionFromId(aoSubscription2.getId(),internalCallContext);
  assertEquals(newAoSubscription2.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription2.getAllTransitions().size(),2);
  assertEquals(newAoSubscription2.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  SubscriptionData newBaseSubscription=(SubscriptionData)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  assertEquals(newBaseSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newBaseSubscription.getAllTransitions().size(),2);
  assertEquals(newBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION);
  dryRun=false;
  testListener.pushExpectedEvent(NextEvent.REPAIR_BUNDLE);
  final BundleTimeline realRunBundleRepair=repairApi.repairBundle(bundleRepair,dryRun,callContext);
  assertTrue(testListener.isCompleted(5000));
  aoRepair=testUtil.getSubscriptionRepair(aoSubscription.getId(),realRunBundleRepair);
  assertEquals(aoRepair.getExistingEvents().size(),2);
  bpRepair=testUtil.getSubscriptionRepair(baseSubscription.getId(),realRunBundleRepair);
  assertEquals(bpRepair.getExistingEvents().size(),3);
  index=0;
  for (  final ExistingEvent e : expectedAO) {
    testUtil.validateExistingEventForAssertion(e,aoRepair.getExistingEvents().get(index++));
  }
  index=0;
  for (  final ExistingEvent e : expectedAO2) {
    testUtil.validateExistingEventForAssertion(e,aoRepair2.getExistingEvents().get(index++));
  }
  index=0;
  for (  final ExistingEvent e : expectedBP) {
    testUtil.validateExistingEventForAssertion(e,bpRepair.getExistingEvents().get(index++));
  }
  newAoSubscription=(SubscriptionData)subscriptionInternalApi.getSubscriptionFromId(aoSubscription.getId(),internalCallContext);
  assertEquals(newAoSubscription.getState(),SubscriptionState.CANCELLED);
  assertEquals(newAoSubscription.getAllTransitions().size(),2);
  assertEquals(newAoSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  newAoSubscription2=(SubscriptionData)subscriptionInternalApi.getSubscriptionFromId(aoSubscription2.getId(),internalCallContext);
  assertEquals(newAoSubscription2.getState(),SubscriptionState.ACTIVE);
  assertEquals(newAoSubscription2.getAllTransitions().size(),2);
  assertEquals(newAoSubscription2.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
  newBaseSubscription=(SubscriptionData)subscriptionInternalApi.getSubscriptionFromId(baseSubscription.getId(),internalCallContext);
  assertEquals(newBaseSubscription.getState(),SubscriptionState.ACTIVE);
  assertEquals(newBaseSubscription.getAllTransitions().size(),3);
  assertEquals(newBaseSubscription.getActiveVersion(),SubscriptionEvents.INITIAL_VERSION + 1);
}
