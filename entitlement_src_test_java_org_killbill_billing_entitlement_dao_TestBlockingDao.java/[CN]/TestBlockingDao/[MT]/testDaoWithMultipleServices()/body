{
  final UUID uuid=UUID.randomUUID();
  final String overdueStateName="WayPassedItMan";
  final String service1="TEST";
  final boolean blockChange=true;
  final boolean blockEntitlement=false;
  final boolean blockBilling=false;
  testListener.pushExpectedEvent(NextEvent.BLOCK);
  final BlockingState state1=new DefaultBlockingState(uuid,BlockingStateType.ACCOUNT,overdueStateName,service1,blockChange,blockEntitlement,blockBilling,clock.getUTCNow());
  blockingStateDao.setBlockingStatesAndPostBlockingTransitionEvent(ImmutableMap.<BlockingState,Optional<UUID>>of(state1,Optional.<UUID>absent()),internalCallContext);
  assertListenerStatus();
  clock.setDeltaFromReality(1000 * 3600 * 24);
  final String service2="TEST2";
  testListener.pushExpectedEvent(NextEvent.BLOCK);
  final String overdueStateName2="NoReallyThisCantGoOn";
  final BlockingState state2=new DefaultBlockingState(uuid,BlockingStateType.ACCOUNT,overdueStateName2,service2,blockChange,blockEntitlement,blockBilling,clock.getUTCNow());
  blockingStateDao.setBlockingStatesAndPostBlockingTransitionEvent(ImmutableMap.<BlockingState,Optional<UUID>>of(state2,Optional.<UUID>absent()),internalCallContext);
  assertListenerStatus();
  final List<BlockingState> history2=blockingStateDao.getBlockingAllForAccountRecordId(internalCallContext);
  Assert.assertEquals(history2.size(),2);
  Assert.assertEquals(history2.get(0).getStateName(),overdueStateName);
  Assert.assertEquals(history2.get(1).getStateName(),overdueStateName2);
}
