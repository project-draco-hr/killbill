{
  daoHelper.createNewDirectPaymentTransaction();
  Assert.assertEquals(paymentDao.getDirectPaymentTransaction(directPaymentStateContext.getDirectPaymentTransactionModelDao().getId(),internalCallContext).getPaymentStatus(),PaymentStatus.UNKNOWN);
  final PaymentTransactionInfoPlugin paymentInfoPlugin=Mockito.mock(PaymentTransactionInfoPlugin.class);
  Mockito.when(paymentInfoPlugin.getAmount()).thenReturn(new BigDecimal("82010.222"));
  Mockito.when(paymentInfoPlugin.getCurrency()).thenReturn(Currency.CAD);
  Mockito.when(paymentInfoPlugin.getStatus()).thenReturn(PaymentPluginStatus.PENDING);
  Mockito.when(paymentInfoPlugin.getGatewayErrorCode()).thenReturn(UUID.randomUUID().toString().substring(0,5));
  Mockito.when(paymentInfoPlugin.getGatewayError()).thenReturn(UUID.randomUUID().toString());
  directPaymentStateContext.setPaymentInfoPlugin(paymentInfoPlugin);
  callback.enteringState(state,operationCallback,operationResult,leavingStateCallback);
  final DirectPaymentTransactionModelDao directPaymentTransaction=paymentDao.getDirectPaymentTransaction(directPaymentStateContext.getDirectPaymentTransactionModelDao().getId(),internalCallContext);
  Assert.assertEquals(directPaymentTransaction.getAmount().compareTo(directPaymentStateContext.getAmount()),0);
  Assert.assertEquals(directPaymentTransaction.getCurrency(),directPaymentStateContext.getCurrency());
  Assert.assertEquals(directPaymentTransaction.getProcessedAmount().compareTo(paymentInfoPlugin.getAmount()),0);
  Assert.assertEquals(directPaymentTransaction.getProcessedCurrency(),paymentInfoPlugin.getCurrency());
  Assert.assertEquals(directPaymentTransaction.getPaymentStatus(),PaymentStatus.PENDING);
  Assert.assertEquals(directPaymentTransaction.getGatewayErrorCode(),paymentInfoPlugin.getGatewayErrorCode());
  Assert.assertEquals(directPaymentTransaction.getGatewayErrorMsg(),paymentInfoPlugin.getGatewayError());
}
