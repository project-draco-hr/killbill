{
  final LocalDate today=new LocalDate(2012,4,1);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  clock.setDay(today);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String pricelistName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),1);
  ImmutableList<ExpectedInvoiceItemCheck> toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addDays(31);
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  busHandler.pushExpectedEvents(NextEvent.INVOICE_ADJUSTMENT);
  invoiceUserApi.insertInvoiceItemAdjustment(account.getId(),invoices.get(1).getId(),invoices.get(1).getInvoiceItems().get(0).getId(),clock.getUTCToday(),BigDecimal.TEN,account.getCurrency(),callContext);
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,2),new LocalDate(2012,5,2),InvoiceItemType.ITEM_ADJ,new BigDecimal("-10")),new ExpectedInvoiceItemCheck(callContext.getCreatedDate().toLocalDate(),callContext.getCreatedDate().toLocalDate(),InvoiceItemType.CBA_ADJ,new BigDecimal("10")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  changeEntitlementAndCheckForCompletion(bpEntitlement,"Blowdart",term,BillingActionPolicy.IMMEDIATE,NextEvent.CHANGE,NextEvent.INVOICE,NextEvent.INVOICE_ADJUSTMENT);
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),3);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,4,1),null,InvoiceItemType.FIXED,BigDecimal.ZERO));
  invoiceChecker.checkInvoice(invoices.get(0).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,2),new LocalDate(2012,5,2),InvoiceItemType.ITEM_ADJ,new BigDecimal("-10")),new ExpectedInvoiceItemCheck(callContext.getCreatedDate().toLocalDate(),callContext.getCreatedDate().toLocalDate(),InvoiceItemType.CBA_ADJ,new BigDecimal("10")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,2),new LocalDate(2012,6,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-231.88")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,2),new LocalDate(2012,5,2),InvoiceItemType.CBA_ADJ,new BigDecimal("231.88")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,2),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("9.63")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,2),new LocalDate(2012,5,2),InvoiceItemType.CBA_ADJ,new BigDecimal("-9.63")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
}
