{
  invoiceGenerator.setDefaultRepairLogic(REPAIR_INVOICE_LOGIC.FULL_REPAIR);
  final LocalDate today=new LocalDate(2012,4,1);
  final Account account=createAccountWithNonOsgiPaymentMethod(getAccountData(1));
  clock.setDeltaFromReality(today.toDateTimeAtCurrentTime(DateTimeZone.UTC).getMillis() - clock.getUTCNow().getMillis());
  final SubscriptionBundle bundle=entitlementUserApi.createBundleForAccount(account.getId(),"whatever",callContext);
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.ANNUAL;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.INVOICE);
  final PlanPhaseSpecifier bpPlanPhaseSpecifier=new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null);
  final SubscriptionData bpSubscription=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),bpPlanPhaseSpecifier,null,callContext));
  assertNotNull(bpSubscription);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  assertEquals(invoiceUserApi.getInvoicesByAccount(account.getId(),callContext).size(),1);
  assertEquals(entitlementUserApi.getSubscriptionFromId(bpSubscription.getId(),callContext).getCurrentPlan().getBillingPeriod(),BillingPeriod.ANNUAL);
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  clock.addDays(40);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  List<Invoice> invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  ImmutableList<ExpectedInvoiceItemCheck> toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2013,5,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  final Invoice invoice1=invoices.get(1);
  final List<Payment> payments=paymentApi.getAccountPayments(account.getId(),callContext);
  final ExpectedPaymentCheck expectedPaymentCheck=new ExpectedPaymentCheck(clock.getUTCNow().toLocalDate(),new BigDecimal("2399.95"),PaymentStatus.SUCCESS,invoice1.getId(),Currency.USD);
  final Payment payment1=payments.get(0);
  final Map<UUID,BigDecimal> iias=new HashMap<UUID,BigDecimal>();
  iias.put(invoice1.getInvoiceItems().get(0).getId(),new BigDecimal("10.00"));
  busHandler.pushExpectedEvents(NextEvent.INVOICE_ADJUSTMENT);
  paymentApi.createRefundWithItemsAdjustments(account,payment1.getId(),iias,callContext);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2013,5,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")),new ExpectedInvoiceItemCheck(callContext.getCreatedDate().toLocalDate(),callContext.getCreatedDate().toLocalDate(),InvoiceItemType.ITEM_ADJ,new BigDecimal("-10.00")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  busHandler.pushExpectedEvents(NextEvent.CHANGE,NextEvent.INVOICE);
  assertTrue(bpSubscription.changePlanWithPolicy(productName,BillingPeriod.MONTHLY,planSetName,clock.getUTCNow(),ActionPolicy.IMMEDIATE,callContext));
  assertEquals(entitlementUserApi.getSubscriptionFromId(bpSubscription.getId(),callContext).getCurrentPlan().getBillingPeriod(),BillingPeriod.MONTHLY);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),3);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2013,5,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2013,5,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-2389.95")),new ExpectedInvoiceItemCheck(callContext.getCreatedDate().toLocalDate(),callContext.getCreatedDate().toLocalDate(),InvoiceItemType.ITEM_ADJ,new BigDecimal("-10.00")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,11),new LocalDate(2012,5,11),InvoiceItemType.CBA_ADJ,new BigDecimal("2389.95")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,5,11),InvoiceItemType.RECURRING,new BigDecimal("65.76")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,11),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("169.32")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,11),new LocalDate(2012,5,11),InvoiceItemType.CBA_ADJ,new BigDecimal("-235.08")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  invoiceGenerator.setDefaultRepairLogic(REPAIR_INVOICE_LOGIC.PARTIAL_REPAIR);
  busHandler.pushExpectedEvents(NextEvent.INVOICE);
  clock.addMonths(1);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  invoices=invoiceUserApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),4);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2013,5,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2013,5,1),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-2389.95")),new ExpectedInvoiceItemCheck(callContext.getCreatedDate().toLocalDate(),callContext.getCreatedDate().toLocalDate(),InvoiceItemType.ITEM_ADJ,new BigDecimal("-10.00")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,11),new LocalDate(2012,5,11),InvoiceItemType.CBA_ADJ,new BigDecimal("2389.95")));
  invoiceChecker.checkInvoice(invoices.get(1).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),new LocalDate(2012,5,11),InvoiceItemType.RECURRING,new BigDecimal("65.76")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,11),new LocalDate(2012,6,1),InvoiceItemType.RECURRING,new BigDecimal("169.32")),new ExpectedInvoiceItemCheck(new LocalDate(2012,5,11),new LocalDate(2012,5,11),InvoiceItemType.CBA_ADJ,new BigDecimal("-235.08")));
  invoiceChecker.checkInvoice(invoices.get(2).getId(),callContext,toBeChecked);
  toBeChecked=ImmutableList.<ExpectedInvoiceItemCheck>of(new ExpectedInvoiceItemCheck(new LocalDate(2012,6,1),new LocalDate(2012,7,1),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,6,10),new LocalDate(2012,6,10),InvoiceItemType.CBA_ADJ,new BigDecimal("-249.95")));
  invoiceChecker.checkInvoice(invoices.get(3).getId(),callContext,toBeChecked);
}
