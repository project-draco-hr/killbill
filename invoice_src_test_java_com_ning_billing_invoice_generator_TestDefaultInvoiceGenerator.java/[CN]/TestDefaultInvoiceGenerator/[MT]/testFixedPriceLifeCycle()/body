{
  final UUID accountId=UUID.randomUUID();
  final SubscriptionBase subscription=createSubscription();
  final Plan plan=new MockPlan("plan 1");
  final MockInternationalPrice zeroPrice=new MockInternationalPrice(new DefaultPrice(ZERO,Currency.USD));
  final MockInternationalPrice cheapPrice=new MockInternationalPrice(new DefaultPrice(ONE,Currency.USD));
  final PlanPhase phase1=new MockPlanPhase(null,zeroPrice,BillingPeriod.NO_BILLING_PERIOD,PhaseType.TRIAL);
  final PlanPhase phase2=new MockPlanPhase(cheapPrice,null,BillingPeriod.MONTHLY,PhaseType.DISCOUNT);
  final DateTime changeDate=new DateTime("2012-04-1");
  final BillingEventSet events=new MockBillingEventSet();
  final BillingEvent event1=invoiceUtil.createMockBillingEvent(null,subscription,new DateTime("2012-01-1"),plan,phase1,ZERO,null,Currency.USD,BillingPeriod.NO_BILLING_PERIOD,1,BillingModeType.IN_ADVANCE,"Test Event 1",1L,SubscriptionBaseTransitionType.CREATE);
  final BillingEvent event2=invoiceUtil.createMockBillingEvent(null,subscription,changeDate,plan,phase2,ZERO,null,Currency.USD,BillingPeriod.NO_BILLING_PERIOD,1,BillingModeType.IN_ADVANCE,"Test Event 2",2L,SubscriptionBaseTransitionType.PHASE);
  events.add(event2);
  events.add(event1);
  final Invoice invoice1=generator.generateInvoice(accountId,events,null,new LocalDate("2012-02-01"),Currency.USD);
  assertNotNull(invoice1);
  assertEquals(invoice1.getNumberOfItems(),1);
  final List<Invoice> invoiceList=new ArrayList<Invoice>();
  invoiceList.add(invoice1);
  final Invoice invoice2=generator.generateInvoice(accountId,events,invoiceList,new LocalDate("2012-04-05"),Currency.USD);
  assertNotNull(invoice2);
  assertEquals(invoice2.getNumberOfItems(),1);
  final FixedPriceInvoiceItem item=(FixedPriceInvoiceItem)invoice2.getInvoiceItems().get(0);
  assertEquals(item.getStartDate(),changeDate.toLocalDate());
}
