{
  final LocalDate april25=new LocalDate(2012,4,25);
  final UUID accountId=UUID.randomUUID();
  final SubscriptionBase originalSubscription=createZombieSubscription();
  final Plan originalPlan=new MockPlan("original plan");
  final MockInternationalPrice price10=new MockInternationalPrice(new DefaultPrice(TEN,Currency.USD));
  final PlanPhase originalPlanEvergreen=new MockPlanPhase(price10,null,BillingPeriod.MONTHLY,PhaseType.EVERGREEN);
  final BillingEventSet events=new MockBillingEventSet();
  events.add(createBillingEvent(originalSubscription.getId(),originalSubscription.getBundleId(),april25,originalPlan,originalPlanEvergreen,25));
  final Invoice invoice1=generator.generateInvoice(accountId,events,null,april25,Currency.USD);
  printDetailInvoice(invoice1);
  assertEquals(invoice1.getNumberOfItems(),1);
  final List<Invoice> invoices=new ArrayList<Invoice>();
  invoices.add(invoice1);
  invoice1.addPayment(new DefaultInvoicePayment(InvoicePaymentType.ATTEMPT,UUID.randomUUID(),invoice1.getId(),april25.toDateTimeAtCurrentTime(),TEN,Currency.USD,Currency.USD));
  assertEquals(invoice1.getBalance().compareTo(ZERO),0);
  events.clear();
  final SubscriptionBase newSubscription=createZombieSubscription();
  final Plan newPlan=new MockPlan("new plan");
  final MockInternationalPrice price5=new MockInternationalPrice(new DefaultPrice(FIVE,Currency.USD));
  final PlanPhase newPlanEvergreen=new MockPlanPhase(price5,null,BillingPeriod.MONTHLY,PhaseType.EVERGREEN);
  events.add(createBillingEvent(newSubscription.getId(),originalSubscription.getBundleId(),april25,newPlan,newPlanEvergreen,25));
  final Invoice invoice2=generator.generateInvoice(accountId,events,invoices,april25,Currency.USD);
  printDetailInvoice(invoice2);
  assertEquals(invoice2.getNumberOfItems(),2);
  invoices.add(invoice2);
  distributeItems(invoices);
  assertEquals(invoice1.getBalance().compareTo(new BigDecimal("-10.0")),0);
  assertEquals(invoice2.getBalance().compareTo(FIVE),0);
}
