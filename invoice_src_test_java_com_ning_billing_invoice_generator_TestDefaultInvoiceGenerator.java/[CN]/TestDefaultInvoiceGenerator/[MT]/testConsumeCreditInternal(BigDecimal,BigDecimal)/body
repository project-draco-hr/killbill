{
  DateTime startDate=clock.getUTCNow();
  DateTime endDate=startDate.plusDays(30);
  DateTime nextEndDate=startDate.plusMonths(1);
  BigDecimal rate1=new BigDecimal("20.00");
  BigDecimal amount1=rate1;
  BigDecimal rate2=new BigDecimal("10.00");
  BigDecimal amount2=rate2;
  UUID firstInvoiceId=UUID.randomUUID();
  List<InvoiceItem> existing=new LinkedList<InvoiceItem>();
  BigDecimal pcba1=new BigDecimal("10.00");
  InvoiceItem item1=new RecurringInvoiceItem(firstInvoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,amount1,rate1,currency,null);
  InvoiceItem reversedItem1=new RepairAdjInvoiceItem(firstInvoiceId,accountId,startDate,nextEndDate,amount1.negate(),currency,item1.getId());
  InvoiceItem newItem1=new RecurringInvoiceItem(firstInvoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,amount2,rate2,currency,null);
  InvoiceItem cba1=new CreditBalanceAdjInvoiceItem(firstInvoiceId,accountId,startDate,pcba1,currency);
  existing.add(item1);
  existing.add(reversedItem1);
  existing.add(newItem1);
  existing.add(cba1);
  BigDecimal newRate2=newRate;
  BigDecimal newAmount2=newRate2;
  List<InvoiceItem> proposed=new LinkedList<InvoiceItem>();
  InvoiceItem item2=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate.plusMonths(1),endDate.plusMonths(1),newAmount2,newRate2,currency,null);
  proposed.add(item2);
  gen.consumeExistingCredit(invoiceId,firstInvoiceId,existing,proposed,currency);
  assertEquals(proposed.size(),2);
  InvoiceItem item2Check=proposed.get(0);
  assertEquals(item2Check.getInvoiceId(),invoiceId);
  assertEquals(item2Check.getInvoiceItemType(),InvoiceItemType.RECURRING);
  assertEquals(item2Check.getAmount(),newAmount2);
  InvoiceItem cbaCheck=proposed.get(1);
  assertEquals(cbaCheck.getInvoiceId(),invoiceId);
  assertEquals(cbaCheck.getInvoiceItemType(),InvoiceItemType.CBA_ADJ);
  assertEquals(cbaCheck.getAmount(),expectedNewCba);
}
