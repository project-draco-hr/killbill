{
  final LocalDate startDate=new LocalDate(2014,1,1);
  final LocalDate firstMonthlyEndDate=new LocalDate(2014,2,1);
  final LocalDate secondMonthlyEndDate=new LocalDate(2014,3,1);
  final LocalDate endDate=new LocalDate(2015,2,1);
  final BigDecimal rate1=new BigDecimal("120.00");
  final BigDecimal amount1=rate1;
  final BigDecimal rate2=new BigDecimal("10.00");
  final BigDecimal amount2=rate2;
  final InvoiceItem annual=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,amount1,rate1,currency);
  final InvoiceItem repair=new RepairAdjInvoiceItem(invoiceId,accountId,startDate,endDate,amount1.negate(),currency,annual.getId());
  final InvoiceItem monthly1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,"someelse","someelse",startDate,firstMonthlyEndDate,amount2,rate2,currency);
  final InvoiceItem monthly2=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,"someelse","someelse",firstMonthlyEndDate,secondMonthlyEndDate,amount2,rate2,currency);
  final List<InvoiceItem> expectedResult=Lists.newLinkedList();
  expectedResult.add(monthly1);
  expectedResult.add(monthly2);
  SubscriptionItemTree tree=new SubscriptionItemTree(subscriptionId);
  tree.addItem(annual);
  tree.addItem(repair);
  tree.addItem(monthly1);
  tree.addItem(monthly2);
  tree.build();
  verifyResult(tree.getSimplifiedView(),expectedResult);
  tree=new SubscriptionItemTree(subscriptionId);
  tree.addItem(monthly1);
  tree.addItem(repair);
  tree.addItem(annual);
  tree.addItem(monthly2);
  tree.build();
  verifyResult(tree.getSimplifiedView(),expectedResult);
  tree=new SubscriptionItemTree(subscriptionId);
  tree.addItem(monthly1);
  tree.addItem(monthly2);
  tree.addItem(annual);
  tree.addItem(repair);
  tree.build();
  verifyResult(tree.getSimplifiedView(),expectedResult);
}
