{
  final LocalDate startDate=new LocalDate(2014,1,1);
  final LocalDate blockDate=new LocalDate(2014,1,13);
  final LocalDate unblockDate=new LocalDate(2014,1,25);
  final LocalDate endDate=new LocalDate(2014,2,1);
  final BigDecimal monthlyRate1=new BigDecimal("12.00");
  final BigDecimal monthlyAmount1=monthlyRate1;
  final SubscriptionItemTree tree=new SubscriptionItemTree(subscriptionId);
  final InvoiceItem monthly1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,monthlyAmount1,monthlyRate1,currency);
  tree.addItem(monthly1);
  tree.flatten(true);
  final InvoiceItem proposed1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,blockDate,monthlyAmount1,monthlyRate1,currency);
  final InvoiceItem proposed2=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,unblockDate,endDate,monthlyAmount1,monthlyRate1,currency);
  tree.mergeProposedItem(proposed1);
  tree.mergeProposedItem(proposed2);
  tree.buildForMerge();
  final List<InvoiceItem> expectedResult=Lists.newLinkedList();
  final InvoiceItem repair=new RepairAdjInvoiceItem(invoiceId,accountId,blockDate,unblockDate,new BigDecimal("-4.65"),currency,monthly1.getId());
  expectedResult.add(proposed1);
  expectedResult.add(repair);
  expectedResult.add(proposed2);
  verifyResult(tree.getView(),expectedResult);
}
