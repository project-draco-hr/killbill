{
  final LocalDate startDate=new LocalDate(2014,1,1);
  final LocalDate endMonthly1=new LocalDate(2014,2,1);
  final LocalDate endMonthly2=new LocalDate(2014,3,1);
  final LocalDate switchToAnnualDate=new LocalDate(2014,2,23);
  final LocalDate endDate=new LocalDate(2015,2,23);
  final BigDecimal monthlyRate=new BigDecimal("12.00");
  final BigDecimal monthlyAmount=monthlyRate;
  final BigDecimal yearlyRate=new BigDecimal("100.00");
  final BigDecimal yearlyAmount=yearlyRate;
  final InvoiceItem monthly1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endMonthly1,monthlyAmount,monthlyRate,currency);
  final InvoiceItem monthly2=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,endMonthly1,endMonthly2,monthlyAmount,monthlyRate,currency);
  final InvoiceItem repair=new RepairAdjInvoiceItem(invoiceId,accountId,switchToAnnualDate,endMonthly2,monthlyAmount.negate(),currency,monthly2.getId());
  final InvoiceItem annual=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,switchToAnnualDate,endDate,yearlyAmount,yearlyRate,currency);
  final List<InvoiceItem> expectedResult=Lists.newLinkedList();
  expectedResult.add(monthly1);
  final InvoiceItem monthly2Prorated=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,endMonthly1,switchToAnnualDate,new BigDecimal("9.43"),monthlyRate,currency);
  expectedResult.add(monthly2Prorated);
  expectedResult.add(annual);
  SubscriptionItemTree tree=new SubscriptionItemTree(subscriptionId);
  tree.addItem(monthly1);
  tree.addItem(monthly2);
  tree.addItem(repair);
  tree.addItem(annual);
  tree.build();
  verifyResult(tree.getView(),expectedResult);
}
