{
  final LocalDate startDate=new LocalDate(2014,1,1);
  final LocalDate itemAdjDate=new LocalDate(2014,1,2);
  final LocalDate endDate=new LocalDate(2014,2,1);
  final LocalDate cancelDate=new LocalDate(2014,1,23);
  final BigDecimal rate1=new BigDecimal("12.00");
  final BigDecimal amount1=rate1;
  final SubscriptionItemTree tree=new SubscriptionItemTree(subscriptionId);
  final InvoiceItem initial=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,endDate,amount1,rate1,currency);
  final InvoiceItem itemAdj=new ItemAdjInvoiceItem(initial,itemAdjDate,new BigDecimal("-10.00"),currency);
  tree.addItem(initial);
  tree.addItem(itemAdj);
  tree.flatten(true);
  final InvoiceItem proposed1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,cancelDate,amount1,rate1,currency);
  tree.mergeProposedItem(proposed1);
  tree.buildForMerge();
  final List<InvoiceItem> expectedResult=Lists.newLinkedList();
  final InvoiceItem expected1=new RecurringInvoiceItem(invoiceId,accountId,bundleId,subscriptionId,planName,phaseName,startDate,cancelDate,amount1,rate1,currency);
  expectedResult.add(expected1);
  final InvoiceItem repair1=new RepairAdjInvoiceItem(invoiceId,accountId,cancelDate,endDate,new BigDecimal("-2.00"),currency,initial.getId());
  expectedResult.add(repair1);
  verifyResult(tree.getView(),expectedResult);
}
