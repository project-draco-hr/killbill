{
  clock.setTime(new DateTime(2012,4,25,0,3,42,0));
  final AccountJson accountJson=createAccountWithDefaultPaymentMethod("nohup","shtergyhwF","nohup@yahoo.com");
  assertNotNull(accountJson);
  final BundleJsonNoSubscriptions bundleJson=createBundle(accountJson.getAccountId(),"391193");
  assertNotNull(bundleJson);
  final SubscriptionJsonNoEvents subscriptionJson=createSubscription(bundleJson.getBundleId(),"Shotgun",ProductCategory.BASE.toString(),BillingPeriod.MONTHLY.toString(),true);
  assertNotNull(subscriptionJson);
  clock.addDays(31);
  crappyWaitForLackOfProperSynchonization();
  final Map<String,String> queryParams=new HashMap<String,String>();
  queryParams.put(JaxrsResource.QUERY_ACCOUNT_ID,accountJson.getAccountId());
  String uri=JaxrsResource.INVOICES_PATH;
  Response response=doGet(uri,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  String baseJson=response.getResponseBody();
  final List<InvoiceJsonSimple> invoices=mapper.readValue(baseJson,new TypeReference<List<InvoiceJsonSimple>>(){
  }
);
  assertNotNull(invoices);
  log.info(baseJson);
  assertEquals(invoices.size(),2);
  for (  final InvoiceJsonSimple cur : invoices) {
    if (cur.getAmount().compareTo(BigDecimal.ZERO) == 0) {
      continue;
    }
    final PaymentJsonSimple payment=new PaymentJsonSimple(cur.getAmount(),BigDecimal.ZERO,accountJson.getAccountId(),cur.getInvoiceId(),null,null,null,null,0,null,null);
    final String postJson=mapper.writeValueAsString(payment);
    uri=JaxrsResource.INVOICES_PATH + "/" + cur.getInvoiceId()+ "/"+ JaxrsResource.PAYMENTS;
    doPost(uri,postJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
    response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
    Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
    baseJson=response.getResponseBody();
    final List<PaymentJsonSimple> objFromJson=mapper.readValue(baseJson,new TypeReference<List<PaymentJsonSimple>>(){
    }
);
    assertNotNull(objFromJson);
    log.info(cur.getAmount().toString());
    assertEquals(objFromJson.size(),1);
    assertTrue(cur.getAmount().compareTo(objFromJson.get(0).getAmount()) == 0);
  }
}
