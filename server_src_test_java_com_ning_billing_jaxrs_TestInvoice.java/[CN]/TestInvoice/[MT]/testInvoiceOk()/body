{
  DateTime initialDate=new DateTime(2012,4,25,0,3,42,0);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  AccountJson accountJson=createAccount("poupou","qhddffrwe","poupou@yahoo.com");
  assertNotNull(accountJson);
  BundleJsonNoSubsciptions bundleJson=createBundle(accountJson.getAcountId(),"9967599");
  assertNotNull(bundleJson);
  SubscriptionJsonNoEvents subscriptionJson=createSubscription(bundleJson.getBundleId(),"Shotgun",ProductCategory.BASE.toString(),BillingPeriod.MONTHLY.toString(),true);
  assertNotNull(subscriptionJson);
  Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusMonths(3).plusDays(1));
  clock.addDeltaFromReality(it.toDurationMillis());
  crappyWaitForLackOfProperSynchonization();
  String uri=BaseJaxrsResource.INVOICES_PATH;
  Map<String,String> queryParams=new HashMap<String,String>();
  queryParams.put(BaseJaxrsResource.QUERY_ACCOUNT_ID,accountJson.getAcountId());
  Response response=doGet(uri,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  String baseJson=response.getResponseBody();
  List<InvoiceJson> objFromJson=mapper.readValue(baseJson,new TypeReference<List<InvoiceJson>>(){
  }
);
  assertNotNull(objFromJson);
  log.info(baseJson);
  assertEquals(objFromJson.size(),4);
  uri=BaseJaxrsResource.INVOICES_PATH + "/" + objFromJson.get(0).getInvoiceId();
  response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  InvoiceJson firstInvoiceJson=mapper.readValue(baseJson,InvoiceJson.class);
  assertNotNull(objFromJson);
  assertEquals(firstInvoiceJson,objFromJson.get(0));
  DateTime futureDate=clock.getUTCNow().plusMonths(1).plusDays(3);
  uri=BaseJaxrsResource.INVOICES_PATH;
  queryParams.put(BaseJaxrsResource.QUERY_TARGET_DATE,futureDate.toString());
  queryParams.put(BaseJaxrsResource.QUERY_DRY_RUN,"true");
  response=doPost(uri,null,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  InvoiceJson futureInvoice=mapper.readValue(baseJson,InvoiceJson.class);
  assertNotNull(futureInvoice);
  log.info(baseJson);
  queryParams.remove(BaseJaxrsResource.QUERY_DRY_RUN);
  response=doPost(uri,null,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  String location=response.getHeader("Location");
  Assert.assertNotNull(location);
  uri=BaseJaxrsResource.INVOICES_PATH;
  response=doGet(uri,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  objFromJson=mapper.readValue(baseJson,new TypeReference<List<InvoiceJson>>(){
  }
);
  assertNotNull(objFromJson);
  log.info(baseJson);
  assertEquals(objFromJson.size(),5);
}
