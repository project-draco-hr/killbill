{
  final DefaultMutableAccountData accountData=new DefaultMutableAccountData(this);
  if (externalKey != null && currentAccount.getExternalKey() != null && !currentAccount.getExternalKey().equals(externalKey)) {
    throw new IllegalArgumentException(String.format("Killbill doesn't support updating the account external key yet: new=%s, current=%s",externalKey,currentAccount.getExternalKey()));
  }
 else {
    accountData.setExternalKey(currentAccount.getExternalKey());
  }
  if (currency != null && currentAccount.getCurrency() != null && !currentAccount.getCurrency().equals(currency)) {
    throw new IllegalArgumentException(String.format("Killbill doesn't support updating the account currency yet: new=%s, current=%s",currency,currentAccount.getCurrency()));
  }
 else {
    accountData.setCurrency(currentAccount.getCurrency());
  }
  if (currentAccount.getBillCycleDayLocal() != DEFAULT_BILLING_CYCLE_DAY_LOCAL && billCycleDayLocal != null && billCycleDayLocal != DEFAULT_BILLING_CYCLE_DAY_LOCAL && !currentAccount.getBillCycleDayLocal().equals(billCycleDayLocal)) {
    throw new IllegalArgumentException(String.format("Killbill doesn't support updating the account BCD yet: new=%s, current=%s",billCycleDayLocal,currentAccount.getBillCycleDayLocal()));
  }
 else   if (currentAccount.getBillCycleDayLocal() == DEFAULT_BILLING_CYCLE_DAY_LOCAL && billCycleDayLocal != null && billCycleDayLocal != DEFAULT_BILLING_CYCLE_DAY_LOCAL) {
    accountData.setBillCycleDayLocal(billCycleDayLocal);
  }
 else {
    accountData.setBillCycleDayLocal(currentAccount.getBillCycleDayLocal());
  }
  accountData.setEmail(email != null ? email : currentAccount.getEmail());
  accountData.setName(name != null ? name : currentAccount.getName());
  final Integer firstNameLength=this.firstNameLength != null ? this.firstNameLength : currentAccount.getFirstNameLength();
  if (firstNameLength != null) {
    accountData.setFirstNameLength(firstNameLength);
  }
  accountData.setPaymentMethodId(paymentMethodId != null ? paymentMethodId : currentAccount.getPaymentMethodId());
  accountData.setTimeZone(timeZone != null ? timeZone : currentAccount.getTimeZone());
  accountData.setLocale(locale != null ? locale : currentAccount.getLocale());
  accountData.setAddress1(address1 != null ? address1 : currentAccount.getAddress1());
  accountData.setAddress2(address2 != null ? address2 : currentAccount.getAddress2());
  accountData.setCompanyName(companyName != null ? companyName : currentAccount.getCompanyName());
  accountData.setCity(city != null ? city : currentAccount.getCity());
  accountData.setStateOrProvince(stateOrProvince != null ? stateOrProvince : currentAccount.getStateOrProvince());
  accountData.setCountry(country != null ? country : currentAccount.getCountry());
  accountData.setPostalCode(postalCode != null ? postalCode : currentAccount.getPostalCode());
  accountData.setPhone(phone != null ? phone : currentAccount.getPhone());
  final Boolean isMigrated=this.isMigrated != null ? this.isMigrated : currentAccount.isMigrated();
  if (isMigrated != null) {
    accountData.setIsMigrated(isMigrated);
  }
  final Boolean isNotifiedForInvoices=this.isNotifiedForInvoices != null ? this.isNotifiedForInvoices : currentAccount.isNotifiedForInvoices();
  if (isNotifiedForInvoices != null) {
    accountData.setIsNotifiedForInvoices(isNotifiedForInvoices);
  }
  return new DefaultAccount(currentAccount.getId(),accountData);
}
