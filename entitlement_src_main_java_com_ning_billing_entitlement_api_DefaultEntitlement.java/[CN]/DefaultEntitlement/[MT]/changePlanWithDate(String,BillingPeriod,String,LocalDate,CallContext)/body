{
  final InternalCallContext context=internalCallContextFactory.createInternalCallContext(accountId,callContext);
  refresh(callContext,context);
  if (state != EntitlementState.ACTIVE) {
    throw new EntitlementApiException(ErrorCode.SUB_CHANGE_NON_ACTIVE,getId(),state);
  }
  try {
    checker.checkBlockedChange(subscriptionBase,context);
    final DateTime effectiveChangeDate=dateHelper.fromLocalDateAndReferenceTime(localDate,subscriptionBase.getStartDate(),context);
    subscriptionBase.changePlanWithDate(productName,billingPeriod,priceList,effectiveChangeDate,callContext);
    return entitlementApi.getEntitlementForId(getId(),callContext);
  }
 catch (  BlockingApiException e) {
    throw new EntitlementApiException(e,e.getCode(),e.getMessage());
  }
catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
}
