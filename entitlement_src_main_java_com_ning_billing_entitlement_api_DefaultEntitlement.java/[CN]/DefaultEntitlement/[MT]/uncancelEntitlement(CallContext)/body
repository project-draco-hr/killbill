{
  if (state == EntitlementState.CANCELLED || subscriptionBase.getState() == EntitlementState.CANCELLED) {
    throw new EntitlementApiException(ErrorCode.SUB_CANCEL_BAD_STATE,getId(),EntitlementState.CANCELLED);
  }
  final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(accountId,callContext);
  final List<BlockingState> blockingStates=blockingStateDao.getBlockingHistoryForService(getId(),EntitlementService.ENTITLEMENT_SERVICE_NAME,contextWithValidAccountRecordId);
  final Collection<BlockingState> futureEntitlementCancellationEvents=Collections2.filter(blockingStates,new Predicate<BlockingState>(){
    @Override public boolean apply(    final BlockingState input){
      return EntitlementService.ENTITLEMENT_SERVICE_NAME.equals(input.getService()) && DefaultEntitlementApi.ENT_STATE_CANCELLED.equals(input.getStateName()) && input.getEffectiveDate().isAfter(clock.getUTCNow());
    }
  }
);
  for (  final BlockingState futureCancellation : futureEntitlementCancellationEvents) {
    blockingStateDao.unactiveBlockingState(futureCancellation.getId(),contextWithValidAccountRecordId);
  }
  if (subscriptionBase.getFutureEndDate() != null) {
    try {
      subscriptionBase.uncancel(callContext);
    }
 catch (    SubscriptionBaseApiException e) {
      throw new EntitlementApiException(e);
    }
  }
}
