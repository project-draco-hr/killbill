{
  final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(accountId,callContext);
  refresh(callContext,contextWithValidAccountRecordId);
  if (state == EntitlementState.CANCELLED) {
    throw new EntitlementApiException(ErrorCode.SUB_CANCEL_BAD_STATE,getId(),EntitlementState.CANCELLED);
  }
  try {
    subscriptionBase.cancelWithPolicy(billingPolicy,callContext);
  }
 catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
  final LocalDate effectiveLocalDate=new LocalDate(localCancelDate,accountTimeZone);
  final DateTime effectiveDate=dateHelper.fromLocalDateAndReferenceTime(effectiveLocalDate,subscriptionBase.getStartDate(),contextWithValidAccountRecordId);
  final BlockingState newBlockingState=new DefaultBlockingState(getId(),BlockingStateType.SUBSCRIPTION,DefaultEntitlementApi.ENT_STATE_CANCELLED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,false,effectiveDate);
  entitlementUtils.setBlockingStateAndPostBlockingTransitionEvent(newBlockingState,contextWithValidAccountRecordId);
  blockAddOnsIfRequired(effectiveDate,callContext,contextWithValidAccountRecordId);
  return entitlementApi.getEntitlementForId(getId(),callContext);
}
