{
  this.tenantInternalApi=tenantInternalApi;
  this.cacheController=cacheControllerDispatcher.getCacheController(CacheType.TENANT_PAYMENT_STATE_MACHINE_CONFIG);
  this.cacheInvalidationCallback=cacheInvalidationCallback;
  this.loaderCallback=new LoaderCallback(){
    public Object loadStateMachineConfig(    final String stateMachineConfigXML) throws PaymentApiException {
      tenantInternalApi.initializeCacheInvalidationCallback(TenantKey.PLUGIN_PAYMENT_STATE_MACHINE_,cacheInvalidationCallback);
      try {
        final InputStream stream=new ByteArrayInputStream(stateMachineConfigXML.getBytes());
        return XMLLoader.getObjectFromStream(new URI("dummy"),stream,DefaultStateMachineConfig.class);
      }
 catch (      final Exception e) {
        throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,"Invalid payment state machine config");
      }
    }
  }
;
}
