{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final String paymentExternalKey="qwru";
  final String transactionExternalKey="lkjdsf";
  testListener.pushExpectedEvent(NextEvent.PAYMENT);
  final Payment payment=paymentApi.createAuthorization(account,account.getPaymentMethodId(),null,requestedAmount,account.getCurrency(),paymentExternalKey,transactionExternalKey,ImmutableList.<PluginProperty>of(),callContext);
  testListener.assertListenerStatus();
  final String paymentStateName=paymentSMHelper.getErroredStateForTransaction(TransactionType.AUTHORIZE).toString();
  testListener.pushExpectedEvent(NextEvent.PAYMENT_PLUGIN_ERROR);
  paymentDao.updatePaymentAndTransactionOnCompletion(account.getId(),payment.getId(),TransactionType.AUTHORIZE,paymentStateName,paymentStateName,payment.getTransactions().get(0).getId(),TransactionStatus.UNKNOWN,requestedAmount,account.getCurrency(),"foo","bar",internalCallContext);
  testListener.assertListenerStatus();
  testListener.pushExpectedEvent(NextEvent.PAYMENT);
  clock.addDeltaFromReality(5 * 60 * 1000);
  assertNotificationsCompleted(internalCallContext,5);
  testListener.assertListenerStatus();
  final Payment updatedPayment=paymentApi.getPayment(payment.getId(),false,ImmutableList.<PluginProperty>of(),callContext);
  assertEquals(updatedPayment.getTransactions().get(0).getTransactionStatus(),TransactionStatus.SUCCESS);
}
