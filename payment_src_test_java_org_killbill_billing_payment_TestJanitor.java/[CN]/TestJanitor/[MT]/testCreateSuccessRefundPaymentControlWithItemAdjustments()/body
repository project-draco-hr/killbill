{
  final BigDecimal requestedAmount=BigDecimal.TEN;
  final UUID subscriptionId=UUID.randomUUID();
  final UUID bundleId=UUID.randomUUID();
  final LocalDate now=clock.getUTCToday();
  final Invoice invoice=testHelper.createTestInvoice(account,now,Currency.USD);
  final String paymentExternalKey=invoice.getId().toString();
  final String transactionExternalKey="craboom";
  final String transactionExternalKey2="qwerty";
  final InvoiceItem invoiceItem=new MockRecurringInvoiceItem(invoice.getId(),account.getId(),subscriptionId,bundleId,"test plan","test phase",null,now,now.plusMonths(1),requestedAmount,new BigDecimal("1.0"),Currency.USD);
  invoice.addInvoiceItem(invoiceItem);
  final Payment payment=paymentApi.createPurchaseWithPaymentControl(account,account.getPaymentMethodId(),null,requestedAmount,Currency.USD,paymentExternalKey,transactionExternalKey,createPropertiesForInvoice(invoice),INVOICE_PAYMENT,callContext);
  final List<PluginProperty> refundProperties=new ArrayList<PluginProperty>();
  final HashMap<UUID,BigDecimal> uuidBigDecimalHashMap=new HashMap<UUID,BigDecimal>();
  uuidBigDecimalHashMap.put(invoiceItem.getId(),new BigDecimal("1.0"));
  final PluginProperty refundIdsProp=new PluginProperty(InvoicePaymentRoutingPluginApi.PROP_IPCD_REFUND_IDS_WITH_AMOUNT_KEY,uuidBigDecimalHashMap,false);
  refundProperties.add(refundIdsProp);
  final Payment payment2=paymentApi.createRefundWithPaymentControl(account,payment.getId(),null,Currency.USD,transactionExternalKey2,refundProperties,INVOICE_PAYMENT,callContext);
  assertEquals(payment2.getTransactions().size(),2);
  PaymentTransaction refundTransaction=payment2.getTransactions().get(1);
  assertEquals(refundTransaction.getTransactionType(),TransactionType.REFUND);
  final List<PaymentAttemptModelDao> attempts=paymentDao.getPaymentAttempts(paymentExternalKey,internalCallContext);
  assertEquals(attempts.size(),2);
  final PaymentAttemptModelDao refundAttempt=attempts.get(1);
  assertEquals(refundAttempt.getTransactionType(),TransactionType.REFUND);
  paymentDao.updatePaymentAttempt(refundAttempt.getId(),refundAttempt.getTransactionId(),"INIT",internalCallContext);
  final PaymentAttemptModelDao attempt2=paymentDao.getPaymentAttempt(refundAttempt.getId(),internalCallContext);
  assertEquals(attempt2.getStateName(),"INIT");
  clock.addDays(1);
  try {
    Thread.sleep(1500);
  }
 catch (  InterruptedException e) {
  }
  ;
  final PaymentAttemptModelDao attempt3=paymentDao.getPaymentAttempt(refundAttempt.getId(),internalCallContext);
  assertEquals(attempt3.getStateName(),"SUCCESS");
}
