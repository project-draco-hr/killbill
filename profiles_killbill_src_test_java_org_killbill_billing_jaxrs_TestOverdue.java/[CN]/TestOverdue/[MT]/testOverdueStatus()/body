{
  final Account accountJson=createAccountNoPMBundleAndSubscriptionAndWaitForFirstInvoice();
  final List<Invoice> invoices=killBillClient.getInvoicesForAccount(accountJson.getAccountId());
  assertEquals(invoices.size(),2);
  Assert.assertTrue(killBillClient.getOverdueStateForAccount(accountJson.getAccountId()).getIsClearState());
  clock.addDays(30);
  crappyWaitForLackOfProperSynchonization();
  Assert.assertEquals(killBillClient.getOverdueStateForAccount(accountJson.getAccountId()).getName(),"OD1");
  clock.addDays(10);
  crappyWaitForLackOfProperSynchonization();
  Assert.assertEquals(killBillClient.getOverdueStateForAccount(accountJson.getAccountId()).getName(),"OD2");
  clock.addDays(10);
  crappyWaitForLackOfProperSynchonization();
  Assert.assertEquals(killBillClient.getOverdueStateForAccount(accountJson.getAccountId()).getName(),"OD3");
  final Invoices invoicesForAccount=killBillClient.getInvoicesForAccount(accountJson.getAccountId());
  final List<Invoice> mostRecentInvoiceFirst=Ordering.<Invoice>from(new Comparator<Invoice>(){
    @Override public int compare(    final Invoice invoice1,    final Invoice invoice2){
      return invoice1.getInvoiceDate().compareTo(invoice2.getInvoiceDate());
    }
  }
).reverse().sortedCopy(invoicesForAccount);
  for (  final Invoice invoice : mostRecentInvoiceFirst) {
    if (invoice.getBalance().compareTo(BigDecimal.ZERO) > 0) {
      final Payment payment=new Payment();
      payment.setAccountId(accountJson.getAccountId());
      payment.setInvoiceId(invoice.getInvoiceId());
      payment.setAmount(invoice.getBalance());
      killBillClient.createPayment(payment,true,createdBy,reason,comment);
    }
  }
  crappyWaitForLackOfProperSynchonization();
  Assert.assertTrue(killBillClient.getOverdueStateForAccount(accountJson.getAccountId()).getIsClearState());
}
