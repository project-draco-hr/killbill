{
  final TenantContext tenantContext=context.createContext(request);
  final UUID accountId=UUID.fromString(accountIdString);
  accountUserApi.getAccountById(accountId,tenantContext);
  final List<Invoice> invoices=unpaidInvoicesOnly ? new ArrayList<Invoice>(invoiceApi.getUnpaidInvoicesByAccountId(accountId,null,tenantContext)) : invoiceApi.getInvoicesByAccount(accountId,tenantContext);
  final AccountAuditLogs accountAuditLogs=auditUserApi.getAccountAuditLogs(accountId,auditMode.getLevel(),tenantContext);
  if (withItems) {
    final List<InvoiceJson> result=new LinkedList<InvoiceJson>();
    for (    final Invoice invoice : invoices) {
      result.add(new InvoiceJson(invoice,accountAuditLogs));
    }
    return Response.status(Status.OK).entity(result).build();
  }
 else {
    final List<InvoiceJson> result=new LinkedList<InvoiceJson>();
    for (    final Invoice invoice : invoices) {
      result.add(new InvoiceJson(invoice,accountAuditLogs.getAuditLogsForInvoice(invoice.getId())));
    }
    return Response.status(Status.OK).entity(result).build();
  }
}
