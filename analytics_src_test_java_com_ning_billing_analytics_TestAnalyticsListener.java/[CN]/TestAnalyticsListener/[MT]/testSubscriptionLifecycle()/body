{
  final DateTime effectiveTransitionTime=new DateTime(DateTimeZone.UTC);
  final DateTime requestedTransitionTime=new DateTime(DateTimeZone.UTC);
  final SubscriptionTransitionData firstTransition=createFirstSubscriptionTransition(requestedTransitionTime,effectiveTransitionTime);
  final BusinessSubscriptionTransition firstBST=createExpectedFirstBST(firstTransition.getId(),requestedTransitionTime,effectiveTransitionTime);
  listener.handleSubscriptionTransitionChange(firstTransition);
  Assert.assertEquals(dao.getTransitions(KEY).size(),1);
  Assert.assertEquals(dao.getTransitions(KEY).get(0),firstBST);
  final DateTime effectivePauseTransitionTime=new DateTime(DateTimeZone.UTC);
  final DateTime requestedPauseTransitionTime=new DateTime(DateTimeZone.UTC);
  final SubscriptionTransitionData pausedSubscriptionTransition=createPauseSubscriptionTransition(effectivePauseTransitionTime,requestedPauseTransitionTime,firstTransition.getNextState());
  final BusinessSubscriptionTransition pausedBST=createExpectedPausedBST(pausedSubscriptionTransition.getId(),requestedPauseTransitionTime,effectivePauseTransitionTime,firstBST.getNextSubscription());
  listener.handleSubscriptionTransitionChange(pausedSubscriptionTransition);
  Assert.assertEquals(dao.getTransitions(KEY).size(),2);
  Assert.assertEquals(dao.getTransitions(KEY).get(1),pausedBST);
  final DateTime effectiveResumeTransitionTime=new DateTime(DateTimeZone.UTC);
  final DateTime requestedResumeTransitionTime=new DateTime(DateTimeZone.UTC);
  final SubscriptionTransitionData resumedSubscriptionTransition=createResumeSubscriptionTransition(requestedResumeTransitionTime,effectiveResumeTransitionTime,pausedSubscriptionTransition.getNextState());
  final BusinessSubscriptionTransition resumedBST=createExpectedResumedBST(resumedSubscriptionTransition.getId(),requestedResumeTransitionTime,effectiveResumeTransitionTime,pausedBST.getNextSubscription());
  listener.handleSubscriptionTransitionChange(resumedSubscriptionTransition);
  Assert.assertEquals(dao.getTransitions(KEY).size(),3);
  Assert.assertEquals(dao.getTransitions(KEY).get(2),resumedBST);
  final DateTime effectiveCancelTransitionTime=new DateTime(DateTimeZone.UTC);
  final DateTime requestedCancelTransitionTime=new DateTime(DateTimeZone.UTC);
  final SubscriptionTransitionData cancelledSubscriptionTransition=createCancelSubscriptionTransition(requestedCancelTransitionTime,effectiveCancelTransitionTime,resumedSubscriptionTransition.getNextState());
  final BusinessSubscriptionTransition cancelledBST=createExpectedCancelledBST(cancelledSubscriptionTransition.getId(),requestedCancelTransitionTime,effectiveCancelTransitionTime,resumedBST.getNextSubscription());
  listener.handleSubscriptionTransitionChange(cancelledSubscriptionTransition);
  Assert.assertEquals(dao.getTransitions(KEY).size(),4);
  Assert.assertEquals(dao.getTransitions(KEY).get(3),cancelledBST);
}
