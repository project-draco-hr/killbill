{
  final UUID invoice349Id=UUID.randomUUID();
  final InvoiceItem invoiceItem349Recurring1=createInvoiceItem(invoice349Id,InvoiceItemType.RECURRING,new BigDecimal("588"));
  final InvoiceItem invoiceItem349Repair=createInvoiceItem(invoice349Id,InvoiceItemType.REPAIR_ADJ,new BigDecimal("-588"),invoiceItem349Recurring1.getId());
  final InvoiceItem invoiceItem349Cba=createInvoiceItem(invoice349Id,InvoiceItemType.CBA_ADJ,new BigDecimal("588"));
  final Invoice invoice349=createInvoice(invoice349Id,349,ImmutableList.<InvoiceItem>of(invoiceItem349Recurring1,invoiceItem349Repair,invoiceItem349Cba));
  final BigDecimal balance349=BigDecimal.ZERO;
  final BigDecimal amountPaid349=new BigDecimal("588");
  final BigDecimal amountCharged349=new BigDecimal("27.40");
  final BigDecimal originalAmountCharged349=new BigDecimal("588");
  final BigDecimal amountCredited349=new BigDecimal("560.60");
  final BigDecimal amountRefunded349=BigDecimal.ZERO;
  final UUID invoice570Id=UUID.randomUUID();
  final InvoiceItem invoiceItem570Recurring1Proration=createInvoiceItem(invoice570Id,InvoiceItemType.RECURRING,invoiceItem349Recurring1.getSubscriptionId(),invoiceItem349Recurring1.getStartDate(),invoiceItem349Recurring1.getEndDate().minusDays(1),new BigDecimal("27.40"),null);
  final InvoiceItem invoiceItem570Recurring2=createInvoiceItem(invoice570Id,InvoiceItemType.RECURRING,new BigDecimal("42.29"));
  final InvoiceItem invoiceItem570Cba=createInvoiceItem(invoice570Id,InvoiceItemType.CBA_ADJ,new BigDecimal("-69.69"));
  final Invoice invoice570=createInvoice(invoice570Id,570,ImmutableList.<InvoiceItem>of(invoiceItem570Recurring1Proration,invoiceItem570Recurring2,invoiceItem570Cba));
  final BigDecimal balance570=BigDecimal.ZERO;
  final BigDecimal amountPaid570=BigDecimal.ZERO;
  final BigDecimal amountCharged570=new BigDecimal("42.29");
  final BigDecimal originalAmountCharged570=new BigDecimal("42.29");
  final BigDecimal amountCredited570=new BigDecimal("-42.29");
  final BigDecimal amountRefunded570=BigDecimal.ZERO;
  Mockito.when(osgiKillbillApi.getAccountUserApi().getAccountById(account.getId(),callContext)).thenReturn(account);
  Mockito.when(osgiKillbillApi.getInvoiceUserApi().getInvoicesByAccount(account.getId(),callContext)).thenReturn(ImmutableList.<Invoice>of(invoice349,invoice570));
  Mockito.when(osgiKillbillApi.getInvoiceUserApi().getInvoice(invoice349Id,callContext)).thenReturn(invoice349);
  Mockito.when(osgiKillbillApi.getInvoiceUserApi().getInvoice(invoice570Id,callContext)).thenReturn(invoice570);
  Mockito.when(payment.getAmount()).thenReturn(amountPaid349);
  Mockito.when(osgiKillbillApi.getPaymentApi().getAccountPayments(account.getId(),callContext)).thenReturn(ImmutableList.<Payment>of(payment));
  Mockito.when(invoicePayment.getInvoiceId()).thenReturn(invoice349Id);
  Mockito.when(invoicePayment.getAmount()).thenReturn(amountPaid349);
  Mockito.when(osgiKillbillApi.getInvoicePaymentApi().getInvoicePayments(payment.getId(),callContext)).thenReturn(ImmutableList.<InvoicePayment>of(invoicePayment));
  final Map<UUID,BusinessInvoiceModelDao> invoices=new HashMap<UUID,BusinessInvoiceModelDao>();
  final Multimap<UUID,BusinessInvoiceItemBaseModelDao> invoiceItems=ArrayListMultimap.<UUID,BusinessInvoiceItemBaseModelDao>create();
  final Multimap<UUID,BusinessInvoicePaymentBaseModelDao> invoicePayments=ArrayListMultimap.<UUID,BusinessInvoicePaymentBaseModelDao>create();
  dao.createBusinessPojos(account.getId(),invoices,invoiceItems,invoicePayments,callContext);
  Assert.assertEquals(invoices.keySet().size(),2);
  Assert.assertEquals(invoices.get(invoice349Id).getBalance().compareTo(balance349),0);
  Assert.assertEquals(invoices.get(invoice349Id).getAmountPaid().compareTo(amountPaid349),0);
  Assert.assertEquals(invoices.get(invoice349Id).getAmountCharged().compareTo(amountCharged349),0);
  Assert.assertEquals(invoices.get(invoice349Id).getOriginalAmountCharged().compareTo(originalAmountCharged349),0);
  Assert.assertEquals(invoices.get(invoice349Id).getAmountCredited().compareTo(amountCredited349),0);
  Assert.assertEquals(invoices.get(invoice349Id).getAmountRefunded().compareTo(amountRefunded349),0);
  Assert.assertEquals(invoices.get(invoice570Id).getBalance().compareTo(balance570),0);
  Assert.assertEquals(invoices.get(invoice570Id).getAmountPaid().compareTo(amountPaid570),0);
  Assert.assertEquals(invoices.get(invoice570Id).getAmountCharged().compareTo(amountCharged570),0);
  Assert.assertEquals(invoices.get(invoice570Id).getOriginalAmountCharged().compareTo(originalAmountCharged570),0);
  Assert.assertEquals(invoices.get(invoice570Id).getAmountCredited().compareTo(amountCredited570),0);
  Assert.assertEquals(invoices.get(invoice570Id).getAmountRefunded().compareTo(amountRefunded570),0);
  Assert.assertEquals(invoiceItems.get(invoice349Id).size(),3);
  for (  final BusinessInvoiceItemBaseModelDao invoiceItem : invoiceItems.get(invoice349Id)) {
    if (InvoiceItemType.RECURRING.toString().equals(invoiceItem.getItemType())) {
      Assert.assertEquals(invoiceItem.getAmount().compareTo(new BigDecimal("588")),0,String.format("RECURRING item is %s, not 588",invoiceItem.getAmount()));
    }
 else     if (InvoiceItemType.ITEM_ADJ.toString().equals(invoiceItem.getItemType())) {
      Assert.assertEquals(invoiceItem.getAmount().compareTo(new BigDecimal("-560.60")),0,String.format("ITEM_ADJ item is %s, not -560.60",invoiceItem.getAmount()));
    }
 else     if (InvoiceItemType.CBA_ADJ.toString().equals(invoiceItem.getItemType())) {
      Assert.assertEquals(invoiceItem.getAmount().compareTo(new BigDecimal("560.60")),0,String.format("CBA item is %s, not 560.60",invoiceItem.getAmount()));
    }
 else {
      Assert.fail();
    }
  }
  Assert.assertEquals(invoiceItems.get(invoice570Id).size(),2);
  for (  final BusinessInvoiceItemBaseModelDao invoiceItem : invoiceItems.get(invoice570Id)) {
    if (InvoiceItemType.RECURRING.toString().equals(invoiceItem.getItemType())) {
      Assert.assertEquals(invoiceItem.getAmount().compareTo(new BigDecimal("42.29")),0,String.format("RECURRING item is %s, not 42.29",invoiceItem.getAmount()));
    }
 else     if (InvoiceItemType.CBA_ADJ.toString().equals(invoiceItem.getItemType())) {
      Assert.assertEquals(invoiceItem.getAmount().compareTo(new BigDecimal("-42.29")),0,String.format("CBA item is %s, not -42.29",invoiceItem.getAmount()));
    }
 else {
      Assert.fail();
    }
  }
}
