{
  try {
    final DateTime now=clock.getUTCNow();
    requestedDate=(requestedDate != null) ? DefaultClock.truncateMs(requestedDate) : now;
    validateRequestedDate(subscription,now,requestedDate);
    final PriceList currentPriceList=subscription.getCurrentPriceList();
    final SubscriptionState currentState=subscription.getState();
    if (currentState != SubscriptionState.ACTIVE) {
      throw new EntitlementUserApiException(ErrorCode.ENT_CHANGE_NON_ACTIVE,subscription.getId(),currentState);
    }
    if (subscription.isSubscriptionFutureCancelled()) {
      throw new EntitlementUserApiException(ErrorCode.ENT_CHANGE_FUTURE_CANCELLED,subscription.getId());
    }
    PlanChangeResult planChangeResult=null;
    try {
      final Product destProduct=catalogService.getFullCatalog().findProduct(productName,requestedDate);
      final Plan currentPlan=subscription.getCurrentPlan();
      final PlanPhaseSpecifier fromPlanPhase=new PlanPhaseSpecifier(currentPlan.getProduct().getName(),currentPlan.getProduct().getCategory(),currentPlan.getBillingPeriod(),currentPriceList.getName(),subscription.getCurrentPhase().getPhaseType());
      final PlanSpecifier toPlanPhase=new PlanSpecifier(productName,destProduct.getCategory(),term,priceList);
      planChangeResult=catalogService.getFullCatalog().planChange(fromPlanPhase,toPlanPhase,requestedDate);
    }
 catch (    CatalogApiException e) {
      throw new EntitlementUserApiException(e);
    }
    final ActionPolicy policy=planChangeResult.getPolicy();
    final PriceList newPriceList=planChangeResult.getNewPriceList();
    final Plan newPlan=catalogService.getFullCatalog().findPlan(productName,term,newPriceList.getName(),requestedDate,subscription.getStartDate());
    final DateTime effectiveDate=subscription.getPlanChangeEffectiveDate(policy,requestedDate);
    final TimedPhase currentTimedPhase=planAligner.getCurrentTimedPhaseOnChange(subscription,newPlan,newPriceList.getName(),requestedDate,effectiveDate);
    final EntitlementEvent changeEvent=new ApiEventChange(new ApiEventBuilder().setSubscriptionId(subscription.getId()).setEventPlan(newPlan.getName()).setEventPlanPhase(currentTimedPhase.getPhase().getName()).setEventPriceList(newPriceList.getName()).setActiveVersion(subscription.getActiveVersion()).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(requestedDate).setUserToken(context.getUserToken()).setFromDisk(true));
    final TimedPhase nextTimedPhase=planAligner.getNextTimedPhaseOnChange(subscription,newPlan,newPriceList.getName(),requestedDate,effectiveDate);
    final PhaseEvent nextPhaseEvent=(nextTimedPhase != null) ? PhaseEventData.createNextPhaseEvent(nextTimedPhase.getPhase().getName(),subscription,now,nextTimedPhase.getStartPhase()) : null;
    final List<EntitlementEvent> changeEvents=new ArrayList<EntitlementEvent>();
    if (nextPhaseEvent != null && !nextPhaseEvent.getEffectiveDate().equals(changeEvent.getEffectiveDate())) {
      changeEvents.add(nextPhaseEvent);
    }
    changeEvents.add(changeEvent);
    dao.changePlan(subscription.getId(),changeEvents,context);
    subscription.rebuildTransitions(dao.getEventsForSubscription(subscription.getId()),catalogService.getFullCatalog());
    return (policy == ActionPolicy.IMMEDIATE);
  }
 catch (  CatalogApiException e) {
    throw new EntitlementUserApiException(e);
  }
}
