{
  final SubscriptionState currentState=subscription.getState();
  if (currentState != null && currentState != SubscriptionState.CANCELLED) {
    throw new EntitlementUserApiException(ErrorCode.ENT_RECREATE_BAD_STATE,subscription.getId(),currentState);
  }
  final DateTime now=clock.getUTCNow();
  requestedDate=(requestedDate != null) ? DefaultClock.truncateMs(requestedDate) : now;
  validateRequestedDate(subscription,now,requestedDate);
  try {
    final String realPriceList=(spec.getPriceListName() == null) ? PriceListSet.DEFAULT_PRICELIST_NAME : spec.getPriceListName();
    final Plan plan=catalogService.getFullCatalog().findPlan(spec.getProductName(),spec.getBillingPeriod(),realPriceList,requestedDate);
    final PlanPhase phase=plan.getAllPhases()[0];
    if (phase == null) {
      throw new EntitlementError(String.format("No initial PlanPhase for Product %s, term %s and set %s does not exist in the catalog",spec.getProductName(),spec.getBillingPeriod().toString(),realPriceList));
    }
    final DateTime effectiveDate=requestedDate;
    final DateTime processedDate=now;
    createFromSubscription(subscription,plan,spec.getPhaseType(),realPriceList,requestedDate,effectiveDate,processedDate,true,context);
    return true;
  }
 catch (  CatalogApiException e) {
    throw new EntitlementUserApiException(e);
  }
}
