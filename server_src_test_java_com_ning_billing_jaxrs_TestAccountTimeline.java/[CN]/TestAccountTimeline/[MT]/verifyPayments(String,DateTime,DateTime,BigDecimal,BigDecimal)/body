{
  for (  final AuditLevel auditLevel : AuditLevel.values()) {
    final AccountTimelineJson timeline=getAccountTimelineWithAudits(accountId,auditLevel);
    Assert.assertEquals(timeline.getPayments().size(),1);
    final PaymentJsonWithBundleKeys paymentJson=timeline.getPayments().get(0);
    Assert.assertEquals(paymentJson.getRefunds().size(),1);
    final RefundJson refundJson=paymentJson.getRefunds().get(0);
    Assert.assertEquals(refundJson.getPaymentId(),paymentJson.getPaymentId());
    Assert.assertEquals(refundJson.getAmount().compareTo(refundAmount),0);
    Assert.assertEquals(paymentJson.getChargebacks().size(),1);
    final ChargebackJson chargebackJson=paymentJson.getChargebacks().get(0);
    Assert.assertEquals(chargebackJson.getPaymentId(),paymentJson.getPaymentId());
    Assert.assertEquals(chargebackJson.getChargebackAmount().compareTo(chargebackAmount),0);
    final List<AuditLogJson> paymentAuditLogs=paymentJson.getAuditLogs();
    final List<AuditLogJson> refundAuditLogs=refundJson.getAuditLogs();
    final List<AuditLogJson> chargebackAuditLogs=chargebackJson.getAuditLogs();
    if (AuditLevel.NONE.equals(auditLevel)) {
      Assert.assertEquals(paymentAuditLogs.size(),0);
      Assert.assertEquals(refundAuditLogs.size(),0);
      Assert.assertEquals(chargebackAuditLogs.size(),0);
    }
 else     if (AuditLevel.MINIMAL.equals(auditLevel)) {
      Assert.assertEquals(paymentAuditLogs.size(),1);
      verifyAuditLog(paymentAuditLogs.get(0),ChangeType.INSERT,null,null,PAYMENT_REQUEST_PROCESSOR,startTime,endTime);
      Assert.assertEquals(refundAuditLogs.size(),1);
      verifyAuditLog(refundAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
      Assert.assertEquals(chargebackAuditLogs.size(),1);
      verifyAuditLog(chargebackAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
    }
 else {
      Assert.assertEquals(paymentAuditLogs.size(),2);
      verifyAuditLog(paymentAuditLogs.get(0),ChangeType.INSERT,null,null,PAYMENT_REQUEST_PROCESSOR,startTime,endTime);
      verifyAuditLog(paymentAuditLogs.get(1),ChangeType.UPDATE,null,null,PAYMENT_REQUEST_PROCESSOR,startTime,endTime);
      Assert.assertEquals(refundAuditLogs.size(),3);
      verifyAuditLog(refundAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
      verifyAuditLog(refundAuditLogs.get(1),ChangeType.UPDATE,reason,comment,createdBy,startTime,endTime);
      verifyAuditLog(refundAuditLogs.get(2),ChangeType.UPDATE,reason,comment,createdBy,startTime,endTime);
      Assert.assertEquals(chargebackAuditLogs.size(),1);
      verifyAuditLog(chargebackAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
    }
  }
}
