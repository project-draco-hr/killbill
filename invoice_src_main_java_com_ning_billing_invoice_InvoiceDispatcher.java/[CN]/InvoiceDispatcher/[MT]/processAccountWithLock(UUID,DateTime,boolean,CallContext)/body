{
  try {
    final BillingEventSet billingEvents=billingApi.getBillingEventsForAccountAndUpdateAccountBCD(accountId);
    final Account account=accountUserApi.getAccountById(accountId);
    List<Invoice> invoices=new ArrayList<Invoice>();
    if (!billingEvents.isAccountAutoInvoiceOff()) {
      invoices=invoiceDao.getInvoicesByAccount(accountId);
    }
    final Currency targetCurrency=account.getCurrency();
    final LocalDate targetDate=new LocalDate(targetDateTime,account.getTimeZone());
    final Invoice invoice=generator.generateInvoice(accountId,billingEvents,invoices,targetDate,account.getTimeZone(),targetCurrency);
    if (invoice == null) {
      log.info("Generated null invoice.");
      outputDebugData(billingEvents,invoices);
      if (!dryRun) {
        final BusEvent event=new DefaultNullInvoiceEvent(accountId,clock.getUTCToday(),context.getUserToken());
        postEvent(event,accountId);
      }
    }
 else {
      log.info("Generated invoice {} with {} items.",invoice.getId().toString(),invoice.getNumberOfItems());
      if (VERBOSE_OUTPUT) {
        log.info("New items");
        for (        final InvoiceItem item : invoice.getInvoiceItems()) {
          log.info(item.toString());
        }
      }
      outputDebugData(billingEvents,invoices);
      if (!dryRun) {
        final boolean isRealInvoiceWithItems=Collections2.filter(invoice.getInvoiceItems(),new Predicate<InvoiceItem>(){
          @Override public boolean apply(          InvoiceItem input){
            return input.getInvoiceId().equals(invoice.getId());
          }
        }
).size() > 0;
        invoiceDao.create(invoice,account.getBillCycleDay().getDayOfMonthUTC(),isRealInvoiceWithItems,context);
        final List<InvoiceItem> fixedPriceInvoiceItems=invoice.getInvoiceItems(FixedPriceInvoiceItem.class);
        final List<InvoiceItem> recurringInvoiceItems=invoice.getInvoiceItems(RecurringInvoiceItem.class);
        setChargedThroughDates(account.getBillCycleDay(),fixedPriceInvoiceItems,recurringInvoiceItems,context);
        final InvoiceCreationEvent event=new DefaultInvoiceCreationEvent(invoice.getId(),invoice.getAccountId(),invoice.getBalance(),invoice.getCurrency(),context.getUserToken());
        if (isRealInvoiceWithItems) {
          postEvent(event,accountId);
        }
      }
    }
    if (account.isNotifiedForInvoices()) {
      invoiceNotifier.notify(account,invoice);
    }
    return invoice;
  }
 catch (  AccountApiException e) {
    log.error("Failed handling entitlement change.",e);
    return null;
  }
}
