{
  try {
    final SortedSet<Invoice> unpaidInvoices=unpaidInvoicesForBundle(bundle.getId(),bundle.getAccountId());
    final Subscription basePlan=entitlementApi.getBaseSubscription(bundle.getId());
    final UUID id=bundle.getId();
    final int numberOfUnpaidInvoices=unpaidInvoices.size();
    final BigDecimal unpaidInvoiceBalance=sumBalance(unpaidInvoices);
    DateTime dateOfEarliestUnpaidInvoice=null;
    UUID idOfEarliestUnpaidInvoice=null;
    final Invoice invoice=earliest(unpaidInvoices);
    if (invoice != null) {
      dateOfEarliestUnpaidInvoice=invoice.getInvoiceDate();
      idOfEarliestUnpaidInvoice=invoice.getId();
    }
    final PaymentResponse responseForLastFailedPayment=PaymentResponse.INSUFFICIENT_FUNDS;
    final Tag[] tags=new Tag[]{};
    final Product basePlanProduct=basePlan.getCurrentPlan().getProduct();
    final BillingPeriod basePlanBillingPeriod=basePlan.getCurrentPlan().getBillingPeriod();
    final PriceList basePlanPriceList=basePlan.getCurrentPriceList();
    final PhaseType basePlanPhaseType=basePlan.getCurrentPhase().getPhaseType();
    return new BillingStateBundle(id,numberOfUnpaidInvoices,unpaidInvoiceBalance,dateOfEarliestUnpaidInvoice,idOfEarliestUnpaidInvoice,responseForLastFailedPayment,tags,basePlanProduct,basePlanBillingPeriod,basePlanPriceList,basePlanPhaseType);
  }
 catch (  EntitlementUserApiException e) {
    throw new OverdueError(e);
  }
}
