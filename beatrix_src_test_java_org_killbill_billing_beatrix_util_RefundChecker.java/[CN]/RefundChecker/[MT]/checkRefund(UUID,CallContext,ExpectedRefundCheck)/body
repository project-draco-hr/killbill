{
  final Payment payment=paymentApi.getPayment(paymentId,false,ImmutableList.<PluginProperty>of(),context);
  final PaymentTransaction refund=Iterables.tryFind(payment.getTransactions(),new Predicate<PaymentTransaction>(){
    @Override public boolean apply(    final PaymentTransaction input){
      return input.getTransactionType() == TransactionType.REFUND;
    }
  }
).orNull();
  Assert.assertNotNull(refund);
  final InvoicePayment refundInvoicePayment=getInvoicePaymentEntry(paymentId,InvoicePaymentType.REFUND,context);
  final InvoicePayment invoicePayment=getInvoicePaymentEntry(paymentId,InvoicePaymentType.ATTEMPT,context);
  Assert.assertEquals(refund.getPaymentId(),expected.getPaymentId());
  Assert.assertEquals(refund.getCurrency(),expected.getCurrency());
  Assert.assertEquals(refund.getAmount().compareTo(expected.getRefundAmount()),0);
  Assert.assertEquals(refundInvoicePayment.getPaymentId(),paymentId);
  Assert.assertEquals(refundInvoicePayment.getLinkedInvoicePaymentId(),invoicePayment.getId());
  Assert.assertEquals(refundInvoicePayment.getPaymentCookieId(),refund.getExternalKey());
  Assert.assertEquals(refundInvoicePayment.getInvoiceId(),invoicePayment.getInvoiceId());
  Assert.assertEquals(refundInvoicePayment.getAmount().compareTo(expected.getRefundAmount().negate()),0);
  Assert.assertEquals(refundInvoicePayment.getCurrency(),expected.getCurrency());
  return refund;
}
