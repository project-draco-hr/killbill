{
  try {
    if (isAccountTaggedWith_OVERDUE_ENFORCEMENT_OFF(context)) {
      log.debug("OverdueStateApplicator: apply returns because account (recordId={}) is set with OVERDUE_ENFORCEMENT_OFF",context.getAccountRecordId());
      return;
    }
    log.debug("OverdueStateApplicator: time={}, previousState={}, nextState={}, billingState={}",clock.getUTCNow(),previousOverdueState,nextOverdueState,billingState);
    final OverdueState firstOverdueState=overdueStateSet.getFirstState();
    final boolean conditionForNextNotfication=!nextOverdueState.isClearState() || (firstOverdueState != null && billingState != null && billingState.getDateOfEarliestUnpaidInvoice() != null);
    if (conditionForNextNotfication) {
      final Period reevaluationInterval=getReevaluationInterval(overdueStateSet,nextOverdueState);
      if (reevaluationInterval == null) {
        log.debug("OverdueStateApplicator <notificationQ>: missing InitialReevaluationInterval from config, NOT inserting notification for account {}",account.getId());
      }
 else {
        log.debug("OverdueStateApplicator <notificationQ>: inserting notification for account={}, time={}",account.getId(),clock.getUTCNow().plus(reevaluationInterval));
        createFutureNotification(account,clock.getUTCNow().plus(reevaluationInterval),context);
      }
    }
 else     if (nextOverdueState.isClearState()) {
      clearFutureNotification(account,context);
    }
    if (previousOverdueState.getName().equals(nextOverdueState.getName())) {
      log.debug("OverdueStateApplicator is no-op: previousState={}, nextState={}",previousOverdueState,nextOverdueState);
      return;
    }
    cancelSubscriptionsIfRequired(account,nextOverdueState,context);
    sendEmailIfRequired(account.getId(),billingState,nextOverdueState,context);
    avoid_extra_credit_by_toggling_AUTO_INVOICE_OFF(account,previousOverdueState,nextOverdueState,context);
    storeNewState(account,nextOverdueState,context);
  }
 catch (  final AccountApiException e) {
    throw new OverdueException(e);
  }
  try {
    bus.post(createOverdueEvent(account,previousOverdueState.getName(),nextOverdueState.getName(),isBlockBillingTransition(previousOverdueState,nextOverdueState),isUnblockBillingTransition(previousOverdueState,nextOverdueState),context));
  }
 catch (  final Exception e) {
    log.error("Error posting overdue change event to bus",e);
  }
}
