{
  final String name="First" + UUID.randomUUID().toString() + " "+ "Last"+ UUID.randomUUID().toString();
  final String externalKey=UUID.randomUUID().toString();
  final Account accountData=Mockito.mock(Account.class);
  Mockito.when(accountData.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(accountData.getExternalKey()).thenReturn(externalKey);
  Mockito.when(accountData.getName()).thenReturn(name);
  Mockito.when(accountData.getFirstNameLength()).thenReturn(10);
  Mockito.when(accountData.getPhone()).thenReturn("123-456-7890");
  Mockito.when(accountData.getEmail()).thenReturn(email);
  Mockito.when(accountData.getCurrency()).thenReturn(Currency.USD);
  Mockito.when(accountData.getBillCycleDayLocal()).thenReturn(1);
  Mockito.when(accountData.isMigrated()).thenReturn(false);
  Mockito.when(accountData.isNotifiedForInvoices()).thenReturn(false);
  Account account;
  if (isFastTest()) {
    account=accountData;
    Mockito.when(accountInternalApi.getAccountById(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(account);
    Mockito.when(accountInternalApi.getAccountByKey(Mockito.anyString(),Mockito.<InternalTenantContext>any())).thenReturn(account);
    mockNonEntityDao.addTenantRecordIdMapping(account.getId(),internalCallContext);
    mockNonEntityDao.addAccountRecordIdMapping(account.getId(),internalCallContext);
  }
 else {
    account=accountApi.createAccount(accountData,context);
  }
  if (addPaymentMethod) {
    final PaymentMethodPlugin pm=new DefaultNoOpPaymentMethodPlugin(UUID.randomUUID().toString(),true,null);
    account=addTestPaymentMethod(account,pm);
  }
  return account;
}
