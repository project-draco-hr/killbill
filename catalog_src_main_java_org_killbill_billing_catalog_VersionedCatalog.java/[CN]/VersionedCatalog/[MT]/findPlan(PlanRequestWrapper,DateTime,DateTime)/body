{
  final List<StandaloneCatalogWithPriceOverride> catalogs=versionsBeforeDate(requestedDate.toDate());
  if (catalogs.isEmpty()) {
    throw new CatalogApiException(ErrorCode.CAT_NO_CATALOG_FOR_GIVEN_DATE,requestedDate.toDate().toString());
  }
  for (int i=catalogs.size() - 1; i >= 0; i--) {
    final StandaloneCatalogWithPriceOverride c=catalogs.get(i);
    final Plan plan;
    try {
      plan=wrapper.findPlan(c);
    }
 catch (    final CatalogApiException e) {
      if (e.getCode() != ErrorCode.CAT_NO_SUCH_PLAN.getCode()) {
        throw e;
      }
 else {
        continue;
      }
    }
    final DateTime catalogEffectiveDate=internalTenantContext.toDateTime(c.getEffectiveDate());
    if (!subscriptionStartDate.isBefore(catalogEffectiveDate)) {
      return plan;
    }
 else {
      if (plan.getEffectiveDateForExistingSubscriptons() != null) {
        final DateTime existingSubscriptionDate=internalTenantContext.toDateTime(plan.getEffectiveDateForExistingSubscriptons());
        if (requestedDate.isAfter(existingSubscriptionDate)) {
          return plan;
        }
      }
    }
  }
  throw new CatalogApiException(ErrorCode.CAT_NO_CATALOG_FOR_GIVEN_DATE,requestedDate.toDate().toString());
}
