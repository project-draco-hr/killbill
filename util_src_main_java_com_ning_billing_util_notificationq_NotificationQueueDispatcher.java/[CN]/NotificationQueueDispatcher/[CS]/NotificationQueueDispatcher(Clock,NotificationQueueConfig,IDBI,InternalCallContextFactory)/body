{
  super("NotificationQ",Executors.newFixedThreadPool(1,new ThreadFactory(){
    @Override public Thread newThread(    final Runnable r){
      final Thread th=new Thread(r);
      th.setName(NOTIFICATION_THREAD_NAME);
      th.setUncaughtExceptionHandler(new UncaughtExceptionHandler(){
        @Override public void uncaughtException(        final Thread t,        final Throwable e){
          log.error("Uncaught exception for thread " + t.getName(),e);
        }
      }
);
      return th;
    }
  }
),config.getNbThreads(),config);
  this.clock=clock;
  this.config=config;
  this.dao=(dbi != null) ? dbi.onDemand(NotificationSqlDao.class) : null;
  this.internalCallContextFactory=internalCallContextFactory;
  this.hostname=Hostname.get();
  this.nbProcessedEvents=new AtomicLong();
  this.queues=new TreeMap<String,NotificationQueue>();
  this.pendingNotifications=Metrics.newGauge(NotificationQueueDispatcher.class,"pending-notifications",new Gauge<Integer>(){
    @Override public Integer value(){
      return dao != null ? dao.getPendingCountNotifications(clock.getUTCNow().toDate(),createCallContext(null,null)) : 0;
    }
  }
);
  this.processedNotificationsSinceStart=Metrics.newCounter(NotificationQueueDispatcher.class,"processed-notifications-since-start");
  this.perQueueProcessingTime=new HashMap<String,Histogram>();
}
