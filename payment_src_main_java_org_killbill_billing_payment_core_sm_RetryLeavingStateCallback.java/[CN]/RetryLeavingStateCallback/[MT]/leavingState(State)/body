{
  final DateTime utcNow=retryableDirectPaymentAutomatonRunner.clock.getUTCNow();
  Preconditions.checkState(stateContext.getDirectPaymentExternalKey() != null || stateContext.getDirectPaymentId() != null);
  if (stateContext.getDirectPaymentExternalKey() == null) {
    final PaymentModelDao payment=paymentDao.getDirectPayment(stateContext.getDirectPaymentId(),stateContext.internalCallContext);
    Preconditions.checkState(payment != null);
    stateContext.setDirectPaymentExternalKey(payment.getExternalKey());
  }
  if (state.getName().equals(initialState.getName()) || state.getName().equals(retriedState.getName())) {
    final List<PluginPropertyModelDao> properties=ImmutableList.copyOf(Iterables.transform(stateContext.getProperties(),new Function<PluginProperty,PluginPropertyModelDao>(){
      @Override public PluginPropertyModelDao apply(      final PluginProperty input){
        final String value=(input.getValue() instanceof String) ? (String)input.getValue() : "TODO: could not serialize";
        return new PluginPropertyModelDao(stateContext.getDirectPaymentExternalKey(),stateContext.directPaymentTransactionExternalKey,stateContext.getAccount().getId(),stateContext.getPluginName(),input.getKey(),value,stateContext.getCallContext().getUserName(),stateContext.getCallContext().getCreatedDate());
      }
    }
));
    final PaymentAttemptModelDao attempt=retryableDirectPaymentAutomatonRunner.paymentDao.insertPaymentAttemptWithProperties(new PaymentAttemptModelDao(stateContext.getAccount().getId(),stateContext.getPaymentMethodId(),utcNow,utcNow,stateContext.getDirectPaymentExternalKey(),null,stateContext.directPaymentTransactionExternalKey,transactionType,state.getName(),stateContext.getAmount(),stateContext.getCurrency(),stateContext.getPluginName()),properties,stateContext.internalCallContext);
    stateContext.setAttemptId(attempt.getId());
  }
}
