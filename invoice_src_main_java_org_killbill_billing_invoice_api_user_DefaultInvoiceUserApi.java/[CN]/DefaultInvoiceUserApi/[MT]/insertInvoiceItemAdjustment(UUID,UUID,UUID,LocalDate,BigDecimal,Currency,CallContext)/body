{
  if (amount != null && amount.compareTo(BigDecimal.ZERO) <= 0) {
    throw new InvoiceApiException(ErrorCode.INVOICE_ITEM_ADJUSTMENT_AMOUNT_SHOULD_BE_POSITIVE,amount);
  }
  final WithAccountLock withAccountLock=new WithAccountLock(){
    @Override public Iterable<Invoice> prepareInvoices() throws InvoiceApiException {
      final Invoice invoice=getInvoiceAndCheckCurrency(invoiceId,currency,context);
      final InvoiceItem adjustmentItem=invoiceApiHelper.createAdjustmentItem(invoice,invoiceItemId,amount,currency,effectiveDate,internalCallContextFactory.createInternalCallContext(accountId,context));
      invoice.addInvoiceItem(adjustmentItem);
      return ImmutableList.<Invoice>of(invoice);
    }
  }
;
  final Collection<InvoiceItem> adjustmentInvoiceItems=Collections2.<InvoiceItem>filter(invoiceApiHelper.dispatchToInvoicePluginsAndInsertItems(accountId,false,withAccountLock,context),new Predicate<InvoiceItem>(){
    @Override public boolean apply(    final InvoiceItem invoiceItem){
      return InvoiceItemType.ITEM_ADJ.equals(invoiceItem.getInvoiceItemType());
    }
  }
);
  Preconditions.checkState(adjustmentInvoiceItems.size() == 1,"Should have created a single adjustment item: " + adjustmentInvoiceItems);
  return adjustmentInvoiceItems.iterator().next();
}
