{
  for (  final InvoiceItem charge : charges) {
    if (charge.getAmount() == null || charge.getAmount().compareTo(BigDecimal.ZERO) <= 0) {
      throw new InvoiceApiException(ErrorCode.EXTERNAL_CHARGE_AMOUNT_INVALID,charge.getAmount());
    }
  }
  final Iterable<InvoiceItemModelDao> chargesModelDao=Iterables.<InvoiceItem,InvoiceItemModelDao>transform(charges,new Function<InvoiceItem,InvoiceItemModelDao>(){
    @Nullable @Override public InvoiceItemModelDao apply(    final InvoiceItem externalCharge){
      return new InvoiceItemModelDao(externalCharge);
    }
  }
);
  final List<InvoiceItemModelDao> externalCharges=dao.insertExternalCharges(accountId,effectiveDate,chargesModelDao,internalCallContextFactory.createInternalCallContext(accountId,context));
  return Lists.<InvoiceItemModelDao,InvoiceItem>transform(externalCharges,new Function<InvoiceItemModelDao,InvoiceItem>(){
    @Nullable @Override public InvoiceItem apply(    @Nullable final InvoiceItemModelDao externalCharge){
      return InvoiceItemFactory.fromModelDao(externalCharge);
    }
  }
);
}
