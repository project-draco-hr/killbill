{
  for (  final InvoiceItem charge : charges) {
    if (charge.getAmount() == null || charge.getAmount().compareTo(BigDecimal.ZERO) <= 0) {
      throw new InvoiceApiException(ErrorCode.EXTERNAL_CHARGE_AMOUNT_INVALID,charge.getAmount());
    }
  }
  final WithAccountLock withAccountLock=new WithAccountLock(){
    @Override public Iterable<Invoice> prepareInvoices() throws InvoiceApiException {
      final Map<Currency,Invoice> newInvoicesForExternalCharges=new HashMap<Currency,Invoice>();
      final Map<UUID,Invoice> existingInvoicesForExternalCharges=new HashMap<UUID,Invoice>();
      for (      final InvoiceItem charge : charges) {
        final Invoice invoiceForExternalCharge;
        final UUID invoiceIdForExternalCharge=charge.getInvoiceId();
        if (invoiceIdForExternalCharge == null) {
          final Currency currency=charge.getCurrency();
          if (newInvoicesForExternalCharges.get(currency) == null) {
            final Invoice newInvoiceForExternalCharge=new DefaultInvoice(accountId,effectiveDate,effectiveDate,currency);
            newInvoicesForExternalCharges.put(currency,newInvoiceForExternalCharge);
          }
          invoiceForExternalCharge=newInvoicesForExternalCharges.get(currency);
        }
 else {
          if (existingInvoicesForExternalCharges.get(invoiceIdForExternalCharge) == null) {
            final Invoice existingInvoiceForExternalCharge=getInvoice(invoiceIdForExternalCharge,context);
            existingInvoicesForExternalCharges.put(invoiceIdForExternalCharge,existingInvoiceForExternalCharge);
          }
          invoiceForExternalCharge=existingInvoicesForExternalCharges.get(invoiceIdForExternalCharge);
        }
        final InvoiceItem externalCharge=new ExternalChargeInvoiceItem(UUIDs.randomUUID(),context.getCreatedDate(),invoiceForExternalCharge.getId(),accountId,charge.getBundleId(),charge.getDescription(),effectiveDate,charge.getAmount(),charge.getCurrency());
        invoiceForExternalCharge.addInvoiceItem(externalCharge);
      }
      return Iterables.<Invoice>concat(newInvoicesForExternalCharges.values(),existingInvoicesForExternalCharges.values());
    }
  }
;
  return invoiceApiHelper.dispatchToInvoicePluginsAndInsertItems(accountId,false,withAccountLock,context);
}
