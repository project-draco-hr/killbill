{
  final Usage usage=billingEvents.getUsages().get(usageName);
  final BillingEvent billingEventSubscription=Iterables.tryFind(billingEvents,new Predicate<BillingEvent>(){
    @Override public boolean apply(    @Nullable final BillingEvent input){
      return input.getSubscription().getId().equals(subscriptionId);
    }
  }
).orNull();
  final LocalDate nextCallbackUsageDate=(usage.getBillingMode() == BillingMode.IN_ARREAR) ? BillingIntervalDetail.alignProposedBillCycleDate(chargedThroughDate.plusMonths(usage.getBillingPeriod().getNumberOfMonths()),billingEventSubscription.getBillCycleDayLocal()) : chargedThroughDate;
  return dateAndTimeZoneContext.computeUTCDateTimeFromLocalDate(nextCallbackUsageDate);
}
