{
  try {
    final NotificationQueue notificationQueue=notificationQueueService.getNotificationQueue(DefaultInvoiceService.INVOICE_SERVICE_NAME,DefaultNextBillingDateNotifier.NEXT_BILLING_DATE_NOTIFIER_QUEUE);
    final List<NotificationEventWithMetadata<NextBillingDateNotificationKey>> futureNotifications=notificationQueue.getFutureNotificationForSearchKeys(internalCallContext.getAccountRecordId(),internalCallContext.getTenantRecordId());
    final Iterable<NotificationEventWithMetadata<NextBillingDateNotificationKey>> filtered=Iterables.filter(futureNotifications,new Predicate<NotificationEventWithMetadata<NextBillingDateNotificationKey>>(){
      @Override public boolean apply(      @Nullable final NotificationEventWithMetadata<NextBillingDateNotificationKey> input){
        final boolean isEventDryRunForNotifications=input.getEvent().isDryRunForInvoiceNotification() != null ? input.getEvent().isDryRunForInvoiceNotification() : false;
        return !isEventDryRunForNotifications;
      }
    }
);
    return Iterables.transform(filtered,new Function<NotificationEventWithMetadata<NextBillingDateNotificationKey>,DateTime>(){
      @Nullable @Override public DateTime apply(      @Nullable final NotificationEventWithMetadata<NextBillingDateNotificationKey> input){
        return input.getEffectiveDate();
      }
    }
);
  }
 catch (  final NoSuchNotificationQueue noSuchNotificationQueue) {
    throw new IllegalStateException(noSuchNotificationQueue);
  }
}
