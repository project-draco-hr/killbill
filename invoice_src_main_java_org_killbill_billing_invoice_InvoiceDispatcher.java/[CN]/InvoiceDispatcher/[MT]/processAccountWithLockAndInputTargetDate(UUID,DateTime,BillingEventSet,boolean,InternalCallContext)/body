{
  try {
    final ImmutableAccountData account=accountApi.getImmutableAccountDataById(accountId,context);
    final List<Invoice> invoices=billingEvents.isAccountAutoInvoiceOff() ? ImmutableList.<Invoice>of() : ImmutableList.<Invoice>copyOf(Collections2.transform(invoiceDao.getInvoicesByAccount(context),new Function<InvoiceModelDao,Invoice>(){
      @Override public Invoice apply(      final InvoiceModelDao input){
        return new DefaultInvoice(input);
      }
    }
));
    final Currency targetCurrency=account.getCurrency();
    final LocalDate targetDate=billingEvents.getAccountDateAndTimeZoneContext().computeLocalDateFromFixedAccountOffset(targetDateTime);
    final InvoiceWithMetadata invoiceWithMetadata=generator.generateInvoice(account,billingEvents,invoices,targetDate,targetCurrency,context);
    final Invoice invoice=invoiceWithMetadata.getInvoice();
    final FutureAccountNotifications futureAccountNotifications=createNextFutureNotificationDate(invoiceWithMetadata,billingEvents.getAccountDateAndTimeZoneContext(),context);
    if (invoice == null) {
      if (isDryRun) {
        log.info("Generated null dryRun invoice for accountId='{}', targetDate='{}', targetDateTime='{}'",accountId,targetDate,targetDateTime);
      }
 else {
        log.info("Generated null invoice for accountId='{}', targetDate='{}', targetDateTime='{}'",accountId,targetDate,targetDateTime);
        final BusInternalEvent event=new DefaultNullInvoiceEvent(accountId,clock.getUTCToday(),context.getAccountRecordId(),context.getTenantRecordId(),context.getUserToken());
        commitInvoiceAndSetFutureNotifications(account,null,ImmutableList.<InvoiceItemModelDao>of(),futureAccountNotifications,false,context);
        postEvent(event);
      }
      return null;
    }
    final InvoiceItem cbaItem=computeCBAOnExistingInvoice(invoice,context);
    if (cbaItem != null) {
      invoice.addInvoiceItem(cbaItem);
    }
    final CallContext callContext=buildCallContext(context);
    invoice.addInvoiceItems(invoicePluginDispatcher.getAdditionalInvoiceItems(invoice,isDryRun,callContext));
    if (!isDryRun) {
      final Set<UUID> uniqueInvoiceIds=getUniqueInvoiceIds(invoice);
      final boolean isRealInvoiceWithItems=uniqueInvoiceIds.remove(invoice.getId());
      final Set<UUID> adjustedUniqueOtherInvoiceId=uniqueInvoiceIds;
      logInvoiceWithItems(account,invoice,targetDate,adjustedUniqueOtherInvoiceId,isRealInvoiceWithItems);
      final InvoiceModelDao invoiceModelDao=new InvoiceModelDao(invoice);
      final Iterable<InvoiceItemModelDao> invoiceItemModelDaos=transformToInvoiceModelDao(invoice.getInvoiceItems());
      final boolean isThereAnyItemsLeft=commitInvoiceAndSetFutureNotifications(account,invoiceModelDao,invoiceItemModelDaos,futureAccountNotifications,isRealInvoiceWithItems,context);
      final boolean isRealInvoiceWithNonEmptyItems=isThereAnyItemsLeft ? isRealInvoiceWithItems : false;
      setChargedThroughDates(billingEvents.getAccountDateAndTimeZoneContext(),invoice.getInvoiceItems(FixedPriceInvoiceItem.class),invoice.getInvoiceItems(RecurringInvoiceItem.class),context);
      postEvents(account,invoice,adjustedUniqueOtherInvoiceId,isRealInvoiceWithNonEmptyItems,context);
      notifyAccountIfEnabled(account,invoice,isRealInvoiceWithNonEmptyItems,context);
    }
    return invoice;
  }
 catch (  final AccountApiException e) {
    log.error("Failed handling SubscriptionBase change.",e);
    return null;
  }
catch (  SubscriptionBaseApiException e) {
    log.error("Failed handling SubscriptionBase change.",e);
    return null;
  }
}
