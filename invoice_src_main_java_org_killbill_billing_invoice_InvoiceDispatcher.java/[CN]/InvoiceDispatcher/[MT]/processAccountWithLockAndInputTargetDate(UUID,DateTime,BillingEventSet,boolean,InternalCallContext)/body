{
  try {
    final Account account=accountApi.getAccountById(accountId,context);
    final DateAndTimeZoneContext dateAndTimeZoneContext=billingEvents.iterator().hasNext() ? new DateAndTimeZoneContext(billingEvents.iterator().next().getEffectiveDate(),account.getTimeZone(),clock) : null;
    final List<Invoice> invoices=billingEvents.isAccountAutoInvoiceOff() ? ImmutableList.<Invoice>of() : ImmutableList.<Invoice>copyOf(Collections2.transform(invoiceDao.getInvoicesByAccount(context),new Function<InvoiceModelDao,Invoice>(){
      @Override public Invoice apply(      final InvoiceModelDao input){
        return new DefaultInvoice(input);
      }
    }
));
    final Currency targetCurrency=account.getCurrency();
    final LocalDate targetDate=(dateAndTimeZoneContext != null && targetDateTime != null) ? dateAndTimeZoneContext.computeTargetDate(targetDateTime) : null;
    final Invoice invoice=targetDate != null ? generator.generateInvoice(account,billingEvents,invoices,targetDate,targetCurrency,context) : null;
    if (invoice == null) {
      log.info("Generated null invoice for accountId {} and targetDate {} (targetDateTime {})",new Object[]{accountId,targetDate,targetDateTime});
      if (!isDryRun) {
        final BusInternalEvent event=new DefaultNullInvoiceEvent(accountId,clock.getUTCToday(),context.getAccountRecordId(),context.getTenantRecordId(),context.getUserToken());
        postEvent(event,accountId,context);
      }
      return invoice;
    }
    final InvoiceItem cbaItem=computeCBAOnExistingInvoice(invoice,context);
    if (cbaItem != null) {
      invoice.addInvoiceItem(cbaItem);
    }
    final CallContext callContext=buildCallContext(context);
    invoice.addInvoiceItems(invoicePluginDispatcher.getAdditionalInvoiceItems(invoice,callContext));
    if (!isDryRun) {
      commitInvoiceStateAndNotifyAccountIfConfigured(account,invoice,billingEvents,dateAndTimeZoneContext,targetDate,context);
    }
    return invoice;
  }
 catch (  final AccountApiException e) {
    log.error("Failed handling SubscriptionBase change.",e);
    return null;
  }
catch (  SubscriptionBaseApiException e) {
    log.error("Failed handling SubscriptionBase change.",e);
    return null;
  }
}
