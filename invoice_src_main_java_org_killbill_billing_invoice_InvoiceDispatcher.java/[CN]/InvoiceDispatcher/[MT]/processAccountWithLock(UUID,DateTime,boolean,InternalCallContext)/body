{
  try {
    final BillingEventSet billingEvents=billingApi.getBillingEventsForAccountAndUpdateAccountBCD(accountId,context);
    final Account account=accountApi.getAccountById(accountId,context);
    final DateAndTimeZoneContext dateAndTimeZoneContext=billingEvents.iterator().hasNext() ? new DateAndTimeZoneContext(billingEvents.iterator().next().getEffectiveDate(),account.getTimeZone(),clock) : null;
    List<Invoice> invoices=new ArrayList<Invoice>();
    if (!billingEvents.isAccountAutoInvoiceOff()) {
      invoices=ImmutableList.<Invoice>copyOf(Collections2.transform(invoiceDao.getInvoicesByAccount(context),new Function<InvoiceModelDao,Invoice>(){
        @Override public Invoice apply(        final InvoiceModelDao input){
          return new DefaultInvoice(input);
        }
      }
));
    }
    final Currency targetCurrency=account.getCurrency();
    final LocalDate targetDate=dateAndTimeZoneContext != null ? dateAndTimeZoneContext.computeTargetDate(targetDateTime) : null;
    final Invoice invoice=targetDate != null ? generator.generateInvoice(accountId,billingEvents,invoices,targetDate,targetCurrency) : null;
    boolean isRealInvoiceWithItems=false;
    if (invoice == null) {
      log.info("Generated null invoice for accountId {} and targetDate {} (targetDateTime {})",new Object[]{accountId,targetDate,targetDateTime});
      if (!dryRun) {
        final BusInternalEvent event=new DefaultNullInvoiceEvent(accountId,clock.getUTCToday(),context.getAccountRecordId(),context.getTenantRecordId(),context.getUserToken());
        postEvent(event,accountId,context);
      }
    }
 else {
      if (!dryRun) {
        final Set<UUID> adjustedUniqueOtherInvoiceId=new TreeSet<UUID>();
        adjustedUniqueOtherInvoiceId.addAll(Collections2.transform(invoice.getInvoiceItems(),new Function<InvoiceItem,UUID>(){
          @Nullable @Override public UUID apply(          @Nullable final InvoiceItem input){
            return input.getInvoiceId();
          }
        }
));
        isRealInvoiceWithItems=adjustedUniqueOtherInvoiceId.remove(invoice.getId());
        if (isRealInvoiceWithItems) {
          log.info("Generated invoice {} with {} items for accountId {} and targetDate {} (targetDateTime {})",new Object[]{invoice.getId(),invoice.getNumberOfItems(),accountId,targetDate,targetDateTime});
        }
 else {
          final Joiner joiner=Joiner.on(",");
          final String adjustedInvoices=joiner.join(adjustedUniqueOtherInvoiceId.toArray(new UUID[adjustedUniqueOtherInvoiceId.size()]));
          log.info("Adjusting existing invoices {} with {} items for accountId {} and targetDate {} (targetDateTime {})",new Object[]{adjustedInvoices,invoice.getNumberOfItems(),accountId,targetDate,targetDateTime});
        }
        final InvoiceModelDao invoiceModelDao=new InvoiceModelDao(invoice);
        final List<InvoiceItemModelDao> invoiceItemModelDaos=ImmutableList.<InvoiceItemModelDao>copyOf(Collections2.transform(invoice.getInvoiceItems(),new Function<InvoiceItem,InvoiceItemModelDao>(){
          @Override public InvoiceItemModelDao apply(          final InvoiceItem input){
            return new InvoiceItemModelDao(input);
          }
        }
));
        final List<InvoicePaymentModelDao> invoicePaymentModelDaos=ImmutableList.<InvoicePaymentModelDao>copyOf(Collections2.transform(invoice.getPayments(),new Function<InvoicePayment,InvoicePaymentModelDao>(){
          @Override public InvoicePaymentModelDao apply(          final InvoicePayment input){
            return new InvoicePaymentModelDao(input);
          }
        }
));
        final Map<UUID,DateTime> callbackDateTimePerSubscriptions=createNextFutureNotificationDate(invoiceItemModelDaos,dateAndTimeZoneContext);
        invoiceDao.createInvoice(invoiceModelDao,invoiceItemModelDaos,invoicePaymentModelDaos,isRealInvoiceWithItems,callbackDateTimePerSubscriptions,context);
        final List<InvoiceItem> fixedPriceInvoiceItems=invoice.getInvoiceItems(FixedPriceInvoiceItem.class);
        final List<InvoiceItem> recurringInvoiceItems=invoice.getInvoiceItems(RecurringInvoiceItem.class);
        setChargedThroughDates(dateAndTimeZoneContext,fixedPriceInvoiceItems,recurringInvoiceItems,context);
        final List<InvoiceInternalEvent> events=new ArrayList<InvoiceInternalEvent>();
        if (isRealInvoiceWithItems) {
          events.add(new DefaultInvoiceCreationEvent(invoice.getId(),invoice.getAccountId(),invoice.getBalance(),invoice.getCurrency(),context.getAccountRecordId(),context.getTenantRecordId(),context.getUserToken()));
        }
        for (        UUID cur : adjustedUniqueOtherInvoiceId) {
          final InvoiceAdjustmentInternalEvent event=new DefaultInvoiceAdjustmentEvent(cur,invoice.getAccountId(),context.getAccountRecordId(),context.getTenantRecordId(),context.getUserToken());
          events.add(event);
        }
        for (        InvoiceInternalEvent event : events) {
          postEvent(event,accountId,context);
        }
      }
    }
    if (account.isNotifiedForInvoices() && isRealInvoiceWithItems && !dryRun) {
      invoiceNotifier.notify(account,new DefaultInvoice(invoiceDao.getById(invoice.getId(),context)),buildTenantContext(context));
    }
    return invoice;
  }
 catch (  AccountApiException e) {
    log.error("Failed handling SubscriptionBase change.",e);
    return null;
  }
}
