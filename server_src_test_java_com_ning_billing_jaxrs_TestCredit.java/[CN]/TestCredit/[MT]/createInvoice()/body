{
  final DateTime initialDate=new DateTime(2012,4,25,0,3,42,0);
  clock.setDeltaFromReality(initialDate.getMillis() - clock.getUTCNow().getMillis());
  final AccountJson accountJson=createAccountWithDefaultPaymentMethod("poupou","qhddffrwe","poupou@yahoo.com");
  assertNotNull(accountJson);
  final BundleJsonNoSubscriptions bundleJson=createBundle(accountJson.getAccountId(),"9967599");
  assertNotNull(bundleJson);
  final SubscriptionJsonNoEvents subscriptionJson=createSubscription(bundleJson.getBundleId(),"Shotgun",ProductCategory.BASE.toString(),BillingPeriod.MONTHLY.toString(),true);
  assertNotNull(subscriptionJson);
  final Interval it=new Interval(clock.getUTCNow(),clock.getUTCNow().plusDays(30));
  clock.addDeltaFromReality(it.toDurationMillis());
  crappyWaitForLackOfProperSynchonization();
  final String uri=JaxrsResource.INVOICES_PATH;
  final Map<String,String> queryParams=new HashMap<String,String>();
  queryParams.put(JaxrsResource.QUERY_ACCOUNT_ID,accountJson.getAccountId());
  final Response response=doGet(uri,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  final String baseJson=response.getResponseBody();
  final List<InvoiceJsonSimple> objFromJson=mapper.readValue(baseJson,new TypeReference<List<InvoiceJsonSimple>>(){
  }
);
  assertNotNull(objFromJson);
  assertEquals(objFromJson.size(),2);
  return objFromJson.get(1);
}
