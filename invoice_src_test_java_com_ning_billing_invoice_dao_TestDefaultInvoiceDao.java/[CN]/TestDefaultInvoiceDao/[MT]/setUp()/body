{
  final IDBI idbi=Mockito.mock(IDBI.class);
  invoiceSqlDao=Mockito.mock(InvoiceSqlDao.class);
  Mockito.when(idbi.onDemand(InvoiceSqlDao.class)).thenReturn(invoiceSqlDao);
  Mockito.when(invoiceSqlDao.getById(Mockito.anyString(),Mockito.<InternalTenantContext>any())).thenReturn(Mockito.mock(Invoice.class));
  Mockito.when(invoiceSqlDao.inTransaction(Mockito.<Transaction<Void,InvoiceSqlDao>>any())).thenAnswer(new Answer(){
    @Override public Object answer(    final InvocationOnMock invocation){
      final Object[] args=invocation.getArguments();
      try {
        ((Transaction<Void,InvoiceSqlDao>)args[0]).inTransaction(invoiceSqlDao,null);
      }
 catch (      Exception e) {
        Assert.fail(e.toString());
      }
      return null;
    }
  }
);
  final NextBillingDatePoster poster=Mockito.mock(NextBillingDatePoster.class);
  final TagDefinitionDao tagDefinitionDao=new MockTagDefinitionDao();
  final TagDao tagDao=new MockTagDao();
  dao=new AuditedInvoiceDao(idbi,poster,Mockito.mock(Clock.class),Mockito.mock(Bus.class));
}
