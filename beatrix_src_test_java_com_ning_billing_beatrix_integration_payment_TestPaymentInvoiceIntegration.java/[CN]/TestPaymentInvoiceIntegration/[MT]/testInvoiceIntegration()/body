{
  final Account account=testHelper.createTestCreditCardAccount();
  final Invoice invoice=testHelper.createTestInvoice(account);
  await().atMost(1,MINUTES).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<PaymentInfoEvent> processedPayments=paymentInfoReceiver.getProcessedPayments();
      List<PaymentErrorEvent> errors=paymentInfoReceiver.getErrors();
      return processedPayments.size() == 1 || errors.size() == 1;
    }
  }
);
  assertFalse(paymentInfoReceiver.getProcessedPayments().isEmpty());
  assertTrue(paymentInfoReceiver.getErrors().isEmpty());
  List<PaymentInfoEvent> payments=paymentInfoReceiver.getProcessedPayments();
  PaymentAttempt paymentAttempt=paymentApi.getPaymentAttemptForPaymentId(payments.get(0).getId());
  Assert.assertNotNull(paymentAttempt);
  Invoice invoiceForPayment=invoicePaymentApi.getInvoiceForPaymentAttemptId(paymentAttempt.getId());
  Assert.assertNotNull(invoiceForPayment);
  Assert.assertEquals(invoiceForPayment.getId(),invoice.getId());
  Assert.assertEquals(invoiceForPayment.getAccountId(),account.getId());
  DateTime invoicePaymentAttempt=invoiceForPayment.getLastPaymentAttempt();
  DateTime correctedDate=invoicePaymentAttempt.minus(invoicePaymentAttempt.millisOfSecond().get());
  Assert.assertTrue(correctedDate.isEqual(paymentAttempt.getPaymentAttemptDate()));
  Assert.assertEquals(invoiceForPayment.getBalance().floatValue(),new BigDecimal("0").floatValue());
  Assert.assertEquals(invoiceForPayment.getAmountPaid().floatValue(),invoice.getAmountPaid().floatValue());
}
