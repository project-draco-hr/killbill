{
  final Account account=createTestAccount();
  accountDao.create(account);
  AccountData accountData=new AccountData(){
    @Override public String getExternalKey(){
      return account.getExternalKey();
    }
    @Override public String getName(){
      return "Jane Doe";
    }
    @Override public int getFirstNameLength(){
      return 4;
    }
    @Override public String getEmail(){
      return account.getEmail();
    }
    @Override public String getPhone(){
      return account.getPhone();
    }
    @Override public int getBillCycleDay(){
      return account.getBillCycleDay();
    }
    @Override public Currency getCurrency(){
      return account.getCurrency();
    }
    @Override public String getPaymentProviderName(){
      return account.getPaymentProviderName();
    }
    @Override public DateTimeZone getTimeZone(){
      return DateTimeZone.forID("Australia/Darwin");
    }
    @Override public String getLocale(){
      return "FR-CA";
    }
    @Override public DateTime getNextBillingDate(){
      return null;
    }
  }
;
  Account updatedAccount=new DefaultAccount(account.getId(),accountData);
  accountDao.update(updatedAccount);
  Account savedAccount=accountDao.getAccountByKey(account.getExternalKey());
  assertNotNull(savedAccount);
  assertEquals(savedAccount.getName(),updatedAccount.getName());
  assertEquals(savedAccount.getEmail(),updatedAccount.getEmail());
  assertEquals(savedAccount.getPhone(),updatedAccount.getPhone());
  assertEquals(savedAccount.getPaymentProviderName(),updatedAccount.getPaymentProviderName());
  assertEquals(savedAccount.getBillCycleDay(),updatedAccount.getBillCycleDay());
  assertEquals(savedAccount.getFirstNameLength(),updatedAccount.getFirstNameLength());
  assertEquals(savedAccount.getTimeZone(),updatedAccount.getTimeZone());
  assertEquals(savedAccount.getLocale(),updatedAccount.getLocale());
}
