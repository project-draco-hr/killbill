{
  final InternalTenantContext context=internalCallContextFactory.createInternalTenantContext(tenantContext);
  try {
    final SubscriptionBase subscription=subscriptionInternalApi.getSubscriptionFromId(uuid,context);
    final SubscriptionBaseBundle bundle=subscriptionInternalApi.getBundleFromId(subscription.getBundleId(),context);
    final Account account=accountApi.getAccountById(bundle.getAccountId(),context);
    final InternalTenantContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalTenantContext(account.getId(),tenantContext);
    final LocalDate entitlementEffectiveEndDate=getEffectiveEndDate(bundle.getAccountId(),subscription,account.getTimeZone(),contextWithValidAccountRecordId);
    final EntitlementState entitlementState=getStateForEntitlement(entitlementEffectiveEndDate,subscription,account.getTimeZone(),contextWithValidAccountRecordId);
    return new DefaultEntitlement(dateHelper,subscription,bundle.getAccountId(),bundle.getExternalKey(),entitlementState,entitlementEffectiveEndDate,account.getTimeZone(),accountApi,this,subscriptionInternalApi,internalCallContextFactory,blockingStateDao,clock,checker,notificationQueueService,entitlementUtils);
  }
 catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
catch (  AccountApiException e) {
    throw new EntitlementApiException(e);
  }
}
