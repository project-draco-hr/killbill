{
  final EventsStream eventsStreamForBaseSubscription=eventsStreamBuilder.buildForBaseSubscription(bundleId,callContext);
  if (!eventsStreamForBaseSubscription.isEntitlementActive()) {
    throw new EntitlementApiException(ErrorCode.SUB_GET_NO_SUCH_BASE_SUBSCRIPTION,bundleId);
  }
  if (eventsStreamForBaseSubscription.getCurrentBlockingAggregator().isBlockChange()) {
    throw new EntitlementApiException(new BlockingApiException(ErrorCode.BLOCK_BLOCKED_ACTION,BlockingChecker.ACTION_CHANGE,BlockingChecker.TYPE_SUBSCRIPTION,eventsStreamForBaseSubscription.getSubscription().getId().toString()));
  }
  final DateTime requestedDate=dateHelper.fromLocalDateAndReferenceTime(effectiveDate,eventsStreamForBaseSubscription.getSubscription().getStartDate(),eventsStreamForBaseSubscription.getInternalTenantContext());
  try {
    final InternalCallContext context=internalCallContextFactory.createInternalCallContext(callContext);
    final SubscriptionBase subscription=subscriptionInternalApi.createSubscription(bundleId,planPhaseSpecifier,requestedDate,context);
    return new DefaultEntitlement(dateHelper,subscription,eventsStreamForBaseSubscription.getAccount().getId(),eventsStreamForBaseSubscription.getBundle().getExternalKey(),EntitlementState.ACTIVE,null,eventsStreamForBaseSubscription.getAccount().getTimeZone(),accountApi,this,subscriptionInternalApi,internalCallContextFactory,blockingStateDao,clock,checker,notificationQueueService,entitlementUtils);
  }
 catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
}
