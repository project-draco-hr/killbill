{
  final InternalCallContext context=internalCallContextFactory.createInternalCallContext(callContext);
  try {
    final SubscriptionBaseBundle bundle=subscriptionInternalApi.getBundleFromId(bundleId,context);
    final SubscriptionBase baseSubscription=subscriptionInternalApi.getBaseSubscription(bundleId,context);
    final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(bundle.getAccountId(),callContext);
    final BlockingState currentBaseState=blockingStateDao.getBlockingStateForService(baseSubscription.getId(),EntitlementService.ENTITLEMENT_SERVICE_NAME,contextWithValidAccountRecordId);
    final Account account=accountApi.getAccountById(bundle.getAccountId(),context);
    final LocalDate baseEntitlementEffectiveEndDate=getEffectiveEndDate(bundle.getAccountId(),baseSubscription,account.getTimeZone(),contextWithValidAccountRecordId);
    final EntitlementState baseEntitlementState=getStateForEntitlement(baseEntitlementEffectiveEndDate,baseSubscription,account.getTimeZone(),contextWithValidAccountRecordId);
    if (baseSubscription.getCategory() != ProductCategory.BASE || baseEntitlementState != EntitlementState.ACTIVE) {
      throw new EntitlementApiException(ErrorCode.SUB_GET_NO_SUCH_BASE_SUBSCRIPTION,baseSubscription.getBundleId());
    }
    final BlockingAggregator blocking=checker.getBlockedStatus(baseSubscription,contextWithValidAccountRecordId);
    if (blocking.isBlockChange()) {
      throw new EntitlementApiException(new BlockingApiException(ErrorCode.BLOCK_BLOCKED_ACTION,BlockingChecker.ACTION_CHANGE,BlockingChecker.TYPE_SUBSCRIPTION,baseSubscription.getId().toString()));
    }
    final DateTime requestedDate=dateHelper.fromLocalDateAndReferenceTime(effectiveDate,baseSubscription.getStartDate(),contextWithValidAccountRecordId);
    final SubscriptionBase subscription=subscriptionInternalApi.createSubscription(baseSubscription.getBundleId(),planPhaseSpecifier,requestedDate,context);
    return new DefaultEntitlement(dateHelper,subscription,bundle.getAccountId(),bundle.getExternalKey(),baseEntitlementState,null,account.getTimeZone(),this,internalCallContextFactory,blockingStateDao,clock,checker);
  }
 catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
catch (  BlockingApiException e) {
    throw new EntitlementApiException(e);
  }
catch (  AccountApiException e) {
    throw new EntitlementApiException(e);
  }
}
