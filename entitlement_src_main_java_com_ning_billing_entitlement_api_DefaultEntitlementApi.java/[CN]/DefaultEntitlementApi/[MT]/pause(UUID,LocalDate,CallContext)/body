{
  try {
    final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(bundleId,ObjectType.BUNDLE,context);
    final BlockingState currentState=blockingStateDao.getBlockingStateForService(bundleId,EntitlementService.ENTITLEMENT_SERVICE_NAME,contextWithValidAccountRecordId);
    if (currentState != null && currentState.getStateName().equals(ENT_STATE_BLOCKED)) {
      throw new EntitlementApiException(ErrorCode.ENT_ALREADY_BLOCKED,bundleId);
    }
    final SubscriptionBase baseSubscription=subscriptionInternalApi.getBaseSubscription(bundleId,contextWithValidAccountRecordId);
    final DateTime effectiveDate=dateHelper.fromLocalDateAndReferenceTime(localEffectiveDate,baseSubscription.getStartDate(),contextWithValidAccountRecordId);
    blockingStateDao.setBlockingState(new DefaultBlockingState(bundleId,BlockingStateType.BUNDLE,ENT_STATE_BLOCKED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,true,effectiveDate),clock,contextWithValidAccountRecordId);
  }
 catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
}
