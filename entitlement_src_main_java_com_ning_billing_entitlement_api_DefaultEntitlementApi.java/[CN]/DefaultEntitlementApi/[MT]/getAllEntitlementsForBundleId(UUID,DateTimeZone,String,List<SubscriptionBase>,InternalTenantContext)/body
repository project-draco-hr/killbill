{
  final EntitlementApi thisEntitlementApi=this;
  return ImmutableList.<Entitlement>copyOf(Collections2.transform(subscriptions,new Function<SubscriptionBase,Entitlement>(){
    @Nullable @Override public Entitlement apply(    @Nullable final SubscriptionBase input){
      final LocalDate effectiveEndDate=getEffectiveEndDate(accountId,input,accountTimeZone,context);
      EntitlementState entitlementState;
      try {
        entitlementState=getStateForEntitlement(effectiveEndDate,input,accountTimeZone,context);
      }
 catch (      EntitlementApiException e) {
        log.warn("Failed to extract blocking state for subscription " + input.getId().toString());
        entitlementState=EntitlementState.CANCELLED;
      }
      return new DefaultEntitlement(dateHelper,input,accountId,externalKey,entitlementState,effectiveEndDate,accountTimeZone,accountApi,thisEntitlementApi,subscriptionInternalApi,internalCallContextFactory,blockingStateDao,clock,checker,notificationQueueService,entitlementUtils);
    }
  }
));
}
