{
  try {
    final Account account=accountApi.getAccountById(accountId,context);
    final List<SubscriptionBase> subscriptions=subscriptionInternalApi.getSubscriptionsForBundle(bundleId,context);
    final EntitlementApi thisEntitlementApi=this;
    return ImmutableList.<Entitlement>copyOf(Collections2.transform(subscriptions,new Function<SubscriptionBase,Entitlement>(){
      @Nullable @Override public Entitlement apply(      @Nullable final SubscriptionBase input){
        final LocalDate effectiveEndDate=getEffectiveEndDate(accountId,input,account.getTimeZone(),context);
        EntitlementState entitlementState;
        try {
          entitlementState=getStateForEntitlement(effectiveEndDate,input,account.getTimeZone(),context);
        }
 catch (        EntitlementApiException e) {
          log.warn("Failed to extract blocking state for subscription " + input.getId().toString());
          entitlementState=EntitlementState.CANCELLED;
        }
        return new DefaultEntitlement(dateHelper,input,accountId,externalKey,entitlementState,effectiveEndDate,account.getTimeZone(),thisEntitlementApi,internalCallContextFactory,blockingStateDao,clock,checker);
      }
    }
));
  }
 catch (  AccountApiException e) {
    throw new EntitlementApiException(e);
  }
}
