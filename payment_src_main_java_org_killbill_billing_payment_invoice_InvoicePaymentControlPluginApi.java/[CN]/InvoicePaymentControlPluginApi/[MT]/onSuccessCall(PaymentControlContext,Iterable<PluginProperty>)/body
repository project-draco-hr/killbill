{
  final TransactionType transactionType=paymentControlContext.getTransactionType();
  Preconditions.checkArgument(transactionType == TransactionType.PURCHASE || transactionType == TransactionType.REFUND || transactionType == TransactionType.CHARGEBACK);
  final InternalCallContext internalContext=internalCallContextFactory.createInternalCallContext(paymentControlContext.getAccountId(),paymentControlContext);
  try {
    final InvoicePayment existingInvoicePayment;
switch (transactionType) {
case PURCHASE:
      final UUID invoiceId=getInvoiceId(pluginProperties);
    existingInvoicePayment=invoiceApi.getInvoicePaymentForAttempt(paymentControlContext.getPaymentId(),internalContext);
  if (existingInvoicePayment != null && existingInvoicePayment.isSuccess()) {
    log.info("onSuccessCall was already completed for payment purchase: " + paymentControlContext.getPaymentId());
  }
 else {
    final BigDecimal invoicePaymentAmount;
    if (paymentControlContext.getCurrency() == paymentControlContext.getProcessedCurrency()) {
      invoicePaymentAmount=paymentControlContext.getProcessedAmount();
    }
 else {
      log.warn("Currency {} of invoice payment {} doesn't match invoice currency {}, assuming it is a full payment",paymentControlContext.getProcessedCurrency(),paymentControlContext.getPaymentId(),paymentControlContext.getCurrency());
      invoicePaymentAmount=paymentControlContext.getAmount();
    }
    log.debug("Notifying invoice of successful payment: id={}, amount={}, currency={}, invoiceId={}",paymentControlContext.getPaymentId(),invoicePaymentAmount,paymentControlContext.getCurrency(),invoiceId);
    invoiceApi.notifyOfPayment(invoiceId,invoicePaymentAmount,paymentControlContext.getCurrency(),paymentControlContext.getProcessedCurrency(),paymentControlContext.getPaymentId(),paymentControlContext.getCreatedDate(),true,internalContext);
  }
break;
case REFUND:
existingInvoicePayment=invoiceApi.getInvoicePaymentForRefund(paymentControlContext.getPaymentId(),internalContext);
if (existingInvoicePayment != null) {
log.info("onSuccessCall was already completed for payment refund: " + paymentControlContext.getPaymentId());
}
 else {
final Map<UUID,BigDecimal> idWithAmount=extractIdsWithAmountFromProperties(pluginProperties);
final PluginProperty prop=getPluginProperty(pluginProperties,PROP_IPCD_REFUND_WITH_ADJUSTMENTS);
final boolean isAdjusted=prop != null ? Boolean.valueOf((String)prop.getValue()) : false;
invoiceApi.createRefund(paymentControlContext.getPaymentId(),paymentControlContext.getAmount(),isAdjusted,idWithAmount,paymentControlContext.getTransactionExternalKey(),internalContext);
}
break;
case CHARGEBACK:
existingInvoicePayment=invoiceApi.getInvoicePaymentForChargeback(paymentControlContext.getPaymentId(),internalContext);
if (existingInvoicePayment != null) {
log.info("onSuccessCall was already completed for payment chargeback: " + paymentControlContext.getPaymentId());
}
 else {
invoiceApi.createChargeback(paymentControlContext.getPaymentId(),paymentControlContext.getProcessedAmount(),paymentControlContext.getProcessedCurrency(),internalContext);
}
break;
default :
throw new IllegalStateException("Unexpected transactionType " + transactionType);
}
}
 catch (final InvoiceApiException e) {
log.error("InvoicePaymentControlPluginApi onSuccessCall failed for attemptId = " + paymentControlContext.getAttemptPaymentId() + ", transactionType  = "+ transactionType,e);
}
return new DefaultOnSuccessPaymentControlResult();
}
