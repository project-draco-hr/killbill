{
  try {
    final UUID invoiceId=getInvoiceId(paymentControlPluginContext);
    final Invoice invoice=rebalanceAndGetInvoice(invoiceId,internalContext);
    final BigDecimal requestedAmount=validateAndComputePaymentAmount(invoice,paymentControlPluginContext.getAmount(),paymentControlPluginContext.isApiPayment());
    final boolean isAborted=requestedAmount.compareTo(BigDecimal.ZERO) == 0;
    if (!isAborted && insert_AUTO_PAY_OFF_ifRequired(paymentControlPluginContext,requestedAmount)) {
      return new DefaultPriorPaymentRoutingResult(true);
    }
    if (paymentControlPluginContext.isApiPayment() && isAborted) {
      throw new PaymentRoutingApiException("Payment for invoice " + invoice.getId() + " aborted : invoice balance is = "+ invoice.getBalance()+ ", requested payment amount is = "+ paymentControlPluginContext.getAmount());
    }
 else {
      return new DefaultPriorPaymentRoutingResult(isAborted,requestedAmount);
    }
  }
 catch (  final InvoiceApiException e) {
    throw new PaymentRoutingApiException(e);
  }
catch (  final IllegalArgumentException e) {
    throw new PaymentRoutingApiException(e);
  }
}
