{
  final Map<UUID,BigDecimal> idWithAmount=extractIdsWithAmountFromProperties(pluginProperties);
  if ((paymentControlPluginContext.getAmount() == null || paymentControlPluginContext.getAmount().compareTo(BigDecimal.ZERO) == 0) && idWithAmount.size() == 0) {
    throw new PaymentControlApiException("Abort refund call: ",new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,String.format("Refund for payment, key = %s, aborted: requested refund amount is = %s",paymentControlPluginContext.getPaymentExternalKey(),paymentControlPluginContext.getAmount())));
  }
  final PaymentModelDao payment=paymentDao.getPayment(paymentControlPluginContext.getPaymentId(),internalContext);
  if (payment == null) {
    throw new PaymentControlApiException("Unexpected null payment");
  }
  final BigDecimal amountToBeRefunded=computeRefundAmount(payment.getId(),paymentControlPluginContext.getAmount(),idWithAmount,internalContext);
  final boolean isAborted=amountToBeRefunded.compareTo(BigDecimal.ZERO) == 0;
  if (paymentControlPluginContext.isApiPayment() && isAborted) {
    throw new PaymentControlApiException("Abort refund call: ",new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,String.format("Refund for payment %s aborted : invoice item sum amount is %s, requested refund amount is = %s",payment.getId(),amountToBeRefunded,paymentControlPluginContext.getAmount())));
  }
}
