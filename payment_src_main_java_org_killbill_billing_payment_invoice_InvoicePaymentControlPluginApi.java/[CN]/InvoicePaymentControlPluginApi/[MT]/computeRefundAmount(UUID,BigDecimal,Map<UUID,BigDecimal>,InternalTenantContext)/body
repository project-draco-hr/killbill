{
  if (specifiedRefundAmount != null) {
    if (specifiedRefundAmount.compareTo(BigDecimal.ZERO) <= 0) {
      throw new PaymentControlApiException("Failed to compute refund:",new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,"You need to specify positive a refund amount"));
    }
    return specifiedRefundAmount;
  }
  try {
    final List<InvoiceItem> items=invoiceApi.getInvoiceForPaymentId(paymentId,context).getInvoiceItems();
    BigDecimal amountFromItems=BigDecimal.ZERO;
    for (    final UUID itemId : invoiceItemIdsWithAmounts.keySet()) {
      final BigDecimal specifiedItemAmount=invoiceItemIdsWithAmounts.get(itemId);
      final BigDecimal itemAmount=getAmountFromItem(items,itemId);
      if (specifiedItemAmount != null && (specifiedItemAmount.compareTo(BigDecimal.ZERO) <= 0 || specifiedItemAmount.compareTo(itemAmount) > 0)) {
        throw new PaymentControlApiException("Failed to compute refund:",new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,"You need to specify valid invoice item amount "));
      }
      amountFromItems=amountFromItems.add(Objects.firstNonNull(specifiedItemAmount,itemAmount));
    }
    return amountFromItems;
  }
 catch (  final InvoiceApiException e) {
    throw new PaymentControlApiException(e);
  }
}
