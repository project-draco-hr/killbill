{
  if (subscriptionId == null) {
    log.error("Failed handling entitlement change.",new InvoiceApiException(ErrorCode.INVOICE_INVALID_TRANSITION));
    return;
  }
  UUID accountId=entitlementBillingApi.getAccountIdFromSubscriptionId(subscriptionId);
  if (accountId == null) {
    log.error("Failed handling entitlement change.",new InvoiceApiException(ErrorCode.INVOICE_NO_ACCOUNT_ID_FOR_SUBSCRIPTION_ID,subscriptionId.toString()));
    return;
  }
  GlobalLock lock=globalLocker.lockWithNumberOfTries("invoiceProcessor:" + accountId.toString(),1);
  if (lock == null) {
    log.warn("Conflicting lock detected from InvoiceListener on account " + accountId.toString());
  }
 else {
    log.info("Locked " + accountId.toString());
    Account account=accountUserApi.getAccountById(accountId);
    if (account == null) {
      log.error("Failed handling entitlement change.",new InvoiceApiException(ErrorCode.INVOICE_ACCOUNT_ID_INVALID,accountId.toString()));
      return;
    }
    SortedSet<BillingEvent> events=entitlementBillingApi.getBillingEventsForAccount(accountId);
    BillingEventSet billingEvents=new BillingEventSet(events);
    Currency targetCurrency=account.getCurrency();
    List<InvoiceItem> items=invoiceDao.getInvoiceItemsByAccount(accountId);
    InvoiceItemList invoiceItemList=new InvoiceItemList(items);
    Invoice invoice=generator.generateInvoice(accountId,billingEvents,invoiceItemList,targetDate,targetCurrency);
    if (invoice == null) {
      log.info("Generated null invoice.");
      outputDebugData(events,invoiceItemList);
    }
 else {
      log.info("Generated invoice {} with {} items.",invoice.getId().toString(),invoice.getNumberOfItems());
      if (VERBOSE_OUTPUT) {
        log.info("New items");
        for (        InvoiceItem item : invoice.getInvoiceItems()) {
          log.info(item.toString());
        }
      }
      outputDebugData(events,invoiceItemList);
      if (invoice.getNumberOfItems() > 0) {
        invoiceDao.create(invoice);
      }
    }
    lock.release();
  }
}
