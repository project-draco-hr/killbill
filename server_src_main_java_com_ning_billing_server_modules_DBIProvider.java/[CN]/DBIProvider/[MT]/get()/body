{
  final BoneCPConfig dbConfig=new BoneCPConfig();
  dbConfig.setJdbcUrl(config.getJdbcUrl());
  dbConfig.setUsername(config.getUsername());
  dbConfig.setPassword(config.getPassword());
  dbConfig.setMinConnectionsPerPartition(config.getMinIdle());
  dbConfig.setMaxConnectionsPerPartition(config.getMaxActive());
  dbConfig.setConnectionTimeout(config.getConnectionTimeout().getPeriod(),config.getConnectionTimeout().getUnit());
  dbConfig.setIdleMaxAge(config.getIdleMaxAge().getPeriod(),config.getIdleMaxAge().getUnit());
  dbConfig.setMaxConnectionAge(config.getMaxConnectionAge().getPeriod(),config.getMaxConnectionAge().getUnit());
  dbConfig.setIdleConnectionTestPeriod(config.getIdleConnectionTestPeriod().getPeriod(),config.getIdleConnectionTestPeriod().getUnit());
  dbConfig.setPartitionCount(1);
  dbConfig.setDefaultTransactionIsolation("READ_COMMITTED");
  dbConfig.setDisableJMX(false);
  final BoneCPDataSource ds=new BoneCPDataSource(dbConfig);
  final DBI dbi=new DBI(ds);
  dbi.registerArgumentFactory(new UUIDArgumentFactory());
  dbi.registerArgumentFactory(new DateTimeZoneArgumentFactory());
  dbi.registerArgumentFactory(new DateTimeArgumentFactory());
  dbi.registerArgumentFactory(new LocalDateArgumentFactory());
  dbi.registerArgumentFactory(new EnumArgumentFactory());
  dbi.registerMapper(new UuidMapper());
  if (sqlLog != null) {
    dbi.setSQLLog(sqlLog);
  }
  if (config.getTransactionHandlerClass() != null) {
    logger.info("Using " + config.getTransactionHandlerClass() + " as a transaction handler class");
    try {
      dbi.setTransactionHandler((TransactionHandler)Class.forName(config.getTransactionHandlerClass()).newInstance());
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  final BasicSqlNameStrategy basicSqlNameStrategy=new BasicSqlNameStrategy();
  final TimingCollector timingCollector=new InstrumentedTimingCollector(metricsRegistry,basicSqlNameStrategy,TimeUnit.MILLISECONDS,TimeUnit.SECONDS);
  dbi.setTimingCollector(timingCollector);
  return dbi;
}
