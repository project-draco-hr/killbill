{
  final String definitionName=UUID.randomUUID().toString().substring(0,5);
  final String description=UUID.randomUUID().toString().substring(0,5);
  final UUID objectId=UUID.randomUUID();
  final ObjectType objectType=ObjectType.INVOICE_ITEM;
  Assert.assertEquals(eventsListener.getEvents().size(),0);
  Assert.assertEquals(eventsListener.getTagEvents().size(),0);
  final TagDefinition createdTagDefinition=tagDefinitionDao.create(definitionName,description,internalCallContext);
  Assert.assertEquals(createdTagDefinition.getName(),definitionName);
  Assert.assertEquals(createdTagDefinition.getDescription(),description);
  final Tag tag=createdTagDefinition.isControlTag() ? new DefaultControlTag(ControlTagType.getTypeFromId(createdTagDefinition.getId()),objectType,objectId,internalCallContext.getCreatedDate()) : new DescriptiveTag(createdTagDefinition.getId(),objectType,objectId,internalCallContext.getCreatedDate());
  tagDao.create(tag,internalCallContext);
  final List<Tag> foundTags=tagDao.getTags(objectId,objectType,internalCallContext);
  Assert.assertEquals(foundTags.size(),1);
  Assert.assertEquals(foundTags.get(0).getTagDefinitionId(),createdTagDefinition.getId());
  Assert.assertEquals(eventsListener.getEvents().size(),2);
  Assert.assertEquals(eventsListener.getTagEvents().size(),1);
  final TagInternalEvent tagFirstEventReceived=eventsListener.getTagEvents().get(0);
  Assert.assertEquals(eventsListener.getEvents().get(1),tagFirstEventReceived);
  Assert.assertEquals(tagFirstEventReceived.getObjectId(),objectId);
  Assert.assertEquals(tagFirstEventReceived.getObjectType(),objectType);
  Assert.assertEquals(tagFirstEventReceived.getTagDefinition().getName(),createdTagDefinition.getName());
  Assert.assertEquals(tagFirstEventReceived.getTagDefinition().getDescription(),createdTagDefinition.getDescription());
  Assert.assertEquals(tagFirstEventReceived.getBusEventType(),BusInternalEvent.BusInternalEventType.USER_TAG_CREATION);
  Assert.assertEquals(tagFirstEventReceived.getUserToken(),internalCallContext.getUserToken());
  tagDao.deleteTag(objectId,objectType,createdTagDefinition.getId(),internalCallContext);
  Assert.assertEquals(tagDao.getTags(objectId,objectType,internalCallContext).size(),0);
  Assert.assertEquals(eventsListener.getEvents().size(),3);
  Assert.assertEquals(eventsListener.getTagEvents().size(),2);
  final TagInternalEvent tagSecondEventReceived=eventsListener.getTagEvents().get(1);
  Assert.assertEquals(eventsListener.getEvents().get(2),tagSecondEventReceived);
  Assert.assertEquals(tagSecondEventReceived.getObjectId(),objectId);
  Assert.assertEquals(tagSecondEventReceived.getObjectType(),objectType);
  Assert.assertEquals(tagSecondEventReceived.getTagDefinition().getName(),createdTagDefinition.getName());
  Assert.assertEquals(tagSecondEventReceived.getTagDefinition().getDescription(),createdTagDefinition.getDescription());
  Assert.assertEquals(tagSecondEventReceived.getBusEventType(),BusInternalEvent.BusInternalEventType.USER_TAG_DELETION);
  Assert.assertEquals(tagSecondEventReceived.getUserToken(),internalCallContext.getUserToken());
}
