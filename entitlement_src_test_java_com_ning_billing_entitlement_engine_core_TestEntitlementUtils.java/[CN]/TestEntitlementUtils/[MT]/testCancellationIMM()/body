{
  final DateTime cancellationDateTime=clock.getUTCNow();
  final LocalDate cancellationDate=clock.getUTCToday();
  testListener.pushExpectedEvents(NextEvent.CANCEL,NextEvent.BLOCK,NextEvent.CANCEL,NextEvent.BLOCK);
  final DefaultEntitlement cancelledBaseEntitlement=(DefaultEntitlement)baseEntitlement.cancelEntitlementWithPolicyOverrideBillingPolicy(EntitlementActionPolicy.IMMEDIATE,BillingActionPolicy.IMMEDIATE,callContext);
  assertTrue(testListener.isCompleted(DELAY));
  final DefaultEntitlement cancelledAddOnEntitlement=(DefaultEntitlement)entitlementApi.getEntitlementForId(addOnEntitlement.getId(),callContext);
  checkFutureBlockingStatesToCancel(cancelledBaseEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledAddOnEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledBaseEntitlement,cancelledAddOnEntitlement,null);
  checkActualBlockingStatesToCancel(cancelledBaseEntitlement,cancelledAddOnEntitlement,cancellationDateTime);
  checkBlockingStatesDAO(cancelledBaseEntitlement,cancelledAddOnEntitlement,cancellationDate,true);
  clock.addDays(30);
  assertTrue(testListener.isCompleted(DELAY));
  checkFutureBlockingStatesToCancel(cancelledBaseEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledAddOnEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledBaseEntitlement,cancelledAddOnEntitlement,null);
  checkActualBlockingStatesToCancel(cancelledBaseEntitlement,cancelledAddOnEntitlement,cancellationDateTime);
  checkBlockingStatesDAO(cancelledBaseEntitlement,cancelledAddOnEntitlement,cancellationDate,true);
}
