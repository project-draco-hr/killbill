{
  final DefaultEntitlement cancelledBaseEntitlement=(DefaultEntitlement)baseEntitlement.cancelEntitlementWithPolicyOverrideBillingPolicy(EntitlementActionPolicy.END_OF_TERM,BillingActionPolicy.END_OF_TERM,callContext);
  assertListenerStatus();
  checkFutureBlockingStatesToCancel(addOnEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledBaseEntitlement,addOnEntitlement,baseEffectiveEOTCancellationOrChangeDateTime);
  checkActualBlockingStatesToCancel(cancelledBaseEntitlement,addOnEntitlement,baseEffectiveEOTCancellationOrChangeDateTime,false);
  checkBlockingStatesDAO(baseEntitlement,addOnEntitlement,baseEffectiveCancellationOrChangeDate,true);
  testListener.pushExpectedEvents(NextEvent.CANCEL,NextEvent.BLOCK,NextEvent.CANCEL,NextEvent.BLOCK);
  clock.addDays(30);
  assertListenerStatus();
  final DefaultEntitlement cancelledAddOnEntitlement=(DefaultEntitlement)entitlementApi.getEntitlementForId(addOnEntitlement.getId(),callContext);
  checkFutureBlockingStatesToCancel(cancelledBaseEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledAddOnEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledBaseEntitlement,cancelledAddOnEntitlement,null);
  checkActualBlockingStatesToCancel(cancelledBaseEntitlement,cancelledAddOnEntitlement,baseEffectiveEOTCancellationOrChangeDateTime,false);
  checkBlockingStatesDAO(cancelledBaseEntitlement,cancelledAddOnEntitlement,baseEffectiveCancellationOrChangeDate,true);
}
