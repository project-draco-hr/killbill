{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final TagDefinition tagDefinition=getTagDefinitionFromTransaction(tagDefinitionId,entitySqlDaoWrapperFactory,context);
      final TagSqlDao transactional=entitySqlDaoWrapperFactory.become(TagSqlDao.class);
      final List<Tag> tags=transactional.getTagsForObject(objectId,objectType,context);
      Tag tag=null;
      for (      Tag cur : tags) {
        if (cur.getTagDefinitionId().equals(tagDefinitionId)) {
          tag=cur;
          break;
        }
      }
      if (tag == null) {
        throw new TagApiException(ErrorCode.TAG_DOES_NOT_EXIST,tagDefinition.getName());
      }
      transactional.deleteById(tag.getId(),context);
      final TagInternalEvent tagEvent;
      if (tagDefinition.isControlTag()) {
        tagEvent=tagEventBuilder.newControlTagDeletionEvent(tag.getId(),objectId,objectType,tagDefinition,context);
      }
 else {
        tagEvent=tagEventBuilder.newUserTagDeletionEvent(tag.getId(),objectId,objectType,tagDefinition,context);
      }
      try {
        bus.postFromTransaction(tagEvent,tagSqlDao,context);
      }
 catch (      InternalBus.EventBusException e) {
        log.warn("Failed to post tag deletion event for tag " + tag.getId().toString(),e);
      }
      return null;
    }
  }
);
}
