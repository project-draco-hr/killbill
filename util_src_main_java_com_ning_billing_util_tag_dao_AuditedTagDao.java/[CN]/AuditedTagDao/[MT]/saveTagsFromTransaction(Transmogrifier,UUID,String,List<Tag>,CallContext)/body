{
  TagSqlDao tagSqlDao=dao.become(TagSqlDao.class);
  List<Tag> existingTags=tagSqlDao.load(objectId.toString(),objectType);
  Iterator<Tag> tagIterator=tags.iterator();
  while (tagIterator.hasNext()) {
    Tag tag=tagIterator.next();
    Iterator<Tag> existingTagIterator=existingTags.iterator();
    while (existingTagIterator.hasNext()) {
      Tag existingTag=existingTagIterator.next();
      if (tag.getTagDefinitionName().equals(existingTag.getTagDefinitionName())) {
        tagIterator.remove();
        existingTagIterator.remove();
      }
    }
  }
  tagSqlDao.batchInsertFromTransaction(objectId.toString(),objectType,tags,context);
  tagSqlDao.batchDeleteFromTransaction(objectId.toString(),objectType,existingTags,context);
  List<String> historyIdsForInsert=getIdList(tags.size());
  tagSqlDao.batchInsertHistoryFromTransaction(objectId.toString(),objectType,historyIdsForInsert,tags,ChangeType.INSERT,context);
  List<String> historyIdsForDelete=getIdList(existingTags.size());
  tagSqlDao.batchInsertHistoryFromTransaction(objectId.toString(),objectType,historyIdsForDelete,existingTags,ChangeType.DELETE,context);
  AuditSqlDao auditSqlDao=tagSqlDao.become(AuditSqlDao.class);
  auditSqlDao.insertAuditFromTransaction("tag_history",historyIdsForInsert,ChangeType.INSERT,context);
  auditSqlDao.insertAuditFromTransaction("tag_history",historyIdsForDelete,ChangeType.DELETE,context);
}
