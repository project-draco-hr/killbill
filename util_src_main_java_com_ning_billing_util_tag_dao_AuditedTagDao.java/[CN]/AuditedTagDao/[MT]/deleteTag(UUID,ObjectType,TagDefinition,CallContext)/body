{
  tagSqlDao.inTransaction(new Transaction<Void,TagSqlDao>(){
    @Override public Void inTransaction(    final TagSqlDao tagSqlDao,    final TransactionStatus status) throws Exception {
      String tagName=tagDefinition.getName();
      Tag tag=tagSqlDao.findTag(tagName,objectId.toString(),objectType);
      if (tag == null) {
        throw new InvoiceApiException(ErrorCode.TAG_DOES_NOT_EXIST,tagName);
      }
      List<Tag> tagList=new ArrayList<Tag>();
      tagList.add(tag);
      List<Mapper<UUID,Long>> recordIds=tagSqlDao.getRecordIds(objectId.toString(),objectType);
      Map<UUID,Long> recordIdMap=convertToHistoryMap(recordIds);
      tagSqlDao.deleteFromTransaction(objectId.toString(),objectType,tagList,context);
      List<EntityHistory<Tag>> entityHistories=new ArrayList<EntityHistory<Tag>>();
      entityHistories.addAll(convertToHistory(tagList,recordIdMap,ChangeType.DELETE));
      Long maxHistoryRecordId=tagSqlDao.getMaxHistoryRecordId();
      tagSqlDao.addHistoryFromTransaction(objectId.toString(),objectType,entityHistories,context);
      List<Mapper<Long,Long>> historyRecordIds=tagSqlDao.getHistoryRecordIds(maxHistoryRecordId);
      Map<Long,Long> historyRecordIdMap=convertToAuditMap(historyRecordIds);
      List<EntityAudit> entityAudits=convertToAudits(entityHistories,historyRecordIdMap);
      tagSqlDao.insertAuditFromTransaction(entityAudits,context);
      return null;
    }
  }
);
}
