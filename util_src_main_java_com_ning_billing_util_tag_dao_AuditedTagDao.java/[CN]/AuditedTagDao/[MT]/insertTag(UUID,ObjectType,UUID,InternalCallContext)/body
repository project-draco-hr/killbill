{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final TagDefinition tagDefinition=getTagDefinitionFromTransaction(tagDefinitionId,entitySqlDaoWrapperFactory,context);
      final Tag tag=tagDefinition.isControlTag() ? new DefaultControlTag(ControlTagType.getTypeFromId(tagDefinition.getId()),objectType,objectId,clock.getUTCNow()) : new DescriptiveTag(tagDefinition.getId(),objectType,objectId,clock.getUTCNow());
      entitySqlDaoWrapperFactory.become(TagSqlDao.class).create(tag,context);
      final TagInternalEvent tagEvent;
      if (tagDefinition.isControlTag()) {
        tagEvent=tagEventBuilder.newControlTagCreationEvent(tag.getId(),objectId,objectType,tagDefinition,context);
      }
 else {
        tagEvent=tagEventBuilder.newUserTagCreationEvent(tag.getId(),objectId,objectType,tagDefinition,context);
      }
      try {
        bus.postFromTransaction(tagEvent,tagSqlDao,context);
      }
 catch (      InternalBus.EventBusException e) {
        log.warn("Failed to post tag creation event for tag " + tag.getId().toString(),e);
      }
      return null;
    }
  }
);
}
