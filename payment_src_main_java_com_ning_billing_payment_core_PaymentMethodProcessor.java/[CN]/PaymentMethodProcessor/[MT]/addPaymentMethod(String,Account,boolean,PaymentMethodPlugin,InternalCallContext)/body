{
  return new WithAccountLock<UUID>().processAccountWithLock(locker,account.getExternalKey(),new WithAccountLockCallback<UUID>(){
    @Override public UUID doOperation() throws PaymentApiException {
      PaymentMethod pm=null;
      PaymentPluginApi pluginApi=null;
      try {
        pluginApi=pluginRegistry.getServiceForName(paymentPluginServiceName);
        if (pluginApi == null) {
          throw new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_PLUGIN,paymentPluginServiceName);
        }
        pm=new DefaultPaymentMethod(account.getId(),paymentPluginServiceName,paymentMethodProps);
        pluginApi.addPaymentMethod(account.getId(),pm.getId(),paymentMethodProps,setDefault,context.toCallContext());
        final PaymentMethodModelDao pmModel=new PaymentMethodModelDao(pm.getId(),pm.getCreatedDate(),pm.getUpdatedDate(),pm.getAccountId(),pm.getPluginName(),pm.isActive());
        paymentDao.insertPaymentMethod(pmModel,context);
        if (setDefault) {
          accountInternalApi.updatePaymentMethod(account.getId(),pm.getId(),context);
        }
      }
 catch (      PaymentPluginApiException e) {
        throw new PaymentApiException(ErrorCode.PAYMENT_ADD_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
      }
catch (      AccountApiException e) {
        throw new PaymentApiException(e);
      }
      return pm.getId();
    }
  }
);
}
