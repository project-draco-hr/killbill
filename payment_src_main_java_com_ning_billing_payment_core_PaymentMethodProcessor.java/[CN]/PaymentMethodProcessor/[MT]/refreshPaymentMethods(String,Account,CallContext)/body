{
  return new WithAccountLock<List<PaymentMethod>>().processAccountWithLock(locker,account.getExternalKey(),new WithAccountLockCallback<List<PaymentMethod>>(){
    @Override public List<PaymentMethod> doOperation() throws PaymentApiException {
      final List<PaymentMethod> result=new LinkedList<PaymentMethod>();
      final PaymentPluginApi pluginApi;
      try {
        pluginApi=pluginRegistry.getPlugin(pluginName);
        final List<PaymentMethodPlugin> pluginPms=pluginApi.getPaymentMethodDetails(account.getExternalKey());
        if (pluginPms == null) {
          return result;
        }
        for (        final PaymentMethodPlugin cur : pluginPms) {
          final PaymentMethod input=new DefaultPaymentMethod(account.getId(),pluginName,cur);
          final PaymentMethodModelDao pmModel=new PaymentMethodModelDao(input.getId(),input.getAccountId(),input.getPluginName(),input.isActive(),input.getPluginDetail().getExternalPaymentMethodId());
          paymentDao.insertPaymentMethod(pmModel,context);
          result.add(input);
        }
      }
 catch (      PaymentPluginApiException e) {
        throw new PaymentApiException(ErrorCode.PAYMENT_REFRESH_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
      }
      return result;
    }
  }
);
}
