{
  final PaymentPluginApi pluginApi=getPaymentPluginApi(pluginName);
  final List<PaymentMethodInfoPlugin> pluginPms;
  try {
    pluginPms=pluginApi.getPaymentMethods(account.getId(),true,context.toCallContext());
    if (pluginPms == null) {
      log.warn("No payment methods defined on the account {} for plugin {}",account.getId(),pluginName);
      return ImmutableList.<PaymentMethod>of();
    }
  }
 catch (  PaymentPluginApiException e) {
    log.warn("Error refreshing payment methods for account " + account.getId() + " and plugin "+ pluginName,e);
    throw new PaymentApiException(ErrorCode.PAYMENT_REFRESH_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
  }
  return new WithAccountLock<List<PaymentMethod>>().processAccountWithLock(locker,account.getExternalKey(),new WithAccountLockCallback<List<PaymentMethod>>(){
    @Override public List<PaymentMethod> doOperation() throws PaymentApiException {
      UUID defaultPaymentMethodId=null;
      final List<PaymentMethodInfoPlugin> pluginPmsWithId=new ArrayList<PaymentMethodInfoPlugin>();
      final List<PaymentMethodModelDao> finalPaymentMethods=new ArrayList<PaymentMethodModelDao>();
      for (      final PaymentMethodInfoPlugin cur : pluginPms) {
        final UUID paymentMethodId=cur.getPaymentMethodId() != null ? cur.getPaymentMethodId() : UUID.randomUUID();
        final PaymentMethod input=new DefaultPaymentMethod(paymentMethodId,account.getId(),pluginName);
        final PaymentMethodModelDao pmModel=new PaymentMethodModelDao(input.getId(),input.getCreatedDate(),input.getUpdatedDate(),input.getAccountId(),input.getPluginName(),input.isActive());
        finalPaymentMethods.add(pmModel);
        pluginPmsWithId.add(new DefaultPaymentMethodInfoPlugin(cur,paymentMethodId));
        if (cur.isDefault()) {
          defaultPaymentMethodId=paymentMethodId;
        }
      }
      final List<PaymentMethodModelDao> refreshedPaymentMethods=paymentDao.refreshPaymentMethods(account.getId(),finalPaymentMethods,context);
      try {
        pluginApi.resetPaymentMethods(account.getId(),pluginPmsWithId);
      }
 catch (      PaymentPluginApiException e) {
        log.warn("Error resetting payment methods for account " + account.getId() + " and plugin "+ pluginName,e);
        throw new PaymentApiException(ErrorCode.PAYMENT_REFRESH_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
      }
      try {
        if (defaultPaymentMethodId != null) {
          accountInternalApi.updatePaymentMethod(account.getId(),defaultPaymentMethodId,context);
        }
 else {
          accountInternalApi.removePaymentMethod(account.getId(),context);
        }
      }
 catch (      AccountApiException e) {
        throw new PaymentApiException(e);
      }
      return ImmutableList.<PaymentMethod>copyOf(Collections2.transform(refreshedPaymentMethods,new Function<PaymentMethodModelDao,PaymentMethod>(){
        @Override public PaymentMethod apply(        final PaymentMethodModelDao input){
          return new DefaultPaymentMethod(input,null);
        }
      }
));
    }
  }
);
}
