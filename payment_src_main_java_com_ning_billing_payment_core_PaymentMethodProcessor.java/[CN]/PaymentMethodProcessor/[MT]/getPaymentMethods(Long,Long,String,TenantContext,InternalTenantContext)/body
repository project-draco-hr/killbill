{
  final PaymentPluginApi pluginApi=getPaymentPluginApi(pluginName);
  final Pagination<PaymentMethodModelDao> paymentMethodModelDaos=paymentDao.getPaymentMethods(pluginName,offset,limit,internalTenantContext);
  return new DefaultPagination<PaymentMethod>(paymentMethodModelDaos,limit,Iterators.<PaymentMethod>filter(Iterators.<PaymentMethodModelDao,PaymentMethod>transform(paymentMethodModelDaos.iterator(),new Function<PaymentMethodModelDao,PaymentMethod>(){
    @Override public PaymentMethod apply(    final PaymentMethodModelDao paymentMethodModelDao){
      PaymentMethodPlugin paymentMethodPlugin=null;
      try {
        paymentMethodPlugin=pluginApi.getPaymentMethodDetail(paymentMethodModelDao.getAccountId(),paymentMethodModelDao.getId(),tenantContext);
        if (paymentMethodPlugin.getKbPaymentMethodId() == null) {
          log.debug("Plugin {} returned a payment method without a kbPaymentMethodId",pluginName);
          paymentMethodPlugin=null;
        }
      }
 catch (      PaymentPluginApiException e) {
        log.warn("Unable to find payment method id " + paymentMethodModelDao.getId() + " in plugin "+ pluginName);
      }
      return new DefaultPaymentMethod(paymentMethodModelDao,paymentMethodPlugin);
    }
  }
),Predicates.<PaymentMethod>notNull()));
}
