{
  final PaymentPluginApi pluginApi=getPaymentPluginApi(pluginName);
  final Pagination<PaymentMethodPlugin> paymentMethods;
  try {
    paymentMethods=pluginApi.searchPaymentMethods(searchKey,offset,limit,buildTenantContext(internalTenantContext));
  }
 catch (  PaymentPluginApiException e) {
    throw new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_SEARCH_PAYMENT_METHODS,pluginName,searchKey);
  }
  return new DefaultPagination<PaymentMethod>(paymentMethods,limit,Iterators.<PaymentMethod>filter(Iterators.<PaymentMethodPlugin,PaymentMethod>transform(paymentMethods.iterator(),new Function<PaymentMethodPlugin,PaymentMethod>(){
    @Override public PaymentMethod apply(    final PaymentMethodPlugin paymentMethodPlugin){
      if (paymentMethodPlugin.getKbPaymentMethodId() == null) {
        log.debug("Plugin {} returned a payment method without a kbPaymentMethodId for searchKey {}",pluginName,searchKey);
        return null;
      }
      final PaymentMethodModelDao paymentMethodModelDao=paymentDao.getPaymentMethodIncludedDeleted(paymentMethodPlugin.getKbPaymentMethodId(),internalTenantContext);
      if (paymentMethodModelDao == null) {
        log.warn("Unable to find payment method id " + paymentMethodPlugin.getKbPaymentMethodId() + " present in plugin "+ pluginName);
        return null;
      }
      return new DefaultPaymentMethod(paymentMethodModelDao,paymentMethodPlugin);
    }
  }
),Predicates.<PaymentMethod>notNull()));
}
