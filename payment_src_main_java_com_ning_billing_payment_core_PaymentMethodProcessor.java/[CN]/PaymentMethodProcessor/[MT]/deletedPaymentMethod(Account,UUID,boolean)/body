{
  new WithAccountLock<Void>().processAccountWithLock(locker,account.getExternalKey(),new WithAccountLockCallback<Void>(){
    @Override public Void doOperation() throws PaymentApiException {
      final PaymentMethodModelDao paymentMethodModel=paymentDao.getPaymentMethod(paymentMethodId);
      if (paymentMethodModel == null) {
        throw new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId);
      }
      try {
        if (account.getPaymentMethodId().equals(paymentMethodId)) {
          if (!deleteDefaultPaymentMethodWithAutoPayOff) {
            throw new PaymentApiException(ErrorCode.PAYMENT_DEL_DEFAULT_PAYMENT_METHOD,account.getId());
          }
 else {
            final CallContext context=new DefaultCallContext("PaymentMethodProcessor",CallOrigin.INTERNAL,UserType.SYSTEM,null,clock);
            final boolean isAccountAutoPayOoff=isAccountAutoPayOff(account.getId());
            if (!isAccountAutoPayOoff) {
              log.info("Setting account {} to AUTO_PAY_OFF because of default payment method deletion");
              setAccountAutoPayOff(account.getId(),context);
            }
            accountUserApi.removePaymentMethod(account.getId(),context);
          }
        }
        final PaymentPluginApi pluginApi=getPluginApi(paymentMethodId,account.getId());
        pluginApi.deletePaymentMethod(account.getExternalKey(),paymentMethodModel.getExternalId());
        paymentDao.deletedPaymentMethod(paymentMethodId);
        return null;
      }
 catch (      PaymentPluginApiException e) {
        throw new PaymentApiException(ErrorCode.PAYMENT_DEL_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
      }
catch (      AccountApiException e) {
        throw new PaymentApiException(e);
      }
    }
  }
);
}
