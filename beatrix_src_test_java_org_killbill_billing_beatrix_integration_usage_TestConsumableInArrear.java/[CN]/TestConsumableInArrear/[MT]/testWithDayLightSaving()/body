{
  clock.setTime(new DateTime("2015-09-01T08:01:01.000Z"));
  final DateTimeZone tz=DateTimeZone.forID("America/Juneau");
  final AccountData accountData=new MockAccountBuilder().name(UUID.randomUUID().toString().substring(1,8)).firstNameLength(6).email(UUID.randomUUID().toString().substring(1,8)).phone(UUID.randomUUID().toString().substring(1,8)).migrated(false).isNotifiedForInvoices(false).externalKey(UUID.randomUUID().toString().substring(1,8)).billingCycleDayLocal(1).currency(Currency.USD).paymentMethodId(UUID.randomUUID()).timeZone(tz).build();
  final Account account=createAccountWithNonOsgiPaymentMethod(accountData);
  accountChecker.checkAccount(account.getId(),accountData,callContext);
  final DefaultEntitlement bpSubscription=createBaseEntitlementAndCheckForCompletion(account.getId(),"bundleKey","Shotgun",ProductCategory.BASE,BillingPeriod.ANNUAL,NextEvent.CREATE,NextEvent.INVOICE);
  subscriptionChecker.checkSubscriptionCreated(bpSubscription.getId(),internalCallContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2015,9,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  assertListenerStatus();
  final DefaultEntitlement aoSubscription=addAOEntitlementAndCheckForCompletion(bpSubscription.getBundleId(),"Bullets",ProductCategory.ADD_ON,BillingPeriod.NO_BILLING_PERIOD,NextEvent.CREATE,NextEvent.NULL_INVOICE);
  assertListenerStatus();
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.NULL_INVOICE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);
  clock.addDays(30);
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2015,10,1),new LocalDate(2016,10,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")));
  busHandler.pushExpectedEvent(NextEvent.NULL_INVOICE);
  clock.addMonths(1);
  assertListenerStatus();
  busHandler.pushExpectedEvent(NextEvent.NULL_INVOICE);
  clock.addMonths(1);
  assertListenerStatus();
  Thread.sleep(3000);
  final Integer countNotifications=dbi.withHandle(new HandleCallback<Integer>(){
    @Override public Integer withHandle(    final Handle handle) throws Exception {
      List<Map<String,Object>> res=handle.select("select count(*) as count from notifications_history;");
      final Integer count=Integer.valueOf(res.get(0).get("count").toString());
      return count;
    }
  }
);
  Assert.assertEquals(countNotifications.intValue(),4);
}
