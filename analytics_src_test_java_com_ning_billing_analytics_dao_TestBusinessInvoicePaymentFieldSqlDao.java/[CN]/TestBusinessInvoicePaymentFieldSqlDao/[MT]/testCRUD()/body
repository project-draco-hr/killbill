{
  final String paymentId=UUID.randomUUID().toString();
  final String name=UUID.randomUUID().toString().substring(0,30);
  final String value=UUID.randomUUID().toString();
  Assert.assertEquals(invoicePaymentFieldSqlDao.getFieldsForInvoicePayment(paymentId).size(),0);
  Assert.assertEquals(invoicePaymentFieldSqlDao.removeField(paymentId,name),0);
  Assert.assertEquals(invoicePaymentFieldSqlDao.addField(paymentId,name,value),1);
  final List<BusinessInvoicePaymentField> fieldsForInvoicePayment=invoicePaymentFieldSqlDao.getFieldsForInvoicePayment(paymentId);
  Assert.assertEquals(fieldsForInvoicePayment.size(),1);
  final BusinessInvoicePaymentField invoicePaymentField=fieldsForInvoicePayment.get(0);
  Assert.assertEquals(invoicePaymentField.getPaymentId().toString(),paymentId);
  Assert.assertEquals(invoicePaymentField.getName(),name);
  Assert.assertEquals(invoicePaymentField.getValue(),value);
  Assert.assertEquals(invoicePaymentFieldSqlDao.removeField(paymentId,name),1);
  Assert.assertEquals(invoicePaymentFieldSqlDao.getFieldsForInvoicePayment(paymentId).size(),0);
}
