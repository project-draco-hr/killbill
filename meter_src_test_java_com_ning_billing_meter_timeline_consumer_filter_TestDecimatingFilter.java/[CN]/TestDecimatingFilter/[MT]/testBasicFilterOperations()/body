{
  final List<Double> outputs=new ArrayList<Double>();
  final long millisStart=System.currentTimeMillis() - 2000 * 100;
  final DecimatingSampleFilter filter=new DecimatingSampleFilter(new DateTime(millisStart),new DateTime(millisStart + 2000 * 100),25,100,new TimeSpan("2s"),DecimationMode.PEAK_PICK,new TimeRangeSampleProcessor(){
    @Override public void processOneSample(    final DateTime time,    final SampleOpcode opcode,    final Object value){
      outputs.add((Double)value);
    }
  }
);
  for (int i=0; i < 100; i++) {
    final int index=(i % 8) + 1;
    double value=0;
    if (index <= 4) {
      value=10.0 * index;
    }
 else {
      value=(8 - (index - 1)) * 10;
    }
    filter.processOneSample(new DateTime(millisStart + 2000 * i),SampleOpcode.DOUBLE,value);
  }
  int index=0;
  for (  final Double value : outputs) {
    if ((index & 1) == 0) {
      Assert.assertEquals(value,40.0);
    }
 else {
      Assert.assertEquals(value,10.0);
    }
    index++;
  }
}
