{
  final boolean isActive=transition.getTransitionType() != SubscriptionBaseTransitionType.CANCEL;
  this.account=account;
  this.billCycleDayLocal=billCycleDayLocal;
  this.subscription=subscription;
  this.effectiveDate=transition.getEffectiveTransitionTime();
  final String planPhaseName=isActive ? transition.getNextPhase() : transition.getPreviousPhase();
  this.planPhase=(planPhaseName != null) ? catalog.findPhase(planPhaseName,transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  final String planName=isActive ? transition.getNextPlan() : transition.getPreviousPlan();
  this.plan=(planName != null) ? catalog.findPlan(planName,transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  final String nextPhaseName=transition.getNextPhase();
  final PlanPhase nextPhase=(nextPhaseName != null) ? catalog.findPhase(nextPhaseName,transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  final String prevPhaseName=transition.getPreviousPhase();
  final PlanPhase prevPhase=(prevPhaseName != null) ? catalog.findPhase(prevPhaseName,transition.getEffectiveTransitionTime(),transition.getSubscriptionStartDate()) : null;
  this.fixedPrice=getFixedPrice(nextPhase,currency);
  this.recurringPrice=getRecurringPrice(nextPhase,currency);
  this.currency=currency;
  this.description=transition.getTransitionType().toString();
  this.billingPeriod=getRecurringBillingPeriod(isActive ? nextPhase : prevPhase);
  this.type=transition.getTransitionType();
  this.totalOrdering=transition.getTotalOrdering();
  this.timeZone=account.getTimeZone();
  this.usages=initializeUsage(isActive);
}
