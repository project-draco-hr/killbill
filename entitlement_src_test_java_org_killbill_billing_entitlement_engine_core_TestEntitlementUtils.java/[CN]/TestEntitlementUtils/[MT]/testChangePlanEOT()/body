{
  final DefaultEntitlement changedBaseEntitlement=(DefaultEntitlement)baseEntitlement.changePlanWithDate("Assault-Rifle",BillingPeriod.MONTHLY,PriceListSet.DEFAULT_PRICELIST_NAME,null,new LocalDate(2013,10,7),ImmutableList.<PluginProperty>of(),callContext);
  assertListenerStatus();
  checkFutureBlockingStatesToCancel(addOnEntitlement,null,null);
  checkFutureBlockingStatesToCancel(changedBaseEntitlement,addOnEntitlement,baseEffectiveEOTCancellationOrChangeDateTime);
  checkActualBlockingStatesToCancel(changedBaseEntitlement,addOnEntitlement,baseEffectiveEOTCancellationOrChangeDateTime,false);
  checkBlockingStatesDAO(changedBaseEntitlement,addOnEntitlement,baseEffectiveCancellationOrChangeDate,false);
  testListener.pushExpectedEvents(NextEvent.CHANGE,NextEvent.CANCEL,NextEvent.BLOCK);
  clock.addDays(30);
  assertListenerStatus();
  final DefaultEntitlement cancelledAddOnEntitlement=(DefaultEntitlement)entitlementApi.getEntitlementForId(addOnEntitlement.getId(),callContext);
  checkFutureBlockingStatesToCancel(changedBaseEntitlement,null,null);
  checkFutureBlockingStatesToCancel(cancelledAddOnEntitlement,null,null);
  checkFutureBlockingStatesToCancel(changedBaseEntitlement,cancelledAddOnEntitlement,null);
  checkActualBlockingStatesToCancel(changedBaseEntitlement,cancelledAddOnEntitlement,baseEffectiveEOTCancellationOrChangeDateTime,false);
  checkBlockingStatesDAO(changedBaseEntitlement,cancelledAddOnEntitlement,baseEffectiveCancellationOrChangeDate,false);
}
