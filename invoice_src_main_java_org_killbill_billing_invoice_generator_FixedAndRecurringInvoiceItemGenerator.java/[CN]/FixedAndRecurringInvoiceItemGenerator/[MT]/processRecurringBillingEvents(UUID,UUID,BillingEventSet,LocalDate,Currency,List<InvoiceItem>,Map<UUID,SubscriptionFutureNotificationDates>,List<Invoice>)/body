{
  if (events.size() == 0) {
    return;
  }
  final StringBuilder logStringBuilder=new StringBuilder("Proposed Invoice items for invoiceId='").append(invoiceId).append("', accountId='").append(accountId).append("'");
  final Iterator<BillingEvent> eventIt=events.iterator();
  BillingEvent nextEvent=eventIt.next();
  while (eventIt.hasNext()) {
    final BillingEvent thisEvent=nextEvent;
    nextEvent=eventIt.next();
    if (!events.getSubscriptionIdsWithAutoInvoiceOff().contains(thisEvent.getSubscription().getId())) {
      final BillingEvent adjustedNextEvent=(thisEvent.getSubscription().getId() == nextEvent.getSubscription().getId()) ? nextEvent : null;
      final List<InvoiceItem> newProposedItems=processRecurringEvent(invoiceId,accountId,thisEvent,adjustedNextEvent,targetDate,currency,logStringBuilder,events.getRecurringBillingMode(),perSubscriptionFutureNotificationDate,events.getAccountDateAndTimeZoneContext());
      proposedItems.addAll(newProposedItems);
    }
  }
  final List<InvoiceItem> newProposedItems=processRecurringEvent(invoiceId,accountId,nextEvent,null,targetDate,currency,logStringBuilder,events.getRecurringBillingMode(),perSubscriptionFutureNotificationDate,events.getAccountDateAndTimeZoneContext());
  proposedItems.addAll(newProposedItems);
  log.info(logStringBuilder.toString());
  return;
}
