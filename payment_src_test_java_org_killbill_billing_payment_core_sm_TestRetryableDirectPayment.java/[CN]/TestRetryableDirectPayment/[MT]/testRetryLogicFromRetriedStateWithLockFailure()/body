{
  GlobalLock lock=null;
  try {
    lock=locker.lockWithNumberOfTries(LockerType.ACCOUNT_FOR_INVOICE_PAYMENTS.toString(),account.getExternalKey(),1);
    mockRetryProviderPlugin.setAborted(false).setNextRetryDate(null);
    mockRetryAuthorizeOperationCallback.setResult(OperationResult.SUCCESS).setException(null);
    runner.setOperationCallback(mockRetryAuthorizeOperationCallback).setContext(directPaymentStateContext);
    final State state=runner.fetchState("RETRIED");
    final UUID directTransactionId=UUID.randomUUID();
    final UUID directPaymentId=UUID.randomUUID();
    paymentDao.insertPaymentAttemptWithProperties(new PaymentAttemptModelDao(utcNow,utcNow,directPaymentExternalKey,directTransactionId,directPaymentTransactionExternalKey,state.getName(),TransactionType.AUTHORIZE.name(),null),ImmutableList.<PluginPropertyModelDao>of(),internalCallContext);
    paymentDao.insertDirectPaymentWithFirstTransaction(new PaymentModelDao(directPaymentId,utcNow,utcNow,account.getId(),paymentMethodId,-1,directPaymentExternalKey),new PaymentTransactionModelDao(directTransactionId,directPaymentTransactionExternalKey,utcNow,utcNow,directPaymentId,TransactionType.AUTHORIZE,utcNow,TransactionStatus.PAYMENT_FAILURE,amount,currency,"bla","foo"),internalCallContext);
    processor.retryPaymentTransaction(directPaymentTransactionExternalKey,MockPaymentControlProviderPlugin.PLUGIN_NAME,internalCallContext);
    final PaymentAttemptModelDao pa=((MockPaymentDao)paymentDao).getPaymentAttemptByExternalKey(directPaymentTransactionExternalKey,internalCallContext);
    assertEquals(pa.getTransactionExternalKey(),directPaymentTransactionExternalKey);
    assertEquals(pa.getStateName(),"ABORTED");
    assertEquals(pa.getOperationName(),"AUTHORIZE");
  }
  finally {
    if (lock != null) {
      lock.release();
    }
  }
}
