{
  mockRetryProviderPlugin.setAborted(false).setNextRetryDate(null);
  mockRetryAuthorizeOperationCallback.setResult(null).setException(new PaymentApiException(ErrorCode.__UNKNOWN_ERROR_CODE,"foo"));
  runner.setOperationCallback(mockRetryAuthorizeOperationCallback).setContext(directPaymentStateContext);
  final State state=runner.fetchState("RETRIED");
  final UUID directTransactionId=UUID.randomUUID();
  final UUID directPaymentId=UUID.randomUUID();
  paymentDao.insertPaymentAttemptWithProperties(new PaymentAttemptModelDao(utcNow,utcNow,directPaymentExternalKey,directTransactionId,directPaymentTransactionExternalKey,state.getName(),TransactionType.AUTHORIZE.name(),null),ImmutableList.<PluginPropertyModelDao>of(),internalCallContext);
  paymentDao.insertDirectPaymentWithFirstTransaction(new DirectPaymentModelDao(directPaymentId,utcNow,utcNow,account.getId(),paymentMethodId,-1,directPaymentExternalKey,null,null),new DirectPaymentTransactionModelDao(directTransactionId,directPaymentTransactionExternalKey,utcNow,utcNow,directPaymentId,TransactionType.AUTHORIZE,utcNow,PaymentStatus.PAYMENT_FAILURE,amount,currency,"bla","foo",null,null),internalCallContext);
  processor.retryPaymentTransaction(directPaymentTransactionExternalKey,MockPaymentControlProviderPlugin.PLUGIN_NAME,internalCallContext);
  final PaymentAttemptModelDao pa=((MockPaymentDao)paymentDao).getPaymentAttemptByExternalKey(directPaymentTransactionExternalKey,internalCallContext);
  assertEquals(pa.getTransactionExternalKey(),directPaymentTransactionExternalKey);
  assertEquals(pa.getStateName(),"ABORTED");
  assertEquals(pa.getOperationName(),"AUTHORIZE");
}
