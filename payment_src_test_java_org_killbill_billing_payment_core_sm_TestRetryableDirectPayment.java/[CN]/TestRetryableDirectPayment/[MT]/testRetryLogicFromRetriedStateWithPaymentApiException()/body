{
  mockRetryProviderPlugin.setAborted(false).setNextRetryDate(null);
  mockRetryAuthorizeOperationCallback.setResult(null).setException(new PaymentApiException(ErrorCode.__UNKNOWN_ERROR_CODE,"foo"));
  runner.setOperationCallback(mockRetryAuthorizeOperationCallback).setContext(directPaymentStateContext);
  final State state=runner.fetchState("RETRIED");
  final UUID directTransactionId=UUID.randomUUID();
  final UUID directPaymentId=UUID.randomUUID();
  paymentDao.insertPaymentAttemptWithProperties(new PaymentAttemptModelDao(account.getId(),paymentMethodId,utcNow,utcNow,directPaymentExternalKey,directTransactionId,directPaymentTransactionExternalKey,TransactionType.AUTHORIZE,state.getName(),amount,currency,null),ImmutableList.<PluginPropertyModelDao>of(),internalCallContext);
  paymentDao.insertDirectPaymentWithFirstTransaction(new PaymentModelDao(directPaymentId,utcNow,utcNow,account.getId(),paymentMethodId,-1,directPaymentExternalKey),new PaymentTransactionModelDao(directTransactionId,directPaymentTransactionExternalKey,utcNow,utcNow,directPaymentId,TransactionType.AUTHORIZE,utcNow,TransactionStatus.PAYMENT_FAILURE,amount,currency,"bla","foo"),internalCallContext);
  processor.retryPaymentTransaction(directPaymentTransactionExternalKey,MockPaymentControlProviderPlugin.PLUGIN_NAME,internalCallContext);
  final PaymentAttemptModelDao pa=paymentDao.getPaymentAttemptByExternalKey(directPaymentTransactionExternalKey,internalCallContext);
  assertEquals(pa.getTransactionExternalKey(),directPaymentTransactionExternalKey);
  assertEquals(pa.getStateName(),"ABORTED");
  assertEquals(pa.getTransactionType(),TransactionType.AUTHORIZE);
}
