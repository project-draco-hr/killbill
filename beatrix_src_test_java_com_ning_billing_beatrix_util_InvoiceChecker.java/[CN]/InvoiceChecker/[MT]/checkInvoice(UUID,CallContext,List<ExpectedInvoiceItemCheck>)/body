{
  final Invoice invoice=invoiceUserApi.getInvoice(invoiceId,context);
  Assert.assertNotNull(invoice);
  final List<InvoiceItem> actual=invoice.getInvoiceItems();
  Assert.assertEquals(actual.size(),expected.size());
  for (  final ExpectedInvoiceItemCheck cur : expected) {
    boolean found=false;
    for (    final InvoiceItem in : actual) {
      if (in.getInvoiceItemType() != cur.getType() || (cur.shouldCheckDates() && in.getStartDate().compareTo(cur.getStartDate()) != 0)) {
        continue;
      }
      if (in.getAmount().compareTo(cur.getAmount()) != 0) {
        log.info(String.format("Found item type = %s and startDate = %s but amount differ (actual = %s, expected = %s) ",cur.getType(),cur.getStartDate(),in.getAmount(),cur.getAmount()));
        continue;
      }
      if (!cur.shouldCheckDates() || (cur.getEndDate() == null && in.getEndDate() == null) || (cur.getEndDate() != null && in.getEndDate() != null && cur.getEndDate().compareTo(in.getEndDate()) == 0)) {
        found=true;
        break;
      }
      log.info(String.format("Found item type = %s and startDate = %s, amount = %s but endDate differ (actual = %s, expected = %s) ",cur.getType(),cur.getStartDate(),in.getAmount(),in.getEndDate(),cur.getEndDate()));
    }
    if (!found) {
      final StringBuilder debugBuilder=new StringBuilder();
      debugBuilder.append(String.format("Invoice id=[%s], targetDate=[%s]",invoice.getId(),invoice.getTargetDate()));
      for (      final InvoiceItem actualInvoiceItem : actual) {
        debugBuilder.append(String.format("\n    type=[%s] startDate=[%s] endDate=[%s] amount=[%s]",actualInvoiceItem.getInvoiceItemType(),actualInvoiceItem.getStartDate(),actualInvoiceItem.getEndDate(),actualInvoiceItem.getAmount()));
      }
      final String failureMessage=String.format("Failed to find invoice item type = %s and startDate = %s, amount = %s, endDate = %s for invoice id %s\n%s",cur.getType(),cur.getStartDate(),cur.getAmount(),cur.getEndDate(),invoice.getId(),debugBuilder.toString());
      Assert.fail(failureMessage);
    }
  }
  auditChecker.checkInvoiceCreated(invoice,context);
}
