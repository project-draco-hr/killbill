{
  final Invoice invoice=Mockito.mock(Invoice.class);
  final UUID invoiceId=UUID.randomUUID();
  final UUID accountId=UUID.randomUUID();
  Mockito.when(invoice.getId()).thenReturn(invoiceId);
  Mockito.when(invoice.getAccountId()).thenReturn(accountId);
  Mockito.when(invoice.getInvoiceDate()).thenReturn(clock.getUTCToday());
  Mockito.when(invoice.getTargetDate()).thenReturn(clock.getUTCToday());
  Mockito.when(invoice.getCurrency()).thenReturn(currency);
  Mockito.when(invoice.isMigrationInvoice()).thenReturn(false);
  final List<InvoiceItem> invoiceItems=new ArrayList<InvoiceItem>();
  for (  final BigDecimal amount : amounts) {
    final InvoiceItem invoiceItem=createInvoiceItem(clock,invoiceId,accountId,amount,currency);
    invoiceItemSqlDao.create(invoiceItem,internalCallContextFactory.createInternalCallContext(callContext));
    invoiceItems.add(invoiceItem);
  }
  Mockito.when(invoice.getInvoiceItems()).thenReturn(invoiceItems);
  invoiceSqlDao.create(invoice,internalCallContextFactory.createInternalCallContext(callContext));
  return invoice;
}
