{
  @SuppressWarnings("unchecked") final OverdueStatesBundle bundleODS=new MockOverdueStatesBundle(new DefaultOverdueState[]{CLEAR_BUNDLE_STATE,DISABLED_BUNDLE_STATE});
  clock=new ClockMock();
  Injector i=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      overdueAccessApi=BrainDeadProxyFactory.createBrainDeadProxyFor(OverdueAccessApi.class);
      account=BrainDeadProxyFactory.createBrainDeadProxyFor(Account.class);
      subscription1=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class,Comparable.class);
      subscription2=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class,Comparable.class);
      subscription3=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class,Comparable.class);
      subscription4=BrainDeadProxyFactory.createBrainDeadProxyFor(Subscription.class,Comparable.class);
      ((ZombieControl)subscription1).addResult("getBundleId",bundleId1);
      ((ZombieControl)subscription2).addResult("getBundleId",bundleId1);
      ((ZombieControl)subscription3).addResult("getBundleId",bundleId1);
      ((ZombieControl)subscription4).addResult("getBundleId",bundleId2);
      ((ZombieControl)subscription1).addResult("compareTo",1);
      ((ZombieControl)subscription2).addResult("compareTo",1);
      ((ZombieControl)subscription3).addResult("compareTo",1);
      ((ZombieControl)subscription4).addResult("compareTo",1);
      ((ZombieControl)subscription1).addResult("getId",UUID.randomUUID());
      ((ZombieControl)subscription2).addResult("getId",UUID.randomUUID());
      ((ZombieControl)subscription3).addResult("getId",UUID.randomUUID());
      ((ZombieControl)subscription4).addResult("getId",UUID.randomUUID());
      CatalogService catalogService=BrainDeadProxyFactory.createBrainDeadProxyFor(CatalogService.class);
      ((ZombieControl)catalogService).addResult("getCurrentCatalog",new MockCatalog(){
        @Override public void setOverdueRules(){
          OverdueRules overdueRules=new MockOverdueRules().setOverdueStatesBundle(bundleODS);
          setOverdueRules(overdueRules);
        }
      }
);
      bind(CatalogService.class).toInstance(catalogService);
      bind(OverdueAccessDao.class).toInstance(BrainDeadProxyFactory.createBrainDeadProxyFor(OverdueAccessDao.class));
      bind(OverdueAccessApi.class).toInstance(overdueAccessApi);
    }
  }
);
  odc=i.getInstance(OverdueEventCalculator.class);
}
