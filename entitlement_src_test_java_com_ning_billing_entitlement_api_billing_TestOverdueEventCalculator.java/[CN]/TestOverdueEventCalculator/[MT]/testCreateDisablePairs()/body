{
  SortedSet<OverdueEvent> overdueBundleEvents;
  UUID ovdId=UUID.randomUUID();
  DateTime now=clock.getUTCNow();
  overdueBundleEvents=new TreeSet<OverdueEvent>();
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(1)));
  List<DisabledDuration> pairs=odc.createDisablePairs(overdueBundleEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNull(pairs.get(0).getEnd());
  overdueBundleEvents=new TreeSet<OverdueEvent>();
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(1)));
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(2)));
  pairs=odc.createDisablePairs(overdueBundleEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  overdueBundleEvents=new TreeSet<OverdueEvent>();
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(1)));
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(2)));
  pairs=odc.createDisablePairs(overdueBundleEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(2));
  overdueBundleEvents=new TreeSet<OverdueEvent>();
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(1)));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(2)));
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(3)));
  pairs=odc.createDisablePairs(overdueBundleEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(3));
  overdueBundleEvents=new TreeSet<OverdueEvent>();
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(1)));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(2)));
  overdueBundleEvents.add(new OverdueEvent(ovdId,DISABLED_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(3)));
  overdueBundleEvents.add(new OverdueEvent(ovdId,CLEAR_BUNDLE,Type.SUBSCRIPTION_BUNDLE,now.plusDays(4)));
  pairs=odc.createDisablePairs(overdueBundleEvents);
  assertEquals(pairs.size(),1);
  assertNotNull(pairs.get(0).getStart());
  assertEquals(pairs.get(0).getStart(),now.plusDays(1));
  assertNotNull(pairs.get(0).getEnd());
  assertEquals(pairs.get(0).getEnd(),now.plusDays(4));
}
