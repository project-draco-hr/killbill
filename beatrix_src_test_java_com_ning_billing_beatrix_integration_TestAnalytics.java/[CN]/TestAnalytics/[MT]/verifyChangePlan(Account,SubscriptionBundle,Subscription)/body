{
  final String newProductName="Assault-Rifle";
  final BillingPeriod newTerm=BillingPeriod.MONTHLY;
  final String newPlanSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DateTime requestedDate=clock.getUTCNow();
  Assert.assertTrue(subscription.changePlan(newProductName,newTerm,newPlanSetName,requestedDate,callContext));
  waitALittle();
  final List<BusinessSubscriptionTransition> transitions=analyticsUserApi.getTransitionsForBundle(bundle.getExternalKey(),callContext);
  Assert.assertEquals(transitions.size(),3);
  final BusinessSubscriptionTransition previousTransition=transitions.get(0);
  final BusinessSubscriptionTransition transition=transitions.get(1);
  Assert.assertEquals(transition.getBundleId(),bundle.getId());
  Assert.assertEquals(transition.getExternalKey(),bundle.getExternalKey());
  Assert.assertEquals(transition.getAccountId(),account.getId());
  Assert.assertEquals(transition.getAccountKey(),account.getExternalKey());
  Assert.assertEquals(transition.getSubscriptionId(),subscription.getId());
  Assert.assertEquals(transition.getCategory(),ProductCategory.BASE.toString());
  Assert.assertEquals(transition.getEventType(),BusinessSubscriptionEvent.EventType.CHANGE.toString());
  Assert.assertNull(previousTransition.getPrevSlug());
  Assert.assertEquals(transition.getNextBillingPeriod(),BillingPeriod.NO_BILLING_PERIOD.toString());
  Assert.assertEquals(transition.getNextCurrency(),account.getCurrency().toString());
  Assert.assertEquals(transition.getNextPhase(),PhaseType.TRIAL.toString());
  Assert.assertEquals(transition.getNextPrice().doubleValue(),0.0);
  Assert.assertEquals(transition.getNextPriceList(),newPlanSetName);
  Assert.assertEquals(transition.getNextProductCategory(),ProductCategory.BASE.toString());
  Assert.assertEquals(transition.getNextProductName(),newProductName);
  Assert.assertEquals(transition.getNextProductType(),subscription.getCurrentPlan().getProduct().getCatalogName());
  Assert.assertEquals(transition.getNextSlug(),subscription.getCurrentPhase().getName());
  Assert.assertEquals(transition.getNextStartDate(),requestedDate);
  Assert.assertEquals(transition.getNextState(),SubscriptionState.ACTIVE.toString());
  final List<BusinessInvoice> invoicesForAccount=analyticsUserApi.getInvoicesForAccount(account.getExternalKey(),callContext);
  Assert.assertEquals(invoicesForAccount.size(),2);
  Assert.assertEquals(invoicesForAccount.get(0).getBalance().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(0).getAmountCharged().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(0).getAmountCredited().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(0).getAmountPaid().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(0).getCurrency(),account.getCurrency());
  Assert.assertEquals(invoicesForAccount.get(1).getBalance().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(1).getAmountCharged().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(1).getAmountCredited().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(1).getAmountPaid().doubleValue(),0.0);
  Assert.assertEquals(invoicesForAccount.get(1).getCurrency(),account.getCurrency());
}
