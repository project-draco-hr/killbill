{
  final String newProductName="Assault-Rifle";
  final BillingPeriod newTerm=BillingPeriod.MONTHLY;
  final String newPlanSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final DateTime requestedDate=clock.getUTCNow();
  Assert.assertTrue(subscription.changePlan(newProductName,newTerm,newPlanSetName,requestedDate,context));
  waitALittle();
  final List<BusinessSubscriptionTransition> transitions=analyticsUserApi.getTransitionsForBundle(bundle.getKey());
  Assert.assertEquals(transitions.size(),2);
  final BusinessSubscriptionTransition previousTransition=transitions.get(0);
  final BusinessSubscriptionTransition transition=transitions.get(1);
  Assert.assertEquals(transition.getExternalKey(),bundle.getKey());
  Assert.assertEquals(transition.getAccountKey(),account.getExternalKey());
  Assert.assertEquals(transition.getEvent().getCategory(),ProductCategory.BASE);
  Assert.assertEquals(transition.getEvent().getEventType(),BusinessSubscriptionEvent.EventType.CHANGE);
  Assert.assertNull(previousTransition.getPreviousSubscription());
  Assert.assertEquals(previousTransition.getNextSubscription(),transition.getPreviousSubscription());
  Assert.assertEquals(transition.getNextSubscription().getBillingPeriod(),BillingPeriod.NO_BILLING_PERIOD.toString());
  Assert.assertEquals(transition.getNextSubscription().getBundleId(),subscription.getBundleId());
  Assert.assertEquals(transition.getNextSubscription().getCurrency(),account.getCurrency().toString());
  Assert.assertEquals(transition.getNextSubscription().getPhase(),PhaseType.TRIAL.toString());
  Assert.assertEquals(transition.getNextSubscription().getPrice().doubleValue(),0.0);
  Assert.assertEquals(transition.getNextSubscription().getPriceList(),newPlanSetName);
  Assert.assertEquals(transition.getNextSubscription().getProductCategory(),ProductCategory.BASE);
  Assert.assertEquals(transition.getNextSubscription().getProductName(),newProductName);
  Assert.assertEquals(transition.getNextSubscription().getProductType(),subscription.getCurrentPlan().getProduct().getCatalogName());
  Assert.assertEquals(transition.getNextSubscription().getSlug(),subscription.getCurrentPhase().getName());
  Assert.assertEquals(transition.getNextSubscription().getStartDate(),requestedDate);
  Assert.assertEquals(transition.getNextSubscription().getState(),Subscription.SubscriptionState.ACTIVE);
  Assert.assertEquals(transition.getNextSubscription().getSubscriptionId(),subscription.getId());
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).size(),2);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(0).getBalance().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(0).getAmountCharged().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(0).getAmountCredited().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(0).getAmountPaid().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(0).getCurrency(),account.getCurrency());
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(1).getBalance().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(1).getAmountCharged().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(1).getAmountCredited().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(1).getAmountPaid().doubleValue(),0.0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey()).get(1).getCurrency(),account.getCurrency());
}
