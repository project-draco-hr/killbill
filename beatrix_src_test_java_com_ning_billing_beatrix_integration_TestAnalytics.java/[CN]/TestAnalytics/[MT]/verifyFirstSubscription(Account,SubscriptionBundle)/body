{
  final String productName="Shotgun";
  final BillingPeriod term=BillingPeriod.MONTHLY;
  final String planSetName=PriceListSet.DEFAULT_PRICELIST_NAME;
  final PlanPhaseSpecifier phaseSpecifier=new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null);
  final Subscription subscription=entitlementUserApi.createSubscription(bundle.getId(),phaseSpecifier,null,context);
  waitALittle();
  final List<BusinessSubscriptionTransition> transitions=analyticsUserApi.getTransitionsForBundle(bundle.getKey());
  Assert.assertEquals(transitions.size(),2);
  final BusinessSubscriptionTransition initialTransition=transitions.get(0);
  Assert.assertEquals(initialTransition.getExternalKey(),bundle.getKey());
  Assert.assertEquals(initialTransition.getAccountKey(),account.getExternalKey());
  Assert.assertEquals(initialTransition.getEvent().getCategory(),phaseSpecifier.getProductCategory());
  Assert.assertEquals(initialTransition.getEvent().getEventType(),BusinessSubscriptionEvent.EventType.ADD);
  Assert.assertNull(initialTransition.getPreviousSubscription());
  Assert.assertEquals(initialTransition.getNextSubscription().getBillingPeriod(),subscription.getCurrentPhase().getBillingPeriod().toString());
  Assert.assertEquals(initialTransition.getNextSubscription().getBundleId(),subscription.getBundleId());
  Assert.assertEquals(initialTransition.getNextSubscription().getCurrency(),account.getCurrency().toString());
  Assert.assertEquals(initialTransition.getNextSubscription().getPhase(),subscription.getCurrentPhase().getPhaseType().toString());
  Assert.assertEquals(initialTransition.getNextSubscription().getPrice().doubleValue(),subscription.getCurrentPhase().getFixedPrice().getPrice(account.getCurrency()).doubleValue());
  Assert.assertEquals(initialTransition.getNextSubscription().getPriceList(),subscription.getCurrentPriceList().getName());
  Assert.assertEquals(initialTransition.getNextSubscription().getProductCategory(),subscription.getCurrentPlan().getProduct().getCategory());
  Assert.assertEquals(initialTransition.getNextSubscription().getProductName(),subscription.getCurrentPlan().getProduct().getName());
  Assert.assertEquals(initialTransition.getNextSubscription().getProductType(),subscription.getCurrentPlan().getProduct().getCatalogName());
  Assert.assertEquals(initialTransition.getNextSubscription().getSlug(),subscription.getCurrentPhase().getName());
  Assert.assertEquals(initialTransition.getNextSubscription().getStartDate(),subscription.getStartDate());
  Assert.assertEquals(initialTransition.getNextSubscription().getState(),subscription.getState());
  Assert.assertEquals(initialTransition.getNextSubscription().getSubscriptionId(),subscription.getId());
  final BusinessSubscriptionTransition futureTransition=transitions.get(1);
  Assert.assertEquals(futureTransition.getExternalKey(),bundle.getKey());
  Assert.assertEquals(futureTransition.getAccountKey(),account.getExternalKey());
  Assert.assertEquals(futureTransition.getEvent().getCategory(),phaseSpecifier.getProductCategory());
  Assert.assertEquals(futureTransition.getEvent().getEventType(),BusinessSubscriptionEvent.EventType.CHANGE);
  Assert.assertEquals(futureTransition.getPreviousSubscription(),initialTransition.getNextSubscription());
  Assert.assertEquals(futureTransition.getNextSubscription().getBillingPeriod(),term.toString());
  Assert.assertEquals(futureTransition.getNextSubscription().getBundleId(),subscription.getBundleId());
  Assert.assertEquals(initialTransition.getNextSubscription().getCurrency(),account.getCurrency().toString());
  Assert.assertEquals(futureTransition.getNextSubscription().getPhase(),PhaseType.EVERGREEN.toString());
  Assert.assertTrue(futureTransition.getNextSubscription().getPrice().doubleValue() > 0);
  Assert.assertEquals(futureTransition.getNextSubscription().getPriceList(),subscription.getCurrentPriceList().getName());
  Assert.assertEquals(futureTransition.getNextSubscription().getProductCategory(),subscription.getCurrentPlan().getProduct().getCategory());
  Assert.assertEquals(futureTransition.getNextSubscription().getProductName(),subscription.getCurrentPlan().getProduct().getName());
  Assert.assertEquals(futureTransition.getNextSubscription().getProductType(),subscription.getCurrentPlan().getProduct().getCatalogName());
  Assert.assertEquals(futureTransition.getNextSubscription().getSlug(),subscription.getCurrentPhase().getName().replace("-trial","-evergreen"));
  Assert.assertEquals(futureTransition.getNextSubscription().getStartDate(),subscription.getStartDate().plusDays(30));
  Assert.assertEquals(futureTransition.getNextSubscription().getState(),subscription.getState());
  Assert.assertEquals(futureTransition.getNextSubscription().getSubscriptionId(),subscription.getId());
  final BusinessAccount businessAccount=analyticsUserApi.getAccountByKey(account.getExternalKey());
  Assert.assertEquals(businessAccount.getBalance().doubleValue(),Rounder.round(BigDecimal.ZERO));
  Assert.assertEquals(businessAccount.getTotalInvoiceBalance().doubleValue(),Rounder.round(BigDecimal.ZERO));
  final List<BusinessInvoice> invoices=analyticsUserApi.getInvoicesForAccount(account.getExternalKey());
  Assert.assertEquals(invoices.size(),1);
  final BusinessInvoice invoice=invoices.get(0);
  Assert.assertEquals(invoice.getBalance().doubleValue(),0.0);
  Assert.assertEquals(invoice.getAmountCharged().doubleValue(),0.0);
  Assert.assertEquals(invoice.getAmountCredited().doubleValue(),0.0);
  Assert.assertEquals(invoice.getAmountPaid().doubleValue(),0.0);
  Assert.assertEquals(invoice.getCurrency(),account.getCurrency());
  final List<BusinessInvoiceItem> invoiceItems=analyticsUserApi.getInvoiceItemsForInvoice(invoice.getInvoiceId());
  Assert.assertEquals(invoiceItems.size(),1);
  final BusinessInvoiceItem invoiceItem=invoiceItems.get(0);
  Assert.assertEquals(invoiceItem.getAmount().doubleValue(),0.0);
  Assert.assertEquals(invoiceItem.getBillingPeriod(),subscription.getCurrentPhase().getBillingPeriod().toString());
  Assert.assertEquals(invoiceItem.getCurrency(),account.getCurrency());
  Assert.assertEquals(invoiceItem.getEndDate(),subscription.getStartDate().plus(subscription.getCurrentPhase().getDuration().toJodaPeriod()));
  Assert.assertEquals(invoiceItem.getExternalKey(),bundle.getKey());
  Assert.assertEquals(invoiceItem.getInvoiceId(),invoice.getInvoiceId());
  Assert.assertEquals(invoiceItem.getItemType(),"FIXED");
  Assert.assertEquals(invoiceItem.getPhase(),subscription.getCurrentPhase().getPhaseType().toString());
  Assert.assertEquals(invoiceItem.getProductCategory(),subscription.getCurrentPlan().getProduct().getCategory().toString());
  Assert.assertEquals(invoiceItem.getProductName(),subscription.getCurrentPlan().getProduct().getName());
  Assert.assertEquals(invoiceItem.getProductType(),subscription.getCurrentPlan().getProduct().getCatalogName());
  Assert.assertEquals(invoiceItem.getSlug(),subscription.getCurrentPhase().getName());
  Assert.assertEquals(invoiceItem.getStartDate(),subscription.getStartDate());
  return subscription;
}
