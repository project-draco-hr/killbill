{
  paymentPlugin.makeAllInvoicesFailWithError(true);
  final SubscriptionBundle bundle=verifyFirstBundle(account);
  busHandler.pushExpectedEvents(TestApiListener.NextEvent.CREATE,TestApiListener.NextEvent.INVOICE);
  final Subscription subscription=verifyFirstSubscription(account,bundle);
  assertTrue(busHandler.isCompleted(DELAY));
  Assert.assertEquals(analyticsUserApi.getInvoicePaymentsForAccount(account.getExternalKey(),callContext).size(),0);
  Assert.assertEquals(analyticsUserApi.getAccountByKey(account.getExternalKey(),callContext).getBalance().doubleValue(),Rounder.round(BigDecimal.ZERO));
  Assert.assertNull(analyticsUserApi.getAccountByKey(account.getExternalKey(),callContext).getLastPaymentStatus());
  Assert.assertEquals(analyticsUserApi.getOverdueStatusesForBundle(bundle.getExternalKey(),callContext).size(),0);
  busHandler.pushExpectedEvents(TestApiListener.NextEvent.PHASE,TestApiListener.NextEvent.INVOICE,TestApiListener.NextEvent.PAYMENT_ERROR);
  clock.addDays(30);
  Assert.assertTrue(busHandler.isCompleted(DELAY));
  waitALittle();
  verifyBSTWithTrialAndEvergreenPhases(account,bundle,subscription);
  final List<BusinessInvoicePayment> invoicePaymentsForAccount=analyticsUserApi.getInvoicePaymentsForAccount(account.getExternalKey(),callContext);
  Assert.assertEquals(invoicePaymentsForAccount.size(),1);
  Assert.assertEquals(invoicePaymentsForAccount.get(0).getAccountKey(),account.getExternalKey());
  Assert.assertTrue(invoicePaymentsForAccount.get(0).getAmount().compareTo(BigDecimal.ZERO) > 0);
  Assert.assertTrue(invoicePaymentsForAccount.get(0).getRequestedAmount().compareTo(BigDecimal.ZERO) > 0);
  Assert.assertNull(invoicePaymentsForAccount.get(0).getExtFirstPaymentRefId());
  Assert.assertNull(invoicePaymentsForAccount.get(0).getExtSecondPaymentRefId());
  Assert.assertEquals(invoicePaymentsForAccount.get(0).getProcessingStatus(),PaymentStatus.PAYMENT_FAILURE.toString());
  Assert.assertEquals(invoicePaymentsForAccount.get(0).getPluginName(),BeatrixIntegrationModule.NON_OSGI_PLUGIN_NAME);
  Assert.assertEquals(analyticsUserApi.getAccountByKey(account.getExternalKey(),callContext).getBalance(),invoicePaymentsForAccount.get(0).getAmount());
  Assert.assertTrue(analyticsUserApi.getInvoicesForAccount(account.getExternalKey(),callContext).get(1).getBalance().compareTo(BigDecimal.ZERO) > 0);
  Assert.assertEquals(analyticsUserApi.getInvoicesForAccount(account.getExternalKey(),callContext).get(1).getBalance(),invoicePaymentsForAccount.get(0).getAmount());
  Assert.assertEquals(analyticsUserApi.getOverdueStatusesForBundle(bundle.getExternalKey(),callContext).size(),0);
  clock.addDays(15);
  assertTrue(busHandler.isCompleted(DELAY));
  verifyBSTWithTrialAndEvergreenPhases(account,bundle,subscription);
  Assert.assertEquals(analyticsUserApi.getOverdueStatusesForBundle(bundle.getExternalKey(),callContext).size(),0);
  busHandler.pushExpectedEvents(TestApiListener.NextEvent.INVOICE,TestApiListener.NextEvent.PAYMENT_ERROR);
  clock.addDays(20);
  assertTrue(busHandler.isCompleted(DELAY));
  waitALittle();
  final List<BusinessOverdueStatus> od1Bundle=analyticsUserApi.getOverdueStatusesForBundle(bundle.getExternalKey(),callContext);
  Assert.assertEquals(od1Bundle.size(),1);
  Assert.assertEquals(od1Bundle.get(0).getStatus(),"OD1");
  Assert.assertEquals(od1Bundle.get(0).getId(),bundle.getId());
  Assert.assertEquals(od1Bundle.get(0).getAccountKey(),account.getExternalKey());
  clock.addDays(2);
  assertTrue(busHandler.isCompleted(DELAY));
  waitALittle();
  final List<BusinessOverdueStatus> stillOd1Bundle=analyticsUserApi.getOverdueStatusesForBundle(bundle.getExternalKey(),callContext);
  Assert.assertEquals(stillOd1Bundle.size(),1);
  Assert.assertEquals(stillOd1Bundle.get(0).getStatus(),"OD1");
  Assert.assertEquals(stillOd1Bundle.get(0).getId(),bundle.getId());
  Assert.assertEquals(stillOd1Bundle.get(0).getAccountKey(),account.getExternalKey());
  clock.addDays(8);
  assertTrue(busHandler.isCompleted(DELAY));
  waitALittle();
  final List<BusinessOverdueStatus> od2Bundle=analyticsUserApi.getOverdueStatusesForBundle(bundle.getExternalKey(),callContext);
  Assert.assertEquals(od2Bundle.size(),2);
  Assert.assertEquals(od2Bundle.get(0).getStatus(),"OD1");
  Assert.assertEquals(od2Bundle.get(1).getStatus(),"OD2");
  Assert.assertEquals(od2Bundle.get(0).getEndDate(),od2Bundle.get(1).getStartDate());
  Assert.assertEquals(od2Bundle.get(0).getId(),bundle.getId());
  Assert.assertEquals(od2Bundle.get(0).getAccountKey(),account.getExternalKey());
  Assert.assertEquals(od2Bundle.get(1).getId(),bundle.getId());
  Assert.assertEquals(od2Bundle.get(1).getAccountKey(),account.getExternalKey());
  clock.addDays(10);
  assertTrue(busHandler.isCompleted(DELAY));
  waitALittle();
  final List<BusinessOverdueStatus> od3Bundle=analyticsUserApi.getOverdueStatusesForBundle(bundle.getExternalKey(),callContext);
  Assert.assertEquals(od3Bundle.size(),3);
  Assert.assertEquals(od3Bundle.get(0).getStatus(),"OD1");
  Assert.assertEquals(od3Bundle.get(1).getStatus(),"OD2");
  Assert.assertEquals(od3Bundle.get(2).getStatus(),"OD3");
  Assert.assertEquals(od3Bundle.get(0).getEndDate(),od3Bundle.get(1).getStartDate());
  Assert.assertEquals(od3Bundle.get(1).getEndDate(),od3Bundle.get(2).getStartDate());
  Assert.assertEquals(od3Bundle.get(0).getId(),bundle.getId());
  Assert.assertEquals(od3Bundle.get(0).getAccountKey(),account.getExternalKey());
  Assert.assertEquals(od3Bundle.get(1).getId(),bundle.getId());
  Assert.assertEquals(od3Bundle.get(1).getAccountKey(),account.getExternalKey());
  Assert.assertEquals(od3Bundle.get(2).getId(),bundle.getId());
  Assert.assertEquals(od3Bundle.get(2).getAccountKey(),account.getExternalKey());
}
