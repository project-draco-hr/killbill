{
  final DummyNodeInterval root=new DummyNodeInterval();
  final DummyNodeInterval top=createNodeInterval("2014-01-01","2014-02-01");
  root.addNode(top,CALLBACK);
  final DummyNodeInterval firstChildLevel1=createNodeInterval("2014-01-01","2014-01-07");
  final DummyNodeInterval secondChildLevel1=createNodeInterval("2014-01-08","2014-01-15");
  final DummyNodeInterval thirdChildLevel1=createNodeInterval("2014-01-16","2014-02-01");
  root.addNode(firstChildLevel1,CALLBACK);
  root.addNode(secondChildLevel1,CALLBACK);
  root.addNode(thirdChildLevel1,CALLBACK);
  final DummyNodeInterval firstChildLevel2=createNodeInterval("2014-01-01","2014-01-03");
  final DummyNodeInterval secondChildLevel2=createNodeInterval("2014-01-03","2014-01-5");
  final DummyNodeInterval thirdChildLevel2=createNodeInterval("2014-01-16","2014-01-17");
  root.addNode(firstChildLevel2,CALLBACK);
  root.addNode(secondChildLevel2,CALLBACK);
  root.addNode(thirdChildLevel2,CALLBACK);
  final List<NodeInterval> output=new LinkedList<NodeInterval>();
  root.build(new BuildNodeCallback(){
    @Override public void buildMissingInterval(    final NodeInterval curNode,    final LocalDate startDate,    final LocalDate endDate){
      output.add(createNodeInterval(startDate,endDate));
    }
    @Override public void buildNode(    final NodeInterval curNode){
    }
  }
);
  final List<NodeInterval> expected=new LinkedList<NodeInterval>();
  expected.add(createNodeInterval("2014-01-05","2014-01-07"));
  expected.add(createNodeInterval("2014-01-07","2014-01-08"));
  expected.add(createNodeInterval("2014-01-15","2014-01-16"));
  expected.add(createNodeInterval("2014-01-17","2014-02-01"));
  assertEquals(output.size(),expected.size());
  checkInterval(output.get(0),expected.get(0));
  checkInterval(output.get(1),expected.get(1));
}
