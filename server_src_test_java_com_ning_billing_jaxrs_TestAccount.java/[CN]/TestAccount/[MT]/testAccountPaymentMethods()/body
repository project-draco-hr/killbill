{
  final AccountJson accountJson=createAccount("qwerty","ytrewq","qwerty@yahoo.com");
  assertNotNull(accountJson);
  String uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountJson.getAccountId()+ "/"+ JaxrsResource.PAYMENT_METHODS;
  PaymentMethodJson paymentMethodJson=getPaymentMethodJson(accountJson.getAccountId(),getPaymentMethodCCProperties());
  String baseJson=mapper.writeValueAsString(paymentMethodJson);
  Map<String,String> queryParams=new HashMap<String,String>();
  queryParams.put(JaxrsResource.QUERY_PAYMENT_METHOD_IS_DEFAULT,"true");
  Response response=doPost(uri,baseJson,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  final String locationCC=response.getHeader("Location");
  Assert.assertNotNull(locationCC);
  response=doGetWithUrl(locationCC,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  final PaymentMethodJson paymentMethodCC=mapper.readValue(baseJson,PaymentMethodJson.class);
  assertTrue(paymentMethodCC.isDefault());
  uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountJson.getAccountId()+ "/"+ JaxrsResource.PAYMENT_METHODS;
  paymentMethodJson=getPaymentMethodJson(accountJson.getAccountId(),getPaymentMethodPaypalProperties());
  baseJson=mapper.writeValueAsString(paymentMethodJson);
  response=doPost(uri,baseJson,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  final String locationPP=response.getHeader("Location");
  assertNotNull(locationPP);
  response=doGetWithUrl(locationPP,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  final PaymentMethodJson paymentMethodPP=mapper.readValue(baseJson,PaymentMethodJson.class);
  assertFalse(paymentMethodPP.isDefault());
  queryParams=new HashMap<String,String>();
  queryParams.put(JaxrsResource.QUERY_PAYMENT_METHOD_PLUGIN_INFO,"true");
  response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  List<PaymentMethodJson> paymentMethods=mapper.readValue(baseJson,new TypeReference<List<PaymentMethodJson>>(){
  }
);
  assertEquals(paymentMethods.size(),2);
  uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountJson.getAccountId()+ "/"+ JaxrsResource.PAYMENT_METHODS+ "/"+ paymentMethodPP.getPaymentMethodId()+ "/"+ JaxrsResource.PAYMENT_METHODS_DEFAULT_PATH_POSTFIX;
  response=doPut(uri,"{}",DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  response=doGetWithUrl(locationPP,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  final PaymentMethodJson paymentMethodPPDefault=mapper.readValue(baseJson,PaymentMethodJson.class);
  assertTrue(paymentMethodPPDefault.isDefault());
  uri=JaxrsResource.PAYMENT_METHODS_PATH + "/" + paymentMethodCC.getPaymentMethodId();
  response=doDelete(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountJson.getAccountId()+ "/"+ JaxrsResource.PAYMENT_METHODS;
  queryParams=new HashMap<String,String>();
  queryParams.put(JaxrsResource.QUERY_PAYMENT_METHOD_PLUGIN_INFO,"true");
  response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  paymentMethods=mapper.readValue(baseJson,new TypeReference<List<PaymentMethodJson>>(){
  }
);
  assertEquals(paymentMethods.size(),1);
  uri=JaxrsResource.PAYMENT_METHODS_PATH + "/" + paymentMethodPP.getPaymentMethodId();
  response=doDelete(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.BAD_REQUEST.getStatusCode());
  uri=JaxrsResource.PAYMENT_METHODS_PATH + "/" + paymentMethodPP.getPaymentMethodId();
  queryParams=new HashMap<String,String>();
  queryParams.put(JaxrsResource.QUERY_DELETE_DEFAULT_PM_WITH_AUTO_PAY_OFF,"true");
  response=doDelete(uri,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountJson.getAccountId()+ "/"+ JaxrsResource.TAGS;
  response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  baseJson=response.getResponseBody();
  List<TagJson> tagsJson=mapper.readValue(baseJson,new TypeReference<List<TagJson>>(){
  }
);
  Assert.assertEquals(tagsJson.size(),1);
  TagJson tagJson=tagsJson.get(0);
  Assert.assertEquals(tagJson.getTagDefinitionName(),"AUTO_PAY_OFF");
  Assert.assertEquals(tagJson.getTagDefinitionId(),new UUID(0,1).toString());
  uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountJson.getAccountId();
  response=doGet(uri,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  AccountJson updatedAccountJson=mapper.readValue(response.getResponseBody(),AccountJson.class);
  Assert.assertEquals(updatedAccountJson.getAccountId(),accountJson.getAccountId());
  Assert.assertNull(updatedAccountJson.getPaymentMethodId());
  uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountJson.getAccountId()+ "/"+ JaxrsResource.TAGS;
  queryParams=new HashMap<String,String>();
  queryParams.put(JaxrsResource.QUERY_TAGS,new UUID(0,1).toString());
  response=doDelete(uri,queryParams,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.BAD_REQUEST.getStatusCode());
}
