{
  final DateTime startTime=clock.getUTCNow();
  final AccountJson accountJson=createAccountWithPMBundleAndSubscriptionAndWaitForFirstInvoice();
  final DateTime endTime=clock.getUTCNow();
  final InvoiceJsonSimple invoice=getInvoicesForAccount(accountJson.getAccountId()).get(1);
  final DateTime creditEffectiveDate=clock.getUTCNow();
  final BigDecimal creditAmount=BigDecimal.ONE;
  createCreditForInvoice(accountJson.getAccountId(),invoice.getInvoiceId(),creditAmount,clock.getUTCNow(),creditEffectiveDate);
  final PaymentJsonSimple postedPayment=getPaymentsForAccount(accountJson.getAccountId()).get(0);
  final BigDecimal refundAmount=BigDecimal.ONE;
  createRefund(postedPayment.getPaymentId(),refundAmount);
  final BigDecimal chargebackAmount=BigDecimal.ONE;
  createChargeBack(postedPayment.getPaymentId(),chargebackAmount);
  final AccountTimelineJson timeline=getAccountTimelineWithAudits(accountJson.getAccountId());
  Assert.assertEquals(timeline.getPayments().size(),1);
  final PaymentJsonWithBundleKeys paymentJson=timeline.getPayments().get(0);
  final List<AuditLogJson> paymentAuditLogs=paymentJson.getAuditLogs();
  Assert.assertEquals(paymentAuditLogs.size(),2);
  verifyAuditLog(paymentAuditLogs.get(0),ChangeType.INSERT,null,null,"PaymentRequestProcessor",startTime,endTime);
  verifyAuditLog(paymentAuditLogs.get(1),ChangeType.UPDATE,null,null,"PaymentRequestProcessor",startTime,endTime);
  Assert.assertEquals(paymentJson.getRefunds().size(),1);
  final RefundJson refundJson=paymentJson.getRefunds().get(0);
  Assert.assertEquals(refundJson.getPaymentId(),paymentJson.getPaymentId());
  Assert.assertEquals(refundJson.getRefundAmount().compareTo(refundAmount),0);
  final List<AuditLogJson> refundAuditLogs=refundJson.getAuditLogs();
  Assert.assertEquals(refundAuditLogs.size(),3);
  verifyAuditLog(refundAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
  verifyAuditLog(refundAuditLogs.get(1),ChangeType.UPDATE,reason,comment,createdBy,startTime,endTime);
  verifyAuditLog(refundAuditLogs.get(2),ChangeType.UPDATE,reason,comment,createdBy,startTime,endTime);
  Assert.assertEquals(paymentJson.getChargebacks().size(),1);
  final ChargebackJson chargebackJson=paymentJson.getChargebacks().get(0);
  Assert.assertEquals(chargebackJson.getPaymentId(),paymentJson.getPaymentId());
  Assert.assertEquals(chargebackJson.getChargebackAmount().compareTo(chargebackAmount),0);
  final List<AuditLogJson> chargebackAuditLogs=chargebackJson.getAuditLogs();
  Assert.assertEquals(chargebackAuditLogs.size(),1);
  verifyAuditLog(chargebackAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
  Assert.assertEquals(timeline.getInvoices().size(),2);
  final List<AuditLogJson> firstInvoiceAuditLogs=timeline.getInvoices().get(0).getAuditLogs();
  Assert.assertEquals(firstInvoiceAuditLogs.size(),1);
  verifyAuditLog(firstInvoiceAuditLogs.get(0),ChangeType.INSERT,null,null,"Transition",startTime,endTime);
  final List<AuditLogJson> secondInvoiceAuditLogs=timeline.getInvoices().get(1).getAuditLogs();
  Assert.assertEquals(secondInvoiceAuditLogs.size(),1);
  verifyAuditLog(secondInvoiceAuditLogs.get(0),ChangeType.INSERT,null,null,"Transition",startTime,endTime);
  final List<CreditJson> credits=timeline.getInvoices().get(1).getCredits();
  Assert.assertEquals(credits.size(),1);
  Assert.assertEquals(credits.get(0).getCreditAmount().compareTo(creditAmount.negate()),0);
  final List<AuditLogJson> creditAuditLogs=credits.get(0).getAuditLogs();
  Assert.assertEquals(creditAuditLogs.size(),1);
  verifyAuditLog(creditAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
  Assert.assertEquals(timeline.getBundles().size(),1);
  Assert.assertEquals(timeline.getBundles().get(0).getSubscriptions().size(),1);
  Assert.assertEquals(timeline.getBundles().get(0).getSubscriptions().get(0).getEvents().size(),2);
  final List<AuditLogJson> bundleAuditLogs=timeline.getBundles().get(0).getAuditLogs();
  Assert.assertEquals(bundleAuditLogs.size(),3);
  verifyAuditLog(bundleAuditLogs.get(0),ChangeType.INSERT,reason,comment,createdBy,startTime,endTime);
  verifyAuditLog(bundleAuditLogs.get(1),ChangeType.UPDATE,null,null,"Transition",startTime,endTime);
  verifyAuditLog(bundleAuditLogs.get(2),ChangeType.UPDATE,null,null,"Transition",startTime,endTime);
}
