{
  final String accountId=UUID.randomUUID().toString();
  final String uri=JaxrsResource.ACCOUNTS_PATH + "/" + accountId+ "/"+ JaxrsResource.TAGS;
  final String accountTagsUrl=getUrlFromUri(uri);
  final String autoPayOffId=new UUID(0,1).toString();
  Response response=doPost(uri,null,ImmutableMap.<String,String>of(JaxrsResource.QUERY_TAGS,autoPayOffId),DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  response=doGetWithUrl(accountTagsUrl,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  final List<TagJson> tags1=mapper.readValue(response.getResponseBody(),new TypeReference<List<TagJson>>(){
  }
);
  Assert.assertEquals(tags1.size(),1);
  Assert.assertEquals(tags1.get(0).getTagDefinitionId(),autoPayOffId);
  response=doPost(uri,null,ImmutableMap.<String,String>of(JaxrsResource.QUERY_TAGS,autoPayOffId),DEFAULT_HTTP_TIMEOUT_SEC);
  assertEquals(response.getStatusCode(),Status.CREATED.getStatusCode());
  response=doGetWithUrl(accountTagsUrl,DEFAULT_EMPTY_QUERY,DEFAULT_HTTP_TIMEOUT_SEC);
  Assert.assertEquals(response.getStatusCode(),Status.OK.getStatusCode());
  final List<TagJson> tags2=mapper.readValue(response.getResponseBody(),new TypeReference<List<TagJson>>(){
  }
);
  Assert.assertEquals(tags2,tags1);
}
