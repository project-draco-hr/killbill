{
  checkForPermissions(Permission.ENTITLEMENT_CAN_CHANGE_PLAN,callContext);
  refresh(callContext);
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.CHANGE_PLAN,getAccountId(),null,getBundleId(),getExternalKey(),null,null,properties,callContext);
  final WithEntitlementPlugin<Entitlement> changePlanWithPlugin=new WithEntitlementPlugin<Entitlement>(){
    @Override public Entitlement doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      if (!eventsStream.isEntitlementActive()) {
        throw new EntitlementApiException(ErrorCode.SUB_CHANGE_NON_ACTIVE,getId(),getState());
      }
      final InternalCallContext context=internalCallContextFactory.createInternalCallContext(getAccountId(),callContext);
      final DateTime effectiveChangeDate;
      try {
        effectiveChangeDate=subscriptionInternalApi.getDryRunChangePlanEffectiveDate(getSubscriptionBase(),productName,billingPeriod,priceList,null,null,context);
      }
 catch (      final SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e,e.getCode(),e.getMessage());
      }
      try {
        checker.checkBlockedChange(getSubscriptionBase(),effectiveChangeDate,context);
      }
 catch (      final BlockingApiException e) {
        throw new EntitlementApiException(e,e.getCode(),e.getMessage());
      }
      try {
        getSubscriptionBase().changePlan(productName,billingPeriod,priceList,overrides,callContext);
      }
 catch (      final SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
      final Collection<NotificationEvent> notificationEvents=new ArrayList<NotificationEvent>();
      final Iterable<BlockingState> addOnsBlockingStates=computeAddOnBlockingStates(effectiveChangeDate,notificationEvents,callContext,context);
      setBlockingStates(addOnsBlockingStates,context);
      for (      final NotificationEvent notificationEvent : notificationEvents) {
        recordFutureNotification(effectiveChangeDate,notificationEvent,context);
      }
      return entitlementApi.getEntitlementForId(getId(),callContext);
    }
  }
;
  return pluginExecution.executeWithPlugin(changePlanWithPlugin,pluginContext);
}
