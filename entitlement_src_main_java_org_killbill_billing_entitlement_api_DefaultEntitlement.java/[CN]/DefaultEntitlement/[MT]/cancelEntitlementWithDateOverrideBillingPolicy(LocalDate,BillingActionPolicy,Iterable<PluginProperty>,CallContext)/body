{
  checkForPermissions(Permission.ENTITLEMENT_CAN_CANCEL,callContext);
  refresh(callContext);
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.CANCEL_SUBSCRIPTION,getAccountId(),null,getBundleId(),null,getExternalKey(),null,localCancelDate,properties,callContext);
  final WithEntitlementPlugin<Entitlement> cancelEntitlementWithPlugin=new WithEntitlementPlugin<Entitlement>(){
    @Override public Entitlement doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      if (eventsStream.isEntitlementCancelled()) {
        throw new EntitlementApiException(ErrorCode.SUB_CANCEL_BAD_STATE,getId(),EntitlementState.CANCELLED);
      }
      final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(getAccountId(),callContext);
      final LocalDate effectiveLocalDate=new LocalDate(updatedPluginContext.getEffectiveDate(),eventsStream.getAccountTimeZone());
      final DateTime effectiveDate=dateHelper.fromLocalDateAndReferenceTime(effectiveLocalDate,getSubscriptionBase().getStartDate(),contextWithValidAccountRecordId);
      try {
        getSubscriptionBase().cancelWithPolicy(billingPolicy,callContext);
      }
 catch (      SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
      final BlockingState newBlockingState=new DefaultBlockingState(getId(),BlockingStateType.SUBSCRIPTION,DefaultEntitlementApi.ENT_STATE_CANCELLED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,false,effectiveDate);
      entitlementUtils.setBlockingStateAndPostBlockingTransitionEvent(newBlockingState,contextWithValidAccountRecordId);
      blockAddOnsIfRequired(effectiveDate,callContext,contextWithValidAccountRecordId);
      return entitlementApi.getEntitlementForId(getId(),callContext);
    }
  }
;
  return pluginExecution.executeWithPlugin(cancelEntitlementWithPlugin,pluginContext);
}
