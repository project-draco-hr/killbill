{
  refresh(callContext);
  if (eventsStream.isEntitlementCancelled()) {
    throw new EntitlementApiException(ErrorCode.SUB_CANCEL_BAD_STATE,getId(),EntitlementState.CANCELLED);
  }
  final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(getAccountId(),callContext);
  final DateTime effectiveCancelDate=dateHelper.fromLocalDateAndReferenceTime(localCancelDate,getSubscriptionBase().getStartDate(),contextWithValidAccountRecordId);
  try {
    if (overrideBillingEffectiveDate) {
      getSubscriptionBase().cancelWithDate(effectiveCancelDate,callContext);
    }
 else {
      getSubscriptionBase().cancel(callContext);
    }
  }
 catch (  SubscriptionBaseApiException e) {
    throw new EntitlementApiException(e);
  }
  final BlockingState newBlockingState=new DefaultBlockingState(getId(),BlockingStateType.SUBSCRIPTION,DefaultEntitlementApi.ENT_STATE_CANCELLED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,false,effectiveCancelDate);
  entitlementUtils.setBlockingStateAndPostBlockingTransitionEvent(newBlockingState,contextWithValidAccountRecordId);
  blockAddOnsIfRequired(effectiveCancelDate,callContext,contextWithValidAccountRecordId);
  return entitlementApi.getEntitlementForId(getId(),callContext);
}
