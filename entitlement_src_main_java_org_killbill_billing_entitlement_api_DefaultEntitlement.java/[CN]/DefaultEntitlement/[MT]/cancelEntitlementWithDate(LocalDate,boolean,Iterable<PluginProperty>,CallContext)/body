{
  checkForPermissions(Permission.ENTITLEMENT_CAN_CANCEL,callContext);
  refresh(callContext);
  final EntitlementContext pluginContext=new DefaultEntitlementContext(OperationType.CANCEL_SUBSCRIPTION,getAccountId(),null,getBundleId(),getExternalKey(),null,localCancelDate,properties,callContext);
  final WithEntitlementPlugin<Entitlement> cancelEntitlementWithPlugin=new WithEntitlementPlugin<Entitlement>(){
    @Override public Entitlement doCall(    final EntitlementApi entitlementApi,    final EntitlementContext updatedPluginContext) throws EntitlementApiException {
      if (eventsStream.isEntitlementCancelled()) {
        throw new EntitlementApiException(ErrorCode.SUB_CANCEL_BAD_STATE,getId(),EntitlementState.CANCELLED);
      }
      final InternalCallContext contextWithValidAccountRecordId=internalCallContextFactory.createInternalCallContext(getAccountId(),callContext);
      final DateTime effectiveCancelDate=dateHelper.fromLocalDateAndReferenceTime(localCancelDate,getSubscriptionBase().getStartDate(),contextWithValidAccountRecordId);
      try {
        if (overrideBillingEffectiveDate) {
          getSubscriptionBase().cancelWithDate(effectiveCancelDate,callContext);
        }
 else {
          getSubscriptionBase().cancel(callContext);
        }
      }
 catch (      final SubscriptionBaseApiException e) {
        throw new EntitlementApiException(e);
      }
      final BlockingState newBlockingState=new DefaultBlockingState(getId(),BlockingStateType.SUBSCRIPTION,DefaultEntitlementApi.ENT_STATE_CANCELLED,EntitlementService.ENTITLEMENT_SERVICE_NAME,true,true,false,effectiveCancelDate);
      final Collection<NotificationEvent> notificationEvents=new ArrayList<NotificationEvent>();
      final Collection<BlockingState> addOnsBlockingStates=computeAddOnBlockingStates(effectiveCancelDate,notificationEvents,callContext,contextWithValidAccountRecordId);
      setBlockingStates(newBlockingState,addOnsBlockingStates,contextWithValidAccountRecordId);
      for (      final NotificationEvent notificationEvent : notificationEvents) {
        recordFutureNotification(effectiveCancelDate,notificationEvent,contextWithValidAccountRecordId);
      }
      return entitlementApi.getEntitlementForId(getId(),callContext);
    }
  }
;
  return pluginExecution.executeWithPlugin(cancelEntitlementWithPlugin,pluginContext);
}
