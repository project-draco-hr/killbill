{
  final Account account;
  try {
    account=accountApi.getAccountById(accountId,context);
  }
 catch (  AccountApiException e) {
    log.warn("Ignoring invoice update for account id {} (account does not exist)",accountId);
    return;
  }
  final Collection<Invoice> invoices=invoiceApi.getInvoicesByAccountId(account.getId(),context);
  final Map<BusinessInvoice,Collection<BusinessInvoiceItem>> businessInvoices=new HashMap<BusinessInvoice,Collection<BusinessInvoiceItem>>();
  for (  final Invoice invoice : invoices) {
    final BusinessInvoice businessInvoice=new BusinessInvoice(account.getExternalKey(),invoice);
    final List<BusinessInvoiceItem> businessInvoiceItems=new ArrayList<BusinessInvoiceItem>();
    for (    final InvoiceItem invoiceItem : invoice.getInvoiceItems()) {
      final BusinessInvoiceItem businessInvoiceItem=createBusinessInvoiceItem(invoiceItem,context);
      if (businessInvoiceItem != null) {
        businessInvoiceItems.add(businessInvoiceItem);
      }
    }
    businessInvoices.put(businessInvoice,businessInvoiceItems);
  }
  final BusinessAccount bac=businessAccountDao.createBusinessAccountFromAccount(account,context);
  sqlDao.inTransaction(new Transaction<Void,BusinessInvoiceSqlDao>(){
    @Override public Void inTransaction(    final BusinessInvoiceSqlDao transactional,    final TransactionStatus status) throws Exception {
      rebuildInvoicesForAccountInTransaction(account,businessInvoices,transactional,context);
      final BusinessAccountSqlDao accountSqlDao=transactional.become(BusinessAccountSqlDao.class);
      businessAccountDao.updateAccountInTransaction(bac,accountSqlDao,context);
      return null;
    }
  }
);
}
