{
  final Map<UUID,BigDecimal> amountOwedByInvoice=new HashMap<UUID,BigDecimal>();
  if (existingInvoices != null) {
    for (    final Invoice invoice : existingInvoices) {
      amountOwedByInvoice.put(invoice.getId(),invoice.getBalance());
    }
  }
  for (  final InvoiceItem item : proposedItems) {
    final UUID invoiceId=item.getInvoiceId();
    if (amountOwedByInvoice.containsKey(invoiceId)) {
      amountOwedByInvoice.put(invoiceId,amountOwedByInvoice.get(invoiceId).add(item.getAmount()));
    }
 else {
      amountOwedByInvoice.put(invoiceId,item.getAmount());
    }
  }
  for (  final UUID invoiceId : amountOwedByInvoice.keySet()) {
    final BigDecimal invoiceBalance=amountOwedByInvoice.get(invoiceId);
    if (invoiceBalance.compareTo(BigDecimal.ZERO) < 0) {
      final DateTime creditDate=InvoiceDateUtils.roundDateTimeToDate(clock.getUTCNow(),DateTimeZone.UTC);
      final CreditBalanceAdjInvoiceItem creditInvoiceItem=new CreditBalanceAdjInvoiceItem(invoiceId,accountId,creditDate,invoiceBalance.negate(),currency);
      proposedItems.add(creditInvoiceItem);
    }
  }
}
