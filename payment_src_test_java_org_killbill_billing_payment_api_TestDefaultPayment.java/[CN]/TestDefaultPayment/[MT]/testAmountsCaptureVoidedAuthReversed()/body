{
  final UUID paymentId=UUID.randomUUID();
  final List<PaymentTransaction> transactions=ImmutableList.<PaymentTransaction>of(buildPaymentTransaction(paymentId,UUID.randomUUID().toString(),TransactionType.AUTHORIZE,TransactionStatus.SUCCESS,BigDecimal.TEN),buildPaymentTransaction(paymentId,UUID.randomUUID().toString(),TransactionType.CAPTURE,TransactionStatus.SUCCESS,BigDecimal.TEN),buildPaymentTransaction(paymentId,UUID.randomUUID().toString(),TransactionType.VOID,TransactionStatus.SUCCESS,null),buildPaymentTransaction(paymentId,UUID.randomUUID().toString(),TransactionType.VOID,TransactionStatus.SUCCESS,null));
  final Payment payment=buildPayment(paymentId,transactions);
  Assert.assertEquals(payment.getAuthAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getCapturedAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getPurchasedAmount().compareTo(BigDecimal.ZERO),0);
  Assert.assertEquals(payment.getRefundedAmount().compareTo(BigDecimal.ZERO),0);
}
