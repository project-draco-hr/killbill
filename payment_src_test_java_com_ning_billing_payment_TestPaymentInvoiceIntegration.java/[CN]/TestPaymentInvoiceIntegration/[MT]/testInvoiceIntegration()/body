{
  final DateTime now=new DateTime();
  final Account account=createTestAccount();
  final UUID subscriptionId=UUID.randomUUID();
  final BigDecimal amount=new BigDecimal("10.00");
  final InvoiceItem item=new DefaultInvoiceItem(null,subscriptionId,now,now.plusMonths(1),"Test",amount,new BigDecimal("1.0"),Currency.USD);
  final Invoice invoice=createTestInvoice(account,now,Currency.USD,item);
  await().atMost(1,MINUTES).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<PaymentInfo> processedPayments=paymentInfoReceiver.getProcessedPayments();
      List<PaymentError> errors=paymentInfoReceiver.getErrors();
      return processedPayments.size() == 1 || errors.size() == 1;
    }
  }
);
  assertFalse(paymentInfoReceiver.getProcessedPayments().isEmpty());
  assertTrue(paymentInfoReceiver.getErrors().isEmpty());
  List<PaymentInfo> payments=paymentInfoReceiver.getProcessedPayments();
  PaymentAttempt paymentAttempt=paymentApi.getPaymentAttemptForPaymentId(payments.get(0).getPaymentId());
  Assert.assertNotNull(paymentAttempt);
  Invoice invoiceForPayment=invoicePaymentApi.getInvoiceForPaymentAttemptId(paymentAttempt.getPaymentAttemptId());
  Assert.assertNotNull(invoiceForPayment);
  Assert.assertEquals(invoiceForPayment.getId(),invoice.getId());
  Assert.assertEquals(invoiceForPayment.getAccountId(),account.getId());
  Assert.assertEquals(invoiceForPayment.getLastPaymentAttempt(),paymentAttempt.getPaymentAttemptDate());
  Assert.assertEquals(invoiceForPayment.getAmountOutstanding(),new BigDecimal("0"));
  Assert.assertEquals(invoiceForPayment.getAmountPaid(),amount);
}
