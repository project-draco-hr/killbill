{
  final Account account=Mockito.mock(Account.class);
  Mockito.when(account.getId()).thenReturn(UUID.randomUUID());
  paymentStateContext=new PaymentStateContext(true,paymentId,null,UUID.randomUUID().toString(),UUID.randomUUID().toString(),TransactionType.CAPTURE,account,UUID.randomUUID(),new BigDecimal("192.3920111"),Currency.BRL,false,ImmutableList.<PluginProperty>of(),internalCallContext,callContext);
  if (paymentId != null) {
    final PaymentModelDao newPaymentModelDao=new PaymentModelDao(paymentId,clock.getUTCNow(),clock.getUTCNow(),paymentStateContext.getAccount().getId(),paymentStateContext.getPaymentMethodId(),1,paymentStateContext.getPaymentExternalKey());
    final PaymentTransactionModelDao newPaymentTransactionModelDao=new PaymentTransactionModelDao(clock.getUTCNow(),clock.getUTCNow(),null,paymentStateContext.getPaymentTransactionExternalKey(),paymentId,paymentStateContext.getTransactionType(),clock.getUTCNow(),TransactionStatus.UNKNOWN,paymentStateContext.getAmount(),paymentStateContext.getCurrency(),null,null);
    paymentDao.insertPaymentWithFirstTransaction(newPaymentModelDao,newPaymentTransactionModelDao,internalCallContext);
  }
  final PaymentAutomatonDAOHelper daoHelper=new PaymentAutomatonDAOHelper(paymentStateContext,clock.getUTCNow(),paymentDao,registry,internalCallContext,eventBus,paymentSMHelper);
  callback=new PaymentLeavingStateTestCallback(daoHelper);
  Mockito.when(state.getName()).thenReturn("NEW_STATE");
}
