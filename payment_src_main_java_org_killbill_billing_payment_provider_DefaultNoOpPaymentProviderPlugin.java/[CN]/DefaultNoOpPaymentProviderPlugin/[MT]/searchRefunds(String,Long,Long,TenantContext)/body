{
  final ImmutableList<RefundInfoPlugin> allResults=ImmutableList.<RefundInfoPlugin>copyOf(Iterables.<RefundInfoPlugin>filter(Iterables.<RefundInfoPlugin>concat(refunds.values()),new Predicate<RefundInfoPlugin>(){
    @Override public boolean apply(    final RefundInfoPlugin input){
      return (input.getFirstRefundReferenceId() != null && input.getFirstRefundReferenceId().contains(searchKey)) || (input.getSecondRefundReferenceId() != null && input.getSecondRefundReferenceId().contains(searchKey));
    }
  }
));
  final List<RefundInfoPlugin> results;
  if (offset >= allResults.size()) {
    results=ImmutableList.<RefundInfoPlugin>of();
  }
 else   if (offset + limit > allResults.size()) {
    results=allResults.subList(offset.intValue(),allResults.size());
  }
 else {
    results=allResults.subList(offset.intValue(),offset.intValue() + limit.intValue());
  }
  return new DefaultPagination<RefundInfoPlugin>(offset,limit,(long)results.size(),(long)refunds.values().size(),results.iterator());
}
