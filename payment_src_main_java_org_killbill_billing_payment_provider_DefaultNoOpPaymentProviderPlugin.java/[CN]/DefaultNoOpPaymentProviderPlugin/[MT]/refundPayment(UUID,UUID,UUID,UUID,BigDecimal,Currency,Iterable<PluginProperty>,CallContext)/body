{
  final List<PaymentTransactionInfoPlugin> transactions=getPaymentInfo(kbAccountId,kbPaymentId,properties,context);
  if (transactions == null || transactions.size() == 0) {
    throw new PaymentPluginApiException("",String.format("No payment found for payment id %s (plugin %s)",kbPaymentId.toString(),PLUGIN_NAME));
  }
  final Iterable<PaymentTransactionInfoPlugin> refundTransactions=Iterables.filter(transactions,new Predicate<PaymentTransactionInfoPlugin>(){
    @Override public boolean apply(    final PaymentTransactionInfoPlugin input){
      return input.getTransactionType() == TransactionType.REFUND;
    }
  }
);
  BigDecimal maxAmountRefundable=BigDecimal.ZERO;
  for (  PaymentTransactionInfoPlugin cur : refundTransactions) {
    maxAmountRefundable=maxAmountRefundable.add(cur.getAmount());
  }
  if (maxAmountRefundable.compareTo(refundAmount) < 0) {
    throw new PaymentPluginApiException("",String.format("Refund amount of %s for payment id %s is bigger than the payment amount %s (plugin %s)",refundAmount,kbPaymentId.toString(),maxAmountRefundable,PLUGIN_NAME));
  }
  return getInternalNoopPaymentInfoResult(kbPaymentId,kbTransactionId,TransactionType.REFUND,refundAmount,currency);
}
