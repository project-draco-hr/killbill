{
  final InternalTenantContext internalTenantContext=internalCallContextFactory.createInternalTenantContext(account.getId(),context);
  final List<String> to=new ArrayList<String>();
  to.add(account.getEmail());
  final List<AccountEmail> accountEmailList=accountApi.getEmails(account.getId(),internalTenantContext);
  final List<String> cc=new ArrayList<String>();
  for (  final AccountEmail email : accountEmailList) {
    cc.add(email.getEmail());
  }
  boolean manualPay=false;
  final List<Tag> accountTags=tagUserApi.getTags(account.getId(),ObjectType.ACCOUNT,internalTenantContext);
  for (  final Tag tag : accountTags) {
    if (ControlTagType.MANUAL_PAY.getId().equals(tag.getTagDefinitionId())) {
      manualPay=true;
      break;
    }
  }
  final HtmlInvoice htmlInvoice;
  try {
    htmlInvoice=generator.generateInvoice(account,invoice,manualPay,internalTenantContext);
  }
 catch (  IOException e) {
    throw new InvoiceApiException(e,ErrorCode.EMAIL_SENDING_FAILED);
  }
  String subject=htmlInvoice.getSubject();
  if (subject == null) {
    subject=config.getInvoiceEmailSubject();
  }
  final EmailSender sender=new DefaultEmailSender(config);
  try {
    sender.sendHTMLEmail(to,cc,subject,htmlInvoice.getBody());
  }
 catch (  EmailApiException e) {
    throw new InvoiceApiException(e,ErrorCode.EMAIL_SENDING_FAILED);
  }
catch (  IOException e) {
    throw new InvoiceApiException(e,ErrorCode.EMAIL_SENDING_FAILED);
  }
}
