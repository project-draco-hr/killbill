{
  final Map<NotificationKey,Boolean> expectedNotificationsFred=new TreeMap<NotificationKey,Boolean>();
  final Map<NotificationKey,Boolean> expectedNotificationsBarney=new TreeMap<NotificationKey,Boolean>();
  final NotificationQueueService notificationQueueService=new DefaultNotificationQueueService(dbi,clock);
  final NotificationConfig config=new NotificationConfig(){
    @Override public boolean isNotificationProcessingOff(){
      return false;
    }
    @Override public long getSleepTimeMs(){
      return 10;
    }
  }
;
  final NotificationQueue queueFred=notificationQueueService.createNotificationQueue("UtilTest","Fred",new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationKey notificationKey,    final DateTime eventDateTime){
      log.info("Fred received key: " + notificationKey);
      expectedNotificationsFred.put(notificationKey,Boolean.TRUE);
      eventsReceived++;
    }
  }
,config);
  final NotificationQueue queueBarney=notificationQueueService.createNotificationQueue("UtilTest","Barney",new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationKey notificationKey,    final DateTime eventDateTime){
      log.info("Barney received key: " + notificationKey);
      expectedNotificationsBarney.put(notificationKey,Boolean.TRUE);
      eventsReceived++;
    }
  }
,config);
  queueFred.startQueue();
  final UUID key=UUID.randomUUID();
  final DummyObject obj=new DummyObject("foo",key);
  final DateTime now=new DateTime();
  final DateTime readyTime=now.plusMillis(2000);
  final NotificationKey notificationKeyFred=new TestNotificationKey("Fred");
  final NotificationKey notificationKeyBarney=new TestNotificationKey("Barney");
  expectedNotificationsFred.put(notificationKeyFred,Boolean.FALSE);
  expectedNotificationsFred.put(notificationKeyBarney,Boolean.FALSE);
  dao.inTransaction(new Transaction<Void,DummySqlTest>(){
    @Override public Void inTransaction(    final DummySqlTest transactional,    final TransactionStatus status) throws Exception {
      transactional.insertDummy(obj);
      queueFred.recordFutureNotificationFromTransaction(transactional,readyTime,notificationKeyFred);
      log.info("posted key: " + notificationKeyFred.toString());
      queueBarney.recordFutureNotificationFromTransaction(transactional,readyTime,notificationKeyBarney);
      log.info("posted key: " + notificationKeyBarney.toString());
      return null;
    }
  }
);
  ((ClockMock)clock).setDeltaFromReality(3000);
  try {
    await().atMost(5,TimeUnit.SECONDS).until(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        return eventsReceived >= 2;
      }
    }
);
    Assert.fail("There should only have been one event for the queue to pick up - it got more than that");
  }
 catch (  Exception e) {
  }
  queueFred.stopQueue();
  Assert.assertTrue(expectedNotificationsFred.get(notificationKeyFred));
  Assert.assertFalse(expectedNotificationsFred.get(notificationKeyBarney));
}
