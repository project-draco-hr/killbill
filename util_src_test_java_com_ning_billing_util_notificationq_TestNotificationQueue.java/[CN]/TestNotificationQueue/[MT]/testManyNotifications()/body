{
  final Map<NotificationKey,Boolean> expectedNotifications=new TreeMap<NotificationKey,Boolean>();
  final DefaultNotificationQueue queue=new DefaultNotificationQueue(dbi,clock,"test-svc","many",new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationKey notificationKey,    final DateTime eventDateTime,    final UUID userToken,    final Long accountRecordId,    final Long tenantRecordId){
synchronized (expectedNotifications) {
        expectedNotifications.put(notificationKey,Boolean.TRUE);
        expectedNotifications.notify();
      }
    }
  }
,getNotificationConfig(false,100,10,10000),new InternalCallContextFactory(dbi,clock));
  queue.startQueue();
  final DateTime now=clock.getUTCNow();
  final int MAX_NOTIFICATIONS=100;
  for (int i=0; i < MAX_NOTIFICATIONS; i++) {
    final int nextReadyTimeIncrementMs=1000;
    final UUID key=UUID.randomUUID();
    final DummyObject obj=new DummyObject("foo",key);
    final int currentIteration=i;
    final NotificationKey notificationKey=new TestNotificationKey(key.toString());
    expectedNotifications.put(notificationKey,Boolean.FALSE);
    entitySqlDaoTransactionalJdbiWrapper.execute(new EntitySqlDaoTransactionWrapper<Void>(){
      @Override public Void inTransaction(      final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
        entitySqlDaoWrapperFactory.transmogrify(DummySqlTest.class).insertDummy(obj);
        queue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,now.plus((currentIteration + 1) * nextReadyTimeIncrementMs),notificationKey,internalCallContext);
        return null;
      }
    }
);
    if (i == 0) {
      ((ClockMock)clock).setDeltaFromReality(nextReadyTimeIncrementMs);
    }
 else {
      ((ClockMock)clock).addDeltaFromReality(nextReadyTimeIncrementMs);
    }
  }
  int nbTry=MAX_NOTIFICATIONS + 1;
  boolean success=false;
  do {
synchronized (expectedNotifications) {
      final Collection<Boolean> completed=Collections2.filter(expectedNotifications.values(),new Predicate<Boolean>(){
        @Override public boolean apply(        final Boolean input){
          return input;
        }
      }
);
      if (completed.size() == MAX_NOTIFICATIONS) {
        success=true;
        break;
      }
      expectedNotifications.wait(1000);
    }
  }
 while (nbTry-- > 0);
  queue.stopQueue();
  log.info("STEPH GOT SIZE " + Collections2.filter(expectedNotifications.values(),new Predicate<Boolean>(){
    @Override public boolean apply(    final Boolean input){
      return input;
    }
  }
).size());
  assertEquals(success,true);
}
