{
  final Map<String,Boolean> expectedNotifications=new TreeMap<String,Boolean>();
  final DefaultNotificationQueue queue=new DefaultNotificationQueue(dbi,clock,"test-svc","many",new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    String notificationKey,    DateTime eventDateTime){
synchronized (expectedNotifications) {
        expectedNotifications.put(notificationKey,Boolean.TRUE);
        expectedNotifications.notify();
      }
    }
  }
,getNotificationConfig(false,100,10,10000));
  queue.startQueue();
  final DateTime now=clock.getUTCNow();
  final int MAX_NOTIFICATIONS=100;
  for (int i=0; i < MAX_NOTIFICATIONS; i++) {
    final int nextReadyTimeIncrementMs=1000;
    final UUID key=UUID.randomUUID();
    final DummyObject obj=new DummyObject("foo",key);
    final int currentIteration=i;
    final NotificationKey notificationKey=new NotificationKey(){
      @Override public String toString(){
        return key.toString();
      }
    }
;
    expectedNotifications.put(notificationKey.toString(),Boolean.FALSE);
    dao.inTransaction(new Transaction<Void,DummySqlTest>(){
      @Override public Void inTransaction(      DummySqlTest transactional,      TransactionStatus status) throws Exception {
        transactional.insertDummy(obj);
        queue.recordFutureNotificationFromTransaction(transactional,now.plus((currentIteration + 1) * nextReadyTimeIncrementMs),notificationKey);
        return null;
      }
    }
);
    if (i == 0) {
      ((ClockMock)clock).setDeltaFromReality(nextReadyTimeIncrementMs);
    }
 else {
      ((ClockMock)clock).addDeltaFromReality(nextReadyTimeIncrementMs);
    }
  }
  int nbTry=MAX_NOTIFICATIONS + 1;
  boolean success=false;
  do {
synchronized (expectedNotifications) {
      Collection<Boolean> completed=Collections2.filter(expectedNotifications.values(),new Predicate<Boolean>(){
        @Override public boolean apply(        Boolean input){
          return input;
        }
      }
);
      if (completed.size() == MAX_NOTIFICATIONS) {
        success=true;
        break;
      }
      expectedNotifications.wait(1000);
    }
  }
 while (nbTry-- > 0);
  assertEquals(success,true);
  queue.stopQueue();
}
