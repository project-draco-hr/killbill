{
  final UUID key=UUID.randomUUID();
  final NotificationKey notificationKey=new TestNotificationKey(key.toString());
  final UUID key2=UUID.randomUUID();
  final NotificationKey notificationKey2=new TestNotificationKey(key2.toString());
  final NotificationQueue queue=queueService.createNotificationQueue("test-svc","remove",new NotificationQueueHandler(){
    @Override public void handleReadyNotification(    final NotificationKey inputKey,    final DateTime eventDateTime,    final Long accountRecordId,    final Long tenantRecordId){
      if (inputKey.equals(notificationKey) || inputKey.equals(notificationKey2)) {
        log.info("Received notification with key: " + notificationKey);
        eventsReceived++;
      }
    }
  }
,config);
  queue.startQueue();
  final DateTime start=clock.getUTCNow().plusHours(1);
  final int nextReadyTimeIncrementMs=1000;
  entitySqlDaoTransactionalJdbiWrapper.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      queue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,start.plus(nextReadyTimeIncrementMs),accountId,notificationKey,internalCallContext);
      queue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,start.plus(2 * nextReadyTimeIncrementMs),accountId,notificationKey,internalCallContext);
      queue.recordFutureNotificationFromTransaction(entitySqlDaoWrapperFactory,start.plus(3 * nextReadyTimeIncrementMs),accountId,notificationKey2,internalCallContext);
      return null;
    }
  }
);
  queue.removeNotificationsByKey(notificationKey,internalCallContext);
  ((ClockMock)clock).setDeltaFromReality(4000000 + nextReadyTimeIncrementMs * 3);
  try {
    await().atMost(10,TimeUnit.SECONDS).until(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        return eventsReceived >= 2;
      }
    }
);
    Assert.fail("There should only have been only one event left in the queue we got: " + eventsReceived);
  }
 catch (  Exception e) {
  }
  log.info("Received " + eventsReceived + " events");
  queue.stopQueue();
}
