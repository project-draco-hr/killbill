{
  final DateTime now=clock.getUTCNow();
  for (  final SubscriptionBase baseSubscription : baseSubscriptionsToConsider) {
    final EventsStream eventsStream=Iterables.<EventsStream>find(eventsStreams,new Predicate<EventsStream>(){
      @Override public boolean apply(      final EventsStream input){
        return input.getSubscriptionBase().getId().equals(baseSubscription.getId());
      }
    }
);
    final Collection<BlockingState> blockingStatesNotOnDisk=eventsStream.computeAddonsBlockingStatesForFutureSubscriptionBaseEvents();
    for (    final BlockingState blockingState : blockingStatesNotOnDisk) {
      BlockingState cancellationBlockingStateOnDisk=null;
      boolean overrideCancellationBlockingStateOnDisk=false;
      if (isEntitlementCancellationBlockingState(blockingState)) {
        cancellationBlockingStateOnDisk=findEntitlementCancellationBlockingState(blockingState.getBlockedId(),blockingStatesOnDiskCopy);
        overrideCancellationBlockingStateOnDisk=cancellationBlockingStateOnDisk != null && blockingState.getEffectiveDate().isBefore(cancellationBlockingStateOnDisk.getEffectiveDate());
      }
      if ((blockingStateType == null || (BlockingStateType.SUBSCRIPTION.equals(blockingStateType) && blockingState.getBlockedId().equals(blockableId))) && (cancellationBlockingStateOnDisk == null || overrideCancellationBlockingStateOnDisk)) {
        final BlockingStateModelDao blockingStateModelDao=new BlockingStateModelDao(blockingState,now,now);
        blockingStatesOnDiskCopy.add(BlockingStateModelDao.toBlockingState(blockingStateModelDao));
        if (overrideCancellationBlockingStateOnDisk) {
          blockingStatesOnDiskCopy.remove(cancellationBlockingStateOnDisk);
        }
      }
    }
  }
  return sortedCopy(blockingStatesOnDiskCopy);
}
