{
  final EmbeddedDB instance=get();
  instance.initialize();
  instance.start();
  if (isUsingLocalInstance()) {
    return;
  }
  instance.executeScript("drop table if exists accounts;" + "CREATE TABLE accounts (\n" + "    record_id int(11) unsigned NOT NULL AUTO_INCREMENT,\n"+ "    id char(36) NOT NULL,\n"+ "    external_key varchar(128) NULL,\n"+ "    email varchar(128) NOT NULL,\n"+ "    name varchar(100) NOT NULL,\n"+ "    first_name_length int NOT NULL,\n"+ "    currency char(3) DEFAULT NULL,\n"+ "    billing_cycle_day_local int DEFAULT NULL,\n"+ "    billing_cycle_day_utc int DEFAULT NULL,\n"+ "    payment_method_id char(36) DEFAULT NULL,\n"+ "    time_zone varchar(50) DEFAULT NULL,\n"+ "    locale varchar(5) DEFAULT NULL,\n"+ "    address1 varchar(100) DEFAULT NULL,\n"+ "    address2 varchar(100) DEFAULT NULL,\n"+ "    company_name varchar(50) DEFAULT NULL,\n"+ "    city varchar(50) DEFAULT NULL,\n"+ "    state_or_province varchar(50) DEFAULT NULL,\n"+ "    country varchar(50) DEFAULT NULL,\n"+ "    postal_code varchar(16) DEFAULT NULL,\n"+ "    phone varchar(25) DEFAULT NULL,\n"+ "    migrated bool DEFAULT false,\n"+ "    is_notified_for_invoices boolean NOT NULL,\n"+ "    created_date datetime NOT NULL,\n"+ "    created_by varchar(50) NOT NULL,\n"+ "    updated_date datetime DEFAULT NULL,\n"+ "    updated_by varchar(50) DEFAULT NULL,\n"+ "    tenant_record_id int(11) unsigned default null,\n"+ "    PRIMARY KEY(record_id)\n"+ ");");
  instance.executeScript("DROP TABLE IF EXISTS tenants;\n" + "CREATE TABLE tenants (\n" + "    record_id int(11) unsigned NOT NULL AUTO_INCREMENT,\n"+ "    id char(36) NOT NULL,\n"+ "    external_key varchar(128) NULL,\n"+ "    api_key varchar(128) NULL,\n"+ "    api_secret varchar(128) NULL,\n"+ "    api_salt varchar(128) NULL,\n"+ "    created_date datetime NOT NULL,\n"+ "    created_by varchar(50) NOT NULL,\n"+ "    updated_date datetime DEFAULT NULL,\n"+ "    updated_by varchar(50) DEFAULT NULL,\n"+ "    PRIMARY KEY(record_id)\n"+ ");");
  instance.executeScript("DROP TABLE IF EXISTS bundles;\n" + "CREATE TABLE bundles (\n" + "    record_id int(11) unsigned NOT NULL AUTO_INCREMENT,\n"+ "    id char(36) NOT NULL,\n"+ "    external_key varchar(64) NOT NULL,\n"+ "    account_id char(36) NOT NULL,\n"+ "    last_sys_update_date datetime,\n"+ "    created_by varchar(50) NOT NULL,\n"+ "    created_date datetime NOT NULL,\n"+ "    updated_by varchar(50) NOT NULL,\n"+ "    updated_date datetime NOT NULL,\n"+ "    account_record_id int(11) unsigned default null,\n"+ "    tenant_record_id int(11) unsigned default null,\n"+ "    PRIMARY KEY(record_id)\n"+ ");");
  instance.executeScript("DROP TABLE IF EXISTS subscriptions;\n" + "CREATE TABLE subscriptions (\n" + "    record_id int(11) unsigned NOT NULL AUTO_INCREMENT,\n"+ "    id char(36) NOT NULL,\n"+ "    bundle_id char(36) NOT NULL,\n"+ "    category varchar(32) NOT NULL,\n"+ "    start_date datetime NOT NULL,\n"+ "    bundle_start_date datetime NOT NULL,\n"+ "    active_version int(11) DEFAULT 1,\n"+ "    charged_through_date datetime DEFAULT NULL,\n"+ "    paid_through_date datetime DEFAULT NULL,\n"+ "    created_by varchar(50) NOT NULL,\n"+ "    created_date datetime NOT NULL,\n"+ "    updated_by varchar(50) NOT NULL,\n"+ "    updated_date datetime NOT NULL,\n"+ "    account_record_id int(11) unsigned default null,\n"+ "    tenant_record_id int(11) unsigned default null,\n"+ "    PRIMARY KEY(record_id)\n"+ ");");
  instance.executeScript("DROP TABLE IF EXISTS payments;\n" + "CREATE TABLE payments (\n" + "    record_id int(11) unsigned NOT NULL AUTO_INCREMENT,\n"+ "    id char(36) NOT NULL,\n"+ "    account_id char(36) NOT NULL,\n"+ "    invoice_id char(36) NOT NULL,\n"+ "    payment_method_id char(36) NOT NULL,\n"+ "    amount numeric(15,9),\n"+ "    currency char(3),\n"+ "    effective_date datetime,\n"+ "    payment_status varchar(50),\n"+ "    created_by varchar(50) NOT NULL,\n"+ "    created_date datetime NOT NULL,\n"+ "    updated_by varchar(50) NOT NULL,\n"+ "    updated_date datetime NOT NULL,\n"+ "    account_record_id int(11) unsigned default null,\n"+ "    tenant_record_id int(11) unsigned default null,\n"+ "    PRIMARY KEY (record_id)\n"+ ");");
  for (  final String pack : new String[]{"account","analytics","beatrix","subscription","util","payment","invoice","entitlement","usage","meter","tenant"}) {
    for (    final String ddlFile : new String[]{"ddl.sql","ddl_test.sql"}) {
      final String ddl;
      try {
        ddl=IOUtils.toString(Resources.getResource("org/killbill/billing/" + pack + "/"+ ddlFile).openStream());
      }
 catch (      final IllegalArgumentException ignored) {
        continue;
      }
      instance.executeScript(ddl);
    }
  }
  instance.refreshTableNames();
}
