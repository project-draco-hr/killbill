{
  try {
    return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Invoice>(){
      @Override public Invoice inTransaction(      final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
        final InvoiceSqlDao invoiceDao=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
        final Invoice invoice=invoiceDao.getById(invoiceId.toString(),context);
        if (invoice == null) {
          throw new InvoiceApiException(ErrorCode.INVOICE_NOT_FOUND,invoiceId);
        }
        populateChildren(invoice,entitySqlDaoWrapperFactory,context);
        return invoice;
      }
    }
);
  }
 catch (  TransactionFailedException e) {
    if (e.getCause() instanceof InvoiceApiException) {
      throw (InvoiceApiException)e.getCause();
    }
 else {
      throw e;
    }
  }
}
