{
  transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<Void>(){
    @Override public Void inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final InvoiceSqlDao transactional=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
      final Invoice currentInvoice=transactional.getById(invoice.getId().toString(),context);
      if (currentInvoice == null) {
        if (isRealInvoice) {
          transactional.create(invoice,context);
        }
        final List<InvoiceItem> invoiceItems=invoice.getInvoiceItems();
        final InvoiceItemSqlDao transInvoiceItemSqlDao=entitySqlDaoWrapperFactory.become(InvoiceItemSqlDao.class);
        transInvoiceItemSqlDao.batchCreateFromTransaction(invoiceItems,context);
        final List<InvoiceItem> recurringInvoiceItems=invoice.getInvoiceItems(RecurringInvoiceItem.class);
        notifyOfFutureBillingEvents(transactional,invoice.getAccountId(),recurringInvoiceItems);
        final List<InvoicePayment> invoicePayments=invoice.getPayments();
        final InvoicePaymentSqlDao invoicePaymentSqlDao=entitySqlDaoWrapperFactory.become(InvoicePaymentSqlDao.class);
        invoicePaymentSqlDao.batchCreateFromTransaction(invoicePayments,context);
      }
      return null;
    }
  }
);
}
