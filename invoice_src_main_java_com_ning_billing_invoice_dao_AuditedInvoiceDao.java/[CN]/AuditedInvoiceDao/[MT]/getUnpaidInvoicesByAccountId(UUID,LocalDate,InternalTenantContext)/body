{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<List<Invoice>>(){
    @Override public List<Invoice> inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final InvoiceSqlDao invoiceDao=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
      final List<Invoice> invoices=getAllInvoicesByAccountFromTransaction(accountId,entitySqlDaoWrapperFactory,context);
      final Collection<Invoice> unpaidInvoices=Collections2.filter(invoices,new Predicate<Invoice>(){
        @Override public boolean apply(        final Invoice in){
          return (in.getBalance().compareTo(BigDecimal.ZERO) >= 1) && (upToDate == null || !in.getTargetDate().isAfter(upToDate));
        }
      }
);
      return new ArrayList<Invoice>(unpaidInvoices);
    }
  }
);
}
