{
  final Invoice invoice=transactional.getById(invoiceId.toString(),context);
  if (invoice != null) {
    populateChildren(invoice,transactional,context);
  }
 else {
    throw new IllegalStateException("Invoice shouldn't be null for this item at this stage " + invoiceId);
  }
  if (invoice.getBalance().compareTo(BigDecimal.ZERO) < 0) {
    final InvoiceItemSqlDao transInvoiceItemDao=transactional.become(InvoiceItemSqlDao.class);
    final InvoiceItem cbaAdjItem=new CreditBalanceAdjInvoiceItem(invoice.getId(),invoice.getAccountId(),context.getCreatedDate().toLocalDate(),invoice.getBalance().negate(),invoice.getCurrency());
    transInvoiceItemDao.create(cbaAdjItem,context);
    final Long cbaAdjItemRecordId=transInvoiceItemDao.getRecordId(cbaAdjItem.getId().toString(),context);
    audits.add(new EntityAudit(TableName.INVOICE_ITEMS,cbaAdjItemRecordId,ChangeType.INSERT));
  }
}
