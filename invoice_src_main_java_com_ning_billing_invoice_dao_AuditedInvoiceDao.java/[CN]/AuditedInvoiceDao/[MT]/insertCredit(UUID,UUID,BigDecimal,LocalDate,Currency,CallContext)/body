{
  return invoiceSqlDao.inTransaction(new Transaction<InvoiceItem,InvoiceSqlDao>(){
    @Override public InvoiceItem inTransaction(    final InvoiceSqlDao transactional,    final TransactionStatus status) throws Exception {
      final List<EntityAudit> audits=new ArrayList<EntityAudit>();
      UUID invoiceIdForCredit=invoiceId;
      if (invoiceIdForCredit == null) {
        final Invoice invoiceForCredit=new DefaultInvoice(accountId,effectiveDate,effectiveDate,currency);
        transactional.create(invoiceForCredit,context);
        final Long invoiceForCreditRecordId=transactional.getRecordId(invoiceForCredit.getId().toString());
        audits.add(new EntityAudit(TableName.INVOICES,invoiceForCreditRecordId,ChangeType.INSERT));
        invoiceIdForCredit=invoiceForCredit.getId();
      }
      final InvoiceItem credit=new CreditAdjInvoiceItem(invoiceIdForCredit,accountId,effectiveDate,positiveCreditAmount.negate(),currency);
      insertItemAndAddCBAIfNeeded(transactional,credit,audits,context);
      notifyBusOfInvoiceAdjustment(transactional,invoiceId,accountId,context.getUserToken());
      transactional.insertAuditFromTransaction(audits,context);
      return credit;
    }
  }
);
}
