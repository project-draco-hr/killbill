{
  return transactionalSqlDao.execute(new EntitySqlDaoTransactionWrapper<InvoiceItem>(){
    @Override public InvoiceItem inTransaction(    final EntitySqlDaoWrapperFactory<EntitySqlDao> entitySqlDaoWrapperFactory) throws Exception {
      final InvoiceSqlDao transactional=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class);
      UUID invoiceIdForCredit=invoiceId;
      if (invoiceIdForCredit == null) {
        final Invoice invoiceForCredit=new DefaultInvoice(accountId,effectiveDate,effectiveDate,currency);
        transactional.create(invoiceForCredit,context);
        invoiceIdForCredit=invoiceForCredit.getId();
      }
      final InvoiceItem credit=new CreditAdjInvoiceItem(invoiceIdForCredit,accountId,effectiveDate,positiveCreditAmount.negate(),currency);
      insertItemAndAddCBAIfNeeded(entitySqlDaoWrapperFactory,credit,context);
      notifyBusOfInvoiceAdjustment(entitySqlDaoWrapperFactory,invoiceId,accountId,context.getUserToken(),context);
      return credit;
    }
  }
);
}
