{
  try {
    final StandaloneCatalog catalog=XMLLoader.getObjectFromString(Resources.getResource("UsageExperimental.xml").toExternalForm(),StandaloneCatalog.class);
    final Usage[] usages=getUsages(catalog,"consumable-in-advance-topup");
    assertEquals(usages.length,1);
    final Usage usage=usages[0];
    assertEquals(usage.getName(),"consumable-in-advance-topup-usage1");
    assertEquals(usage.getBillingPeriod(),BillingPeriod.NO_BILLING_PERIOD);
    assertEquals(usage.getUsageType(),UsageType.CONSUMABLE);
    assertEquals(usage.getBillingMode(),BillingMode.IN_ADVANCE);
    assertEquals(usage.getLimits().length,0);
    assertEquals(usage.getTiers().length,0);
    assertEquals(usage.getBlocks().length,1);
    assertEquals(usage.getBlocks()[0].getUnit().getName(),"fastrack-tokens");
    assertEquals(usage.getBlocks()[0].getSize(),new Double("10"));
    assertEquals(usage.getBlocks()[0].getPrice().getPrices().length,1);
    assertEquals(usage.getBlocks()[0].getPrice().getPrices()[0].getCurrency(),Currency.BTC);
    assertEquals(usage.getBlocks()[0].getPrice().getPrices()[0].getValue(),new BigDecimal("0.10"));
    assertEquals(usage.getBlocks()[0].getMinTopUpCredit(),new Double("5"));
  }
 catch (  Exception e) {
    Assert.fail(e.toString());
  }
}
