{
  final String subscriptionId=UUID.randomUUID().toString();
  final DateTime requestedDate=DefaultClock.toUTCDateTime(new DateTime(DateTimeZone.UTC));
  final DateTime effectiveDate=DefaultClock.toUTCDateTime(new DateTime(DateTimeZone.UTC));
  final UUID eventId=UUID.randomUUID();
  final List<AuditLogJson> auditLogs=createAuditLogsJson(clock.getUTCNow());
  final EntitlementJsonWithEvents.SubscriptionReadEventJson newEvent=new EntitlementJsonWithEvents.SubscriptionReadEventJson(eventId.toString(),BillingPeriod.NO_BILLING_PERIOD.toString(),requestedDate,effectiveDate,UUID.randomUUID().toString(),UUID.randomUUID().toString(),SubscriptionBaseTransitionType.CREATE.toString(),PhaseType.DISCOUNT.toString(),auditLogs);
  final EntitlementJsonWithEvents subscriptionJsonWithEvents=null;
  final String asJson=mapper.writeValueAsString(subscriptionJsonWithEvents);
  final EntitlementJsonWithEvents fromJson=mapper.readValue(asJson,EntitlementJsonWithEvents.class);
  Assert.assertEquals(fromJson,subscriptionJsonWithEvents);
}
