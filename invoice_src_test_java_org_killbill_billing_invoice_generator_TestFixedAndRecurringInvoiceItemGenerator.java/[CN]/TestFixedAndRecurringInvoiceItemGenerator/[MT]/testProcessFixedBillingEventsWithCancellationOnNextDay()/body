{
  final LocalDate targetDate=new LocalDate("2016-01-08");
  final UUID invoiceId=UUID.randomUUID();
  final BillingEventSet events=new MockBillingEventSet(internalCallContext);
  final BigDecimal fixedPriceAmount=BigDecimal.TEN;
  final MockInternationalPrice fixedPrice=new MockInternationalPrice(new DefaultPrice(fixedPriceAmount,Currency.USD));
  final Plan plan=new MockPlan("my-plan");
  final PlanPhase phase=new MockPlanPhase(null,fixedPrice,BillingPeriod.NO_BILLING_PERIOD,PhaseType.TRIAL);
  final BillingEvent event1=invoiceUtil.createMockBillingEvent(account,subscription,new DateTime("2016-01-08"),plan,phase,fixedPriceAmount,null,Currency.USD,BillingPeriod.NO_BILLING_PERIOD,1,BillingMode.IN_ADVANCE,"Billing Event Desc",1L,SubscriptionBaseTransitionType.CREATE);
  events.add(event1);
  final BillingEvent event2=invoiceUtil.createMockBillingEvent(account,subscription,new DateTime("2016-01-09"),plan,phase,null,null,Currency.USD,BillingPeriod.NO_BILLING_PERIOD,1,BillingMode.IN_ADVANCE,"Billing Event Desc",2L,SubscriptionBaseTransitionType.CANCEL);
  events.add(event2);
  final List<InvoiceItem> proposedItems=new ArrayList<InvoiceItem>();
  fixedAndRecurringInvoiceItemGenerator.processFixedBillingEvents(invoiceId,account.getId(),events,targetDate,Currency.USD,proposedItems);
  assertEquals(proposedItems.size(),1);
  assertEquals(proposedItems.get(0).getInvoiceItemType(),InvoiceItemType.FIXED);
  assertEquals(proposedItems.get(0).getAmount().compareTo(fixedPriceAmount),0);
}
