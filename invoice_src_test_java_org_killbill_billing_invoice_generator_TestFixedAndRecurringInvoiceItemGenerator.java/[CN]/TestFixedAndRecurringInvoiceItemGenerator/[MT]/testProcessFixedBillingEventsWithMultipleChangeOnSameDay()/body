{
  final LocalDate targetDate=new LocalDate("2016-01-08");
  final UUID invoiceId=UUID.randomUUID();
  final BillingEventSet events=new MockBillingEventSet();
  final BigDecimal fixedPriceAmount1=BigDecimal.TEN;
  final MockInternationalPrice fixedPrice1=new MockInternationalPrice(new DefaultPrice(fixedPriceAmount1,Currency.USD));
  final Plan plan1=new MockPlan("my-plan1");
  final PlanPhase planPhase1=new MockPlanPhase(null,fixedPrice1,BillingPeriod.NO_BILLING_PERIOD,PhaseType.TRIAL);
  final BillingEvent event1=invoiceUtil.createMockBillingEvent(account,subscription,new DateTime("2016-01-08"),plan1,planPhase1,fixedPriceAmount1,null,Currency.USD,BillingPeriod.NO_BILLING_PERIOD,1,BillingMode.IN_ADVANCE,"Billing Event Desc",1L,SubscriptionBaseTransitionType.CREATE);
  events.add(event1);
  final BigDecimal fixedPriceAmount2=null;
  final MockInternationalPrice fixedPrice2=new MockInternationalPrice(new DefaultPrice(fixedPriceAmount2,Currency.USD));
  final Plan plan2=new MockPlan("my-plan2");
  final PlanPhase planPhase2=new MockPlanPhase(null,fixedPrice2,BillingPeriod.NO_BILLING_PERIOD,PhaseType.TRIAL);
  final BillingEvent event2=invoiceUtil.createMockBillingEvent(account,subscription,new DateTime("2016-01-08"),plan2,planPhase2,fixedPriceAmount2,null,Currency.USD,BillingPeriod.NO_BILLING_PERIOD,1,BillingMode.IN_ADVANCE,"Billing Event Desc",2L,SubscriptionBaseTransitionType.CHANGE);
  events.add(event2);
  final BigDecimal fixedPriceAmount3=BigDecimal.ONE;
  final MockInternationalPrice fixedPrice3=new MockInternationalPrice(new DefaultPrice(fixedPriceAmount3,Currency.USD));
  final Plan plan3=new MockPlan("my-plan3");
  final PlanPhase planPhase3=new MockPlanPhase(null,fixedPrice3,BillingPeriod.NO_BILLING_PERIOD,PhaseType.TRIAL);
  final BillingEvent event3=invoiceUtil.createMockBillingEvent(account,subscription,new DateTime("2016-01-08"),plan3,planPhase3,fixedPriceAmount3,null,Currency.USD,BillingPeriod.NO_BILLING_PERIOD,1,BillingMode.IN_ADVANCE,"Billing Event Desc",3L,SubscriptionBaseTransitionType.CHANGE);
  events.add(event3);
  final List<InvoiceItem> proposedItems=new ArrayList<InvoiceItem>();
  fixedAndRecurringInvoiceItemGenerator.processFixedBillingEvents(invoiceId,account.getId(),events,targetDate,Currency.USD,proposedItems);
  assertEquals(proposedItems.size(),1);
  assertEquals(proposedItems.get(0).getInvoiceItemType(),InvoiceItemType.FIXED);
  assertEquals(proposedItems.get(0).getAmount(),fixedPriceAmount3);
}
