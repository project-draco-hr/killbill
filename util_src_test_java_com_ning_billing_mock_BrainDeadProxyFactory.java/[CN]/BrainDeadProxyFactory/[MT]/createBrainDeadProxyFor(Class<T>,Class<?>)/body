{
  final Class<?>[] clazzes=Arrays.copyOf(others,others.length + 2);
  clazzes[others.length]=ZombieControl.class;
  clazzes[others.length + 1]=clazz;
  return (T)Proxy.newProxyInstance(clazz.getClassLoader(),clazzes,new InvocationHandler(){
    private final Map<String,Object> results=new HashMap<String,Object>();
    @Override public Object invoke(    final Object proxy,    final Method method,    final Object[] args) throws Throwable {
      if (method.getDeclaringClass().equals(ZombieControl.class)) {
        if (method.getName().equals("addResult")) {
          results.put((String)args[0],args[1]);
          return proxy;
        }
 else         if (method.getName().equals("clearResults")) {
          results.clear();
          return proxy;
        }
      }
 else {
        final Object result=results.get(method.getName());
        if (result == ZOMBIE_VOID) {
          return (Void)null;
        }
 else         if (result != null) {
          if (result instanceof Throwable) {
            throw ((Throwable)result);
          }
          return result;
        }
 else         if (method.getName().equals("equals")) {
          return proxy == args[0];
        }
 else {
          log.error(String.format("No result for Method: '%s' on Class '%s'",method.getName(),method.getDeclaringClass().getName()));
          throw new UnsupportedOperationException();
        }
      }
      return null;
    }
  }
);
}
