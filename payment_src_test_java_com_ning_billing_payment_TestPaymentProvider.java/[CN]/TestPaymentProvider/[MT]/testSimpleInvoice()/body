{
  final Account account=createAccount();
  final DateTime now=new DateTime();
  BillingEventSet events=new BillingEventSet();
  UUID subscriptionId=UUID.randomUUID();
  String planName="My plan";
  String phaseName="phase 1";
  BillingEvent event=new DefaultBillingEvent(subscriptionId,now,planName,phaseName,new InternationalPriceMock(new BigDecimal("10.00")),BillingPeriod.MONTHLY,1,BillingModeType.IN_ADVANCE);
  events.add(event);
  final Invoice invoice=createInvoice(account,null,null,new DateTime(),Currency.USD);
  eventBus.post(createNotificationFor(invoice));
  await().atMost(1,MINUTES).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<PaymentInfo> processedPayments=paymentInfoReceiver.getProcessedPayments();
      List<PaymentError> errors=paymentInfoReceiver.getErrors();
      return processedPayments.size() == 1 || errors.size() == 1;
    }
  }
);
  assertFalse(paymentInfoReceiver.getProcessedPayments().isEmpty());
  assertTrue(paymentInfoReceiver.getErrors().isEmpty());
  final PaymentInfo paymentInfo=paymentInfoReceiver.getProcessedPayments().get(0);
  final PaymentInfoRequest paymentInfoRequest=new PaymentInfoRequest(account.getId(),paymentInfo.getId());
  paymentInfoReceiver.clear();
  eventBus.post(paymentInfoRequest);
  await().atMost(5,MINUTES).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<PaymentInfo> processedPayments=paymentInfoReceiver.getProcessedPayments();
      List<PaymentError> errors=paymentInfoReceiver.getErrors();
      return processedPayments.size() == 1 || errors.size() == 1;
    }
  }
);
  assertFalse(paymentInfoReceiver.getProcessedPayments().isEmpty());
  assertTrue(paymentInfoReceiver.getErrors().isEmpty());
  assertEquals(paymentInfoReceiver.getProcessedPayments().get(0),paymentInfo);
}
