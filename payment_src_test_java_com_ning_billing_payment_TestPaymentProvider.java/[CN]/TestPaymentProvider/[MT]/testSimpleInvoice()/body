{
  final Account account=createAccount();
  final DateTime now=new DateTime();
  final UUID subscriptionId=UUID.randomUUID();
  final BigDecimal amount=new BigDecimal("10.00");
  final Invoice invoice=createInvoice(account,now,Currency.USD);
  invoice.add(new DefaultInvoiceItem(invoice.getId(),subscriptionId,now,now.plusMonths(1),"Test",amount,new BigDecimal("1.0"),Currency.USD));
  eventBus.post(createNotificationFor(invoice));
  await().atMost(1,MINUTES).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<PaymentInfo> processedPayments=paymentInfoReceiver.getProcessedPayments();
      List<PaymentError> errors=paymentInfoReceiver.getErrors();
      return processedPayments.size() == 1 || errors.size() == 1;
    }
  }
);
  assertFalse(paymentInfoReceiver.getProcessedPayments().isEmpty());
  assertTrue(paymentInfoReceiver.getErrors().isEmpty());
  final PaymentInfo paymentInfo=paymentInfoReceiver.getProcessedPayments().get(0);
  final PaymentInfoRequest paymentInfoRequest=new PaymentInfoRequest(account.getId(),paymentInfo.getId());
  paymentInfoReceiver.clear();
  eventBus.post(paymentInfoRequest);
  await().atMost(5,MINUTES).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<PaymentInfo> processedPayments=paymentInfoReceiver.getProcessedPayments();
      List<PaymentError> errors=paymentInfoReceiver.getErrors();
      return processedPayments.size() == 1 || errors.size() == 1;
    }
  }
);
  assertFalse(paymentInfoReceiver.getProcessedPayments().isEmpty());
  assertTrue(paymentInfoReceiver.getErrors().isEmpty());
  assertEquals(paymentInfoReceiver.getProcessedPayments().get(0),paymentInfo);
}
