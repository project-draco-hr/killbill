{
  replayCount.incrementAndGet();
  log.info("Starting replay of files in {}",spoolDir);
  final Replayer replayer=new Replayer(spoolDir);
  StartTimes lastStartTimes=null;
  if (shutdownSaveMode == ShutdownSaveMode.SAVE_START_TIMES) {
    lastStartTimes=timelineDAO.getLastStartTimes();
    if (lastStartTimes == null) {
      log.info("Did not find startTimes");
    }
 else {
      log.info("Retrieved startTimes from the db");
    }
  }
  final StartTimes startTimes=lastStartTimes;
  final DateTime minStartTime=lastStartTimes == null ? null : startTimes.getMinStartTime();
  final long found=replaySamplesFoundCount.get();
  final long outsideTimeRange=replaySamplesOutsideTimeRangeCount.get();
  final long processed=replaySamplesProcessedCount.get();
  try {
    replaying.set(true);
    final int filesSkipped=replayer.readAll(startTimes == null,minStartTime,new Function<SourceSamplesForTimestamp,Void>(){
      @Override public Void apply(      @Nullable final SourceSamplesForTimestamp hostSamples){
        if (hostSamples != null) {
          replaySamplesFoundCount.incrementAndGet();
          boolean useSamples=true;
          try {
            final int sourceId=hostSamples.getSourceId();
            final String category=hostSamples.getCategory();
            final int categoryId=timelineDAO.getEventCategoryId(category);
            if (startTimes != null) {
              final DateTime timestamp=hostSamples.getTimestamp();
              final DateTime categoryStartTime=startTimes.getStartTimeForSourceIdAndCategoryId(sourceId,categoryId);
              if (timestamp == null || timestamp.isBefore(startTimes.getMinStartTime()) || (categoryStartTime != null && timestamp.isBefore(categoryStartTime))) {
                replaySamplesOutsideTimeRangeCount.incrementAndGet();
                useSamples=false;
              }
            }
            if (useSamples) {
              replaySamplesProcessedCount.incrementAndGet();
              processSamples(hostSamples);
            }
          }
 catch (          Exception e) {
            log.warn("Got exception replaying sample, data potentially lost! {}",hostSamples.toString());
          }
        }
        return null;
      }
    }
);
    if (shutdownSaveMode == ShutdownSaveMode.SAVE_START_TIMES) {
      timelineDAO.deleteLastStartTimes();
      log.info("Deleted old startTimes");
    }
    log.info(String.format("Replay completed; %d files skipped, samples read %d, samples outside time range %d, samples used %d",filesSkipped,replaySamplesFoundCount.get() - found,replaySamplesOutsideTimeRangeCount.get() - outsideTimeRange,replaySamplesProcessedCount.get() - processed));
  }
 catch (  RuntimeException e) {
    log.error("Ignoring error when replaying the data",e);
  }
 finally {
    replaying.set(false);
  }
}
