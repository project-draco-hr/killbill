{
  final Invoice invoice=new DefaultInvoice(UUID.randomUUID(),clock.getUTCToday(),clock.getUTCToday(),Currency.USD);
  final InvoiceItem invoiceItem=new RecurringInvoiceItem(invoice.getId(),invoice.getAccountId(),UUID.randomUUID(),UUID.randomUUID(),"test plan","test phase",new LocalDate(2010,1,1),new LocalDate(2010,4,1),INVOICE_ITEM_AMOUNT,new BigDecimal("7.00"),Currency.USD);
  invoice.addInvoiceItem(invoiceItem);
  invoiceDao.create(invoice,1,true,internalCallContext);
  try {
    invoiceDao.insertInvoiceItemAdjustment(invoice.getAccountId(),UUID.randomUUID(),invoiceItem.getId(),new LocalDate(2010,1,1),null,null,internalCallContext);
    Assert.fail("Should not have been able to adjust an item on a non existing invoice");
  }
 catch (  Exception e) {
    Assert.assertEquals(((InvoiceApiException)e.getCause()).getCode(),ErrorCode.INVOICE_INVALID_FOR_INVOICE_ITEM_ADJUSTMENT.getCode());
  }
}
