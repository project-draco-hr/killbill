{
  final LocalDate effectiveDate=new LocalDate(2010,1,1);
  final InvoiceItemModelDao adjustedInvoiceItem=invoiceDao.insertInvoiceItemAdjustment(invoice.getAccountId(),invoice.getId(),invoiceItem.getId(),effectiveDate,amount,null,internalCallContext);
  Assert.assertEquals(adjustedInvoiceItem.getAccountId(),invoiceItem.getAccountId());
  Assert.assertNull(adjustedInvoiceItem.getBundleId());
  Assert.assertEquals(adjustedInvoiceItem.getCurrency(),invoiceItem.getCurrency());
  Assert.assertEquals(adjustedInvoiceItem.getEndDate(),effectiveDate);
  Assert.assertEquals(adjustedInvoiceItem.getInvoiceId(),invoiceItem.getInvoiceId());
  Assert.assertEquals(adjustedInvoiceItem.getType(),InvoiceItemType.ITEM_ADJ);
  Assert.assertEquals(adjustedInvoiceItem.getLinkedItemId(),invoiceItem.getId());
  Assert.assertNull(adjustedInvoiceItem.getPhaseName());
  Assert.assertNull(adjustedInvoiceItem.getPlanName());
  Assert.assertNull(adjustedInvoiceItem.getRate());
  Assert.assertEquals(adjustedInvoiceItem.getStartDate(),effectiveDate);
  Assert.assertNull(adjustedInvoiceItem.getSubscriptionId());
  final InvoiceItemModelDao retrievedInvoiceItem=invoiceItemSqlDao.getById(adjustedInvoiceItem.getId().toString(),internalCallContext);
  Assert.assertEquals(retrievedInvoiceItem.getAccountId(),adjustedInvoiceItem.getAccountId());
  Assert.assertNull(retrievedInvoiceItem.getBundleId());
  Assert.assertEquals(retrievedInvoiceItem.getCurrency(),adjustedInvoiceItem.getCurrency());
  Assert.assertEquals(retrievedInvoiceItem.getEndDate(),adjustedInvoiceItem.getEndDate());
  Assert.assertEquals(retrievedInvoiceItem.getInvoiceId(),adjustedInvoiceItem.getInvoiceId());
  Assert.assertEquals(retrievedInvoiceItem.getType(),adjustedInvoiceItem.getType());
  Assert.assertEquals(retrievedInvoiceItem.getLinkedItemId(),adjustedInvoiceItem.getLinkedItemId());
  Assert.assertNull(retrievedInvoiceItem.getPhaseName());
  Assert.assertNull(retrievedInvoiceItem.getPlanName());
  Assert.assertNull(retrievedInvoiceItem.getRate());
  Assert.assertEquals(retrievedInvoiceItem.getStartDate(),adjustedInvoiceItem.getStartDate());
  Assert.assertNull(retrievedInvoiceItem.getSubscriptionId());
  final InvoiceModelDao retrievedInvoice=invoiceDao.getById(adjustedInvoiceItem.getInvoiceId(),internalCallContext);
  final List<InvoiceItemModelDao> invoiceItems=retrievedInvoice.getInvoiceItems();
  Assert.assertEquals(invoiceItems.size(),2);
  final InvoiceItemModelDao retrievedByInvoiceInvoiceItem;
  if (invoiceItems.get(0).getId().equals(adjustedInvoiceItem.getId())) {
    retrievedByInvoiceInvoiceItem=invoiceItems.get(0);
  }
 else {
    retrievedByInvoiceInvoiceItem=invoiceItems.get(1);
  }
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getAccountId(),adjustedInvoiceItem.getAccountId());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getBundleId(),adjustedInvoiceItem.getBundleId());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getCurrency(),adjustedInvoiceItem.getCurrency());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getEndDate(),adjustedInvoiceItem.getEndDate());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getInvoiceId(),adjustedInvoiceItem.getInvoiceId());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getType(),adjustedInvoiceItem.getType());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getLinkedItemId(),adjustedInvoiceItem.getLinkedItemId());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getPhaseName(),adjustedInvoiceItem.getPhaseName());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getPlanName(),adjustedInvoiceItem.getPlanName());
  Assert.assertEquals(retrievedByInvoiceInvoiceItem.getRate(),adjustedInvoiceItem.getRate());
  Assert.assertEquals(retrievedInvoiceItem.getStartDate(),adjustedInvoiceItem.getStartDate());
  Assert.assertEquals(retrievedInvoiceItem.getSubscriptionId(),adjustedInvoiceItem.getSubscriptionId());
  if (amount == null) {
    Assert.assertEquals(InvoiceModelDaoHelper.getBalance(retrievedInvoice).compareTo(BigDecimal.ZERO),0);
  }
 else {
    Assert.assertEquals(InvoiceModelDaoHelper.getBalance(retrievedInvoice).compareTo(INVOICE_ITEM_AMOUNT.add(amount.negate())),0);
  }
  return adjustedInvoiceItem;
}
