{
  final Collection<PaymentTransaction> pendingTransaction=Collections2.filter(initialPayment.getTransactions(),new Predicate<PaymentTransaction>(){
    @Override public boolean apply(    final PaymentTransaction input){
      if (input.getTransactionStatus() != TransactionStatus.PENDING) {
        return false;
      }
      if (transactionId != null && !transactionId.equals(input.getId().toString())) {
        return false;
      }
      if (transactionExternalKey != null && !transactionExternalKey.equals(input.getExternalKey())) {
        return false;
      }
      if (transactionType != null && !transactionType.equals(input.getTransactionType().name())) {
        return false;
      }
      return true;
    }
  }
);
switch (pendingTransaction.size()) {
case 0:
    final String parameterType;
  final String parameterValue;
if (transactionId != null) {
  parameterType="transactionId";
  parameterValue=transactionId;
}
 else if (transactionExternalKey != null) {
  parameterType="transactionExternalKey";
  parameterValue=transactionExternalKey;
}
 else if (transactionType != null) {
  parameterType="transactionType";
  parameterValue=transactionType;
}
 else {
  parameterType="paymentId";
  parameterValue=initialPayment.getId().toString();
}
throw new PaymentApiException(ErrorCode.PAYMENT_INVALID_PARAMETER,parameterType,parameterValue);
case 1:
return pendingTransaction.iterator().next();
default :
throw new PaymentApiException(ErrorCode.PAYMENT_INTERNAL_ERROR,String.format("Illegal payment state: Found multiple PENDING payment transactions for paymentId=%s",initialPayment.getId()));
}
}
