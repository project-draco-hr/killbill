{
  final List<PluginProperty> properties=new ArrayList<PluginProperty>();
  final Iterator<PluginProperty> pluginPropertyIterator=pluginProperties.iterator();
  while (pluginPropertyIterator.hasNext()) {
    properties.add(pluginPropertyIterator.next());
  }
  final String paymentExternalKey=UUIDs.randomUUID().toString();
  final String transactionExternalKey=UUIDs.randomUUID().toString();
  final PluginProperty invoiceProperty=new PluginProperty("IPCD_INVOICE_ID",invoiceId.toString(),false);
  properties.add(invoiceProperty);
  try {
    return paymentApi.createPurchaseWithPaymentControl(account,paymentMethodId,null,amountToPay,account.getCurrency(),paymentExternalKey,transactionExternalKey,properties,createInvoicePaymentControlPluginApiPaymentOptions(externalPayment),callContext);
  }
 catch (  final PaymentApiException e) {
    if (e.getCode() == ErrorCode.PAYMENT_PLUGIN_EXCEPTION.getCode() && e.getMessage().contains("Aborted Payment for invoice")) {
      return null;
    }
    throw e;
  }
}
