{
  final UUID invoiceId1=UUID.randomUUID();
  final String externalKey1=UUID.randomUUID().toString();
  final BusinessInvoiceItem invoiceItem1=createInvoiceItem(invoiceId1,externalKey1);
  final UUID invoiceId2=UUID.randomUUID();
  final String externalKey2=UUID.randomUUID().toString();
  final BusinessInvoiceItem invoiceItem2=createInvoiceItem(invoiceId2,externalKey2);
  Assert.assertEquals(invoiceItemSqlDao.createInvoiceItem(invoiceItem1,internalCallContext),1);
  Assert.assertEquals(invoiceItemSqlDao.createInvoiceItem(invoiceItem2,internalCallContext),1);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForBundleByKey(externalKey1,internalCallContext).size(),1);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForBundleByKey(externalKey2,internalCallContext).size(),1);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForInvoice(invoiceId1.toString(),internalCallContext).size(),1);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForInvoice(invoiceId2.toString(),internalCallContext).size(),1);
  Assert.assertEquals(invoiceItemSqlDao.deleteInvoiceItem(invoiceItem1.getItemId().toString(),internalCallContext),1);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForBundleByKey(externalKey1,internalCallContext).size(),0);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForBundleByKey(externalKey2,internalCallContext).size(),1);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForInvoice(invoiceId1.toString(),internalCallContext).size(),0);
  Assert.assertEquals(invoiceItemSqlDao.getInvoiceItemsForInvoice(invoiceId2.toString(),internalCallContext).size(),1);
}
