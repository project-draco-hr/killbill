{
  final String someUUID=UUID.randomUUID().toString();
  final UUID bundleId=UUID.randomUUID();
  final String externalKey=UUID.randomUUID().toString();
  final List<AuditLogJson> auditLogs=createAuditLogsJson(clock.getUTCNow());
  final EventSubscriptionJson event=new EventSubscriptionJson(UUID.randomUUID().toString(),BillingPeriod.NO_BILLING_PERIOD.toString(),new LocalDate(),new LocalDate(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),true,false,UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),null);
  final PhasePriceOverrideJson priceOverride=new PhasePriceOverrideJson(null,"somePhaseType",BigDecimal.ONE,null);
  final SubscriptionJson subscription=new SubscriptionJson(UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),externalKey,new LocalDate(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),new LocalDate(),new LocalDate(),new LocalDate(),new LocalDate(),ImmutableList.<EventSubscriptionJson>of(event),ImmutableList.of(priceOverride),auditLogs);
  final BundleJson bundleJson=new BundleJson(someUUID,bundleId.toString(),externalKey,ImmutableList.<SubscriptionJson>of(subscription),null,auditLogs);
  Assert.assertEquals(bundleJson.getBundleId(),bundleId.toString());
  Assert.assertEquals(bundleJson.getExternalKey(),externalKey);
  Assert.assertEquals(bundleJson.getSubscriptions().size(),1);
  Assert.assertEquals(bundleJson.getAuditLogs(),auditLogs);
  final String asJson=mapper.writeValueAsString(bundleJson);
  final BundleJson fromJson=mapper.readValue(asJson,BundleJson.class);
  Assert.assertEquals(fromJson,bundleJson);
}
