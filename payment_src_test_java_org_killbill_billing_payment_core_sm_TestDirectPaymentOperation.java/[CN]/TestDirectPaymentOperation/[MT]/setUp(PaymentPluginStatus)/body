{
  final GlobalLocker locker=new MemoryGlobalLocker();
  final PluginDispatcher<OperationResult> paymentPluginDispatcher=new PluginDispatcher<OperationResult>(1,Executors.newCachedThreadPool());
  directPaymentStateContext=new DirectPaymentStateContext(UUID.randomUUID(),null,UUID.randomUUID().toString(),UUID.randomUUID().toString(),TransactionType.CAPTURE,Mockito.mock(Account.class),UUID.randomUUID(),new BigDecimal("192.3920111"),Currency.BRL,false,ImmutableList.<PluginProperty>of(),internalCallContext,callContext);
  final PaymentMethodModelDao paymentMethodModelDao=new PaymentMethodModelDao(directPaymentStateContext.getPaymentMethodId(),UUID.randomUUID().toString(),clock.getUTCNow(),clock.getUTCNow(),directPaymentStateContext.getAccount().getId(),MockPaymentProviderPlugin.PLUGIN_NAME,true);
  final PaymentDao paymentDao=Mockito.mock(PaymentDao.class);
  Mockito.when(paymentDao.getPaymentMethodIncludedDeleted(directPaymentStateContext.getPaymentMethodId(),internalCallContext)).thenReturn(paymentMethodModelDao);
  final DirectPaymentAutomatonDAOHelper daoHelper=new DirectPaymentAutomatonDAOHelper(directPaymentStateContext,clock.getUTCNow(),paymentDao,registry,internalCallContext,paymentSMHelper);
  directPaymentOperation=new DirectPaymentOperationTest(paymentPluginStatus,daoHelper,locker,paymentPluginDispatcher,directPaymentStateContext);
}
