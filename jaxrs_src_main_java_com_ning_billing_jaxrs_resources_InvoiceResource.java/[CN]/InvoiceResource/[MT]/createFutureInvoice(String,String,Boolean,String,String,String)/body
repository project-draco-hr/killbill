{
  try {
    Preconditions.checkNotNull(accountId,"% needs to be specified",QUERY_ACCOUNT_ID);
    Preconditions.checkNotNull(targetDateTime,"% needs to be specified",QUERY_TARGET_DATE);
    final DateTime inputDateTime=(targetDateTime != null) ? DATE_TIME_FORMATTER.parseDateTime(targetDateTime) : null;
    final Account account=accountApi.getAccountById(UUID.fromString(accountId));
    final LocalDate inputDate=inputDateTime.toDateTime(account.getTimeZone()).toLocalDate();
    final Invoice generatedInvoice=invoiceApi.triggerInvoiceGeneration(UUID.fromString(accountId),inputDate,dryRun,context.createContext(createdBy,reason,comment));
    if (dryRun) {
      return Response.status(Status.OK).entity(new InvoiceJsonSimple(generatedInvoice)).build();
    }
 else {
      return uriBuilder.buildResponse(InvoiceResource.class,"getInvoice",generatedInvoice.getId());
    }
  }
 catch (  InvoiceApiException e) {
    if (e.getCode() == ErrorCode.INVOICE_NOTHING_TO_DO.getCode()) {
      return Response.status(Status.NO_CONTENT).build();
    }
 else {
      return Response.status(Status.BAD_REQUEST).entity(e.getMessage()).build();
    }
  }
catch (  NullPointerException e) {
    return Response.status(Status.BAD_REQUEST).entity(e.getMessage()).build();
  }
catch (  AccountApiException e) {
    log.warn(String.format("Failed to locate account for id %s",accountId),e);
    return Response.status(Status.BAD_REQUEST).entity(e.getMessage()).build();
  }
}
