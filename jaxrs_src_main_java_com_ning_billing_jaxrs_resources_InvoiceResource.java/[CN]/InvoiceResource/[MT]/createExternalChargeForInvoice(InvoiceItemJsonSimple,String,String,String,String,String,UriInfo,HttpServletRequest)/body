{
  final CallContext callContext=context.createContext(createdBy,reason,comment,request);
  final Account account=accountApi.getAccountById(UUID.fromString(externalChargeJson.getAccountId()),callContext);
  final LocalDate requestedDate;
  if (requestedDateTimeString == null) {
    requestedDate=clock.getUTCToday();
  }
 else {
    final DateTime requestedDateTime=DATE_TIME_FORMATTER.parseDateTime(requestedDateTimeString);
    requestedDate=requestedDateTime.toDateTime(account.getTimeZone()).toLocalDate();
  }
  final UUID invoiceId=UUID.fromString(invoiceIdString);
  final Currency currency=Objects.firstNonNull(externalChargeJson.getCurrency(),account.getCurrency());
  final InvoiceItem externalCharge;
  if (externalChargeJson.getBundleId() != null) {
    externalCharge=invoiceApi.insertExternalChargeForInvoiceAndBundle(account.getId(),invoiceId,UUID.fromString(externalChargeJson.getBundleId()),externalChargeJson.getAmount(),externalChargeJson.getDescription(),requestedDate,currency,callContext);
  }
 else {
    externalCharge=invoiceApi.insertExternalChargeForInvoice(account.getId(),invoiceId,externalChargeJson.getAmount(),externalChargeJson.getDescription(),requestedDate,currency,callContext);
  }
  return uriBuilder.buildResponse(InvoiceResource.class,"getInvoice",externalCharge.getInvoiceId(),uriInfo.getBaseUri().toString());
}
