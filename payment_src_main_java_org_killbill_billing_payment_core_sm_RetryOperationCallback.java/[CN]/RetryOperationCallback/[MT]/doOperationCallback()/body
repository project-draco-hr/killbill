{
  return dispatchWithTimeout(new WithAccountLockCallback<OperationResult>(){
    @Override public OperationResult doOperation() throws OperationException {
      final RetryableDirectPaymentStateContext retryableDirectPaymentStateContext=(RetryableDirectPaymentStateContext)directPaymentStateContext;
      final PaymentControlContext paymentControlContext=new DefaultPaymentControlContext(directPaymentStateContext.account,directPaymentStateContext.paymentMethodId,directPaymentStateContext.directPaymentId,directPaymentStateContext.directPaymentExternalKey,directPaymentStateContext.directPaymentTransactionExternalKey,directPaymentStateContext.transactionType,directPaymentStateContext.amount,directPaymentStateContext.currency,directPaymentStateContext.properties,retryableDirectPaymentStateContext.isApiPayment(),directPaymentStateContext.callContext);
      final PriorPaymentControlResult pluginResult;
      try {
        pluginResult=getPluginResult(retryableDirectPaymentStateContext.getPluginName(),paymentControlContext);
        if (pluginResult.isAborted()) {
          return OperationResult.EXCEPTION;
        }
      }
 catch (      PaymentControlApiException e) {
        throw new OperationException(e,OperationResult.EXCEPTION);
      }
      boolean success=false;
      try {
        if (directPaymentStateContext.getAmount() == null || (pluginResult.getAdjustedAmount() != null && pluginResult.getAdjustedAmount().compareTo(directPaymentStateContext.getAmount()) != 0)) {
          ((RetryableDirectPaymentStateContext)directPaymentStateContext).setAmount(pluginResult.getAdjustedAmount());
        }
        final DirectPayment result=doPluginOperation();
        ((RetryableDirectPaymentStateContext)directPaymentStateContext).setResult(result);
        final DirectPaymentTransaction transaction=((RetryableDirectPaymentStateContext)directPaymentStateContext).getCurrentTransaction();
        success=transaction.getPaymentStatus() == PaymentStatus.SUCCESS || transaction.getPaymentStatus() == PaymentStatus.PENDING;
        if (success) {
          final PaymentControlContext updatedPaymentControlContext=new DefaultPaymentControlContext(directPaymentStateContext.account,directPaymentStateContext.paymentMethodId,result.getId(),result.getExternalKey(),directPaymentStateContext.directPaymentTransactionExternalKey,directPaymentStateContext.transactionType,transaction.getAmount(),transaction.getCurrency(),transaction.getProcessedAmount(),transaction.getProcessedCurrency(),directPaymentStateContext.properties,retryableDirectPaymentStateContext.isApiPayment(),directPaymentStateContext.callContext);
          onCompletion(retryableDirectPaymentStateContext.getPluginName(),updatedPaymentControlContext);
        }
 else {
          throwAndupdateRetryDateOnFailureOrException(retryableDirectPaymentStateContext,paymentControlContext,new PaymentApiException(ErrorCode.PAYMENT_INTERNAL_ERROR,"Plugin ERROR"));
        }
      }
 catch (      PaymentApiException e) {
        throwAndupdateRetryDateOnFailureOrException(retryableDirectPaymentStateContext,paymentControlContext,e);
      }
catch (      OperationException e) {
        throw e;
      }
catch (      Exception e) {
        throw new OperationException(e,OperationResult.EXCEPTION);
      }
      return OperationResult.SUCCESS;
    }
    private void throwAndupdateRetryDateOnFailureOrException(    final RetryableDirectPaymentStateContext retryableDirectPaymentStateContext,    final PaymentControlContext paymentControlContext,    @Nullable final PaymentApiException e) throws OperationException {
      final DateTime retryDate=getNextRetryDate(retryableDirectPaymentStateContext.getPluginName(),paymentControlContext);
      if (retryDate == null) {
        throw new OperationException(e,OperationResult.EXCEPTION);
      }
 else {
        ((RetryableDirectPaymentStateContext)directPaymentStateContext).setRetryDate(retryDate);
        throw new OperationException(e,OperationResult.FAILURE);
      }
    }
  }
);
}
