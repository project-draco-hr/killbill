{
  return dispatchWithAccountLockAndTimeout(new WithAccountLockCallback<OperationResult,OperationException>(){
    @Override public OperationResult doOperation() throws OperationException {
      final RetryableDirectPaymentStateContext retryableDirectPaymentStateContext=(RetryableDirectPaymentStateContext)directPaymentStateContext;
      final PaymentControlContext paymentControlContext=new DefaultPaymentControlContext(directPaymentStateContext.getAccount(),directPaymentStateContext.getPaymentMethodId(),retryableDirectPaymentStateContext.getAttemptId(),directPaymentStateContext.getDirectPaymentId(),directPaymentStateContext.getDirectPaymentExternalKey(),directPaymentStateContext.getDirectPaymentTransactionExternalKey(),directPaymentStateContext.getTransactionType(),directPaymentStateContext.getAmount(),directPaymentStateContext.getCurrency(),directPaymentStateContext.getProperties(),retryableDirectPaymentStateContext.isApiPayment(),directPaymentStateContext.callContext);
      final PriorPaymentControlResult pluginResult;
      try {
        pluginResult=getPluginResult(retryableDirectPaymentStateContext.getPluginName(),paymentControlContext);
        if (pluginResult.isAborted()) {
          return OperationResult.EXCEPTION;
        }
      }
 catch (      PaymentControlApiException e) {
        throw new OperationException(e,OperationResult.EXCEPTION);
      }
      boolean success;
      try {
        if (directPaymentStateContext.getAmount() == null || (pluginResult.getAdjustedAmount() != null && pluginResult.getAdjustedAmount().compareTo(directPaymentStateContext.getAmount()) != 0)) {
          ((RetryableDirectPaymentStateContext)directPaymentStateContext).setAmount(pluginResult.getAdjustedAmount());
        }
        final DirectPayment result=doCallSpecificOperationCallback();
        ((RetryableDirectPaymentStateContext)directPaymentStateContext).setResult(result);
        final DirectPaymentTransaction transaction=((RetryableDirectPaymentStateContext)directPaymentStateContext).getCurrentTransaction();
        success=transaction.getTransactionStatus() == TransactionStatus.SUCCESS || transaction.getTransactionStatus() == TransactionStatus.PENDING;
        if (success) {
          final PaymentControlContext updatedPaymentControlContext=new DefaultPaymentControlContext(directPaymentStateContext.account,directPaymentStateContext.paymentMethodId,retryableDirectPaymentStateContext.getAttemptId(),result.getId(),result.getExternalKey(),transaction.getId(),directPaymentStateContext.getDirectPaymentTransactionExternalKey(),directPaymentStateContext.getTransactionType(),transaction.getAmount(),transaction.getCurrency(),transaction.getProcessedAmount(),transaction.getProcessedCurrency(),directPaymentStateContext.properties,retryableDirectPaymentStateContext.isApiPayment(),directPaymentStateContext.callContext);
          onCompletion(retryableDirectPaymentStateContext.getPluginName(),updatedPaymentControlContext);
          return OperationResult.SUCCESS;
        }
 else {
          throw new OperationException(null,getOperationResultAndSetContext(retryableDirectPaymentStateContext,paymentControlContext));
        }
      }
 catch (      PaymentApiException e) {
        throw new OperationException(e,getOperationResultAndSetContext(retryableDirectPaymentStateContext,paymentControlContext));
      }
catch (      RuntimeException e) {
        getOperationResultAndSetContext(retryableDirectPaymentStateContext,paymentControlContext);
        throw e;
      }
    }
  }
);
}
