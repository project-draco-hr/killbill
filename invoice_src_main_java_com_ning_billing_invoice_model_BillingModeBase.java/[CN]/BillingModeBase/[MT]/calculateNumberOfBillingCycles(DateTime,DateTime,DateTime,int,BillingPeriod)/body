{
  if (endDate.isBefore(startDate)) {
    throw new InvalidDateSequenceException();
  }
  if (targetDate.isBefore(startDate)) {
    throw new InvalidDateSequenceException();
  }
  if (billingPeriod == BillingPeriod.NO_BILLING_PERIOD) {
    return BigDecimal.ZERO;
  }
  BigDecimal precedingProRation=calculateProRationBeforeFirstBillingPeriod(startDate,billingCycleDay,billingPeriod);
  DateTime firstBillCycleDate=calculateBillingCycleDateOnOrAfter(startDate,billingCycleDay);
  DateTime endBillCycleDate;
  BigDecimal trailingProRation;
  BigDecimal numberOfBillingPeriods;
  DateTime effectiveEndDate=calculateEffectiveEndDate(firstBillCycleDate,targetDate,endDate,billingPeriod);
  endBillCycleDate=calculateLastBillingCycleDateBefore(effectiveEndDate,firstBillCycleDate,billingCycleDay,billingPeriod);
  numberOfBillingPeriods=calculateNumberOfWholeBillingPeriods(firstBillCycleDate,endBillCycleDate,billingPeriod);
  trailingProRation=calculateProRationAfterLastBillingCycleDate(effectiveEndDate,endBillCycleDate,billingPeriod);
  return precedingProRation.add(numberOfBillingPeriods).add(trailingProRation);
}
