{
  final StandaloneCatalog catalog=XMLLoader.getObjectFromString(Resources.getResource("SpyCarAdvanced.xml").toExternalForm(),StandaloneCatalog.class);
  final Plan plan=catalog.findCurrentPlan("discount-standard-monthly");
  final PlanPhasePriceOverride[] resolvedOverrides=new PlanPhasePriceOverride[plan.getAllPhases().length];
  resolvedOverrides[0]=new DefaultPlanPhasePriceOverride(plan.getAllPhases()[0].getName(),Currency.USD,BigDecimal.TEN,BigDecimal.ONE);
  resolvedOverrides[1]=new DefaultPlanPhasePriceOverride(plan.getAllPhases()[1].getName(),Currency.USD,BigDecimal.ONE,BigDecimal.TEN);
  resolvedOverrides[2]=new DefaultPlanPhasePriceOverride(plan.getFinalPhase().getName(),Currency.USD,BigDecimal.ZERO,new BigDecimal("348.64"));
  final CatalogOverridePlanDefinitionModelDao newPlan=catalogOverrideDao.getOrCreateOverridePlanDefinition(plan.getName(),new DateTime(catalog.getEffectiveDate()),resolvedOverrides,internalCallContext);
  final List<CatalogOverridePhaseDefinitionModelDao> phases=catalogOverrideDao.getOverriddenPlanPhases(newPlan.getRecordId(),internalCallContext);
  assertEquals(phases.size(),3);
  for (int i=0; i < 3; i++) {
    final CatalogOverridePhaseDefinitionModelDao curPhase=phases.get(i);
    assertEquals(curPhase.getCurrency(),resolvedOverrides[i].getCurrency().name());
    assertEquals(curPhase.getFixedPrice().compareTo(resolvedOverrides[i].getFixedPrice()),0);
    assertEquals(curPhase.getRecurringPrice().compareTo(resolvedOverrides[i].getRecurringPrice()),0);
    assertEquals(curPhase.getParentPhaseName(),resolvedOverrides[i].getPhaseName());
  }
}
