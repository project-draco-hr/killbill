{
  final Account account;
  try {
    account=accountInternalApi.getAccountById(bundle.getAccountId(),internalTenantContext);
  }
 catch (  AccountApiException e) {
    throw new EntitlementApiException(e);
  }
  final List<BlockingState> bundleEntitlementStates=BLOCKING_STATE_ORDERING.immutableSortedCopy(defaultBlockingStateDao.getBlockingHistoryForService(bundle.getId(),BlockingStateType.SUBSCRIPTION_BUNDLE,EntitlementService.ENTITLEMENT_SERVICE_NAME,internalTenantContext));
  final List<BlockingState> accountEntitlementStates=BLOCKING_STATE_ORDERING.immutableSortedCopy(defaultBlockingStateDao.getBlockingHistoryForService(account.getId(),BlockingStateType.ACCOUNT,EntitlementService.ENTITLEMENT_SERVICE_NAME,internalTenantContext));
  final ImmutableList<BlockingState> subscriptionEntitlementStatesOnDisk=BLOCKING_STATE_ORDERING.immutableSortedCopy(defaultBlockingStateDao.getBlockingHistoryForService(subscription.getId(),BlockingStateType.SUBSCRIPTION,EntitlementService.ENTITLEMENT_SERVICE_NAME,internalTenantContext));
  final List<BlockingState> subscriptionEntitlementStates=(baseSubscription == null || subscription.getId().equals(baseSubscription.getId())) ? subscriptionEntitlementStatesOnDisk : blockingStateDao.getBlockingHistoryForService(subscriptionEntitlementStatesOnDisk,bundle,baseSubscription,subscription,allSubscriptionsForBundle,internalTenantContext);
  return buildForEntitlement(account,bundle,baseSubscription,subscription,allSubscriptionsForBundle,subscriptionEntitlementStates,bundleEntitlementStates,accountEntitlementStates,internalTenantContext);
}
