{
  if (subscriptions.isEmpty()) {
    return new DefaultAccountEventsStreams(account);
  }
  final List<SubscriptionBaseBundle> bundles=subscriptionInternalApi.getBundlesForAccount(account.getId(),internalTenantContext);
  final Map<UUID,SubscriptionBaseBundle> bundlesPerId=new HashMap<UUID,SubscriptionBaseBundle>();
  for (  final SubscriptionBaseBundle bundle : bundles) {
    bundlesPerId.put(bundle.getId(),bundle);
  }
  final List<BlockingState> blockingStatesForAccount=defaultBlockingStateDao.getBlockingAllForAccountRecordId(internalTenantContext);
  final Collection<BlockingState> accountBlockingStates=new LinkedList<BlockingState>();
  final Map<UUID,List<BlockingState>> blockingStatesPerSubscription=new HashMap<UUID,List<BlockingState>>();
  final Map<UUID,List<BlockingState>> blockingStatesPerBundle=new HashMap<UUID,List<BlockingState>>();
  for (  final BlockingState blockingState : blockingStatesForAccount) {
    if (BlockingStateType.SUBSCRIPTION.equals(blockingState.getType())) {
      if (blockingStatesPerSubscription.get(blockingState.getBlockedId()) == null) {
        blockingStatesPerSubscription.put(blockingState.getBlockedId(),new LinkedList<BlockingState>());
      }
      blockingStatesPerSubscription.get(blockingState.getBlockedId()).add(blockingState);
    }
 else     if (BlockingStateType.SUBSCRIPTION_BUNDLE.equals(blockingState.getType())) {
      if (blockingStatesPerBundle.get(blockingState.getBlockedId()) == null) {
        blockingStatesPerBundle.put(blockingState.getBlockedId(),new LinkedList<BlockingState>());
      }
      blockingStatesPerBundle.get(blockingState.getBlockedId()).add(blockingState);
    }
 else     if (BlockingStateType.ACCOUNT.equals(blockingState.getType()) && account.getId().equals(blockingState.getBlockedId())) {
      accountBlockingStates.add(blockingState);
    }
  }
  final Map<UUID,Collection<EventsStream>> entitlementsPerBundle=new HashMap<UUID,Collection<EventsStream>>();
  for (  final UUID bundleId : subscriptions.keySet()) {
    final SubscriptionBaseBundle bundle=bundlesPerId.get(bundleId);
    final List<SubscriptionBase> allSubscriptionsForBundle=subscriptions.get(bundleId);
    final SubscriptionBase baseSubscription=Iterables.<SubscriptionBase>tryFind(allSubscriptionsForBundle,new Predicate<SubscriptionBase>(){
      @Override public boolean apply(      final SubscriptionBase input){
        return ProductCategory.BASE.equals(input.getLastActiveProduct().getCategory());
      }
    }
).orNull();
    final List<BlockingState> bundleBlockingStates=Objects.firstNonNull(blockingStatesPerBundle.get(bundleId),ImmutableList.<BlockingState>of());
    if (entitlementsPerBundle.get(bundleId) == null) {
      entitlementsPerBundle.put(bundleId,new LinkedList<EventsStream>());
    }
    for (    final SubscriptionBase subscription : allSubscriptionsForBundle) {
      final List<BlockingState> subscriptionBlockingStatesOnDisk=Objects.firstNonNull(blockingStatesPerSubscription.get(subscription.getId()),ImmutableList.<BlockingState>of());
      final List<BlockingState> subscriptionBlockingStates;
      if (baseSubscription == null || subscription.getId().equals(baseSubscription.getId())) {
        subscriptionBlockingStates=subscriptionBlockingStatesOnDisk;
      }
 else {
        subscriptionBlockingStates=blockingStateDao.getBlockingHistory(subscriptionBlockingStatesOnDisk,bundle,baseSubscription,subscription,allSubscriptionsForBundle,internalTenantContext);
      }
      final Collection<BlockingState> blockingStateSet=new LinkedHashSet<BlockingState>(accountBlockingStates);
      blockingStateSet.addAll(bundleBlockingStates);
      blockingStateSet.addAll(subscriptionBlockingStates);
      final List<BlockingState> blockingStates=BLOCKING_STATE_ORDERING.immutableSortedCopy(blockingStateSet);
      final EventsStream eventStream=buildForEntitlement(account,bundle,baseSubscription,subscription,allSubscriptionsForBundle,blockingStates,internalTenantContext);
      entitlementsPerBundle.get(bundleId).add(eventStream);
    }
  }
  return new DefaultAccountEventsStreams(account,bundles,entitlementsPerBundle);
}
