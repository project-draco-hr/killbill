{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  paymentPlugin.makeAllInvoicesFailWithError(true);
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  bundle=subscriptionApi.getSubscriptionBundle(baseEntitlement.getBundleId(),callContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,6,30),callContext);
  addDaysAndCheckForCompletion(8,NextEvent.PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(8,NextEvent.PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(8,NextEvent.PAYMENT_ERROR);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(7,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  checkODState("OD1");
  checkChangePlanWithOverdueState(baseEntitlement,true,true);
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,7,31),callContext);
  addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR);
  checkODState("OD1");
  addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR);
  checkODState("OD1");
  addDaysAndCheckForCompletion(1,NextEvent.BLOCK,NextEvent.INVOICE_ADJUSTMENT,NextEvent.PAYMENT_ERROR);
  checkODState("OD2");
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,10),new LocalDate(2012,7,31),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-166.63")));
  addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR);
  checkODState("OD2");
  addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR);
  checkODState("OD2");
  addDaysAndCheckForCompletion(5,NextEvent.BLOCK);
  checkODState("OD3");
  addDaysAndCheckForCompletion(2,NextEvent.PAYMENT_ERROR);
  addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR);
  addDaysAndCheckForCompletion(5);
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,7,31),callContext);
  allowPaymentsAndResetOverdueToClearByPayingAllUnpaidInvoices();
  invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,8,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  addDaysAndCheckForCompletion(31,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),5,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,8,31),new LocalDate(2012,9,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  assertEquals(invoiceUserApi.getAccountBalance(account.getId(),callContext).compareTo(BigDecimal.ZERO),0);
}
