{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  paymentPlugin.makeAllInvoicesFailWithError(true);
  busHandler.pushExpectedEvents(NextEvent.CREATE,NextEvent.INVOICE);
  SubscriptionData baseSubscription=subscriptionDataFromSubscription(entitlementUserApi.createSubscription(bundle.getId(),new PlanPhaseSpecifier(productName,ProductCategory.BASE,term,planSetName,null),null,context));
  assertNotNull(baseSubscription);
  assertTrue(busHandler.isCompleted(DELAY));
  busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  clock.addDays(30);
  assertTrue(busHandler.isCompleted(DELAY));
  checkODState(BlockingApi.CLEAR_STATE_NAME);
  clock.addDays(15);
  assertTrue(busHandler.isCompleted(DELAY));
  checkODState(BlockingApi.CLEAR_STATE_NAME);
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  clock.addDays(20);
  assertTrue(busHandler.isCompleted(DELAY));
  checkODState("OD1");
  clock.addDays(2);
  assertTrue(busHandler.isCompleted(DELAY));
  checkODState("OD1");
  clock.addDays(8);
  assertTrue(busHandler.isCompleted(DELAY));
  checkODState("OD2");
  busHandler.pushExpectedEvents(NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  clock.addDays(10);
  assertTrue(busHandler.isCompleted(DELAY));
  checkODState("OD3");
  paymentPlugin.makeAllInvoicesFailWithError(false);
  Collection<Invoice> invoices=invoiceApi.getUnpaidInvoicesByAccountId(account.getId(),clock.getUTCNow());
  List<String> invoiceIds=new ArrayList<String>();
  for (  Invoice invoice : invoices) {
    invoiceIds.add(invoice.getId().toString());
    if (invoice.getBalance().compareTo(BigDecimal.ZERO) > 0) {
      busHandler.pushExpectedEvent(NextEvent.PAYMENT);
      paymentApi.createPayment(account,invoice.getId(),invoice.getBalance(),new DefaultCallContext("test",null,null,clock));
      assertTrue(busHandler.isCompleted(DELAY));
    }
  }
  checkODState(BlockingApi.CLEAR_STATE_NAME);
}
