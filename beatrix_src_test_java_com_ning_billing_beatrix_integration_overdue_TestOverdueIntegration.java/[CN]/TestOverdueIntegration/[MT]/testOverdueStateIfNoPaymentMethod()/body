{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  accountUserApi.removePaymentMethod(account.getId(),context);
  final Subscription baseSubscription=createSubscriptionAndCheckForCompletion(bundle.getId(),productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  invoiceChecker.checkInvoice(account.getId(),1,new ExpectedItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,5,1));
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),2,new ExpectedItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,6,30));
  checkODState(BlockingApi.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(15);
  checkODState(BlockingApi.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(20,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),3,new ExpectedItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,7,31));
  checkODState("OD1");
  checkChangePlanWithOverdueState(baseSubscription,true);
  addDaysAndCheckForCompletion(2);
  checkODState("OD1");
  checkChangePlanWithOverdueState(baseSubscription,true);
  addDaysAndCheckForCompletion(8);
  checkODState("OD2");
  checkChangePlanWithOverdueState(baseSubscription,true);
  addDaysAndCheckForCompletion(10);
  checkODState("OD3");
  checkChangePlanWithOverdueState(baseSubscription,true);
  paymentApi.addPaymentMethod(BeatrixModule.PLUGIN_NAME,account,true,paymentMethodPlugin,context);
  final Collection<Invoice> invoices=invoiceApi.getUnpaidInvoicesByAccountId(account.getId(),clock.getUTCToday());
  for (  final Invoice invoice : invoices) {
    if (invoice.getBalance().compareTo(BigDecimal.ZERO) > 0) {
      createPaymentAndCheckForCompletion(account,invoice,NextEvent.PAYMENT);
    }
  }
  checkODState(BlockingApi.CLEAR_STATE_NAME);
  checkChangePlanWithOverdueState(baseSubscription,false);
  invoiceChecker.checkRepairedInvoice(account.getId(),3,new ExpectedItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-249.95")),new ExpectedItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,25),InvoiceItemType.CBA_ADJ,new BigDecimal("249.95")));
  invoiceChecker.checkInvoice(account.getId(),4,new ExpectedItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,15),InvoiceItemType.RECURRING,new BigDecimal("124.98")),new ExpectedItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("116.09")),new ExpectedItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,25),InvoiceItemType.CBA_ADJ,new BigDecimal("-241.07")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,7,31));
  assertEquals(invoiceUserApi.getAccountBalance(account.getId()).compareTo(new BigDecimal("-8.88")),0);
}
