{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  accountInternalApi.removePaymentMethod(account.getId(),internalCallContext);
  final DefaultEntitlement baseEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  bundle=subscriptionApi.getSubscriptionBundle(baseEntitlement.getBundleId(),callContext);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,6,30),callContext);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(15);
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(20,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR);
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,7,31),callContext);
  checkODState("OD1");
  checkChangePlanWithOverdueState(baseEntitlement,true,true);
  addDaysAndCheckForCompletion(2);
  checkODState("OD1");
  checkChangePlanWithOverdueState(baseEntitlement,true,true);
  addDaysAndCheckForCompletion(8,NextEvent.INVOICE_ADJUSTMENT);
  checkODState("OD2");
  checkChangePlanWithOverdueState(baseEntitlement,true,true);
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,6,30),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,15),new LocalDate(2012,7,31),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-124.97")));
  addDaysAndCheckForCompletion(10);
  checkODState("OD3");
  checkChangePlanWithOverdueState(baseEntitlement,true,true);
  paymentApi.addPaymentMethod(BeatrixIntegrationModule.NON_OSGI_PLUGIN_NAME,account,true,paymentMethodPlugin,callContext);
  final Collection<Invoice> invoices=invoiceUserApi.getUnpaidInvoicesByAccountId(account.getId(),clock.getUTCToday(),callContext);
  int remainingUnpaidInvoices=invoices.size();
  for (  final Invoice invoice : invoices) {
    if (invoice.getBalance().compareTo(BigDecimal.ZERO) > 0) {
      remainingUnpaidInvoices--;
      if (remainingUnpaidInvoices > 0) {
        createPaymentAndCheckForCompletion(account,invoice,NextEvent.PAYMENT);
      }
 else {
        createPaymentAndCheckForCompletion(account,invoice,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.PAYMENT);
      }
    }
  }
  checkODState(DefaultBlockingState.CLEAR_STATE_NAME);
  invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("48.37")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,7,31),callContext);
  checkChangePlanWithOverdueState(baseEntitlement,false,true);
  invoiceChecker.checkRepairedInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("48.37")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,31),InvoiceItemType.REPAIR_ADJ,new BigDecimal("-48.37")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,25),InvoiceItemType.CBA_ADJ,new BigDecimal("48.37")));
  invoiceChecker.checkInvoice(account.getId(),5,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,31),InvoiceItemType.RECURRING,new BigDecimal("116.09")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,25),new LocalDate(2012,7,25),InvoiceItemType.CBA_ADJ,new BigDecimal("-48.37")));
  invoiceChecker.checkChargedThroughDate(baseEntitlement.getId(),new LocalDate(2012,7,31),callContext);
  assertEquals(invoiceUserApi.getAccountBalance(account.getId(),callContext).compareTo(BigDecimal.ZERO),0);
}
