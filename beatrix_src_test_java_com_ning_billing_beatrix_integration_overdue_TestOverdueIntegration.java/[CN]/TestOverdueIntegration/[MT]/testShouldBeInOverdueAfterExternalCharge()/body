{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  final Subscription baseSubscription=createSubscriptionAndCheckForCompletion(bundle.getId(),productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  invoiceChecker.checkInvoice(account.getId(),1,callContext,new ExpectedItemCheck(new LocalDate(2012,5,1),null,InvoiceItemType.FIXED,new BigDecimal("0")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,5,1),callContext);
  addDaysAndCheckForCompletion(5);
  busHandler.pushExpectedEvents(NextEvent.INVOICE_ADJUSTMENT);
  invoiceApi.insertExternalChargeForBundle(account.getId(),bundle.getId(),BigDecimal.TEN,"For overdue",new LocalDate(2012,5,6),Currency.USD,callContext);
  assertTrue(busHandler.isCompleted(DELAY));
  assertListenerStatus();
  invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedItemCheck(new LocalDate(2012,5,6),null,InvoiceItemType.EXTERNAL_CHARGE,BigDecimal.TEN));
  addDaysAndCheckForCompletion(25,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT);
  invoiceChecker.checkInvoice(account.getId(),3,callContext,new ExpectedItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")));
  invoiceChecker.checkChargedThroughDate(baseSubscription.getId(),new LocalDate(2012,6,30),callContext);
  overdueApi.refreshOverdueStateFor(bundle,callContext);
  checkODState(BlockingApi.CLEAR_STATE_NAME);
  addDaysAndCheckForCompletion(6);
  overdueApi.refreshOverdueStateFor(bundle,callContext);
  checkODState("OD1");
  final Invoice externalChargeInvoice=invoiceApi.getUnpaidInvoicesByAccountId(account.getId(),clock.getUTCToday(),callContext).iterator().next();
  createExternalPaymentAndCheckForCompletion(account,externalChargeInvoice,NextEvent.PAYMENT);
  checkODState(BlockingApi.CLEAR_STATE_NAME);
}
