{
  try {
    String baseProduct="Shotgun";
    BillingPeriod baseTerm=BillingPeriod.MONTHLY;
    String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
    SubscriptionData baseSubscription=createSubscription(baseProduct,baseTerm,basePriceList);
    String aoProduct="Telescopic-Scope";
    BillingPeriod aoTerm=BillingPeriod.MONTHLY;
    String aoPriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
    Duration someTimeLater=getDurationDay(13);
    clock.setDeltaFromReality(someTimeLater,DAY_IN_MS);
    DateTime beforeAOCreation=clock.getUTCNow();
    SubscriptionData aoSubscription=createSubscription(aoProduct,aoTerm,aoPriceList);
    DateTime afterAOCreation=clock.getUTCNow();
    Plan aoCurrentPlan=aoSubscription.getCurrentPlan();
    assertNotNull(aoCurrentPlan);
    assertEquals(aoCurrentPlan.getProduct().getName(),aoProduct);
    assertEquals(aoCurrentPlan.getProduct().getCategory(),ProductCategory.ADD_ON);
    assertEquals(aoCurrentPlan.getBillingPeriod(),aoTerm);
    PlanPhase aoCurrentPhase=aoSubscription.getCurrentPhase();
    assertNotNull(aoCurrentPhase);
    assertEquals(aoCurrentPhase.getPhaseType(),PhaseType.DISCOUNT);
    assertDateWithin(aoSubscription.getStartDate(),beforeAOCreation,afterAOCreation);
    assertEquals(aoSubscription.getBundleStartDate(),baseSubscription.getBundleStartDate());
    SubscriptionTransition aoPendingTranstion=aoSubscription.getPendingTransition();
    assertEquals(aoPendingTranstion.getEffectiveTransitionTime(),baseSubscription.getStartDate().plusMonths(1));
    testListener.reset();
    testListener.pushExpectedEvent(NextEvent.PHASE);
    testListener.pushExpectedEvent(NextEvent.PHASE);
    someTimeLater=getDurationDay(20);
    clock.addDeltaFromReality(someTimeLater);
    assertTrue(testListener.isCompleted(5000));
    try {
      Thread.currentThread().sleep(1000 * 1000);
    }
 catch (    InterruptedException e) {
    }
    aoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId());
    aoCurrentPlan=aoSubscription.getCurrentPlan();
    assertNotNull(aoCurrentPlan);
    assertEquals(aoCurrentPlan.getProduct().getName(),aoProduct);
    assertEquals(aoCurrentPlan.getProduct().getCategory(),ProductCategory.ADD_ON);
    assertEquals(aoCurrentPlan.getBillingPeriod(),aoTerm);
    aoCurrentPhase=aoSubscription.getCurrentPhase();
    assertNotNull(aoCurrentPhase);
    assertEquals(aoCurrentPhase.getPhaseType(),PhaseType.EVERGREEN);
  }
 catch (  EntitlementUserApiException e) {
    Assert.fail(e.getMessage());
  }
}
