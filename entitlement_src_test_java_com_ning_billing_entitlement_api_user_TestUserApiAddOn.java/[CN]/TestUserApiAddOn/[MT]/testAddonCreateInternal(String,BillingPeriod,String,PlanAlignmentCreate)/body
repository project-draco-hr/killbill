{
  try {
    String baseProduct="Shotgun";
    BillingPeriod baseTerm=BillingPeriod.MONTHLY;
    String basePriceList=PriceListSet.DEFAULT_PRICELIST_NAME;
    SubscriptionData baseSubscription=createSubscription(baseProduct,baseTerm,basePriceList);
    Duration someTimeLater=getDurationDay(13);
    clock.setDeltaFromReality(someTimeLater,DAY_IN_MS);
    DateTime beforeAOCreation=clock.getUTCNow();
    SubscriptionData aoSubscription=createSubscription(aoProduct,aoTerm,aoPriceList);
    DateTime afterAOCreation=clock.getUTCNow();
    Plan aoCurrentPlan=aoSubscription.getCurrentPlan();
    assertNotNull(aoCurrentPlan);
    assertEquals(aoCurrentPlan.getProduct().getName(),aoProduct);
    assertEquals(aoCurrentPlan.getProduct().getCategory(),ProductCategory.ADD_ON);
    assertEquals(aoCurrentPlan.getBillingPeriod(),aoTerm);
    PlanPhase aoCurrentPhase=aoSubscription.getCurrentPhase();
    assertNotNull(aoCurrentPhase);
    assertEquals(aoCurrentPhase.getPhaseType(),PhaseType.DISCOUNT);
    assertDateWithin(aoSubscription.getStartDate(),beforeAOCreation,afterAOCreation);
    assertEquals(aoSubscription.getBundleStartDate(),baseSubscription.getBundleStartDate());
    SubscriptionEventTransition aoPendingTranstion=aoSubscription.getPendingTransition();
    if (expAlignement == PlanAlignmentCreate.START_OF_BUNDLE) {
      assertEquals(aoPendingTranstion.getEffectiveTransitionTime(),baseSubscription.getStartDate().plusMonths(1));
    }
 else {
      assertEquals(aoPendingTranstion.getEffectiveTransitionTime(),aoSubscription.getStartDate().plusMonths(1));
    }
    testListener.reset();
    testListener.pushNextApiExpectedEvent(NextEvent.PHASE);
    testListener.pushNextApiExpectedEvent(NextEvent.PHASE);
    someTimeLater=new Duration(){
      @Override public TimeUnit getUnit(){
        return TimeUnit.DAYS;
      }
      @Override public int getNumber(){
        return 32;
      }
      @Override public DateTime addToDateTime(      DateTime dateTime){
        throw new NotImplementedException();
      }
    }
;
    clock.addDeltaFromReality(someTimeLater);
    clock.addDeltaFromReality(getDurationDay(1));
    assertTrue(testListener.isApiCompleted(5000));
    aoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId());
    aoCurrentPlan=aoSubscription.getCurrentPlan();
    assertNotNull(aoCurrentPlan);
    assertEquals(aoCurrentPlan.getProduct().getName(),aoProduct);
    assertEquals(aoCurrentPlan.getProduct().getCategory(),ProductCategory.ADD_ON);
    assertEquals(aoCurrentPlan.getBillingPeriod(),aoTerm);
    aoCurrentPhase=aoSubscription.getCurrentPhase();
    assertNotNull(aoCurrentPhase);
    assertEquals(aoCurrentPhase.getPhaseType(),PhaseType.EVERGREEN);
    aoSubscription=(SubscriptionData)entitlementApi.getSubscriptionFromId(aoSubscription.getId());
    aoPendingTranstion=aoSubscription.getPendingTransition();
    assertNull(aoPendingTranstion);
  }
 catch (  EntitlementUserApiException e) {
    Assert.fail(e.getMessage());
  }
}
