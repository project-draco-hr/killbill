{
  final String accountKey=UUID.randomUUID().toString();
  final BigDecimal amount=BigDecimal.ONE;
  final String cardCountry=UUID.randomUUID().toString();
  final String cardType=UUID.randomUUID().toString();
  final DateTime createdDate=new DateTime(DateTimeZone.UTC);
  final Currency currency=Currency.BRL;
  final DateTime effectiveDate=new DateTime(DateTimeZone.UTC);
  final UUID invoiceId=UUID.randomUUID();
  final String paymentError=UUID.randomUUID().toString();
  final UUID paymentId=UUID.randomUUID();
  final String paymentMethod=UUID.randomUUID().toString();
  final String paymentType=UUID.randomUUID().toString();
  final String pluginName=UUID.randomUUID().toString();
  final String processingStatus=UUID.randomUUID().toString();
  final BigDecimal requestedAmount=BigDecimal.ZERO;
  final DateTime updatedDate=new DateTime(DateTimeZone.UTC);
  final String invoicePaymentType=UUID.randomUUID().toString();
  final UUID linkedInvoicePaymentId=UUID.randomUUID();
  final BusinessInvoicePaymentModelDao invoicePayment=new BusinessInvoicePaymentModelDao(accountKey,amount,cardCountry,cardType,createdDate,currency,effectiveDate,invoiceId,paymentError,paymentId,paymentMethod,paymentType,pluginName,processingStatus,requestedAmount,updatedDate,invoicePaymentType,linkedInvoicePaymentId);
  Assert.assertSame(invoicePayment,invoicePayment);
  Assert.assertEquals(invoicePayment,invoicePayment);
  Assert.assertTrue(invoicePayment.equals(invoicePayment));
  Assert.assertEquals(invoicePayment.getAccountKey(),accountKey);
  Assert.assertEquals(invoicePayment.getAmount(),amount);
  Assert.assertEquals(invoicePayment.getCardCountry(),cardCountry);
  Assert.assertEquals(invoicePayment.getCardType(),cardType);
  Assert.assertEquals(invoicePayment.getCreatedDate(),createdDate);
  Assert.assertEquals(invoicePayment.getCurrency(),currency);
  Assert.assertEquals(invoicePayment.getEffectiveDate(),effectiveDate);
  Assert.assertEquals(invoicePayment.getInvoiceId(),invoiceId);
  Assert.assertEquals(invoicePayment.getPaymentError(),paymentError);
  Assert.assertEquals(invoicePayment.getPaymentId(),paymentId);
  Assert.assertEquals(invoicePayment.getPaymentMethod(),paymentMethod);
  Assert.assertEquals(invoicePayment.getPaymentType(),paymentType);
  Assert.assertEquals(invoicePayment.getPluginName(),pluginName);
  Assert.assertEquals(invoicePayment.getProcessingStatus(),processingStatus);
  Assert.assertEquals(invoicePayment.getRequestedAmount(),requestedAmount);
  Assert.assertEquals(invoicePayment.getUpdatedDate(),updatedDate);
  Assert.assertEquals(invoicePayment.getInvoicePaymentType(),invoicePaymentType);
  Assert.assertEquals(invoicePayment.getLinkedInvoicePaymentId(),linkedInvoicePaymentId);
  final BusinessInvoicePaymentModelDao otherInvoicePayment=new BusinessInvoicePaymentModelDao(null,null,null,null,createdDate,null,null,null,null,paymentId,null,null,null,null,null,null,null,null);
  Assert.assertFalse(invoicePayment.equals(otherInvoicePayment));
}
