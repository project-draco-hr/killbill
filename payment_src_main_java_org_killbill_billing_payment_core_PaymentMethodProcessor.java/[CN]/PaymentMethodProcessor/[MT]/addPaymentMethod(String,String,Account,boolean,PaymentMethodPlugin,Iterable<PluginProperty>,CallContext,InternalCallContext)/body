{
  return dispatchWithExceptionHandling(account,paymentPluginServiceName,new CallableWithAccountLock<UUID,PaymentApiException>(locker,account.getExternalKey(),paymentConfig,new DispatcherCallback<PluginDispatcherReturnType<UUID>,PaymentApiException>(){
    @Override public PluginDispatcherReturnType<UUID> doOperation() throws PaymentApiException {
      PaymentMethod pm=null;
      try {
        validateUniqueExternalPaymentMethod(account.getId(),paymentPluginServiceName);
        pm=new DefaultPaymentMethod(paymentMethodExternalKey,account.getId(),paymentPluginServiceName,paymentMethodProps);
        final PaymentPluginApi pluginApi=getPaymentPluginApi(paymentPluginServiceName);
        pluginApi.addPaymentMethod(account.getId(),pm.getId(),paymentMethodProps,setDefault,properties,callContext);
        final String actualPaymentMethodExternalKey=retrieveActualPaymentMethodExternalKey(account,pm,pluginApi,properties,callContext,context);
        final PaymentMethodModelDao pmModel=new PaymentMethodModelDao(pm.getId(),actualPaymentMethodExternalKey,pm.getCreatedDate(),pm.getUpdatedDate(),pm.getAccountId(),pm.getPluginName(),pm.isActive());
        paymentDao.insertPaymentMethod(pmModel,context);
        if (setDefault) {
          accountInternalApi.updatePaymentMethod(account.getId(),pm.getId(),context);
        }
      }
 catch (      final PaymentPluginApiException e) {
        log.warn(String.format("Error adding paymentMethodId='%s', plugin='%s'",pm.getId(),paymentPluginServiceName),e);
        throw new PaymentApiException(ErrorCode.PAYMENT_ADD_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
      }
catch (      final AccountApiException e) {
        throw new PaymentApiException(e);
      }
      return PluginDispatcher.createPluginDispatcherReturnType(pm.getId());
    }
    private void validateUniqueExternalPaymentMethod(    final UUID accountId,    final String pluginName) throws PaymentApiException {
      if (ExternalPaymentProviderPlugin.PLUGIN_NAME.equals(pluginName)) {
        final List<PaymentMethodModelDao> accountPaymentMethods=paymentDao.getPaymentMethods(context);
        if (Iterables.any(accountPaymentMethods,new Predicate<PaymentMethodModelDao>(){
          @Override public boolean apply(          final PaymentMethodModelDao input){
            return ExternalPaymentProviderPlugin.PLUGIN_NAME.equals(input.getPluginName());
          }
        }
)) {
          throw new PaymentApiException(ErrorCode.PAYMENT_EXTERNAL_PAYMENT_METHOD_ALREADY_EXISTS,accountId);
        }
      }
    }
  }
),uuidPluginNotificationDispatcher);
}
