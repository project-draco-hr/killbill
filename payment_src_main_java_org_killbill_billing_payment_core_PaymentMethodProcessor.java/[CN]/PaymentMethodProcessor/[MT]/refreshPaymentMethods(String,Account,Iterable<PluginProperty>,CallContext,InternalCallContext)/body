{
  final PaymentPluginApi pluginApi=getPaymentPluginApi(pluginName);
  final List<PaymentMethodInfoPlugin> pluginPms;
  try {
    pluginPms=pluginApi.getPaymentMethods(account.getId(),true,properties,callContext);
    if (pluginPms == null) {
      log.debug("No payment methods defined on the account {} for plugin {}",account.getId(),pluginName);
      return ImmutableList.<PaymentMethod>of();
    }
  }
 catch (  final PaymentPluginApiException e) {
    log.warn("Error refreshing payment methods for account " + account.getId() + " and plugin "+ pluginName,e);
    throw new PaymentApiException(ErrorCode.PAYMENT_REFRESH_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
  }
  try {
    final PluginDispatcherReturnType<List<PaymentMethod>> result=new WithAccountLock<List<PaymentMethod>,PaymentApiException>(paymentConfig).processAccountWithLock(locker,account.getExternalKey(),new DispatcherCallback<PluginDispatcherReturnType<List<PaymentMethod>>,PaymentApiException>(){
      @Override public PluginDispatcherReturnType<List<PaymentMethod>> doOperation() throws PaymentApiException {
        UUID defaultPaymentMethodId=null;
        final List<PaymentMethodInfoPlugin> pluginPmsWithId=new ArrayList<PaymentMethodInfoPlugin>();
        final List<PaymentMethodModelDao> finalPaymentMethods=new ArrayList<PaymentMethodModelDao>();
        for (        final PaymentMethodInfoPlugin cur : pluginPms) {
          final UUID paymentMethodId=cur.getPaymentMethodId() != null ? cur.getPaymentMethodId() : UUIDs.randomUUID();
          final PaymentMethod input=new DefaultPaymentMethod(paymentMethodId,paymentMethodId.toString(),account.getId(),pluginName);
          final PaymentMethodModelDao pmModel=new PaymentMethodModelDao(input.getId(),input.getExternalKey(),input.getCreatedDate(),input.getUpdatedDate(),input.getAccountId(),input.getPluginName(),input.isActive());
          finalPaymentMethods.add(pmModel);
          pluginPmsWithId.add(new DefaultPaymentMethodInfoPlugin(cur,paymentMethodId));
          if (cur.isDefault()) {
            defaultPaymentMethodId=paymentMethodId;
          }
        }
        final List<PaymentMethodModelDao> refreshedPaymentMethods=paymentDao.refreshPaymentMethods(account.getId(),pluginName,finalPaymentMethods,context);
        try {
          pluginApi.resetPaymentMethods(account.getId(),pluginPmsWithId,properties,callContext);
        }
 catch (        final PaymentPluginApiException e) {
          log.warn("Error resetting payment methods for account " + account.getId() + " and plugin "+ pluginName,e);
          throw new PaymentApiException(ErrorCode.PAYMENT_REFRESH_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
        }
        try {
          updateDefaultPaymentMethodIfNeeded(pluginName,account,defaultPaymentMethodId,context);
        }
 catch (        final AccountApiException e) {
          throw new PaymentApiException(e);
        }
        final List<PaymentMethod> result=ImmutableList.<PaymentMethod>copyOf(Collections2.transform(refreshedPaymentMethods,new Function<PaymentMethodModelDao,PaymentMethod>(){
          @Override public PaymentMethod apply(          final PaymentMethodModelDao input){
            return new DefaultPaymentMethod(input,null);
          }
        }
));
        return PluginDispatcher.createPluginDispatcherReturnType(result);
      }
    }
);
    return result.getReturnType();
  }
 catch (  final Exception e) {
    throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,Objects.firstNonNull(e.getMessage(),""));
  }
}
