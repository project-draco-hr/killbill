{
  try {
    new WithAccountLock<Void,PaymentApiException>(paymentConfig).processAccountWithLock(locker,account.getExternalKey(),new DispatcherCallback<PluginDispatcherReturnType<Void>,PaymentApiException>(){
      @Override public PluginDispatcherReturnType<Void> doOperation() throws PaymentApiException {
        final PaymentMethodModelDao paymentMethodModel=paymentDao.getPaymentMethod(paymentMethodId,context);
        if (paymentMethodModel == null) {
          throw new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId);
        }
        if (!paymentMethodModel.getAccountId().equals(account.getId())) {
          throw new PaymentApiException(ErrorCode.PAYMENT_DIFFERENT_ACCOUNT_ID,paymentMethodId);
        }
        try {
          final PaymentPluginApi pluginApi=getPluginApi(paymentMethodId,context);
          pluginApi.setDefaultPaymentMethod(account.getId(),paymentMethodId,properties,callContext);
          accountInternalApi.updatePaymentMethod(account.getId(),paymentMethodId,context);
          return PluginDispatcher.createPluginDispatcherReturnType(null);
        }
 catch (        final PaymentPluginApiException e) {
          throw new PaymentApiException(ErrorCode.PAYMENT_UPD_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
        }
catch (        final AccountApiException e) {
          throw new PaymentApiException(e);
        }
      }
    }
);
  }
 catch (  final Exception e) {
    throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,Objects.firstNonNull(e.getMessage(),""));
  }
}
