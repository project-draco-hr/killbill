{
  final UUID tenantId=nonEntityDao.retrieveIdFromObject(context.getTenantRecordId(),ObjectType.TENANT);
  new WithAccountLock<Void>().processAccountWithLock(locker,account.getExternalKey(),new WithAccountLockCallback<Void>(){
    @Override public Void doOperation() throws PaymentApiException {
      final PaymentMethodModelDao paymentMethodModel=paymentDao.getPaymentMethod(paymentMethodId,context);
      if (paymentMethodModel == null) {
        throw new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId);
      }
      try {
        final PaymentPluginApi pluginApi=getPluginApi(paymentMethodId,context);
        pluginApi.setDefaultPaymentMethod(account.getId(),paymentMethodId,properties,context.toCallContext(tenantId));
        accountInternalApi.updatePaymentMethod(account.getId(),paymentMethodId,context);
        return null;
      }
 catch (      final PaymentPluginApiException e) {
        throw new PaymentApiException(ErrorCode.PAYMENT_UPD_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
      }
catch (      final AccountApiException e) {
        throw new PaymentApiException(e);
      }
    }
  }
);
}
