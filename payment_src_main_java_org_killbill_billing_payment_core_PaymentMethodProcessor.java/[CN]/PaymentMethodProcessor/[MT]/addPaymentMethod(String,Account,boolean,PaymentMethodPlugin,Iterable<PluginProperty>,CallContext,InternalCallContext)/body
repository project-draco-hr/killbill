{
  try {
    return new WithAccountLock<UUID,PaymentApiException>().processAccountWithLock(locker,account.getExternalKey(),new WithAccountLockCallback<UUID,PaymentApiException>(){
      @Override public UUID doOperation() throws PaymentApiException {
        PaymentMethod pm=null;
        PaymentPluginApi pluginApi;
        try {
          pluginApi=getPaymentPluginApi(paymentPluginServiceName);
          pm=new DefaultPaymentMethod(account.getId(),paymentPluginServiceName,paymentMethodProps);
          pluginApi.addPaymentMethod(account.getId(),pm.getId(),paymentMethodProps,setDefault,properties,callContext);
          final PaymentMethodModelDao pmModel=new PaymentMethodModelDao(pm.getId(),pm.getCreatedDate(),pm.getUpdatedDate(),pm.getAccountId(),pm.getPluginName(),pm.isActive());
          paymentDao.insertPaymentMethod(pmModel,context);
          if (setDefault) {
            accountInternalApi.updatePaymentMethod(account.getId(),pm.getId(),context);
          }
        }
 catch (        final PaymentPluginApiException e) {
          log.warn("Error adding payment method " + pm.getId() + " for plugin "+ paymentPluginServiceName,e);
          throw new PaymentApiException(ErrorCode.PAYMENT_ADD_PAYMENT_METHOD,account.getId(),e.getErrorMessage());
        }
catch (        final AccountApiException e) {
          throw new PaymentApiException(e);
        }
        return pm.getId();
      }
    }
);
  }
 catch (  Exception e) {
    throw new PaymentApiException(e,ErrorCode.PAYMENT_INTERNAL_ERROR,Objects.firstNonNull(e.getMessage(),""));
  }
}
