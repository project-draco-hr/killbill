{
  try {
    final Payment payment=paymentApi.getPayment(UUID.fromString(json.getPaymentId()));
    final Collection<PaymentAttempt> attempts=Collections2.filter(payment.getAttempts(),new Predicate<PaymentAttempt>(){
      @Override public boolean apply(      final PaymentAttempt input){
        return input.getPaymentStatus() == PaymentStatus.SUCCESS;
      }
    }
);
    if (attempts.size() == 0) {
      final String error=String.format("Failed to locate successful payment attempts for paymentId %s",json.getPaymentId());
      return Response.status(Response.Status.NO_CONTENT).entity(error).build();
    }
    final UUID paymentAttemptId=attempts.iterator().next().getId();
    final InvoicePayment invoicePayment=invoicePaymentApi.getInvoicePayment(paymentAttemptId);
    if (invoicePayment == null) {
      final String error=String.format("Failed to locate invoice payment for paymentAttemptId %s",paymentAttemptId);
      return Response.status(Response.Status.NO_CONTENT).entity(error).build();
    }
    final InvoicePayment chargeBack=invoicePaymentApi.processChargeback(invoicePayment.getId(),json.getChargebackAmount(),context.createContext(createdBy,reason,comment));
    return uriBuilder.buildResponse(ChargebackResource.class,"getChargeback",chargeBack.getId());
  }
 catch (  InvoiceApiException e) {
    final String error=String.format("Failed to create chargeback %s",json);
    log.info(error,e);
    return Response.status(Response.Status.BAD_REQUEST).entity(error).build();
  }
catch (  IllegalArgumentException e) {
    return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
  }
catch (  PaymentApiException e) {
    return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
  }
}
