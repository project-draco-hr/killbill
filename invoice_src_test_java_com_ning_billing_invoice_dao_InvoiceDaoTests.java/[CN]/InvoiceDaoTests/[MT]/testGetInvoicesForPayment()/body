{
  List<UUID> invoices;
  DateTime notionalDate=new DateTime();
  UUID accountId=UUID.randomUUID();
  DateTime targetDate=new DateTime(2011,10,6,0,0,0,0);
  Invoice invoice=new DefaultInvoice(accountId,targetDate,Currency.USD);
  UUID invoiceId=invoice.getId();
  UUID subscriptionId=UUID.randomUUID();
  DateTime endDate=targetDate.plusMonths(3);
  BigDecimal rate=new BigDecimal("9.0");
  BigDecimal amount=rate.multiply(new BigDecimal("3.0"));
  RecurringInvoiceItem item=new RecurringInvoiceItem(invoiceId,subscriptionId,"test plan","test phase",targetDate,endDate,amount,rate,Currency.USD);
  invoice.addInvoiceItem(item);
  invoiceDao.create(invoice);
  int count;
  invoices=invoiceDao.getInvoicesForPayment(notionalDate,NUMBER_OF_DAY_BETWEEN_RETRIES);
  List<Invoice> invoicesDue=getInvoicesDueForPaymentAttempt(invoiceDao.get(),notionalDate);
  count=invoicesDue.size();
  assertEquals(invoices.size(),count);
  invoiceDao.notifyOfPaymentAttempt(new DefaultInvoicePayment(invoice.getId(),notionalDate));
  invoices=invoiceDao.getInvoicesForPayment(notionalDate,NUMBER_OF_DAY_BETWEEN_RETRIES);
  count=getInvoicesDueForPaymentAttempt(invoiceDao.get(),notionalDate).size();
  assertEquals(invoices.size(),count);
  notionalDate=notionalDate.plusDays(NUMBER_OF_DAY_BETWEEN_RETRIES);
  invoices=invoiceDao.getInvoicesForPayment(notionalDate,NUMBER_OF_DAY_BETWEEN_RETRIES);
  count=getInvoicesDueForPaymentAttempt(invoiceDao.get(),notionalDate).size();
  assertEquals(invoices.size(),count);
  invoiceDao.notifyOfPaymentAttempt(new DefaultInvoicePayment(UUID.randomUUID(),invoice.getId(),notionalDate,new BigDecimal("22.0000"),Currency.USD));
  invoices=invoiceDao.getInvoicesForPayment(notionalDate,NUMBER_OF_DAY_BETWEEN_RETRIES);
  count=getInvoicesDueForPaymentAttempt(invoiceDao.get(),notionalDate).size();
  assertEquals(invoices.size(),count);
  invoice=invoiceDao.getById(invoiceId);
  assertEquals(invoice.getAmountPaid().compareTo(new BigDecimal("22.0")),0);
  notionalDate=notionalDate.plusDays(NUMBER_OF_DAY_BETWEEN_RETRIES);
  invoices=invoiceDao.getInvoicesForPayment(notionalDate,NUMBER_OF_DAY_BETWEEN_RETRIES);
  count=getInvoicesDueForPaymentAttempt(invoiceDao.get(),notionalDate).size();
  assertEquals(invoices.size(),count);
  invoiceDao.notifyOfPaymentAttempt(new DefaultInvoicePayment(UUID.randomUUID(),invoice.getId(),notionalDate,new BigDecimal("5.0000"),Currency.USD));
  invoices=invoiceDao.getInvoicesForPayment(notionalDate,NUMBER_OF_DAY_BETWEEN_RETRIES);
  count=getInvoicesDueForPaymentAttempt(invoiceDao.get(),notionalDate).size();
  assertEquals(invoices.size(),count);
  invoice=invoiceDao.getById(invoiceId);
  assertEquals(invoice.getAmountPaid().compareTo(new BigDecimal("27.0")),0);
  notionalDate=notionalDate.plusDays(NUMBER_OF_DAY_BETWEEN_RETRIES);
  invoices=invoiceDao.getInvoicesForPayment(notionalDate,NUMBER_OF_DAY_BETWEEN_RETRIES);
  count=getInvoicesDueForPaymentAttempt(invoiceDao.get(),notionalDate).size();
  assertEquals(invoices.size(),count);
}
