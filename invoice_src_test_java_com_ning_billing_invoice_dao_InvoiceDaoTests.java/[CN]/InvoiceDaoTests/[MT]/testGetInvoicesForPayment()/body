{
  List<UUID> invoices;
  DateTime notionalDate=new DateTime();
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  int existingInvoiceCount=invoices.size();
  UUID accountId=UUID.randomUUID();
  DateTime targetDate=new DateTime(2011,10,6,0,0,0,0);
  IInvoice invoice=new Invoice(accountId,targetDate,Currency.USD);
  dao.createInvoice(invoice);
  UUID invoiceId=invoice.getId();
  UUID subscriptionId=UUID.randomUUID();
  DateTime endDate=targetDate.plusMonths(3);
  BigDecimal rate=new BigDecimal("9.0");
  BigDecimal amount=rate.multiply(new BigDecimal("3.0"));
  InvoiceItem item=new InvoiceItem(invoiceId,subscriptionId,targetDate,endDate,"test",amount,rate,Currency.USD);
  invoiceItemDao.createInvoiceItem(item);
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  assertEquals(invoices.size(),existingInvoiceCount + 1);
  dao.notifyFailedPayment(invoice.getId().toString(),notionalDate.toDate());
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  assertEquals(invoices.size(),existingInvoiceCount);
  notionalDate=notionalDate.plusDays(NUMBER_OF_DAY_BETWEEN_RETRIES);
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  assertEquals(invoices.size(),existingInvoiceCount + 1);
  dao.notifySuccessfulPayment(invoiceId.toString(),notionalDate.toDate(),new BigDecimal("22.0000"));
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  assertEquals(invoices.size(),existingInvoiceCount);
  invoice=dao.getInvoice(invoiceId.toString());
  assertEquals(invoice.getAmountPaid().compareTo(new BigDecimal("22.0")),0);
  notionalDate=notionalDate.plusDays(NUMBER_OF_DAY_BETWEEN_RETRIES);
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  assertEquals(invoices.size(),existingInvoiceCount + 1);
  dao.notifySuccessfulPayment(invoiceId.toString(),notionalDate.toDate(),new BigDecimal("5.0000"));
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  assertEquals(invoices.size(),existingInvoiceCount);
  invoice=dao.getInvoice(invoiceId.toString());
  assertEquals(invoice.getAmountPaid().compareTo(new BigDecimal("27.0")),0);
  notionalDate=notionalDate.plusDays(NUMBER_OF_DAY_BETWEEN_RETRIES);
  invoices=dao.getInvoicesForPayment(notionalDate.toDate(),NUMBER_OF_DAY_BETWEEN_RETRIES);
  assertEquals(invoices.size(),existingInvoiceCount);
}
