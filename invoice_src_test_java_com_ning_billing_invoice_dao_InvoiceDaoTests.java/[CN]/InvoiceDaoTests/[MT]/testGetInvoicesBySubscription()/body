{
  UUID accountId=UUID.randomUUID();
  UUID subscriptionId1=UUID.randomUUID();
  BigDecimal rate1=new BigDecimal("17.0");
  UUID subscriptionId2=UUID.randomUUID();
  BigDecimal rate2=new BigDecimal("42.0");
  UUID subscriptionId3=UUID.randomUUID();
  BigDecimal rate3=new BigDecimal("3.0");
  UUID subscriptionId4=UUID.randomUUID();
  BigDecimal rate4=new BigDecimal("12.0");
  DateTime targetDate=new DateTime(2011,5,23,0,0,0,0);
  Invoice invoice1=new InvoiceDefault(accountId,targetDate,Currency.USD);
  dao.createInvoice(invoice1);
  UUID invoiceId1=invoice1.getId();
  DateTime startDate=new DateTime(2011,3,1,0,0,0,0);
  DateTime endDate=startDate.plusMonths(1);
  InvoiceItem item1=new InvoiceItem(invoiceId1,subscriptionId1,startDate,endDate,"test A",rate1,rate1,Currency.USD);
  invoiceItemDao.createInvoiceItem(item1);
  InvoiceItem item2=new InvoiceItem(invoiceId1,subscriptionId2,startDate,endDate,"test B",rate2,rate2,Currency.USD);
  invoiceItemDao.createInvoiceItem(item2);
  InvoiceItem item3=new InvoiceItem(invoiceId1,subscriptionId3,startDate,endDate,"test C",rate3,rate3,Currency.USD);
  invoiceItemDao.createInvoiceItem(item3);
  InvoiceItem item4=new InvoiceItem(invoiceId1,subscriptionId4,startDate,endDate,"test D",rate4,rate4,Currency.USD);
  invoiceItemDao.createInvoiceItem(item4);
  InvoiceDefault invoice=new InvoiceDefault(accountId,targetDate,Currency.USD);
  dao.createInvoice(invoice);
  UUID invoiceId2=invoice.getId();
  startDate=endDate;
  endDate=startDate.plusMonths(1);
  InvoiceItem item5=new InvoiceItem(invoiceId2,subscriptionId1,startDate,endDate,"test A",rate1,rate1,Currency.USD);
  invoiceItemDao.createInvoiceItem(item5);
  InvoiceItem item6=new InvoiceItem(invoiceId2,subscriptionId2,startDate,endDate,"test B",rate2,rate2,Currency.USD);
  invoiceItemDao.createInvoiceItem(item6);
  InvoiceItem item7=new InvoiceItem(invoiceId2,subscriptionId3,startDate,endDate,"test C",rate3,rate3,Currency.USD);
  invoiceItemDao.createInvoiceItem(item7);
  List<Invoice> items1=dao.getInvoicesBySubscription(subscriptionId1.toString());
  assertEquals(items1.size(),2);
  List<Invoice> items2=dao.getInvoicesBySubscription(subscriptionId2.toString());
  assertEquals(items2.size(),2);
  List<Invoice> items3=dao.getInvoicesBySubscription(subscriptionId3.toString());
  assertEquals(items3.size(),2);
  List<Invoice> items4=dao.getInvoicesBySubscription(subscriptionId4.toString());
  assertEquals(items4.size(),1);
}
