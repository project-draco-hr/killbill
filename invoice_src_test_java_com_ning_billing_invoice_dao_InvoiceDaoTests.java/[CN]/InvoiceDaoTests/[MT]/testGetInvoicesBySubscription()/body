{
  UUID accountId=UUID.randomUUID();
  UUID subscriptionId1=UUID.randomUUID();
  BigDecimal rate1=new BigDecimal("17.0");
  UUID subscriptionId2=UUID.randomUUID();
  BigDecimal rate2=new BigDecimal("42.0");
  UUID subscriptionId3=UUID.randomUUID();
  BigDecimal rate3=new BigDecimal("3.0");
  UUID subscriptionId4=UUID.randomUUID();
  BigDecimal rate4=new BigDecimal("12.0");
  DateTime targetDate=new DateTime(2011,5,23,0,0,0,0);
  Invoice invoice1=new DefaultInvoice(accountId,targetDate,Currency.USD,clock);
  invoiceDao.create(invoice1);
  UUID invoiceId1=invoice1.getId();
  DateTime startDate=new DateTime(2011,3,1,0,0,0,0);
  DateTime endDate=startDate.plusMonths(1);
  RecurringInvoiceItem item1=new RecurringInvoiceItem(invoiceId1,subscriptionId1,"test plan","test A",startDate,endDate,rate1,rate1,Currency.USD,clock.getUTCNow(),clock.getUTCNow());
  recurringInvoiceItemDao.create(item1);
  RecurringInvoiceItem item2=new RecurringInvoiceItem(invoiceId1,subscriptionId2,"test plan","test B",startDate,endDate,rate2,rate2,Currency.USD,clock.getUTCNow(),clock.getUTCNow());
  recurringInvoiceItemDao.create(item2);
  RecurringInvoiceItem item3=new RecurringInvoiceItem(invoiceId1,subscriptionId3,"test plan","test C",startDate,endDate,rate3,rate3,Currency.USD,clock.getUTCNow(),clock.getUTCNow());
  recurringInvoiceItemDao.create(item3);
  RecurringInvoiceItem item4=new RecurringInvoiceItem(invoiceId1,subscriptionId4,"test plan","test D",startDate,endDate,rate4,rate4,Currency.USD,clock.getUTCNow(),clock.getUTCNow());
  recurringInvoiceItemDao.create(item4);
  DefaultInvoice invoice2=new DefaultInvoice(accountId,targetDate,Currency.USD,clock);
  invoiceDao.create(invoice2);
  UUID invoiceId2=invoice2.getId();
  startDate=endDate;
  endDate=startDate.plusMonths(1);
  RecurringInvoiceItem item5=new RecurringInvoiceItem(invoiceId2,subscriptionId1,"test plan","test phase A",startDate,endDate,rate1,rate1,Currency.USD,clock.getUTCNow(),clock.getUTCNow());
  recurringInvoiceItemDao.create(item5);
  RecurringInvoiceItem item6=new RecurringInvoiceItem(invoiceId2,subscriptionId2,"test plan","test phase B",startDate,endDate,rate2,rate2,Currency.USD,clock.getUTCNow(),clock.getUTCNow());
  recurringInvoiceItemDao.create(item6);
  RecurringInvoiceItem item7=new RecurringInvoiceItem(invoiceId2,subscriptionId3,"test plan","test phase C",startDate,endDate,rate3,rate3,Currency.USD,clock.getUTCNow(),clock.getUTCNow());
  recurringInvoiceItemDao.create(item7);
  List<Invoice> items1=invoiceDao.getInvoicesBySubscription(subscriptionId1);
  assertEquals(items1.size(),2);
  List<Invoice> items2=invoiceDao.getInvoicesBySubscription(subscriptionId2);
  assertEquals(items2.size(),2);
  List<Invoice> items3=invoiceDao.getInvoicesBySubscription(subscriptionId3);
  assertEquals(items3.size(),2);
  List<Invoice> items4=invoiceDao.getInvoicesBySubscription(subscriptionId4);
  assertEquals(items4.size(),1);
}
