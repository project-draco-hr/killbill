{
  UUID accountId=UUID.randomUUID();
  Invoice invoice=new DefaultInvoice(accountId,new DefaultClock().getUTCNow(),Currency.USD);
  UUID invoiceId=invoice.getId();
  UUID subscriptionId=UUID.randomUUID();
  DateTime startDate=new DateTime(2010,1,1,0,0,0,0);
  DateTime endDate=new DateTime(2010,4,1,0,0,0,0);
  InvoiceItem invoiceItem=new DefaultInvoiceItem(invoiceId,subscriptionId,startDate,endDate,"test",new BigDecimal("21.00"),new BigDecimal("7.00"),Currency.USD);
  invoice.addInvoiceItem(invoiceItem);
  invoiceDao.create(invoice);
  Invoice savedInvoice=invoiceDao.getById(invoiceId.toString());
  assertNotNull(savedInvoice);
  assertEquals(savedInvoice.getTotalAmount().compareTo(new BigDecimal("21.00")),0);
  assertEquals(savedInvoice.getBalance().compareTo(new BigDecimal("21.00")),0);
  assertEquals(savedInvoice.getAmountPaid(),BigDecimal.ZERO);
  assertEquals(savedInvoice.getInvoiceItems().size(),1);
  BigDecimal paymentAmount=new BigDecimal("11.00");
  String paymentId=UUID.randomUUID().toString();
  invoiceDao.notifySuccessfulPayment(invoiceId.toString(),paymentAmount,Currency.USD.toString(),paymentId,new DefaultClock().getUTCNow().plusDays(12).toDate());
  Invoice retrievedInvoice=invoiceDao.getById(invoiceId.toString());
  assertNotNull(retrievedInvoice);
  assertEquals(retrievedInvoice.getInvoiceItems().size(),1);
  assertEquals(retrievedInvoice.getTotalAmount().compareTo(new BigDecimal("21.00")),0);
  assertEquals(retrievedInvoice.getBalance().compareTo(new BigDecimal("10.00")),0);
  assertEquals(retrievedInvoice.getAmountPaid().compareTo(new BigDecimal("11.00")),0);
}
