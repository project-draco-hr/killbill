{
  account=Mockito.mock(Account.class);
  Mockito.when(account.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(account.getExternalKey()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getFirstNameLength()).thenReturn(4);
  Mockito.when(account.getEmail()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getBillCycleDayLocal()).thenReturn(2);
  Mockito.when(account.getCurrency()).thenReturn(Currency.BRL);
  Mockito.when(account.getPaymentMethodId()).thenReturn(UUID.randomUUID());
  Mockito.when(account.getTimeZone()).thenReturn(DateTimeZone.forID("Europe/London"));
  Mockito.when(account.getLocale()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getAddress1()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getAddress2()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getCompanyName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getCity()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getStateOrProvince()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getPostalCode()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getCountry()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.getPhone()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(account.isMigrated()).thenReturn(true);
  Mockito.when(account.isNotifiedForInvoices()).thenReturn(true);
  invoiceItem=Mockito.mock(InvoiceItem.class);
  Mockito.when(invoiceItem.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getInvoiceItemType()).thenReturn(InvoiceItemType.EXTERNAL_CHARGE);
  Mockito.when(invoiceItem.getInvoiceId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getAccountId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getStartDate()).thenReturn(new LocalDate(1999,9,9));
  Mockito.when(invoiceItem.getEndDate()).thenReturn(new LocalDate(2048,1,1));
  Mockito.when(invoiceItem.getAmount()).thenReturn(new BigDecimal("12000"));
  Mockito.when(invoiceItem.getCurrency()).thenReturn(Currency.EUR);
  Mockito.when(invoiceItem.getDescription()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getBundleId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getSubscriptionId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoiceItem.getPlanName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getPhaseName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(invoiceItem.getRate()).thenReturn(new BigDecimal("1203"));
  Mockito.when(invoiceItem.getLinkedItemId()).thenReturn(UUID.randomUUID());
  invoicePayment=Mockito.mock(InvoicePayment.class);
  Mockito.when(invoicePayment.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoicePayment.getPaymentId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoicePayment.getType()).thenReturn(InvoicePaymentType.ATTEMPT);
  Mockito.when(invoicePayment.getInvoiceId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoicePayment.getPaymentDate()).thenReturn(new DateTime(2003,4,12,3,34,52,DateTimeZone.UTC));
  Mockito.when(invoicePayment.getAmount()).thenReturn(BigDecimal.ONE);
  Mockito.when(invoicePayment.getCurrency()).thenReturn(Currency.MXN);
  Mockito.when(invoicePayment.getLinkedInvoicePaymentId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoicePayment.getPaymentCookieId()).thenReturn(UUID.randomUUID());
  invoice=Mockito.mock(Invoice.class);
  Mockito.when(invoice.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoice.getInvoiceItems()).thenReturn(ImmutableList.<InvoiceItem>of(invoiceItem));
  Mockito.when(invoice.getNumberOfItems()).thenReturn(6);
  Mockito.when(invoice.getPayments()).thenReturn(ImmutableList.<InvoicePayment>of(invoicePayment));
  Mockito.when(invoice.getNumberOfPayments()).thenReturn(3);
  Mockito.when(invoice.getAccountId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoice.getInvoiceNumber()).thenReturn(42);
  Mockito.when(invoice.getInvoiceDate()).thenReturn(new LocalDate(1954,12,1));
  Mockito.when(invoice.getTargetDate()).thenReturn(new LocalDate(2017,3,4));
  Mockito.when(invoice.getCurrency()).thenReturn(Currency.AUD);
  Mockito.when(invoice.getPaidAmount()).thenReturn(BigDecimal.ZERO);
  Mockito.when(invoice.getOriginalChargedAmount()).thenReturn(new BigDecimal("1922"));
  Mockito.when(invoice.getChargedAmount()).thenReturn(new BigDecimal("100293"));
  Mockito.when(invoice.getCBAAmount()).thenReturn(BigDecimal.TEN);
  Mockito.when(invoice.getTotalAdjAmount()).thenReturn(new BigDecimal("192"));
  Mockito.when(invoice.getCreditAdjAmount()).thenReturn(new BigDecimal("283"));
  Mockito.when(invoice.getRefundAdjAmount()).thenReturn(new BigDecimal("384"));
  Mockito.when(invoice.getBalance()).thenReturn(new BigDecimal("18376"));
  Mockito.when(invoice.isMigrationInvoice()).thenReturn(false);
  paymentAttempt=Mockito.mock(PaymentAttempt.class);
  Mockito.when(paymentAttempt.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(paymentAttempt.getEffectiveDate()).thenReturn(new DateTime(2019,12,30,10,10,10,DateTimeZone.UTC));
  Mockito.when(paymentAttempt.getGatewayErrorCode()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(paymentAttempt.getGatewayErrorMsg()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(paymentAttempt.getPaymentStatus()).thenReturn(PaymentStatus.SUCCESS);
  payment=Mockito.mock(Payment.class);
  Mockito.when(payment.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(payment.getAccountId()).thenReturn(UUID.randomUUID());
  Mockito.when(payment.getInvoiceId()).thenReturn(UUID.randomUUID());
  Mockito.when(payment.getPaymentMethodId()).thenReturn(UUID.randomUUID());
  Mockito.when(payment.getPaymentNumber()).thenReturn(1);
  Mockito.when(payment.getAmount()).thenReturn(new BigDecimal("199999"));
  Mockito.when(payment.getPaidAmount()).thenReturn(new BigDecimal("199998"));
  Mockito.when(payment.getEffectiveDate()).thenReturn(new DateTime(2019,2,3,12,12,12,DateTimeZone.UTC));
  Mockito.when(payment.getCurrency()).thenReturn(Currency.USD);
  Mockito.when(payment.getPaymentStatus()).thenReturn(PaymentStatus.AUTO_PAY_OFF);
  Mockito.when(payment.getAttempts()).thenReturn(ImmutableList.<PaymentAttempt>of(paymentAttempt));
  Mockito.when(payment.getExtFirstPaymentIdRef()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(payment.getExtSecondPaymentIdRef()).thenReturn(UUID.randomUUID().toString());
  customField=Mockito.mock(CustomField.class);
  Mockito.when(customField.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(customField.getObjectId()).thenReturn(UUID.randomUUID());
  Mockito.when(customField.getObjectType()).thenReturn(ObjectType.TENANT);
  Mockito.when(customField.getFieldName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(customField.getFieldValue()).thenReturn(UUID.randomUUID().toString());
  tag=Mockito.mock(Tag.class);
  Mockito.when(tag.getObjectId()).thenReturn(UUID.randomUUID());
  Mockito.when(tag.getObjectType()).thenReturn(ObjectType.ACCOUNT);
  Mockito.when(tag.getTagDefinitionId()).thenReturn(UUID.randomUUID());
  tagDefinition=Mockito.mock(TagDefinition.class);
  Mockito.when(tagDefinition.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(tagDefinition.getName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(tagDefinition.getDescription()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(tagDefinition.isControlTag()).thenReturn(false);
  Mockito.when(tagDefinition.getApplicableObjectTypes()).thenReturn(ImmutableList.<ObjectType>of(ObjectType.INVOICE));
  auditLog=Mockito.mock(AuditLog.class);
  Mockito.when(auditLog.getId()).thenReturn(UUID.randomUUID());
  Mockito.when(auditLog.getChangeType()).thenReturn(ChangeType.INSERT);
  Mockito.when(auditLog.getUserName()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(auditLog.getCreatedDate()).thenReturn(new DateTime(2012,31,31,23,59,59,DateTimeZone.UTC));
  Mockito.when(auditLog.getReasonCode()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(auditLog.getUserToken()).thenReturn(UUID.randomUUID().toString());
  Mockito.when(auditLog.getComment()).thenReturn(UUID.randomUUID().toString());
}
