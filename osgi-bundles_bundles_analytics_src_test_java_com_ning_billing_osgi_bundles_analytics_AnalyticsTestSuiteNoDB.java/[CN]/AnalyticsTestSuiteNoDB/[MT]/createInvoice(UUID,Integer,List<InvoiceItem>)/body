{
  final Invoice invoice=Mockito.mock(Invoice.class);
  Mockito.when(invoice.getId()).thenReturn(invoiceId);
  Mockito.when(invoice.getNumberOfItems()).thenReturn(items.size());
  Mockito.when(invoice.getInvoiceItems()).thenReturn(items);
  Mockito.when(invoice.getNumberOfPayments()).thenReturn(0);
  Mockito.when(invoice.getAccountId()).thenReturn(UUID.randomUUID());
  Mockito.when(invoice.getInvoiceNumber()).thenReturn(invoiceNumber);
  Mockito.when(invoice.getInvoiceDate()).thenReturn(new LocalDate(1954,12,1));
  Mockito.when(invoice.getTargetDate()).thenReturn(new LocalDate(2017,3,4));
  Mockito.when(invoice.getCurrency()).thenReturn(Currency.AUD);
  Mockito.when(invoice.getPaidAmount()).thenReturn(BigDecimal.ZERO);
  Mockito.when(invoice.getOriginalChargedAmount()).thenReturn(new BigDecimal("1922"));
  Mockito.when(invoice.getChargedAmount()).thenReturn(new BigDecimal("100293"));
  Mockito.when(invoice.getCreditedAmount()).thenReturn(new BigDecimal("283"));
  Mockito.when(invoice.getRefundedAmount()).thenReturn(new BigDecimal("384"));
  Mockito.when(invoice.getBalance()).thenReturn(new BigDecimal("18376"));
  Mockito.when(invoice.isMigrationInvoice()).thenReturn(false);
  Mockito.when(invoice.getCreatedDate()).thenReturn(INVOICE_CREATED_DATE);
  return invoice;
}
