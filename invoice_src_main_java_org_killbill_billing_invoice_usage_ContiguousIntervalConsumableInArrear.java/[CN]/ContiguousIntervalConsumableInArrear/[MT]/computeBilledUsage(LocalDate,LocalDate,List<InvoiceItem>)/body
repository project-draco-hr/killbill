{
  Preconditions.checkState(isBuilt.get());
  final Iterable<InvoiceItem> filteredUsageForInterval=Iterables.filter(existingUsage,new Predicate<InvoiceItem>(){
    @Override public boolean apply(    final InvoiceItem input){
      if (input.getInvoiceItemType() != InvoiceItemType.USAGE) {
        return false;
      }
      final UsageInvoiceItem usageInput=(UsageInvoiceItem)input;
      return usageInput.getUsageName().equals(usage.getName()) && usageInput.getStartDate().compareTo(startDate) >= 0 && usageInput.getEndDate().compareTo(endDate) <= 0;
    }
  }
);
  BigDecimal billedAmount=BigDecimal.ZERO;
  for (  InvoiceItem ii : filteredUsageForInterval) {
    billedAmount=billedAmount.add(ii.getAmount());
  }
  return billedAmount;
}
