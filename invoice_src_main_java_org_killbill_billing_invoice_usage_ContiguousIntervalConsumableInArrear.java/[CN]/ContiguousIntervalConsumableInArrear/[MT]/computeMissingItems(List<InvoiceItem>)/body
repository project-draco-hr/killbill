{
  Preconditions.checkState(isBuilt.get());
  final List<InvoiceItem> result=Lists.newLinkedList();
  final RolledUpUsageForUnitTypesFactory factory=new RolledUpUsageForUnitTypesFactory(getRolledUpUsage(),unitTypes,getAccountTimeZone());
  for (  RolledUpUsageForUnitTypes ru : factory.getOrderedRolledUpUsageForUnitTypes()) {
    BigDecimal toBeBilledUsage=BigDecimal.ZERO;
    for (    final String unitType : unitTypes) {
      final BigDecimal usageAmountForUnitType=ru.getUsageAmountForUnitType(unitType);
      final BigDecimal toBeBilledForUnit=computeToBeBilledUsage(usageAmountForUnitType,unitType);
      toBeBilledUsage=toBeBilledUsage.add(toBeBilledForUnit);
    }
    final Iterable<InvoiceItem> billedItems=getBilledItems(ru.getStartDate(),ru.getEndDate(),existingUsage);
    final BigDecimal billedUsage=computeBilledUsage(billedItems);
    if (!billedItems.iterator().hasNext() || billedUsage.compareTo(toBeBilledUsage) < 0) {
      InvoiceItem item=new UsageInvoiceItem(invoiceId,getAccountId(),getBundleId(),getSubscriptionId(),getPlanName(),getPhaseName(),usage.getName(),ru.getStartDate(),ru.getEndDate(),toBeBilledUsage.subtract(billedUsage),getCurrency());
      result.add(item);
    }
  }
  return result;
}
