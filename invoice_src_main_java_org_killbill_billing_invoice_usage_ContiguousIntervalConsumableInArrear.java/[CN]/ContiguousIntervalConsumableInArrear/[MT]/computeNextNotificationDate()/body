{
  LocalDate result=null;
  final Iterator<BillingEvent> eventIt=billingEvents.iterator();
  BillingEvent nextEvent=eventIt.next();
  while (eventIt.hasNext()) {
    final BillingEvent thisEvent=nextEvent;
    nextEvent=eventIt.next();
    final LocalDate startDate=dateAndTimeZoneContext.computeLocalDateFromFixedAccountOffset(thisEvent.getEffectiveDate());
    final LocalDate endDate=dateAndTimeZoneContext.computeLocalDateFromFixedAccountOffset(nextEvent.getEffectiveDate());
    final BillingIntervalDetail bid=new BillingIntervalDetail(startDate,endDate,targetDate,thisEvent.getBillCycleDayLocal(),usage.getBillingPeriod(),BillingMode.IN_ARREAR);
    final LocalDate nextBillingCycleDate=bid.getNextBillingCycleDate();
    result=(result == null || result.compareTo(nextBillingCycleDate) < 0) ? nextBillingCycleDate : result;
  }
  final LocalDate startDate=dateAndTimeZoneContext.computeLocalDateFromFixedAccountOffset(nextEvent.getEffectiveDate());
  final BillingIntervalDetail bid=new BillingIntervalDetail(startDate,null,targetDate,nextEvent.getBillCycleDayLocal(),usage.getBillingPeriod(),BillingMode.IN_ARREAR);
  final LocalDate nextBillingCycleDate=bid.getNextBillingCycleDate();
  result=(result == null || result.compareTo(nextBillingCycleDate) < 0) ? nextBillingCycleDate : result;
  return result;
}
