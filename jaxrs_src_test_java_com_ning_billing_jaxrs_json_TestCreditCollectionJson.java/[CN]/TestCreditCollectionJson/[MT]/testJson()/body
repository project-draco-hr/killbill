{
  final UUID accountId=UUID.randomUUID();
  final BigDecimal creditAmount=BigDecimal.TEN;
  final UUID invoiceId=UUID.randomUUID();
  final String invoiceNumber=UUID.randomUUID().toString();
  final DateTime requestedDate=new DateTime(DateTimeZone.UTC);
  final DateTime effectiveDate=new DateTime(DateTimeZone.UTC);
  final String reason=UUID.randomUUID().toString();
  final CreditJson creditJson=new CreditJson(creditAmount,invoiceId,invoiceNumber,requestedDate,effectiveDate,reason,accountId);
  final CreditCollectionJson creditCollectionJson=new CreditCollectionJson(accountId,ImmutableList.<CreditJson>of(creditJson));
  Assert.assertEquals(creditCollectionJson.getAccountId(),accountId);
  Assert.assertEquals(creditCollectionJson.getCredits().size(),1);
  Assert.assertEquals(creditCollectionJson.getCredits().get(0),creditJson);
  final String asJson=mapper.writeValueAsString(creditCollectionJson);
  Assert.assertEquals(asJson,"{\"accountId\":\"" + accountId.toString() + "\","+ "\"credits\":[{\"creditAmount\":"+ creditJson.getCreditAmount()+ ","+ "\"invoiceId\":\""+ creditJson.getInvoiceId().toString()+ "\","+ "\"invoiceNumber\":\""+ creditJson.getInvoiceNumber()+ "\","+ "\"requestedDate\":\""+ creditJson.getRequestedDate()+ "\","+ "\"effectiveDate\":\""+ creditJson.getEffectiveDate()+ "\","+ "\"reason\":\""+ creditJson.getReason()+ "\","+ "\"accountId\":\""+ creditJson.getAccountId().toString()+ "\"}]}");
  final CreditCollectionJson fromJson=mapper.readValue(asJson,CreditCollectionJson.class);
  Assert.assertEquals(fromJson,creditCollectionJson);
}
