{
  final Plan nextPlan=catalog.findPlan("PickupTrialEvergreen10USD",clock.getUTCNow());
  final PlanPhase nextPhase=nextPlan.getAllPhases()[1];
  final DateTime now=createSubscriptionCreationEvent(nextPlan,nextPhase);
  final Account account=createAccount(32);
  final List<BlockingState> blockingStates=new ArrayList<BlockingState>();
  blockingStates.add(new DefaultBlockingState(UUID.randomUUID(),bunId,BlockingStateType.BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1),null));
  blockingStates.add(new DefaultBlockingState(UUID.randomUUID(),bunId,BlockingStateType.BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2),null));
  ((MockBlockingStateDao)blockingStateDao).setBlockingStates(bunId,blockingStates);
  final SortedSet<BillingEvent> events=billingInternalApi.getBillingEventsForAccountAndUpdateAccountBCD(account.getId(),internalCallContext);
  Assert.assertEquals(events.size(),3);
  final Iterator<BillingEvent> it=events.iterator();
  checkEvent(it.next(),nextPlan,account.getBillCycleDayLocal(),subId,now,nextPhase,SubscriptionBaseTransitionType.CREATE.toString(),nextPhase.getFixedPrice(),nextPhase.getRecurringPrice());
  checkEvent(it.next(),nextPlan,account.getBillCycleDayLocal(),subId,now.plusDays(1),nextPhase,SubscriptionBaseTransitionType.START_BILLING_DISABLED.toString(),null,null);
  checkEvent(it.next(),nextPlan,account.getBillCycleDayLocal(),subId,now.plusDays(2),nextPhase,SubscriptionBaseTransitionType.END_BILLING_DISABLED.toString(),nextPhase.getFixedPrice(),nextPhase.getRecurringPrice());
}
