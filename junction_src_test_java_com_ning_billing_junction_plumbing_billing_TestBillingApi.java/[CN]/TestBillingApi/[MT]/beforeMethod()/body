{
  super.beforeMethod();
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getId()).thenReturn(bunId);
  final List<SubscriptionBundle> bundles=ImmutableList.<SubscriptionBundle>of(bundle);
  effectiveSubscriptionTransitions=new LinkedList<EffectiveSubscriptionInternalEvent>();
  final DateTime subscriptionStartDate=clock.getUTCNow().minusDays(3);
  subscription=new MockSubscription(subId,bunId,null,subscriptionStartDate,effectiveSubscriptionTransitions);
  final List<Subscription> subscriptions=ImmutableList.<Subscription>of(subscription);
  Mockito.when(entitlementInternalApi.getBundlesForAccount(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(bundles);
  Mockito.when(entitlementInternalApi.getSubscriptionsForBundle(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscriptions);
  Mockito.when(entitlementInternalApi.getSubscriptionFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  Mockito.when(entitlementInternalApi.getBundleFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(bundle);
  Mockito.when(entitlementInternalApi.getBaseSubscription(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  Mockito.when(entitlementInternalApi.getBillingTransitions(Mockito.<Subscription>any(),Mockito.<InternalTenantContext>any())).thenReturn(effectiveSubscriptionTransitions);
  Mockito.when(entitlementInternalApi.getAllTransitions(Mockito.<Subscription>any(),Mockito.<InternalTenantContext>any())).thenReturn(effectiveSubscriptionTransitions);
  catalog=((MockCatalog)catalogService.getCurrentCatalog());
  Mockito.when(catalogService.getFullCatalog()).thenReturn(catalog);
  catalog.setBillingAlignment(BillingAlignment.ACCOUNT);
  ((MockBlockingStateDao)blockingStateDao).clear();
  ((MockTagDao)tagDao).clear();
}
