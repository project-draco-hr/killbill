{
  accountApi=Mockito.mock(AccountUserApi.class);
  final List<SubscriptionBundle> bundles=new ArrayList<SubscriptionBundle>();
  final SubscriptionBundle bundle=Mockito.mock(SubscriptionBundle.class);
  Mockito.when(bundle.getId()).thenReturn(bunId);
  bundles.add(bundle);
  effectiveSubscriptionTransitions=new LinkedList<EffectiveSubscriptionEvent>();
  final List<Subscription> subscriptions=new LinkedList<Subscription>();
  final DateTime subscriptionStartDate=clock.getUTCNow().minusDays(3);
  subscription=new MockSubscription(subId,bunId,null,subscriptionStartDate,effectiveSubscriptionTransitions);
  subscriptions.add(subscription);
  entitlementApi=Mockito.mock(EntitlementUserApi.class);
  Mockito.when(entitlementApi.getBundlesForAccount(Mockito.<UUID>any())).thenReturn(bundles);
  Mockito.when(entitlementApi.getSubscriptionsForBundle(Mockito.<UUID>any())).thenReturn(subscriptions);
  Mockito.when(entitlementApi.getSubscriptionFromId(Mockito.<UUID>any())).thenReturn(subscription);
  Mockito.when(entitlementApi.getBundleFromId(Mockito.<UUID>any())).thenReturn(bundle);
  Mockito.when(entitlementApi.getBaseSubscription(Mockito.<UUID>any())).thenReturn(subscription);
  tagApi=mock(TagUserApi.class);
  bcdCalculator=new BillCycleDayCalculator(catalogService,entitlementApi);
  factory=new DefaultCallContextFactory(clock);
  api=new DefaultBillingApi(null,factory,accountApi,bcdCalculator,entitlementApi,blockCalculator,catalogService,tagApi);
  ((MockCatalog)catalogService.getFullCatalog()).setBillingAlignment(BillingAlignment.ACCOUNT);
}
