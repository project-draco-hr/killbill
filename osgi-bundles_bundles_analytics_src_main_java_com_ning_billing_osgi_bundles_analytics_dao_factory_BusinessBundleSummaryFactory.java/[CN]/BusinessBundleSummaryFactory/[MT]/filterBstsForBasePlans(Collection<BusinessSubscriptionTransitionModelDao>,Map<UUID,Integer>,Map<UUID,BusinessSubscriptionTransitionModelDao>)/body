{
  final Collection<BusinessSubscriptionTransitionModelDao> sortedBundlesBst=Ordering.from(new Comparator<BusinessSubscriptionTransitionModelDao>(){
    @Override public int compare(    final BusinessSubscriptionTransitionModelDao o1,    final BusinessSubscriptionTransitionModelDao o2){
      return o1.getNextStartDate().compareTo(o2.getNextStartDate());
    }
  }
).sortedCopy(Iterables.filter(bsts,new Predicate<BusinessSubscriptionTransitionModelDao>(){
    @Override public boolean apply(    final BusinessSubscriptionTransitionModelDao input){
      return ProductCategory.BASE.toString().equals(input.getNextProductCategory());
    }
  }
));
  UUID lastBundleId=null;
  Integer lastBundleRank=0;
  for (  final BusinessSubscriptionTransitionModelDao bst : sortedBundlesBst) {
    if (lastBundleId == null || (!lastBundleId.equals(bst.getBundleId()) && rankForBundle.get(bst.getBundleId()) == null)) {
      lastBundleRank++;
      lastBundleId=bst.getBundleId();
      rankForBundle.put(lastBundleId,lastBundleRank);
    }
    if (bstForBundle.get(bst.getBundleId()) == null || bstForBundle.get(bst.getBundleId()).getNextStartDate().isBefore(bst.getNextStartDate())) {
      bstForBundle.put(bst.getBundleId(),bst);
    }
  }
}
