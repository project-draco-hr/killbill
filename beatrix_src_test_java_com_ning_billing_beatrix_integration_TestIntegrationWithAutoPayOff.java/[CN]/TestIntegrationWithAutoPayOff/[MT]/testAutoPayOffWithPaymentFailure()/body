{
  clock.setTime(new DateTime(2012,5,1,0,3,42,0));
  add_AUTO_PAY_OFF_Tag(account.getId(),ObjectType.ACCOUNT);
  final DefaultEntitlement bpEntitlement=createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE);
  assertNotNull(bpEntitlement);
  Collection<Invoice> invoices=invoiceApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),1);
  busHandler.pushExpectedEvents(NextEvent.PHASE);
  busHandler.pushExpectedEvents(NextEvent.INVOICE);
  clock.addDays(40);
  assertTrue(busHandler.isCompleted(DELAY));
  invoices=invoiceApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  for (  Invoice cur : invoices) {
    if (cur.getChargedAmount().compareTo(BigDecimal.ZERO) == 0) {
      continue;
    }
    assertEquals(cur.getBalance(),cur.getChargedAmount());
  }
  paymentPlugin.makeNextPaymentFailWithError();
  busHandler.pushExpectedEvents(NextEvent.PAYMENT_ERROR);
  remove_AUTO_PAY_OFF_Tag(account.getId(),ObjectType.ACCOUNT);
  assertTrue(busHandler.isCompleted(DELAY));
  addDelayBceauseOfLackOfCorrectSynchro();
  invoices=invoiceApi.getInvoicesByAccount(account.getId(),callContext);
  assertEquals(invoices.size(),2);
  for (  Invoice cur : invoices) {
    if (cur.getChargedAmount().compareTo(BigDecimal.ZERO) == 0) {
      continue;
    }
    assertEquals(cur.getBalance(),cur.getChargedAmount());
  }
  assertListenerStatus();
  int nbDaysBeforeRetry=paymentConfig.getPaymentRetryDays().get(0);
  busHandler.pushExpectedEvents(NextEvent.PAYMENT);
  clock.addDays(nbDaysBeforeRetry + 1);
  assertTrue(busHandler.isCompleted(DELAY));
  invoices=invoiceApi.getInvoicesByAccount(account.getId(),callContext);
  for (  Invoice cur : invoices) {
    if (cur.getChargedAmount().compareTo(BigDecimal.ZERO) == 0) {
      continue;
    }
    assertTrue(cur.getBalance().compareTo(BigDecimal.ZERO) == 0);
    assertTrue(cur.getPaidAmount().compareTo(cur.getChargedAmount()) == 0);
  }
  assertListenerStatus();
}
