{
  if (ctd == null) {
    throw new SubscriptionBaseError(String.format("Could not create migration billing event ctd = %s",ctd));
  }
  final List<SubscriptionBaseEvent> events=new ArrayList<SubscriptionBaseEvent>(migrationEvents.length);
  ApiEventMigrateBilling apiEventMigrateBilling=null;
  DateTime nextEventDate=null;
  boolean isCancelledSubscriptionPriorOrAtCTD=false;
  for (  final TimedMigration cur : migrationEvents) {
    final ApiEventBuilder builder=new ApiEventBuilder().setSubscriptionId(defaultSubscriptionBase.getId()).setEventPlan((cur.getPlan() != null) ? cur.getPlan().getName() : null).setEventPlanPhase((cur.getPhase() != null) ? cur.getPhase().getName() : null).setEventPriceList(cur.getPriceList()).setActiveVersion(defaultSubscriptionBase.getActiveVersion()).setEffectiveDate(cur.getEventTime()).setRequestedDate(now).setFromDisk(true);
    if (cur.getEventType() == EventType.PHASE) {
      nextEventDate=nextEventDate != null && nextEventDate.compareTo(cur.getEventTime()) < 0 ? nextEventDate : cur.getEventTime();
      final PhaseEvent nextPhaseEvent=PhaseEventData.createNextPhaseEvent(defaultSubscriptionBase.getId(),defaultSubscriptionBase.getActiveVersion(),cur.getPhase().getName(),now,cur.getEventTime());
      events.add(nextPhaseEvent);
    }
 else     if (cur.getEventType() == EventType.API_USER) {
switch (cur.getApiEventType()) {
case MIGRATE_ENTITLEMENT:
        ApiEventMigrateSubscription creationEvent=new ApiEventMigrateSubscription(builder);
      events.add(creationEvent);
    break;
case CHANGE:
  nextEventDate=nextEventDate != null && nextEventDate.compareTo(cur.getEventTime()) < 0 ? nextEventDate : cur.getEventTime();
events.add(new ApiEventChange(builder));
break;
case CANCEL:
isCancelledSubscriptionPriorOrAtCTD=!cur.getEventTime().isAfter(ctd);
nextEventDate=nextEventDate != null && nextEventDate.compareTo(cur.getEventTime()) < 0 ? nextEventDate : cur.getEventTime();
events.add(new ApiEventCancel(builder));
break;
default :
throw new SubscriptionBaseError(String.format("Unexpected type of api migration event %s",cur.getApiEventType()));
}
}
 else {
throw new SubscriptionBaseError(String.format("Unexpected type of migration event %s",cur.getEventType()));
}
if (!cur.getEventTime().isAfter(ctd)) {
builder.setEffectiveDate(ctd);
builder.setUuid(UUIDs.randomUUID());
apiEventMigrateBilling=new ApiEventMigrateBilling(builder);
}
}
if (apiEventMigrateBilling != null && !isCancelledSubscriptionPriorOrAtCTD) {
events.add(apiEventMigrateBilling);
}
Collections.sort(events,new Comparator<SubscriptionBaseEvent>(){
int compForApiType(final SubscriptionBaseEvent o1,final SubscriptionBaseEvent o2,final ApiEventType type){
ApiEventType apiO1=null;
if (o1.getType() == EventType.API_USER) {
apiO1=((ApiEvent)o1).getApiEventType();
}
ApiEventType apiO2=null;
if (o2.getType() == EventType.API_USER) {
apiO2=((ApiEvent)o2).getApiEventType();
}
if (apiO1 != null && apiO1.equals(type)) {
return -1;
}
 else if (apiO2 != null && apiO2.equals(type)) {
return 1;
}
 else {
return 0;
}
}
@Override public int compare(final SubscriptionBaseEvent o1,final SubscriptionBaseEvent o2){
int comp=o1.getEffectiveDate().compareTo(o2.getEffectiveDate());
if (comp == 0) {
comp=compForApiType(o1,o2,ApiEventType.MIGRATE_ENTITLEMENT);
}
if (comp == 0) {
comp=compForApiType(o1,o2,ApiEventType.MIGRATE_BILLING);
}
return comp;
}
}
);
return events;
}
