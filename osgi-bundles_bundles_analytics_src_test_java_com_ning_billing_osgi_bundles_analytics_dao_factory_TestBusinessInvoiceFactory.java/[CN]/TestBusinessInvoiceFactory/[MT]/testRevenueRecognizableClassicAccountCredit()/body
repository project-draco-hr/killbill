{
  final UUID invoiceId=UUID.randomUUID();
  final BusinessInvoiceItemBaseModelDao businessCreditAdjItem=invoiceFactory.createBusinessInvoiceItem(account,invoice,createInvoiceItem(invoiceId,InvoiceItemType.CREDIT_ADJ,new BigDecimal("-10")),ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.CBA_ADJ,new BigDecimal("10"))),null,null,null,invoiceItemRecordId,auditLog,accountRecordId,tenantRecordId,reportGroup);
  Assert.assertNull(businessCreditAdjItem);
  final BusinessInvoiceItemBaseModelDao businessCreditItem=invoiceFactory.createBusinessInvoiceItem(account,invoice,createInvoiceItem(invoiceId,InvoiceItemType.CBA_ADJ,new BigDecimal("10")),ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.CREDIT_ADJ,new BigDecimal("-10"))),null,null,null,invoiceItemRecordId,auditLog,accountRecordId,tenantRecordId,reportGroup);
  Assert.assertEquals(businessCreditItem.getAmount().compareTo(new BigDecimal("10")),0);
  Assert.assertEquals(businessCreditItem.getItemType(),InvoiceItemType.CBA_ADJ.toString());
  Assert.assertEquals(businessCreditItem.getItemSource(),ItemSource.user.toString());
  final BusinessInvoiceItemBaseModelDao businessInvoiceAdjustmentItem=invoiceFactory.createBusinessInvoiceItem(account,invoice,createInvoiceItem(invoiceId,InvoiceItemType.CREDIT_ADJ,new BigDecimal("-10")),ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.RECURRING,new BigDecimal("10"))),null,null,null,invoiceItemRecordId,auditLog,accountRecordId,tenantRecordId,reportGroup);
  Assert.assertEquals(businessInvoiceAdjustmentItem.getAmount().compareTo(new BigDecimal("-10")),0);
  Assert.assertEquals(businessInvoiceAdjustmentItem.getItemType(),InvoiceItemType.CREDIT_ADJ.toString());
  Assert.assertEquals(businessInvoiceAdjustmentItem.getItemSource(),ItemSource.user.toString());
  final BusinessInvoiceItemBaseModelDao businessRefundInvoiceAdjustmentItem=invoiceFactory.createBusinessInvoiceItem(account,invoice,createInvoiceItem(invoiceId,InvoiceItemType.REFUND_ADJ,new BigDecimal("-10")),ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.RECURRING,new BigDecimal("10"))),null,null,null,invoiceItemRecordId,auditLog,accountRecordId,tenantRecordId,reportGroup);
  Assert.assertEquals(businessRefundInvoiceAdjustmentItem.getAmount().compareTo(new BigDecimal("-10")),0);
  Assert.assertEquals(businessRefundInvoiceAdjustmentItem.getItemType(),InvoiceItemType.REFUND_ADJ.toString());
  Assert.assertEquals(businessRefundInvoiceAdjustmentItem.getItemSource(),ItemSource.user.toString());
  final BusinessInvoiceItemBaseModelDao businessInvoiceItemAdjustmentItem=invoiceFactory.createBusinessInvoiceItem(account,invoice,createInvoiceItem(invoiceId,InvoiceItemType.ITEM_ADJ,new BigDecimal("-10")),ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.RECURRING,new BigDecimal("10"))),null,null,null,invoiceItemRecordId,auditLog,accountRecordId,tenantRecordId,reportGroup);
  Assert.assertEquals(businessInvoiceItemAdjustmentItem.getAmount().compareTo(new BigDecimal("-10")),0);
  Assert.assertEquals(businessInvoiceItemAdjustmentItem.getItemType(),InvoiceItemType.ITEM_ADJ.toString());
  Assert.assertEquals(businessInvoiceItemAdjustmentItem.getItemSource(),ItemSource.user.toString());
  final BusinessInvoiceItemBaseModelDao businessCBAItem=invoiceFactory.createBusinessInvoiceItem(account,invoice,createInvoiceItem(invoiceId,InvoiceItemType.CBA_ADJ,new BigDecimal("10")),ImmutableList.<InvoiceItem>of(createInvoiceItem(invoiceId,InvoiceItemType.RECURRING,new BigDecimal("30")),createInvoiceItem(invoiceId,InvoiceItemType.REPAIR_ADJ,new BigDecimal("-30")),createInvoiceItem(invoiceId,InvoiceItemType.RECURRING,new BigDecimal("20"))),null,null,null,invoiceItemRecordId,auditLog,accountRecordId,tenantRecordId,reportGroup);
  Assert.assertEquals(businessCBAItem.getAmount().compareTo(new BigDecimal("10")),0);
  Assert.assertEquals(businessCBAItem.getItemType(),InvoiceItemType.CBA_ADJ.toString());
  Assert.assertEquals(businessCBAItem.getItemSource(),BusinessInvoiceItemBaseModelDao.DEFAULT_ITEM_SOURCE);
}
