{
  final UUID subscriptionId1=UUID.randomUUID();
  final LocalDate startDate1=new LocalDate(2013,4,1);
  final LocalDate endDate1=new LocalDate(2013,4,30);
  final BigDecimal amount1=new BigDecimal("30");
  final UUID invoiceId1=UUID.randomUUID();
  final InvoiceItem recurring1=createInvoiceItem(invoiceId1,InvoiceItemType.RECURRING,subscriptionId1,startDate1,endDate1,amount1,null);
  final InvoiceItem repair1=createInvoiceItem(invoiceId1,InvoiceItemType.REPAIR_ADJ,subscriptionId1,startDate1,endDate1,amount1.negate(),recurring1.getId());
  final InvoiceItem cba1=createInvoiceItem(invoiceId1,InvoiceItemType.CBA_ADJ,amount1);
  final UUID invoiceId2=UUID.randomUUID();
  final LocalDate repareeEndDate1=new LocalDate(2013,4,10);
  final BigDecimal repareeAmount1=new BigDecimal("10");
  final InvoiceItem reparee1=createInvoiceItem(invoiceId2,InvoiceItemType.RECURRING,subscriptionId1,startDate1,repareeEndDate1,repareeAmount1,null);
  final InvoiceItem cba2=createInvoiceItem(invoiceId2,InvoiceItemType.CBA_ADJ,repareeAmount1.negate());
  final InvoiceItem charge=createInvoiceItem(invoiceId2,InvoiceItemType.EXTERNAL_CHARGE,new BigDecimal("9"));
  final InvoiceItem cba3=createInvoiceItem(invoiceId2,InvoiceItemType.CBA_ADJ,new BigDecimal("-9"));
  final Multimap<UUID,InvoiceItem> allInvoiceItems=ArrayListMultimap.<UUID,InvoiceItem>create();
  allInvoiceItems.put(invoiceId1,recurring1);
  allInvoiceItems.put(invoiceId1,repair1);
  allInvoiceItems.put(invoiceId1,cba1);
  allInvoiceItems.put(invoiceId2,reparee1);
  allInvoiceItems.put(invoiceId2,cba2);
  allInvoiceItems.put(invoiceId2,charge);
  allInvoiceItems.put(invoiceId2,cba3);
  final Collection<AdjustedCBAInvoiceItem> adjustedCBAInvoiceItems=invoiceFactory.buildMergedCBAItems(allInvoiceItems,ImmutableMap.<InvoiceItem,InvoiceItem>of(reparee1,repair1));
  Assert.assertEquals(adjustedCBAInvoiceItems.size(),2);
  for (  final AdjustedCBAInvoiceItem item : adjustedCBAInvoiceItems) {
    Assert.assertEquals(item.getAmount(),item.getInvoiceId().equals(invoiceId1) ? new BigDecimal("20") : new BigDecimal("-9"));
  }
}
