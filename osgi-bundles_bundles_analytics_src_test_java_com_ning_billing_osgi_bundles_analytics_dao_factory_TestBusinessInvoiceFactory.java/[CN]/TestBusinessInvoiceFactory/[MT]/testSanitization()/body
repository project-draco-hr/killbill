{
  final UUID subscriptionId1=UUID.randomUUID();
  final LocalDate startDate1=new LocalDate(2013,4,1);
  final LocalDate endDate1=new LocalDate(2013,4,30);
  final BigDecimal amount1=new BigDecimal("30");
  final UUID originalInvoice1=UUID.randomUUID();
  final UUID reparationInvoice1=UUID.randomUUID();
  final InvoiceItem recurring1=createInvoiceItem(originalInvoice1,InvoiceItemType.RECURRING,subscriptionId1,startDate1,endDate1,amount1,null);
  final InvoiceItem repair1=createInvoiceItem(originalInvoice1,InvoiceItemType.REPAIR_ADJ,subscriptionId1,startDate1,endDate1,amount1.negate(),recurring1.getId());
  final LocalDate reparationEndDate1=new LocalDate(2013,4,10);
  final BigDecimal reparationAmount1=new BigDecimal("10");
  final InvoiceItem reparation1=createInvoiceItem(reparationInvoice1,InvoiceItemType.RECURRING,subscriptionId1,startDate1,reparationEndDate1,reparationAmount1,null);
  final UUID subscriptionId2=UUID.randomUUID();
  final LocalDate startDate2=new LocalDate(2013,4,10);
  final LocalDate endDate2=new LocalDate(2013,4,30);
  final BigDecimal amount2=new BigDecimal("20");
  final UUID originalInvoice2=UUID.randomUUID();
  final UUID reparationInvoice2=UUID.randomUUID();
  final InvoiceItem recurring2=createInvoiceItem(originalInvoice2,InvoiceItemType.RECURRING,subscriptionId2,startDate2,endDate2,amount2,null);
  final InvoiceItem repair2=createInvoiceItem(originalInvoice2,InvoiceItemType.REPAIR_ADJ,subscriptionId2,startDate2,endDate2,amount2.negate(),recurring2.getId());
  final LocalDate reparationEndDate2=new LocalDate(2013,4,15);
  final BigDecimal reparationAmount2=new BigDecimal("5");
  final InvoiceItem reparation2=createInvoiceItem(reparationInvoice2,InvoiceItemType.RECURRING,subscriptionId2,startDate2,reparationEndDate2,reparationAmount2,null);
  final UUID externalChargeSubscriptionId=UUID.randomUUID();
  final LocalDate externalStartDate=new LocalDate(2012,1,1);
  final BigDecimal externalChargeAmount=BigDecimal.TEN;
  final UUID otherInvoice3=UUID.randomUUID();
  final InvoiceItem externalCharge=createInvoiceItem(otherInvoice3,InvoiceItemType.EXTERNAL_CHARGE,externalChargeSubscriptionId,externalStartDate,null,externalChargeAmount,null);
  final ArrayListMultimap<UUID,InvoiceItem> allInvoiceItems=ArrayListMultimap.<UUID,InvoiceItem>create();
  allInvoiceItems.putAll(originalInvoice1,ImmutableList.<InvoiceItem>of(recurring1,repair1,reparation1));
  allInvoiceItems.putAll(originalInvoice2,ImmutableList.<InvoiceItem>of(recurring2,repair2,reparation2));
  allInvoiceItems.put(otherInvoice3,externalCharge);
  final Collection<InvoiceItem> sanitizedInvoiceItems=invoiceFactory.sanitizeInvoiceItems(allInvoiceItems);
  Assert.assertEquals(sanitizedInvoiceItems.size(),2 + 2 + 1);
  for (  final InvoiceItem invoiceItem : sanitizedInvoiceItems) {
    if (invoiceItem.getId().equals(recurring1.getId())) {
      Assert.assertEquals(invoiceItem,recurring1);
    }
 else     if (invoiceItem.getId().equals(repair1.getId())) {
      if (InvoiceItemType.ITEM_ADJ.equals(invoiceItem.getInvoiceItemType()) && invoiceItem.getLinkedItemId().equals(recurring1.getId())) {
        Assert.assertEquals(invoiceItem.getAmount(),new BigDecimal("20").negate());
      }
 else {
        Assert.fail("Repair item 1 shouldn't be in the sanitized elements");
      }
    }
 else     if (invoiceItem.getId().equals(reparation1.getId())) {
      Assert.fail("Reparation item 1 shouldn't be in the sanitized elements");
    }
 else     if (invoiceItem.getId().equals(recurring2.getId())) {
      Assert.assertEquals(invoiceItem,recurring2);
    }
 else     if (invoiceItem.getId().equals(repair2.getId())) {
      if (InvoiceItemType.ITEM_ADJ.equals(invoiceItem.getInvoiceItemType()) && invoiceItem.getLinkedItemId().equals(recurring2.getId())) {
        Assert.assertEquals(invoiceItem.getAmount(),new BigDecimal("15").negate());
      }
 else {
        Assert.fail("Repair item 2 shouldn't be in the sanitized elements");
      }
    }
 else     if (invoiceItem.getId().equals(reparation2.getId())) {
      Assert.fail("Reparation item 2 shouldn't be in the sanitized elements");
    }
 else     if (invoiceItem.getId().equals(externalCharge.getId())) {
      Assert.assertEquals(invoiceItem,externalCharge);
    }
 else {
      Assert.fail("Shouldn't be in the sanitized elements: " + invoiceItem);
    }
  }
}
