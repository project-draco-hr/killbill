{
  final T bean;
  try {
    bean=type.newInstance();
  }
 catch (  final Exception e) {
    throw new IllegalArgumentException(String.format("A bean, %s, was mapped " + "which was not instantiable",type.getName()),e);
  }
  final Class beanClass=bean.getClass();
  final ResultSetMetaData metadata=rs.getMetaData();
  for (int i=1; i <= metadata.getColumnCount(); ++i) {
    final String name=metadata.getColumnLabel(i).toLowerCase();
    final PropertyDescriptor descriptor=properties.get(name);
    if (descriptor != null) {
      final Class<?> type=descriptor.getPropertyType();
      Object value;
      if (type.isAssignableFrom(Boolean.class) || type.isAssignableFrom(boolean.class)) {
        value=rs.getBoolean(i);
      }
 else       if (type.isAssignableFrom(Byte.class) || type.isAssignableFrom(byte.class)) {
        value=rs.getByte(i);
      }
 else       if (type.isAssignableFrom(Short.class) || type.isAssignableFrom(short.class)) {
        value=rs.getShort(i);
      }
 else       if (type.isAssignableFrom(Integer.class) || type.isAssignableFrom(int.class)) {
        value=rs.getInt(i);
      }
 else       if (type.isAssignableFrom(Long.class) || type.isAssignableFrom(long.class)) {
        value=rs.getLong(i);
      }
 else       if (type.isAssignableFrom(Float.class) || type.isAssignableFrom(float.class)) {
        value=rs.getFloat(i);
      }
 else       if (type.isAssignableFrom(Double.class) || type.isAssignableFrom(double.class)) {
        value=rs.getDouble(i);
      }
 else       if (type.isAssignableFrom(BigDecimal.class)) {
        value=rs.getBigDecimal(i);
      }
 else       if (type.isAssignableFrom(DateTime.class)) {
        final Timestamp timestamp=rs.getTimestamp(i);
        value=timestamp == null ? null : new DateTime(timestamp).toDateTime(DateTimeZone.UTC);
      }
 else       if (type.isAssignableFrom(Time.class)) {
        value=rs.getTime(i);
      }
 else       if (type.isAssignableFrom(LocalDate.class)) {
        final Date date=rs.getDate(i);
        value=date == null ? null : new LocalDate(date,DateTimeZone.UTC);
      }
 else       if (type.isAssignableFrom(DateTimeZone.class)) {
        final String dateTimeZoneString=rs.getString(i);
        value=dateTimeZoneString == null ? null : DateTimeZone.forID(dateTimeZoneString);
      }
 else       if (type.isAssignableFrom(String.class)) {
        value=rs.getString(i);
      }
 else       if (type.isAssignableFrom(UUID.class)) {
        final String uuidString=rs.getString(i);
        value=uuidString == null ? null : UUID.fromString(uuidString);
      }
 else       if (type.isEnum()) {
        final String enumString=rs.getString(i);
        value=enumString == null ? null : Enum.valueOf((Class<Enum>)type,enumString);
      }
 else {
        value=rs.getObject(i);
      }
      if (value instanceof Blob) {
        final Blob blob=(Blob)value;
        value=blob.getBytes(0,(int)blob.length());
      }
      if (rs.wasNull() && !type.isPrimitive()) {
        value=null;
      }
      try {
        final Method writeMethod=descriptor.getWriteMethod();
        if (writeMethod != null) {
          writeMethod.invoke(bean,value);
        }
 else {
          final String camelCasedName=CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,name);
          final Field field=getField(beanClass,camelCasedName);
          field.setAccessible(true);
          field.set(bean,value);
        }
      }
 catch (      final NoSuchFieldException e) {
        throw new IllegalArgumentException(String.format("Unable to find field for " + "property, %s",name),e);
      }
catch (      final IllegalAccessException e) {
        throw new IllegalArgumentException(String.format("Unable to access setter for " + "property, %s",name),e);
      }
catch (      final InvocationTargetException e) {
        throw new IllegalArgumentException(String.format("Invocation target exception trying to " + "invoker setter for the %s property",name),e);
      }
catch (      final NullPointerException e) {
        throw new IllegalArgumentException(String.format("No appropriate method to " + "write value %s ",value.toString()),e);
      }
    }
  }
  return bean;
}
