{
switch (sample.getOpcode()) {
case INT:
    final int intValue=(Integer)sample.getSampleValue();
  if (intValue == 0) {
    return INT_ZERO_SAMPLE;
  }
 else   if (intValue >= Byte.MIN_VALUE && intValue <= Byte.MAX_VALUE) {
    return new ScalarSample(SampleOpcode.BYTE,(byte)intValue);
  }
 else   if (intValue >= Short.MIN_VALUE && intValue <= Short.MAX_VALUE) {
    return new ScalarSample(SampleOpcode.SHORT,(short)intValue);
  }
 else {
    return sample;
  }
case LONG:
final long longValue=(Long)sample.getSampleValue();
if (longValue == 0) {
return INT_ZERO_SAMPLE;
}
 else if (longValue >= Byte.MIN_VALUE && longValue <= Byte.MAX_VALUE) {
return new ScalarSample(SampleOpcode.BYTE,(byte)longValue);
}
 else if (longValue >= Short.MIN_VALUE && longValue <= Short.MAX_VALUE) {
return new ScalarSample(SampleOpcode.SHORT,(short)longValue);
}
 else if (longValue >= Integer.MIN_VALUE && longValue <= Integer.MAX_VALUE) {
return new ScalarSample(SampleOpcode.INT,(int)longValue);
}
 else {
return sample;
}
case BIGINT:
final BigInteger bigValue=(BigInteger)sample.getSampleValue();
if (bigValue.compareTo(BIGINTEGER_ZERO_VALUE) == 0) {
return INT_ZERO_SAMPLE;
}
final int digits=1 + bigValue.bitCount();
if (digits <= 8) {
return new ScalarSample(SampleOpcode.BYTE,(byte)bigValue.intValue());
}
 else if (digits <= 16) {
return new ScalarSample(SampleOpcode.SHORT,(short)bigValue.intValue());
}
 else if (digits <= 32) {
return new ScalarSample(SampleOpcode.INT,bigValue.intValue());
}
 else if (digits <= 64) {
return new ScalarSample(SampleOpcode.LONG,bigValue.longValue());
}
 else {
return sample;
}
case FLOAT:
return encodeFloatOrDoubleSample(sample,(double)((Float)sample.getSampleValue()));
case DOUBLE:
return encodeFloatOrDoubleSample(sample,(Double)sample.getSampleValue());
default :
return sample;
}
}
