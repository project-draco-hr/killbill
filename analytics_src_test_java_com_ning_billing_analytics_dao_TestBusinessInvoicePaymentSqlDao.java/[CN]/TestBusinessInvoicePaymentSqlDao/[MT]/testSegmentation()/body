{
  final String accountKey1=UUID.randomUUID().toString();
  final BusinessInvoicePaymentModelDao invoicePayment1=createInvoicePayment(accountKey1);
  final String accountKey2=UUID.randomUUID().toString();
  final BusinessInvoicePaymentModelDao invoicePayment2=createInvoicePayment(accountKey2);
  Assert.assertEquals(invoicePaymentSqlDao.createInvoicePayment(invoicePayment1,internalCallContext),1);
  Assert.assertEquals(invoicePaymentSqlDao.createInvoicePayment(invoicePayment2,internalCallContext),1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePayment(invoicePayment1.getPaymentId().toString(),internalCallContext),invoicePayment1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePayment(invoicePayment2.getPaymentId().toString(),internalCallContext),invoicePayment2);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment1.getAccountKey(),internalCallContext).size(),1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment2.getAccountKey(),internalCallContext).size(),1);
  Assert.assertEquals(invoicePaymentSqlDao.deleteInvoicePayment(invoicePayment1.getPaymentId().toString(),internalCallContext),1);
  Assert.assertNull(invoicePaymentSqlDao.getInvoicePayment(invoicePayment1.getPaymentId().toString(),internalCallContext));
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePayment(invoicePayment2.getPaymentId().toString(),internalCallContext),invoicePayment2);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment1.getAccountKey(),internalCallContext).size(),0);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment2.getAccountKey(),internalCallContext).size(),1);
}
