{
  final String extFirstPaymentRefId1=UUID.randomUUID().toString();
  final String extSecondPaymentRefId1=UUID.randomUUID().toString();
  final String accountKey1=UUID.randomUUID().toString();
  final BusinessInvoicePayment invoicePayment1=createInvoicePayment(extFirstPaymentRefId1,extSecondPaymentRefId1,accountKey1);
  final String extFirstPaymentRefId2=UUID.randomUUID().toString();
  final String extSecondPaymentRefId2=UUID.randomUUID().toString();
  final String accountKey2=UUID.randomUUID().toString();
  final BusinessInvoicePayment invoicePayment2=createInvoicePayment(extFirstPaymentRefId2,extSecondPaymentRefId2,accountKey2);
  Assert.assertEquals(invoicePaymentSqlDao.createInvoicePayment(invoicePayment1),1);
  Assert.assertEquals(invoicePaymentSqlDao.createInvoicePayment(invoicePayment2),1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePayment(invoicePayment1.getPaymentId().toString()),invoicePayment1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePayment(invoicePayment2.getPaymentId().toString()),invoicePayment2);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment1.getAccountKey()).size(),1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment2.getAccountKey()).size(),1);
  Assert.assertEquals(invoicePaymentSqlDao.deleteInvoicePayment(invoicePayment1.getPaymentId().toString()),1);
  Assert.assertNull(invoicePaymentSqlDao.getInvoicePayment(invoicePayment1.getPaymentId().toString()));
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePayment(invoicePayment2.getPaymentId().toString()),invoicePayment2);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment1.getAccountKey()).size(),0);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment2.getAccountKey()).size(),1);
}
