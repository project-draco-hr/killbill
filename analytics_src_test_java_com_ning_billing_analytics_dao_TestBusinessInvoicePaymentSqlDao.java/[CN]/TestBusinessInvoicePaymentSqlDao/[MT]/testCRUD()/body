{
  final String extFirstPaymentRefId=UUID.randomUUID().toString();
  final String extSecondPaymentRefId=UUID.randomUUID().toString();
  final String accountKey=UUID.randomUUID().toString();
  final BusinessInvoicePayment invoicePayment=createInvoicePayment(extFirstPaymentRefId,extSecondPaymentRefId,accountKey);
  Assert.assertNull(invoicePaymentSqlDao.getInvoicePayment(invoicePayment.getPaymentId().toString()));
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment.getAccountKey()).size(),0);
  Assert.assertEquals(invoicePaymentSqlDao.createInvoicePayment(invoicePayment),1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePayment(invoicePayment.getPaymentId().toString()),invoicePayment);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment.getAccountKey()).size(),1);
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment.getAccountKey()).get(0),invoicePayment);
  Assert.assertEquals(invoicePaymentSqlDao.deleteInvoicePayment(invoicePayment.getPaymentId().toString()),1);
  Assert.assertNull(invoicePaymentSqlDao.getInvoicePayment(invoicePayment.getPaymentId().toString()));
  Assert.assertEquals(invoicePaymentSqlDao.getInvoicePaymentsForAccountByKey(invoicePayment.getAccountKey()).size(),0);
}
