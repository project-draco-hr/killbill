{
  final Builder<UUID,BigDecimal> invoiceItemIdsWithAmountsBuilder=new Builder<UUID,BigDecimal>();
  if (invoiceItemIdsWithNullAmounts.size() == 0) {
    return invoiceItemIdsWithAmountsBuilder.build();
  }
  final InvoiceModelDao invoice=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class).getById(invoiceId,context);
  if (invoice != null) {
    populateChildren(invoice,entitySqlDaoWrapperFactory,context);
  }
 else {
    throw new IllegalStateException("Invoice shouldn't be null for id " + invoiceId);
  }
  for (  final UUID invoiceItemId : invoiceItemIdsWithNullAmounts.keySet()) {
    final BigDecimal originalItemAmount=getInvoiceItemAmountForId(invoice,invoiceItemId);
    final BigDecimal maxAdjAmount=computeItemAdjustmentAmount(invoiceItemId,originalItemAmount,invoice.getInvoiceItems());
    final BigDecimal proposedItemAmount=invoiceItemIdsWithNullAmounts.get(invoiceItemId);
    if (proposedItemAmount != null && proposedItemAmount.compareTo(maxAdjAmount) > 0) {
      throw new InvoiceApiException(ErrorCode.INVOICE_ITEM_ADJUSTMENT_AMOUNT_INVALID,proposedItemAmount,maxAdjAmount);
    }
    final BigDecimal itemAmountToAdjust=Objects.firstNonNull(proposedItemAmount,maxAdjAmount);
    if (itemAmountToAdjust.compareTo(BigDecimal.ZERO) > 0) {
      invoiceItemIdsWithAmountsBuilder.put(invoiceItemId,itemAmountToAdjust);
    }
  }
  return invoiceItemIdsWithAmountsBuilder.build();
}
