{
  final BigDecimal originalItemAmount=targetInvoiceItem.getAmount();
  final BigDecimal maxAdjLeftAmount=computeItemAdjustmentAmount(originalItemAmount,adjustedOrRepairedItems);
  final BigDecimal proposedItemAmount=inputAdjInvoiceItem.get(targetInvoiceItem.getId());
  if (proposedItemAmount != null && proposedItemAmount.compareTo(maxAdjLeftAmount) > 0) {
    throw new InvoiceApiException(ErrorCode.INVOICE_ITEM_ADJUSTMENT_AMOUNT_INVALID,proposedItemAmount,maxAdjLeftAmount);
  }
  final BigDecimal itemAmountToAdjust=Objects.firstNonNull(proposedItemAmount,maxAdjLeftAmount);
  if (itemAmountToAdjust.compareTo(BigDecimal.ZERO) > 0) {
    outputAdjInvoiceItem.put(targetInvoiceItem.getId(),itemAmountToAdjust);
  }
}
