{
  final Map<UUID,BigDecimal> outputItemIdsWithAmounts=new HashMap<UUID,BigDecimal>();
  if (invoiceItemIdsWithNullAmounts.size() == 0) {
    return outputItemIdsWithAmounts;
  }
  final InvoiceModelDao invoice=entitySqlDaoWrapperFactory.become(InvoiceSqlDao.class).getById(invoiceId,context);
  if (invoice != null) {
    populateChildren(invoice,entitySqlDaoWrapperFactory,context);
  }
 else {
    throw new IllegalStateException("Invoice shouldn't be null for id " + invoiceId);
  }
  for (  final UUID invoiceItemId : invoiceItemIdsWithNullAmounts.keySet()) {
    final List<InvoiceItemModelDao> adjustedOrRepairedItems=entitySqlDaoWrapperFactory.become(InvoiceItemSqlDao.class).getAdjustedOrRepairedInvoiceItemsByLinkedId(invoiceItemId.toString(),context);
    computeItemAdjustmentsForTargetInvoiceItem(getInvoiceItemForId(invoice,invoiceItemId),adjustedOrRepairedItems,invoiceItemIdsWithNullAmounts,outputItemIdsWithAmounts);
  }
  return outputItemIdsWithAmounts;
}
