{
  String invoiceCurrencyCode=invoice.getCurrency().toString();
  CurrencyUnit currencyUnit=CurrencyUnit.of(invoiceCurrencyCode);
  final DecimalFormat numberFormatter=(DecimalFormat)DecimalFormat.getCurrencyInstance(locale);
  DecimalFormatSymbols dfs=numberFormatter.getDecimalFormatSymbols();
  dfs.setInternationalCurrencySymbol(currencyUnit.getCurrencyCode());
  try {
    final java.util.Currency currency=java.util.Currency.getInstance(invoiceCurrencyCode);
    dfs.setCurrencySymbol(currency.getSymbol(currencyLocaleMap.get(currency)));
  }
 catch (  Exception e) {
    dfs.setCurrencySymbol(currencyUnit.getSymbol(locale));
  }
  numberFormatter.setDecimalFormatSymbols(dfs);
  numberFormatter.setMinimumFractionDigits(currencyUnit.getDefaultFractionDigits());
  numberFormatter.setMaximumFractionDigits(currencyUnit.getDefaultFractionDigits());
  return numberFormatter.format(amount.doubleValue());
}
