{
  final PlanPhasePriceOverride[] resolvedOverride=new PlanPhasePriceOverride[parentPlan.getAllPhases().length];
  int index=0;
  for (  final PlanPhase curPhase : parentPlan.getAllPhases()) {
    final PlanPhasePriceOverride curOverride=Iterables.tryFind(overrides,new Predicate<PlanPhasePriceOverride>(){
      @Override public boolean apply(      final PlanPhasePriceOverride input){
        if (input.getPhaseName() != null && input.getPhaseName().equals(curPhase.getName())) {
          return true;
        }
        final PlanPhaseSpecifier curPlanPhaseSpecifier=input.getPlanPhaseSpecifier();
        if (curPlanPhaseSpecifier.getPhaseType().equals(curPhase.getPhaseType())) {
          return true;
        }
        return false;
      }
    }
).orNull();
    resolvedOverride[index++]=curOverride != null ? new DefaultPlanPhasePriceOverride(curPhase.getName(),curOverride.getCurrency(),curOverride.getFixedPrice(),curOverride.getRecurringPrice()) : null;
  }
  final CatalogOverridePlanDefinitionModelDao overriddenPlan=overrideDao.getOrCreateOverridePlanDefinition(parentPlan.getName(),catalogEffectiveDate,resolvedOverride,context);
  final String planName=new StringBuffer(parentPlan.getName()).append("-").append(overriddenPlan.getRecordId()).toString();
  final DefaultPlan result=new DefaultPlan(planName,(DefaultPlan)parentPlan,resolvedOverride);
  return result;
}
