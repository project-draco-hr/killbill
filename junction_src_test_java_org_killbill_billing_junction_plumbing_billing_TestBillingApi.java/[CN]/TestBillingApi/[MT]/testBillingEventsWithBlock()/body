{
  final Plan nextPlan=catalog.findPlan("PickupTrialEvergreen10USD",clock.getUTCNow());
  final PlanPhase nextPhase=nextPlan.getAllPhases()[1];
  final DateTime now=createSubscriptionCreationEvent(nextPlan,nextPhase);
  final Account account=createAccount(32);
  final BlockingState blockingState1=new DefaultBlockingState(bunId,BlockingStateType.SUBSCRIPTION_BUNDLE,DISABLED_BUNDLE,"test",true,true,true,now.plusDays(1));
  final BlockingState blockingState2=new DefaultBlockingState(bunId,BlockingStateType.SUBSCRIPTION_BUNDLE,CLEAR_BUNDLE,"test",false,false,false,now.plusDays(2));
  blockingStateDao.setBlockingStatesAndPostBlockingTransitionEvent(ImmutableMap.<BlockingState,Optional<UUID>>of(blockingState1,Optional.<UUID>absent(),blockingState2,Optional.<UUID>absent()),internalCallContext);
  final SortedSet<BillingEvent> events=billingInternalApi.getBillingEventsForAccountAndUpdateAccountBCD(account.getId(),null,internalCallContext);
  Assert.assertEquals(events.size(),3);
  final Iterator<BillingEvent> it=events.iterator();
  checkEvent(it.next(),nextPlan,account.getBillCycleDayLocal(),subId,now,nextPhase,SubscriptionBaseTransitionType.CREATE.toString(),nextPhase.getFixed().getPrice(),nextPhase.getRecurring().getRecurringPrice());
  checkEvent(it.next(),nextPlan,account.getBillCycleDayLocal(),subId,now.plusDays(1),nextPhase,SubscriptionBaseTransitionType.START_BILLING_DISABLED.toString(),null,null);
  checkEvent(it.next(),nextPlan,account.getBillCycleDayLocal(),subId,now.plusDays(2),nextPhase,SubscriptionBaseTransitionType.END_BILLING_DISABLED.toString(),nextPhase.getFixed().getPrice(),nextPhase.getRecurring().getRecurringPrice());
}
