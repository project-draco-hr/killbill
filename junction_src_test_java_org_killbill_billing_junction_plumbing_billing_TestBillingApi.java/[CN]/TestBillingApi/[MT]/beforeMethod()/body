{
  super.beforeMethod();
  final SubscriptionBaseBundle bundle=Mockito.mock(SubscriptionBaseBundle.class);
  Mockito.when(bundle.getId()).thenReturn(bunId);
  final List<SubscriptionBaseBundle> bundles=ImmutableList.<SubscriptionBaseBundle>of(bundle);
  effectiveSubscriptionTransitions=new LinkedList<EffectiveSubscriptionInternalEvent>();
  final DateTime subscriptionStartDate=clock.getUTCNow().minusDays(3);
  subscription=new MockSubscription(subId,bunId,null,subscriptionStartDate,effectiveSubscriptionTransitions);
  final List<SubscriptionBase> subscriptions=ImmutableList.<SubscriptionBase>of(subscription);
  Mockito.when(subscriptionInternalApi.getBundlesForAccount(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(bundles);
  Mockito.when(subscriptionInternalApi.getSubscriptionsForBundle(Mockito.<UUID>any(),Mockito.<DryRunArguments>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscriptions);
  Mockito.when(subscriptionInternalApi.getSubscriptionFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  Mockito.when(subscriptionInternalApi.getBundleFromId(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(bundle);
  Mockito.when(subscriptionInternalApi.getBaseSubscription(Mockito.<UUID>any(),Mockito.<InternalTenantContext>any())).thenReturn(subscription);
  Mockito.when(subscriptionInternalApi.getBillingTransitions(Mockito.<SubscriptionBase>any(),Mockito.<InternalTenantContext>any())).thenReturn(effectiveSubscriptionTransitions);
  Mockito.when(subscriptionInternalApi.getAllTransitions(Mockito.<SubscriptionBase>any(),Mockito.<InternalTenantContext>any())).thenReturn(effectiveSubscriptionTransitions);
  catalog=((MockCatalog)catalogService.getCurrentCatalog(internalCallContext));
  Mockito.when(catalogService.getFullCatalog(internalCallContext)).thenReturn(catalog);
  catalog.setBillingAlignment(BillingAlignment.ACCOUNT);
  ((MockBlockingStateDao)blockingStateDao).clear();
  ((MockTagDao)tagDao).clear();
}
