{
  try {
    return paymentPluginDispatcher.dispatchWithAccountLock(new CallableWithAccountLock<DirectPayment>(locker,account.getExternalKey(),new WithAccountLockCallback<DirectPayment>(){
      @Override public DirectPayment doOperation() throws PaymentApiException {
        final DateTime utcNow=clock.getUTCNow();
        final DirectPaymentModelDao pmd=new DirectPaymentModelDao(utcNow,utcNow,account.getId(),account.getPaymentMethodId(),externalKey);
        final DirectPaymentTransactionModelDao ptmd=new DirectPaymentTransactionModelDao(utcNow,utcNow,pmd.getId(),transactionType,utcNow,PaymentStatus.UNKNOWN,amount,account.getCurrency(),null,null);
        final DirectPaymentModelDao inserted=paymentDao.insertDirectPaymentWithFirstTransaction(pmd,ptmd,callContext);
        final DirectPaymentTransactionModelDao insertedTransaction=paymentDao.getDirectTransactionsForAccount(account.getId(),callContext).get(0);
        return getDirectPayment(pluginWrapper,account,amount,inserted.getId(),insertedTransaction.getId(),properties,callContext);
      }
    }
));
  }
 catch (  final TimeoutException e) {
    throw new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_TIMEOUT,account.getId(),null);
  }
catch (  final RuntimeException e) {
    throw new PaymentApiException(ErrorCode.PAYMENT_INTERNAL_ERROR,null);
  }
}
