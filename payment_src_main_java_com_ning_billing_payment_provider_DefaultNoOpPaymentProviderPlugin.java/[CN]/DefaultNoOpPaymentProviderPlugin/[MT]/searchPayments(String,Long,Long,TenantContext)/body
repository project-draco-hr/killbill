{
  final ImmutableList<PaymentInfoPlugin> allResults=ImmutableList.<PaymentInfoPlugin>copyOf(Iterables.<PaymentInfoPlugin>filter(Iterables.<PaymentInfoPlugin>concat(payments.values()),new Predicate<PaymentInfoPlugin>(){
    @Override public boolean apply(    final PaymentInfoPlugin input){
      return (input.getKbPaymentId() != null && input.getKbPaymentId().toString().equals(searchKey)) || (input.getFirstPaymentReferenceId() != null && input.getFirstPaymentReferenceId().contains(searchKey)) || (input.getSecondPaymentReferenceId() != null && input.getSecondPaymentReferenceId().contains(searchKey));
    }
  }
));
  final List<PaymentInfoPlugin> results;
  if (offset >= allResults.size()) {
    results=ImmutableList.<PaymentInfoPlugin>of();
  }
 else   if (offset + limit > allResults.size()) {
    results=allResults.subList(offset.intValue(),allResults.size());
  }
 else {
    results=allResults.subList(offset.intValue(),offset.intValue() + limit.intValue());
  }
  return new DefaultPagination<PaymentInfoPlugin>(offset,limit,(long)results.size(),(long)payments.values().size(),results.iterator());
}
